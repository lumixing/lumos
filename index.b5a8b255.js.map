{"mappings":"I6Kw8EI,EDhsEA,EAypQI,ESlgQA,EnL9YA,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I2K8nB8B,EA0yDK,ED/sCH,EA65BA,EAitEA,EMhoI7B,ENwsQmB,ESlgQK,EHvM/B,EDjNA,E,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,C,E,O,c,C,E,a,C,M,C,E,a,C,C,G,E,E,U,I,G,E,E,gB,I,G,E,E,W,I,G,E,E,S,I,G,E,E,c,I,G,E,E,Y,I,G,E,E,Y,I,G,E,E,W,I,G,E,E,W,I,G,E,E,S,I,G,E,E,W,I,G,E,E,U,I,G,E,E,W,I,G,E,E,gB,I,I,E,E,a,I,I,E,E,U,I,I,E,E,a,I,I,E,E,c,I,I,E,E,W,I,I,E,E,Q,I,I,E,E,e,I,I,E,E,U,I,I,E,E,U,I,I,E,E,U,I,I,E,E,Q,I,I,E,E,Y,I,I,E,E,Q,I,I,E,E,Y,I,I,E,E,O,I,I,E,E,U,I,I,E,E,S,I,I,E,E,Q,I,I,E,E,S,I,I,E,E,Y,I,I,E,E,U,I,I,E,E,S,I,I,E,E,Y,I,I,E,E,S,I,I,E,E,W,I,I,E,E,S,I,I,E,E,Q,I,I,E,E,M,I,I,E,E,M,I,I,E,E,M,I,I,E,E,Y,I,I,E,E,W,I,I,E,E,W,I,I,E,E,O,I,I,E,E,S,I,I,E,E,W,I,I,E,E,a,I,I,E,E,U,I,I,E,E,U,I,I,E,E,Q,I,I,E,E,S,I,I,E,E,M,I,I,E,E,S,I,I,E,E,W,I,I,E,E,mB,I,I,E,E,W,I,I,E,E,S,I,I,E,E,W,I,I,E,E,Q,I,I,E,E,W,I,I,E,E,U,I,I,E,E,O,I,I,E,E,U,I,I,E,E,U,I,I,E,E,Q,I,I,E,E,Q,I,I,E,E,W,I,I,E,E,W,I,I,E,E,O,I,I,E,E,S,I,I,E,E,U,I,I,E,E,Q,I,I,E,E,S,I,I,E,E,O,I,I,E,E,U,I,I,E,E,Y,I,I,E,E,gB,I,I,E,E,c,I,I,E,E,U,I,I,E,E,c,I,I,E,E,O,I,I,E,E,S,I,I,E,E,Y,I,I,E,E,O,I,I,E,E,U,I,I,E,E,M,I,I,E,E,U,I,I,E,E,S,I,I,E,E,Q,I,I,E,E,S,I,I,E,E,c,I,I,E,E,Q,I,I,E,E,S,I,I,E,E,S,I,I,E,E,S,I,I,E,E,Q,I,I,E,E,M,I,I,E,E,O,I,I,E,E,M,I,I,E,E,W,I,I,E,E,W,I,I,E,E,U,I,I,E,E,S,I,I,E,E,Q,I,I,E,E,Q,I,I,E,E,M,I,I,E,E,M,I,I,E,E,U,I,I,E,E,S,I,I,E,E,S,I,I,E,E,U,I,I,E,E,U,I,I,E,E,U,I,I,E,E,Y,I,I,E,E,U,I,I,E,E,O,I,I,E,E,O,I,I,E,E,O,I,I,E,E,Q,I,I,E,E,O,I,I,E,E,O,I,I,E,E,U,I,I,E,E,O,I,I,E,E,O,I,I,E,E,O,I,I,E,E,O,I,I,E,E,U,I,I,E,E,U,I,I,E,E,U,I,I,E,E,O,I,I,E,E,S,I,I,E,E,Q,I,I,E,E,e,I,I,E,E,a,I,I,E,E,Q,I,I,E,E,Y,I,I,E,E,M,I,I,E,E,S,I,I,E,E,Q,I,I,E,E,Q,I,I,E,E,Q,I,I,E,E,U,I,I3KLG,IAAI,EAAU,SAKV,EAAO,AAAgB,UAAhB,OAAQ,MAAoB,KAAK,IAAA,GAAS,MAAQ,MACzD,AAAiB,UAAjB,OAAO,GAAsB,EAAO,MAAA,GAAW,GAAU,GAC1D,SAAS,kBACT,CAAC,EAGA,EAAa,MAAM,SAAA,CAAW,EAAW,OAAO,SAApD,CACI,EAAc,AAAkB,aAAlB,OAAO,OAAyB,OAAO,SAAA,CAAY,KAGjE,EAAO,EAAW,IAAA,CACzB,EAAQ,EAAW,KAAA,CACnB,EAAW,EAAS,QAAA,CACpB,EAAiB,EAAS,cAHvB,CAMI,EAAsB,AAAuB,aAAvB,OAAO,YACpC,EAAmB,AAAoB,aAApB,OAAO,SAInB,EAAgB,MAAM,OAAA,CAC7B,EAAa,OAAO,IAAA,CACpB,EAAe,OAAO,MAAA,CACtB,EAAe,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","sources":["<anon>","src/scripts/boot.js","src/scripts/desktop/loadApps.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/index-all.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/index-default.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/index.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_setup.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/restArguments.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isObject.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isNull.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isUndefined.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isBoolean.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isElement.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isString.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_tagTester.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isNumber.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isDate.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isRegExp.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isError.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isSymbol.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isArrayBuffer.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isDataView.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isFunction.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_stringTagBug.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_hasObjectTag.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isArray.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isArguments.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_has.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isFinite.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isNaN.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isTypedArray.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/constant.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_isBufferLike.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_createSizePropertyCheck.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_getByteLength.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_shallowProperty.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isEmpty.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_getLength.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/keys.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_collectNonEnumProps.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isMatch.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isEqual.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/underscore.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_toBufferView.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isMap.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_methodFingerprint.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/allKeys.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isWeakMap.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isSet.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/isWeakSet.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/values.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/pairs.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/invert.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/functions.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/extend.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_createAssigner.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/extendOwn.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/defaults.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/create.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_baseCreate.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/clone.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/tap.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/get.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_toPath.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/toPath.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_deepGet.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/has.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/mapObject.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_cb.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_baseIteratee.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/identity.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/matcher.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/property.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_optimizeCb.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/iteratee.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/noop.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/propertyOf.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/times.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/random.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/now.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/escape.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_createEscaper.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_escapeMap.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/unescape.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_unescapeMap.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/templateSettings.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/template.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/result.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/uniqueId.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/chain.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/partial.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_executeBound.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/bind.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/bindAll.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_flatten.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_isArrayLike.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/memoize.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/delay.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/defer.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/throttle.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/debounce.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/wrap.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/negate.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/compose.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/after.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/before.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/once.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/findKey.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/findIndex.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_createPredicateIndexFinder.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/findLastIndex.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/sortedIndex.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/indexOf.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_createIndexFinder.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/lastIndexOf.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/find.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/findWhere.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/each.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/map.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/reduce.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_createReduce.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/reduceRight.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/filter.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/reject.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/every.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/some.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/contains.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/invoke.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/pluck.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/where.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/max.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/min.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/shuffle.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/sample.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/toArray.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/sortBy.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/groupBy.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_group.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/indexBy.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/countBy.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/partition.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/size.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/pick.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_keyInObj.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/omit.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/first.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/initial.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/last.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/rest.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/compact.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/flatten.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/without.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/difference.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/uniq.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/union.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/intersection.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/unzip.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/zip.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/object.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/range.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/chunk.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/mixin.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/_chainResult.js","node_modules/.pnpm/underscore@1.13.6/node_modules/underscore/modules/underscore-array-methods.js","src/scripts/desktop/main.js","node_modules/.pnpm/@parcel+runtime-js@2.9.3_@parcel+core@2.9.3/node_modules/@parcel/runtime-js/lib/runtime-0faa132cc59bc7f2.js","src/scripts/desktop/move.js","src/scripts/apps/about.js","src/scripts/window/main.js","src/scripts/window/move.js","src/scripts/window/resize.js","src/scripts/apps/editor.js","node_modules/.pnpm/@codemirror+view@6.16.0/node_modules/@codemirror/view/dist/index.js","node_modules/.pnpm/@codemirror+state@6.2.1/node_modules/@codemirror/state/dist/index.js","node_modules/.pnpm/style-mod@4.0.3/node_modules/style-mod/src/style-mod.js","node_modules/.pnpm/w3c-keyname@2.2.8/node_modules/w3c-keyname/index.js","node_modules/.pnpm/codemirror@6.0.1_@lezer+common@1.0.3/node_modules/codemirror/dist/index.js","node_modules/.pnpm/@codemirror+language@6.8.0/node_modules/@codemirror/language/dist/index.js","node_modules/.pnpm/@lezer+common@1.0.3/node_modules/@lezer/common/dist/index.js","node_modules/.pnpm/@lezer+highlight@1.1.6/node_modules/@lezer/highlight/dist/index.js","node_modules/.pnpm/@codemirror+commands@6.2.4/node_modules/@codemirror/commands/dist/index.js","node_modules/.pnpm/@codemirror+search@6.5.0/node_modules/@codemirror/search/dist/index.js","node_modules/.pnpm/crelt@1.0.6/node_modules/crelt/index.js","node_modules/.pnpm/@codemirror+autocomplete@6.9.0_@codemirror+language@6.8.0_@codemirror+state@6.2.1_@codemirror_vxckcyau45rslly4raueghhsna/node_modules/@codemirror/autocomplete/dist/index.js","node_modules/.pnpm/@codemirror+lint@6.4.0/node_modules/@codemirror/lint/dist/index.js","src/scripts/apps/twitch.js","src/scripts/apps/spotify.js","src/scripts/apps/whatsnew.js","src/scripts/toast/main.js","src/scripts/shortcuts.js","src/scripts/util.js"],"sourcesContent":["function $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirecc71\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirecc71\"] = parcelRequire;\n}\n// ESM Exports\n// ===========\n// This module is the package entry point for ES module users. In other words,\n// it is the module they are interfacing with when they import from the whole\n// package instead of from a submodule, like this:\n//\n// ```js\n// import { map } from 'underscore';\n// ```\n//\n// The difference with `./index-default`, which is the package entry point for\n// CommonJS, AMD and UMD users, is purely technical. In ES modules, named and\n// default exports are considered to be siblings, so when you have a default\n// export, its properties are not automatically available as named exports. For\n// this reason, we re-export the named exports in addition to providing the same\n// default export as in `./index-default`.\n// Default Export\n// ==============\n// In this module, we mix our bundled exports into the `_` object and export\n// the result. This is analogous to setting `module.exports = _` in CommonJS.\n// Hence, this module is also the entry point of our UMD bundle and the package\n// entry point for CommonJS and AMD users. In other words, this is (the source\n// of) the module you are interfacing with when you do any of the following:\n//\n// ```js\n// // CommonJS\n// var _ = require('underscore');\n//\n// // AMD\n// define(['underscore'], function(_) {...});\n//\n// // UMD in the browser\n// // _ is available as a global variable\n// ```\nvar $1e7e3d3a578a13ba$exports = {};\n\n$parcel$defineInteropFlag($1e7e3d3a578a13ba$exports);\n\n$parcel$export($1e7e3d3a578a13ba$exports, \"VERSION\", () => $05d7c2cba8bc6781$export$a4ad2735b021c132);\n$parcel$export($1e7e3d3a578a13ba$exports, \"restArguments\", () => $fc1fd36bde4114f9$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isObject\", () => $7455759b7c96d90b$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isNull\", () => $ae51d237bc32c11d$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isUndefined\", () => $817cb6c7fa9b206b$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isBoolean\", () => $66a39a9dcb84bae8$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isElement\", () => $b5a8aea2509f94d5$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isString\", () => $5e7ffcd018d5a045$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isNumber\", () => $8d64187e1f5bcb51$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isDate\", () => $b091ae5bae608f07$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isRegExp\", () => $60ced9ead555d880$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isError\", () => $ae03ca5635944d30$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isSymbol\", () => $aa30b18d945659f9$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isArrayBuffer\", () => $c638010ce75b468c$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isDataView\", () => $6c3f7150b2a727d5$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isArray\", () => $8d2cabfa0672ccfd$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isFunction\", () => $eebfce9fce6919bf$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isArguments\", () => $1a47e7a4d17a4e15$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isFinite\", () => $f90732ef9f3c1387$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isNaN\", () => $70e931fec09cede3$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isTypedArray\", () => $48ad6cb314046db0$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isEmpty\", () => $ac06533566af2678$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isMatch\", () => $22b92356fc17ef5d$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isEqual\", () => $a19c9bc34e067027$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isMap\", () => $2edf16cd20c34baf$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isWeakMap\", () => $ffac34704793bc6b$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isSet\", () => $df783970e2063b3d$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"isWeakSet\", () => $bab269fbfbecf7fa$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"keys\", () => $393c4048a48382d0$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"allKeys\", () => $5de0de2b18b9ad30$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"values\", () => $99599505685447d9$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"pairs\", () => $a967293e5b840068$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"invert\", () => $08c60a2e0034368d$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"functions\", () => $0f196b5807c1f31f$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"methods\", () => $0f196b5807c1f31f$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"extend\", () => $c7fed440620dd794$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"extendOwn\", () => $77f400422659e206$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"assign\", () => $77f400422659e206$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"defaults\", () => $c9bd555669bcdc82$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"create\", () => $a5a35d14eaefec84$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"clone\", () => $dbff805e5a1c9fa5$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"tap\", () => $832f7aa560aae756$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"get\", () => $35b906998fb25b49$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"has\", () => $1d682c540dd867f0$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"mapObject\", () => $24889f8235604410$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"identity\", () => $5153dcf3ca5fcb44$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"constant\", () => $fa29f092909a7073$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"noop\", () => $6298ea013f2a6548$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"toPath\", () => $5930e11f6a3e31f9$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"property\", () => $e1c10a0c7ed7aee8$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"propertyOf\", () => $4d54adfad87340d7$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"matcher\", () => $4aa1d46d5f0feb03$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"matches\", () => $4aa1d46d5f0feb03$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"times\", () => $6d5652f4017904cb$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"random\", () => $52180227c308dc3a$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"now\", () => $514f12979ade38e2$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"escape\", () => $e1fecafa4702f5c9$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"unescape\", () => $6990c4f008b54c69$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"templateSettings\", () => $f04faa0d52429a87$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"template\", () => $25a5937b4f261340$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"result\", () => $4b977a61e7f77743$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"uniqueId\", () => $c5e0ec1dad369d84$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"chain\", () => $75db5d04108636db$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"iteratee\", () => $2b991c32a65324be$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"partial\", () => $c065e766094e50a6$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"bind\", () => $5cb6e6a08089b86e$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"bindAll\", () => $70d424dbf8841be5$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"memoize\", () => $d928e5e0a79cae34$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"delay\", () => $c9bc583a8b562914$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"defer\", () => $a7402757b4638aeb$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"throttle\", () => $c7185e650a7e10b2$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"debounce\", () => $4c54d472742b7ac1$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"wrap\", () => $207269d620e1a8c3$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"negate\", () => $bbb73bfa41e59211$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"compose\", () => $1973ebafc5dad97b$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"after\", () => $d7147efecbf07fcf$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"before\", () => $1eaafab21993b862$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"once\", () => $03a6e7765eaccbd3$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"findKey\", () => $df8a1c5d5d219215$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"findIndex\", () => $69938fd0307412e5$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"findLastIndex\", () => $faa6db362c31848b$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"sortedIndex\", () => $4d53740a32253d87$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"indexOf\", () => $aac4ec8062964015$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"lastIndexOf\", () => $d5e8ed62ed31a7e1$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"find\", () => $b7145ac83befc757$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"detect\", () => $b7145ac83befc757$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"findWhere\", () => $319371ffc5ef1edc$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"each\", () => $20d45cff29fa3729$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"forEach\", () => $20d45cff29fa3729$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"map\", () => $3dd5ec26060f1fde$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"collect\", () => $3dd5ec26060f1fde$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"reduce\", () => $45cfb3c69625f3cd$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"foldl\", () => $45cfb3c69625f3cd$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"inject\", () => $45cfb3c69625f3cd$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"reduceRight\", () => $23a10db6f4c742ff$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"foldr\", () => $23a10db6f4c742ff$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"filter\", () => $9d6db8d7982fa7eb$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"select\", () => $9d6db8d7982fa7eb$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"reject\", () => $8586e6509f228fe9$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"every\", () => $277debd07a5ce1de$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"all\", () => $277debd07a5ce1de$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"some\", () => $df2a06eace2e3f42$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"any\", () => $df2a06eace2e3f42$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"contains\", () => $c77e4c660447e150$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"includes\", () => $c77e4c660447e150$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"include\", () => $c77e4c660447e150$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"invoke\", () => $3a188d4ecce54238$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"pluck\", () => $456be431d728cc75$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"where\", () => $977d2dbf5fdf01d2$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"max\", () => $be7e492c47cb54c5$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"min\", () => $43edba651a322868$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"shuffle\", () => $df695bddcd73d70c$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"sample\", () => $6022571411429450$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"sortBy\", () => $91d03f0e74bb36d3$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"groupBy\", () => $87e5756d46fce283$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"indexBy\", () => $864205024f807f86$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"countBy\", () => $fb2c5d9a91985e58$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"partition\", () => $cc7b953126689faf$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"toArray\", () => $201d9b466f2498c1$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"size\", () => $b3d63bc1721d3160$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"pick\", () => $237ea5a47c6bb364$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"omit\", () => $01d9c165c680005e$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"first\", () => $e21c2132f572d7c5$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"head\", () => $e21c2132f572d7c5$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"take\", () => $e21c2132f572d7c5$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"initial\", () => $eae4e320f004c3ab$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"last\", () => $0d83d7e9bedb334c$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"rest\", () => $3b9f4bd329c25176$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"tail\", () => $3b9f4bd329c25176$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"drop\", () => $3b9f4bd329c25176$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"compact\", () => $04518f4576db782f$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"flatten\", () => $6570ec059bd85af0$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"without\", () => $aeb4f858c3a25379$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"uniq\", () => $6aabf5f8e75d3766$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"unique\", () => $6aabf5f8e75d3766$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"union\", () => $e0c98ccec3b6432a$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"intersection\", () => $936b3793e16cdbf4$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"difference\", () => $a5a1d2b728d9aa28$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"unzip\", () => $f1b2e6c56c644522$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"transpose\", () => $f1b2e6c56c644522$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"zip\", () => $14b989efb43f80df$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"object\", () => $2c985141e4622117$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"range\", () => $cdd7231087a20698$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"chunk\", () => $a76f1cdbc561b6ca$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"mixin\", () => $47f18316120b371a$export$2e2bcd8739ae039);\n$parcel$export($1e7e3d3a578a13ba$exports, \"default\", () => $fdc534663a23b27c$export$2e2bcd8739ae039);\n// Named Exports\n// =============\n//     Underscore.js 1.13.6\n//     https://underscorejs.org\n//     (c) 2009-2022 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n// Baseline setup.\n// Current version.\nvar $05d7c2cba8bc6781$export$a4ad2735b021c132 = \"1.13.6\";\nvar $05d7c2cba8bc6781$export$e8e78c978b129247 = typeof self == \"object\" && self.self === self && self || typeof $parcel$global == \"object\" && $parcel$global.global === $parcel$global && $parcel$global || Function(\"return this\")() || {};\nvar $05d7c2cba8bc6781$export$aabeece9448a227a = Array.prototype, $05d7c2cba8bc6781$export$e77bb59b5e655b3d = Object.prototype;\nvar $05d7c2cba8bc6781$export$e229dcb397ceea81 = typeof Symbol !== \"undefined\" ? Symbol.prototype : null;\nvar $05d7c2cba8bc6781$export$4cbf152802aa238 = $05d7c2cba8bc6781$export$aabeece9448a227a.push, $05d7c2cba8bc6781$export$58adb3bec8346d0f = $05d7c2cba8bc6781$export$aabeece9448a227a.slice, $05d7c2cba8bc6781$export$f84e8e69fd4488a5 = $05d7c2cba8bc6781$export$e77bb59b5e655b3d.toString, $05d7c2cba8bc6781$export$5a15a386532a5ea4 = $05d7c2cba8bc6781$export$e77bb59b5e655b3d.hasOwnProperty;\nvar $05d7c2cba8bc6781$export$20eaf89d899ede58 = typeof ArrayBuffer !== \"undefined\", $05d7c2cba8bc6781$export$a2e478ad34dac33e = typeof DataView !== \"undefined\";\nvar $05d7c2cba8bc6781$export$552cf9b635cef256 = Array.isArray, $05d7c2cba8bc6781$export$e676cf06d7fd2114 = Object.keys, $05d7c2cba8bc6781$export$5b53dc95b548c58c = Object.create, $05d7c2cba8bc6781$export$35fc70fc5e80d5a7 = $05d7c2cba8bc6781$export$20eaf89d899ede58 && ArrayBuffer.isView;\nvar $05d7c2cba8bc6781$export$a739ba33a90be0a1 = isNaN, $05d7c2cba8bc6781$export$8b48b92f6c9d5ad = isFinite;\nvar $05d7c2cba8bc6781$export$7dcea4d27900b116 = !({\n    toString: null\n}).propertyIsEnumerable(\"toString\");\nvar $05d7c2cba8bc6781$export$f8fa596d5e31cb19 = [\n    \"valueOf\",\n    \"isPrototypeOf\",\n    \"toString\",\n    \"propertyIsEnumerable\",\n    \"hasOwnProperty\",\n    \"toLocaleString\"\n];\nvar $05d7c2cba8bc6781$export$63b3abc5cd28bc48 = Math.pow(2, 53) - 1;\n\n\n// Some functions take a variable number of arguments, or a few expected\n// arguments at the beginning and then a variable number of values to operate\n// on. This helper accumulates all remaining arguments past the function’s\n// argument length (or an explicit `startIndex`), into an array that becomes\n// the last argument. Similar to ES6’s \"rest parameter\".\nfunction $fc1fd36bde4114f9$export$2e2bcd8739ae039(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n        var length = Math.max(arguments.length - startIndex, 0), rest = Array(length), index = 0;\n        for(; index < length; index++)rest[index] = arguments[index + startIndex];\n        switch(startIndex){\n            case 0:\n                return func.call(this, rest);\n            case 1:\n                return func.call(this, arguments[0], rest);\n            case 2:\n                return func.call(this, arguments[0], arguments[1], rest);\n        }\n        var args = Array(startIndex + 1);\n        for(index = 0; index < startIndex; index++)args[index] = arguments[index];\n        args[startIndex] = rest;\n        return func.apply(this, args);\n    };\n}\n\n\n// Is a given variable an object?\nfunction $7455759b7c96d90b$export$2e2bcd8739ae039(obj) {\n    var type = typeof obj;\n    return type === \"function\" || type === \"object\" && !!obj;\n}\n\n\n// Is a given value equal to null?\nfunction $ae51d237bc32c11d$export$2e2bcd8739ae039(obj) {\n    return obj === null;\n}\n\n\n// Is a given variable undefined?\nfunction $817cb6c7fa9b206b$export$2e2bcd8739ae039(obj) {\n    return obj === void 0;\n}\n\n\n\nfunction $66a39a9dcb84bae8$export$2e2bcd8739ae039(obj) {\n    return obj === true || obj === false || (0, $05d7c2cba8bc6781$export$f84e8e69fd4488a5).call(obj) === \"[object Boolean]\";\n}\n\n\n// Is a given value a DOM element?\nfunction $b5a8aea2509f94d5$export$2e2bcd8739ae039(obj) {\n    return !!(obj && obj.nodeType === 1);\n}\n\n\n\nfunction $bff6309a5604c359$export$2e2bcd8739ae039(name) {\n    var tag = \"[object \" + name + \"]\";\n    return function(obj) {\n        return (0, $05d7c2cba8bc6781$export$f84e8e69fd4488a5).call(obj) === tag;\n    };\n}\n\n\nvar $5e7ffcd018d5a045$export$2e2bcd8739ae039 = (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"String\");\n\n\n\nvar $8d64187e1f5bcb51$export$2e2bcd8739ae039 = (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"Number\");\n\n\n\nvar $b091ae5bae608f07$export$2e2bcd8739ae039 = (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"Date\");\n\n\n\nvar $60ced9ead555d880$export$2e2bcd8739ae039 = (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"RegExp\");\n\n\n\nvar $ae03ca5635944d30$export$2e2bcd8739ae039 = (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"Error\");\n\n\n\nvar $aa30b18d945659f9$export$2e2bcd8739ae039 = (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"Symbol\");\n\n\n\nvar $c638010ce75b468c$export$2e2bcd8739ae039 = (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"ArrayBuffer\");\n\n\n\n\n\nvar $eebfce9fce6919bf$var$isFunction = (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"Function\");\n// Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old\n// v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\nvar $eebfce9fce6919bf$var$nodelist = (0, $05d7c2cba8bc6781$export$e8e78c978b129247).document && (0, $05d7c2cba8bc6781$export$e8e78c978b129247).document.childNodes;\nif (typeof /./ != \"function\" && typeof Int8Array != \"object\" && typeof $eebfce9fce6919bf$var$nodelist != \"function\") $eebfce9fce6919bf$var$isFunction = function(obj) {\n    return typeof obj == \"function\" || false;\n};\nvar $eebfce9fce6919bf$export$2e2bcd8739ae039 = $eebfce9fce6919bf$var$isFunction;\n\n\n\n\n\nvar $20b3e5c52c4e9f8a$export$2e2bcd8739ae039 = (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"Object\");\n\n\nvar $e3e167c4390596e6$export$834f1807c25991c1 = (0, $05d7c2cba8bc6781$export$a2e478ad34dac33e) && (0, $20b3e5c52c4e9f8a$export$2e2bcd8739ae039)(new DataView(new ArrayBuffer(8))), $e3e167c4390596e6$export$f7bad96d83325a34 = typeof Map !== \"undefined\" && (0, $20b3e5c52c4e9f8a$export$2e2bcd8739ae039)(new Map);\n\n\nvar $6c3f7150b2a727d5$var$isDataView = (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"DataView\");\n// In IE 10 - Edge 13, we need a different heuristic\n// to determine whether an object is a `DataView`.\nfunction $6c3f7150b2a727d5$var$ie10IsDataView(obj) {\n    return obj != null && (0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(obj.getInt8) && (0, $c638010ce75b468c$export$2e2bcd8739ae039)(obj.buffer);\n}\nvar $6c3f7150b2a727d5$export$2e2bcd8739ae039 = (0, $e3e167c4390596e6$export$834f1807c25991c1) ? $6c3f7150b2a727d5$var$ie10IsDataView : $6c3f7150b2a727d5$var$isDataView;\n\n\n\n\nvar // Is a given value an array?\n// Delegates to ECMA5's native `Array.isArray`.\n$8d2cabfa0672ccfd$export$2e2bcd8739ae039 = (0, $05d7c2cba8bc6781$export$552cf9b635cef256) || (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"Array\");\n\n\n\n\n\nfunction $c5c89c4e60c806a4$export$2e2bcd8739ae039(obj, key) {\n    return obj != null && (0, $05d7c2cba8bc6781$export$5a15a386532a5ea4).call(obj, key);\n}\n\n\nvar $1a47e7a4d17a4e15$var$isArguments = (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"Arguments\");\n// Define a fallback version of the method in browsers (ahem, IE < 9), where\n// there isn't any inspectable \"Arguments\" type.\n(function() {\n    if (!$1a47e7a4d17a4e15$var$isArguments(arguments)) $1a47e7a4d17a4e15$var$isArguments = function(obj) {\n        return (0, $c5c89c4e60c806a4$export$2e2bcd8739ae039)(obj, \"callee\");\n    };\n})();\nvar $1a47e7a4d17a4e15$export$2e2bcd8739ae039 = $1a47e7a4d17a4e15$var$isArguments;\n\n\n\n\nfunction $f90732ef9f3c1387$export$2e2bcd8739ae039(obj) {\n    return !(0, $aa30b18d945659f9$export$2e2bcd8739ae039)(obj) && (0, $05d7c2cba8bc6781$export$8b48b92f6c9d5ad)(obj) && !isNaN(parseFloat(obj));\n}\n\n\n\n\nfunction $70e931fec09cede3$export$2e2bcd8739ae039(obj) {\n    return (0, $8d64187e1f5bcb51$export$2e2bcd8739ae039)(obj) && (0, $05d7c2cba8bc6781$export$a739ba33a90be0a1)(obj);\n}\n\n\n\n\n// Predicate-generating function. Often useful outside of Underscore.\nfunction $fa29f092909a7073$export$2e2bcd8739ae039(value) {\n    return function() {\n        return value;\n    };\n}\n\n\n\nfunction $0728a9c2eef2ff28$export$2e2bcd8739ae039(getSizeProperty) {\n    return function(collection) {\n        var sizeProperty = getSizeProperty(collection);\n        return typeof sizeProperty == \"number\" && sizeProperty >= 0 && sizeProperty <= (0, $05d7c2cba8bc6781$export$63b3abc5cd28bc48);\n    };\n}\n\n\n// Internal helper to generate a function to obtain property `key` from `obj`.\nfunction $4142f563b2724035$export$2e2bcd8739ae039(key) {\n    return function(obj) {\n        return obj == null ? void 0 : obj[key];\n    };\n}\n\n\nvar // Internal helper to obtain the `byteLength` property of an object.\n$d62afa6977584885$export$2e2bcd8739ae039 = (0, $4142f563b2724035$export$2e2bcd8739ae039)(\"byteLength\");\n\n\nvar // Internal helper to determine whether we should spend extensive checks against\n// `ArrayBuffer` et al.\n$c7fff9638b97c76a$export$2e2bcd8739ae039 = (0, $0728a9c2eef2ff28$export$2e2bcd8739ae039)((0, $d62afa6977584885$export$2e2bcd8739ae039));\n\n\n// Is a given value a typed array?\nvar $48ad6cb314046db0$var$typedArrayPattern = /\\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\\]/;\nfunction $48ad6cb314046db0$var$isTypedArray(obj) {\n    // `ArrayBuffer.isView` is the most future-proof, so use it when available.\n    // Otherwise, fall back on the above regular expression.\n    return (0, $05d7c2cba8bc6781$export$35fc70fc5e80d5a7) ? (0, $05d7c2cba8bc6781$export$35fc70fc5e80d5a7)(obj) && !(0, $6c3f7150b2a727d5$export$2e2bcd8739ae039)(obj) : (0, $c7fff9638b97c76a$export$2e2bcd8739ae039)(obj) && $48ad6cb314046db0$var$typedArrayPattern.test((0, $05d7c2cba8bc6781$export$f84e8e69fd4488a5).call(obj));\n}\nvar $48ad6cb314046db0$export$2e2bcd8739ae039 = (0, $05d7c2cba8bc6781$export$20eaf89d899ede58) ? $48ad6cb314046db0$var$isTypedArray : (0, $fa29f092909a7073$export$2e2bcd8739ae039)(false);\n\n\n\nvar // Internal helper to obtain the `length` property of an object.\n$69a46ada1dc9e118$export$2e2bcd8739ae039 = (0, $4142f563b2724035$export$2e2bcd8739ae039)(\"length\");\n\n\n\n\n\n\n\n\n\n\n\n// Internal helper to create a simple lookup structure.\n// `collectNonEnumProps` used to depend on `_.contains`, but this led to\n// circular imports. `emulatedSet` is a one-off solution that only works for\n// arrays of strings.\nfunction $544f8da2e9ffcd99$var$emulatedSet(keys) {\n    var hash = {};\n    for(var l = keys.length, i = 0; i < l; ++i)hash[keys[i]] = true;\n    return {\n        contains: function(key) {\n            return hash[key] === true;\n        },\n        push: function(key) {\n            hash[key] = true;\n            return keys.push(key);\n        }\n    };\n}\nfunction $544f8da2e9ffcd99$export$2e2bcd8739ae039(obj, keys) {\n    keys = $544f8da2e9ffcd99$var$emulatedSet(keys);\n    var nonEnumIdx = (0, $05d7c2cba8bc6781$export$f8fa596d5e31cb19).length;\n    var constructor = obj.constructor;\n    var proto = (0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(constructor) && constructor.prototype || (0, $05d7c2cba8bc6781$export$e77bb59b5e655b3d);\n    // Constructor is a special case.\n    var prop = \"constructor\";\n    if ((0, $c5c89c4e60c806a4$export$2e2bcd8739ae039)(obj, prop) && !keys.contains(prop)) keys.push(prop);\n    while(nonEnumIdx--){\n        prop = (0, $05d7c2cba8bc6781$export$f8fa596d5e31cb19)[nonEnumIdx];\n        if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) keys.push(prop);\n    }\n}\n\n\nfunction $393c4048a48382d0$export$2e2bcd8739ae039(obj) {\n    if (!(0, $7455759b7c96d90b$export$2e2bcd8739ae039)(obj)) return [];\n    if (0, $05d7c2cba8bc6781$export$e676cf06d7fd2114) return (0, $05d7c2cba8bc6781$export$e676cf06d7fd2114)(obj);\n    var keys = [];\n    for(var key in obj)if ((0, $c5c89c4e60c806a4$export$2e2bcd8739ae039)(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (0, $05d7c2cba8bc6781$export$7dcea4d27900b116) (0, $544f8da2e9ffcd99$export$2e2bcd8739ae039)(obj, keys);\n    return keys;\n}\n\n\nfunction $ac06533566af2678$export$2e2bcd8739ae039(obj) {\n    if (obj == null) return true;\n    // Skip the more expensive `toString`-based type checks if `obj` has no\n    // `.length`.\n    var length = (0, $69a46ada1dc9e118$export$2e2bcd8739ae039)(obj);\n    if (typeof length == \"number\" && ((0, $8d2cabfa0672ccfd$export$2e2bcd8739ae039)(obj) || (0, $5e7ffcd018d5a045$export$2e2bcd8739ae039)(obj) || (0, $1a47e7a4d17a4e15$export$2e2bcd8739ae039)(obj))) return length === 0;\n    return (0, $69a46ada1dc9e118$export$2e2bcd8739ae039)((0, $393c4048a48382d0$export$2e2bcd8739ae039)(obj)) === 0;\n}\n\n\n\nfunction $22b92356fc17ef5d$export$2e2bcd8739ae039(object, attrs) {\n    var _keys = (0, $393c4048a48382d0$export$2e2bcd8739ae039)(attrs), length = _keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for(var i = 0; i < length; i++){\n        var key = _keys[i];\n        if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n}\n\n\n\nfunction $ca35147c638b60d3$export$2e2bcd8739ae039(obj) {\n    if (obj instanceof $ca35147c638b60d3$export$2e2bcd8739ae039) return obj;\n    if (!(this instanceof $ca35147c638b60d3$export$2e2bcd8739ae039)) return new $ca35147c638b60d3$export$2e2bcd8739ae039(obj);\n    this._wrapped = obj;\n}\n$ca35147c638b60d3$export$2e2bcd8739ae039.VERSION = (0, $05d7c2cba8bc6781$export$a4ad2735b021c132);\n// Extracts the result from a wrapped and chained object.\n$ca35147c638b60d3$export$2e2bcd8739ae039.prototype.value = function() {\n    return this._wrapped;\n};\n// Provide unwrapping proxies for some methods used in engine operations\n// such as arithmetic and JSON stringification.\n$ca35147c638b60d3$export$2e2bcd8739ae039.prototype.valueOf = $ca35147c638b60d3$export$2e2bcd8739ae039.prototype.toJSON = $ca35147c638b60d3$export$2e2bcd8739ae039.prototype.value;\n$ca35147c638b60d3$export$2e2bcd8739ae039.prototype.toString = function() {\n    return String(this._wrapped);\n};\n\n\n\n\n\n\n\n\n\n\n\nfunction $ad4f8b3ee07c9de3$export$2e2bcd8739ae039(bufferSource) {\n    return new Uint8Array(bufferSource.buffer || bufferSource, bufferSource.byteOffset || 0, (0, $d62afa6977584885$export$2e2bcd8739ae039)(bufferSource));\n}\n\n\n// We use this string twice, so give it a name for minification.\nvar $a19c9bc34e067027$var$tagDataView = \"[object DataView]\";\n// Internal recursive comparison function for `_.isEqual`.\nfunction $a19c9bc34e067027$var$eq(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false;\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b;\n    // Exhaust primitive checks\n    var type = typeof a;\n    if (type !== \"function\" && type !== \"object\" && typeof b != \"object\") return false;\n    return $a19c9bc34e067027$var$deepEq(a, b, aStack, bStack);\n}\n// Internal recursive comparison function for `_.isEqual`.\nfunction $a19c9bc34e067027$var$deepEq(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof (0, $ca35147c638b60d3$export$2e2bcd8739ae039)) a = a._wrapped;\n    if (b instanceof (0, $ca35147c638b60d3$export$2e2bcd8739ae039)) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = (0, $05d7c2cba8bc6781$export$f84e8e69fd4488a5).call(a);\n    if (className !== (0, $05d7c2cba8bc6781$export$f84e8e69fd4488a5).call(b)) return false;\n    // Work around a bug in IE 10 - Edge 13.\n    if ((0, $e3e167c4390596e6$export$834f1807c25991c1) && className == \"[object Object]\" && (0, $6c3f7150b2a727d5$export$2e2bcd8739ae039)(a)) {\n        if (!(0, $6c3f7150b2a727d5$export$2e2bcd8739ae039)(b)) return false;\n        className = $a19c9bc34e067027$var$tagDataView;\n    }\n    switch(className){\n        // These types are compared by value.\n        case \"[object RegExp]\":\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n        case \"[object String]\":\n            // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n            // equivalent to `new String(\"5\")`.\n            return \"\" + a === \"\" + b;\n        case \"[object Number]\":\n            // `NaN`s are equivalent, but non-reflexive.\n            // Object(NaN) is equivalent to NaN.\n            if (+a !== +a) return +b !== +b;\n            // An `egal` comparison is performed for other numeric values.\n            return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n        case \"[object Date]\":\n        case \"[object Boolean]\":\n            // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n            // millisecond representations. Note that invalid dates with millisecond representations\n            // of `NaN` are not equivalent.\n            return +a === +b;\n        case \"[object Symbol]\":\n            return (0, $05d7c2cba8bc6781$export$e229dcb397ceea81).valueOf.call(a) === (0, $05d7c2cba8bc6781$export$e229dcb397ceea81).valueOf.call(b);\n        case \"[object ArrayBuffer]\":\n        case $a19c9bc34e067027$var$tagDataView:\n            // Coerce to typed array so we can fall through.\n            return $a19c9bc34e067027$var$deepEq((0, $ad4f8b3ee07c9de3$export$2e2bcd8739ae039)(a), (0, $ad4f8b3ee07c9de3$export$2e2bcd8739ae039)(b), aStack, bStack);\n    }\n    var areArrays = className === \"[object Array]\";\n    if (!areArrays && (0, $48ad6cb314046db0$export$2e2bcd8739ae039)(a)) {\n        var byteLength = (0, $d62afa6977584885$export$2e2bcd8739ae039)(a);\n        if (byteLength !== (0, $d62afa6977584885$export$2e2bcd8739ae039)(b)) return false;\n        if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;\n        areArrays = true;\n    }\n    if (!areArrays) {\n        if (typeof a != \"object\" || typeof b != \"object\") return false;\n        // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n        // from different frames are.\n        var aCtor = a.constructor, bCtor = b.constructor;\n        if (aCtor !== bCtor && !((0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(aCtor) && aCtor instanceof aCtor && (0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(bCtor) && bCtor instanceof bCtor) && \"constructor\" in a && \"constructor\" in b) return false;\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while(length--){\n        // Linear search. Performance is inversely proportional to the number of\n        // unique nested structures.\n        if (aStack[length] === a) return bStack[length] === b;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n        // Compare array lengths to determine if a deep comparison is necessary.\n        length = a.length;\n        if (length !== b.length) return false;\n        // Deep compare the contents, ignoring non-numeric properties.\n        while(length--){\n            if (!$a19c9bc34e067027$var$eq(a[length], b[length], aStack, bStack)) return false;\n        }\n    } else {\n        // Deep compare objects.\n        var _keys = (0, $393c4048a48382d0$export$2e2bcd8739ae039)(a), key;\n        length = _keys.length;\n        // Ensure that both objects contain the same number of properties before comparing deep equality.\n        if ((0, $393c4048a48382d0$export$2e2bcd8739ae039)(b).length !== length) return false;\n        while(length--){\n            // Deep compare each member\n            key = _keys[length];\n            if (!((0, $c5c89c4e60c806a4$export$2e2bcd8739ae039)(b, key) && $a19c9bc34e067027$var$eq(a[key], b[key], aStack, bStack))) return false;\n        }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n}\nfunction $a19c9bc34e067027$export$2e2bcd8739ae039(a, b) {\n    return $a19c9bc34e067027$var$eq(a, b);\n}\n\n\n\n\n\n\n\n\n\nfunction $5de0de2b18b9ad30$export$2e2bcd8739ae039(obj) {\n    if (!(0, $7455759b7c96d90b$export$2e2bcd8739ae039)(obj)) return [];\n    var keys = [];\n    for(var key in obj)keys.push(key);\n    // Ahem, IE < 9.\n    if (0, $05d7c2cba8bc6781$export$7dcea4d27900b116) (0, $544f8da2e9ffcd99$export$2e2bcd8739ae039)(obj, keys);\n    return keys;\n}\n\n\nfunction $6fe8606c08285828$export$15230eca1f400e40(methods) {\n    var length = (0, $69a46ada1dc9e118$export$2e2bcd8739ae039)(methods);\n    return function(obj) {\n        if (obj == null) return false;\n        // `Map`, `WeakMap` and `Set` have no enumerable keys.\n        var keys = (0, $5de0de2b18b9ad30$export$2e2bcd8739ae039)(obj);\n        if ((0, $69a46ada1dc9e118$export$2e2bcd8739ae039)(keys)) return false;\n        for(var i = 0; i < length; i++){\n            if (!(0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(obj[methods[i]])) return false;\n        }\n        // If we are testing against `WeakMap`, we need to ensure that\n        // `obj` doesn't have a `forEach` method in order to distinguish\n        // it from a regular `Map`.\n        return methods !== $6fe8606c08285828$export$2f74b890a72cf48 || !(0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(obj[$6fe8606c08285828$var$forEachName]);\n    };\n}\n// In the interest of compact minification, we write\n// each string in the fingerprints only once.\nvar $6fe8606c08285828$var$forEachName = \"forEach\", $6fe8606c08285828$var$hasName = \"has\", $6fe8606c08285828$var$commonInit = [\n    \"clear\",\n    \"delete\"\n], $6fe8606c08285828$var$mapTail = [\n    \"get\",\n    $6fe8606c08285828$var$hasName,\n    \"set\"\n];\nvar $6fe8606c08285828$export$de9acb94190bb764 = $6fe8606c08285828$var$commonInit.concat($6fe8606c08285828$var$forEachName, $6fe8606c08285828$var$mapTail), $6fe8606c08285828$export$2f74b890a72cf48 = $6fe8606c08285828$var$commonInit.concat($6fe8606c08285828$var$mapTail), $6fe8606c08285828$export$60e14a5e2a057f78 = [\n    \"add\"\n].concat($6fe8606c08285828$var$commonInit, $6fe8606c08285828$var$forEachName, $6fe8606c08285828$var$hasName);\n\n\nvar $2edf16cd20c34baf$export$2e2bcd8739ae039 = (0, $e3e167c4390596e6$export$f7bad96d83325a34) ? (0, $6fe8606c08285828$export$15230eca1f400e40)((0, $6fe8606c08285828$export$de9acb94190bb764)) : (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"Map\");\n\n\n\n\n\nvar $ffac34704793bc6b$export$2e2bcd8739ae039 = (0, $e3e167c4390596e6$export$f7bad96d83325a34) ? (0, $6fe8606c08285828$export$15230eca1f400e40)((0, $6fe8606c08285828$export$2f74b890a72cf48)) : (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"WeakMap\");\n\n\n\n\n\nvar $df783970e2063b3d$export$2e2bcd8739ae039 = (0, $e3e167c4390596e6$export$f7bad96d83325a34) ? (0, $6fe8606c08285828$export$15230eca1f400e40)((0, $6fe8606c08285828$export$60e14a5e2a057f78)) : (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"Set\");\n\n\n\nvar $bab269fbfbecf7fa$export$2e2bcd8739ae039 = (0, $bff6309a5604c359$export$2e2bcd8739ae039)(\"WeakSet\");\n\n\n\n\n\nfunction $99599505685447d9$export$2e2bcd8739ae039(obj) {\n    var _keys = (0, $393c4048a48382d0$export$2e2bcd8739ae039)(obj);\n    var length = _keys.length;\n    var values = Array(length);\n    for(var i = 0; i < length; i++)values[i] = obj[_keys[i]];\n    return values;\n}\n\n\n\nfunction $a967293e5b840068$export$2e2bcd8739ae039(obj) {\n    var _keys = (0, $393c4048a48382d0$export$2e2bcd8739ae039)(obj);\n    var length = _keys.length;\n    var pairs = Array(length);\n    for(var i = 0; i < length; i++)pairs[i] = [\n        _keys[i],\n        obj[_keys[i]]\n    ];\n    return pairs;\n}\n\n\n\nfunction $08c60a2e0034368d$export$2e2bcd8739ae039(obj) {\n    var result = {};\n    var _keys = (0, $393c4048a48382d0$export$2e2bcd8739ae039)(obj);\n    for(var i = 0, length = _keys.length; i < length; i++)result[obj[_keys[i]]] = _keys[i];\n    return result;\n}\n\n\n\nfunction $0f196b5807c1f31f$export$2e2bcd8739ae039(obj) {\n    var names = [];\n    for(var key in obj)if ((0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(obj[key])) names.push(key);\n    return names.sort();\n}\n\n\n// An internal function for creating assigner functions.\nfunction $a890057be0293e9e$export$2e2bcd8739ae039(keysFunc, defaults) {\n    return function(obj) {\n        var length = arguments.length;\n        if (defaults) obj = Object(obj);\n        if (length < 2 || obj == null) return obj;\n        for(var index = 1; index < length; index++){\n            var source = arguments[index], keys = keysFunc(source), l = keys.length;\n            for(var i = 0; i < l; i++){\n                var key = keys[i];\n                if (!defaults || obj[key] === void 0) obj[key] = source[key];\n            }\n        }\n        return obj;\n    };\n}\n\n\n\nvar // Extend a given object with all the properties in passed-in object(s).\n$c7fed440620dd794$export$2e2bcd8739ae039 = (0, $a890057be0293e9e$export$2e2bcd8739ae039)((0, $5de0de2b18b9ad30$export$2e2bcd8739ae039));\n\n\n\n\nvar // Assigns a given object with all the own properties in the passed-in\n// object(s).\n// (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n$77f400422659e206$export$2e2bcd8739ae039 = (0, $a890057be0293e9e$export$2e2bcd8739ae039)((0, $393c4048a48382d0$export$2e2bcd8739ae039));\n\n\n\n\nvar // Fill in a given object with default properties.\n$c9bd555669bcdc82$export$2e2bcd8739ae039 = (0, $a890057be0293e9e$export$2e2bcd8739ae039)((0, $5de0de2b18b9ad30$export$2e2bcd8739ae039), true);\n\n\n\n\n// Create a naked function reference for surrogate-prototype-swapping.\nfunction $a5436f5acc9af5e1$var$ctor() {\n    return function() {};\n}\nfunction $a5436f5acc9af5e1$export$2e2bcd8739ae039(prototype) {\n    if (!(0, $7455759b7c96d90b$export$2e2bcd8739ae039)(prototype)) return {};\n    if (0, $05d7c2cba8bc6781$export$5b53dc95b548c58c) return (0, $05d7c2cba8bc6781$export$5b53dc95b548c58c)(prototype);\n    var Ctor = $a5436f5acc9af5e1$var$ctor();\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n}\n\n\n\nfunction $a5a35d14eaefec84$export$2e2bcd8739ae039(prototype, props) {\n    var result = (0, $a5436f5acc9af5e1$export$2e2bcd8739ae039)(prototype);\n    if (props) (0, $77f400422659e206$export$2e2bcd8739ae039)(result, props);\n    return result;\n}\n\n\n\n\n\nfunction $dbff805e5a1c9fa5$export$2e2bcd8739ae039(obj) {\n    if (!(0, $7455759b7c96d90b$export$2e2bcd8739ae039)(obj)) return obj;\n    return (0, $8d2cabfa0672ccfd$export$2e2bcd8739ae039)(obj) ? obj.slice() : (0, $c7fed440620dd794$export$2e2bcd8739ae039)({}, obj);\n}\n\n\n// Invokes `interceptor` with the `obj` and then returns `obj`.\n// The primary purpose of this method is to \"tap into\" a method chain, in\n// order to perform operations on intermediate results within the chain.\nfunction $832f7aa560aae756$export$2e2bcd8739ae039(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n}\n\n\n\n\n\nfunction $5930e11f6a3e31f9$export$2e2bcd8739ae039(path) {\n    return (0, $8d2cabfa0672ccfd$export$2e2bcd8739ae039)(path) ? path : [\n        path\n    ];\n}\n(0, $ca35147c638b60d3$export$2e2bcd8739ae039).toPath = $5930e11f6a3e31f9$export$2e2bcd8739ae039;\n\n\nfunction $8cb949c6979e4725$export$2e2bcd8739ae039(path) {\n    return (0, $ca35147c638b60d3$export$2e2bcd8739ae039).toPath(path);\n}\n\n\n// Internal function to obtain a nested property in `obj` along `path`.\nfunction $be1eab882e127005$export$2e2bcd8739ae039(obj, path) {\n    var length = path.length;\n    for(var i = 0; i < length; i++){\n        if (obj == null) return void 0;\n        obj = obj[path[i]];\n    }\n    return length ? obj : void 0;\n}\n\n\n\nfunction $35b906998fb25b49$export$2e2bcd8739ae039(object, path, defaultValue) {\n    var value = (0, $be1eab882e127005$export$2e2bcd8739ae039)(object, (0, $8cb949c6979e4725$export$2e2bcd8739ae039)(path));\n    return (0, $817cb6c7fa9b206b$export$2e2bcd8739ae039)(value) ? defaultValue : value;\n}\n\n\n\n\nfunction $1d682c540dd867f0$export$2e2bcd8739ae039(obj, path) {\n    path = (0, $8cb949c6979e4725$export$2e2bcd8739ae039)(path);\n    var length = path.length;\n    for(var i = 0; i < length; i++){\n        var key = path[i];\n        if (!(0, $c5c89c4e60c806a4$export$2e2bcd8739ae039)(obj, key)) return false;\n        obj = obj[key];\n    }\n    return !!length;\n}\n\n\n\n// Keep the identity function around for default iteratees.\nfunction $5153dcf3ca5fcb44$export$2e2bcd8739ae039(value) {\n    return value;\n}\n\n\n\n\n\n\n\nfunction $4aa1d46d5f0feb03$export$2e2bcd8739ae039(attrs) {\n    attrs = (0, $77f400422659e206$export$2e2bcd8739ae039)({}, attrs);\n    return function(obj) {\n        return (0, $22b92356fc17ef5d$export$2e2bcd8739ae039)(obj, attrs);\n    };\n}\n\n\n\n\nfunction $e1c10a0c7ed7aee8$export$2e2bcd8739ae039(path) {\n    path = (0, $8cb949c6979e4725$export$2e2bcd8739ae039)(path);\n    return function(obj) {\n        return (0, $be1eab882e127005$export$2e2bcd8739ae039)(obj, path);\n    };\n}\n\n\n// Internal function that returns an efficient (for current engines) version\n// of the passed-in callback, to be repeatedly applied in other Underscore\n// functions.\nfunction $5e93597635dad7e9$export$2e2bcd8739ae039(func, context, argCount) {\n    if (context === void 0) return func;\n    switch(argCount == null ? 3 : argCount){\n        case 1:\n            return function(value) {\n                return func.call(context, value);\n            };\n        // The 2-argument case is omitted because we’re not using it.\n        case 3:\n            return function(value, index, collection) {\n                return func.call(context, value, index, collection);\n            };\n        case 4:\n            return function(accumulator, value, index, collection) {\n                return func.call(context, accumulator, value, index, collection);\n            };\n    }\n    return function() {\n        return func.apply(context, arguments);\n    };\n}\n\n\nfunction $0ee251c0ba28a263$export$2e2bcd8739ae039(value, context, argCount) {\n    if (value == null) return 0, $5153dcf3ca5fcb44$export$2e2bcd8739ae039;\n    if ((0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(value)) return (0, $5e93597635dad7e9$export$2e2bcd8739ae039)(value, context, argCount);\n    if ((0, $7455759b7c96d90b$export$2e2bcd8739ae039)(value) && !(0, $8d2cabfa0672ccfd$export$2e2bcd8739ae039)(value)) return (0, $4aa1d46d5f0feb03$export$2e2bcd8739ae039)(value);\n    return (0, $e1c10a0c7ed7aee8$export$2e2bcd8739ae039)(value);\n}\n\n\n\n\nfunction $2b991c32a65324be$export$2e2bcd8739ae039(value, context) {\n    return (0, $0ee251c0ba28a263$export$2e2bcd8739ae039)(value, context, Infinity);\n}\n(0, $ca35147c638b60d3$export$2e2bcd8739ae039).iteratee = $2b991c32a65324be$export$2e2bcd8739ae039;\n\n\nfunction $1782c4b2e4601278$export$2e2bcd8739ae039(value, context, argCount) {\n    if ((0, $ca35147c638b60d3$export$2e2bcd8739ae039).iteratee !== (0, $2b991c32a65324be$export$2e2bcd8739ae039)) return (0, $ca35147c638b60d3$export$2e2bcd8739ae039).iteratee(value, context);\n    return (0, $0ee251c0ba28a263$export$2e2bcd8739ae039)(value, context, argCount);\n}\n\n\n\nfunction $24889f8235604410$export$2e2bcd8739ae039(obj, iteratee, context) {\n    iteratee = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(iteratee, context);\n    var _keys = (0, $393c4048a48382d0$export$2e2bcd8739ae039)(obj), length = _keys.length, results = {};\n    for(var index = 0; index < length; index++){\n        var currentKey = _keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n}\n\n\n\n\n// Predicate-generating function. Often useful outside of Underscore.\nfunction $6298ea013f2a6548$export$2e2bcd8739ae039() {}\n\n\n\n\n\n\nfunction $4d54adfad87340d7$export$2e2bcd8739ae039(obj) {\n    if (obj == null) return 0, $6298ea013f2a6548$export$2e2bcd8739ae039;\n    return function(path) {\n        return (0, $35b906998fb25b49$export$2e2bcd8739ae039)(obj, path);\n    };\n}\n\n\n\n\nfunction $6d5652f4017904cb$export$2e2bcd8739ae039(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = (0, $5e93597635dad7e9$export$2e2bcd8739ae039)(iteratee, context, 1);\n    for(var i = 0; i < n; i++)accum[i] = iteratee(i);\n    return accum;\n}\n\n\n// Return a random integer between `min` and `max` (inclusive).\nfunction $52180227c308dc3a$export$2e2bcd8739ae039(min, max) {\n    if (max == null) {\n        max = min;\n        min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n}\n\n\n// A (possibly faster) way to get the current timestamp as an integer.\nvar $514f12979ade38e2$export$2e2bcd8739ae039 = Date.now || function() {\n    return new Date().getTime();\n};\n\n\n\nfunction $d536bcee474c3efd$export$2e2bcd8739ae039(map) {\n    var escaper = function(match) {\n        return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped.\n    var source = \"(?:\" + (0, $393c4048a48382d0$export$2e2bcd8739ae039)(map).join(\"|\") + \")\";\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, \"g\");\n    return function(string) {\n        string = string == null ? \"\" : \"\" + string;\n        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n}\n\n\n// Internal list of HTML entities for escaping.\nvar $46775c17862ed5bf$export$2e2bcd8739ae039 = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#x27;\",\n    \"`\": \"&#x60;\"\n};\n\n\nvar // Function for escaping strings to HTML interpolation.\n$e1fecafa4702f5c9$export$2e2bcd8739ae039 = (0, $d536bcee474c3efd$export$2e2bcd8739ae039)((0, $46775c17862ed5bf$export$2e2bcd8739ae039));\n\n\n\n\n\nvar // Internal list of HTML entities for unescaping.\n$beeb1daddb6a6836$export$2e2bcd8739ae039 = (0, $08c60a2e0034368d$export$2e2bcd8739ae039)((0, $46775c17862ed5bf$export$2e2bcd8739ae039));\n\n\nvar // Function for unescaping strings from HTML interpolation.\n$6990c4f008b54c69$export$2e2bcd8739ae039 = (0, $d536bcee474c3efd$export$2e2bcd8739ae039)((0, $beeb1daddb6a6836$export$2e2bcd8739ae039));\n\n\n\nvar // By default, Underscore uses ERB-style template delimiters. Change the\n// following template settings to use alternative delimiters.\n$f04faa0d52429a87$export$2e2bcd8739ae039 = (0, $ca35147c638b60d3$export$2e2bcd8739ae039).templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n};\n\n\n\n\n\n// When customizing `_.templateSettings`, if you don't want to define an\n// interpolation, evaluation or escaping regex, we need one that is\n// guaranteed not to match.\nvar $25a5937b4f261340$var$noMatch = /(.)^/;\n// Certain characters need to be escaped so that they can be put into a\n// string literal.\nvar $25a5937b4f261340$var$escapes = {\n    \"'\": \"'\",\n    \"\\\\\": \"\\\\\",\n    \"\\r\": \"r\",\n    \"\\n\": \"n\",\n    \"\\u2028\": \"u2028\",\n    \"\\u2029\": \"u2029\"\n};\nvar $25a5937b4f261340$var$escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\nfunction $25a5937b4f261340$var$escapeChar(match) {\n    return \"\\\\\" + $25a5937b4f261340$var$escapes[match];\n}\n// In order to prevent third-party code injection through\n// `_.templateSettings.variable`, we test it against the following regular\n// expression. It is intentionally a bit more liberal than just matching valid\n// identifiers, but still prevents possible loopholes through defaults or\n// destructuring assignment.\nvar $25a5937b4f261340$var$bareIdentifier = /^\\s*(\\w|\\$)+\\s*$/;\nfunction $25a5937b4f261340$export$2e2bcd8739ae039(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = (0, $c9bd555669bcdc82$export$2e2bcd8739ae039)({}, settings, (0, $ca35147c638b60d3$export$2e2bcd8739ae039).templateSettings);\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n        (settings.escape || $25a5937b4f261340$var$noMatch).source,\n        (settings.interpolate || $25a5937b4f261340$var$noMatch).source,\n        (settings.evaluate || $25a5937b4f261340$var$noMatch).source\n    ].join(\"|\") + \"|$\", \"g\");\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n        source += text.slice(index, offset).replace($25a5937b4f261340$var$escapeRegExp, $25a5937b4f261340$var$escapeChar);\n        index = offset + match.length;\n        if (escape) source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n        else if (interpolate) source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n        else if (evaluate) source += \"';\\n\" + evaluate + \"\\n__p+='\";\n        // Adobe VMs need the match returned to produce the correct offset.\n        return match;\n    });\n    source += \"';\\n\";\n    var argument = settings.variable;\n    if (argument) {\n        // Insure against third-party code injection. (CVE-2021-23358)\n        if (!$25a5937b4f261340$var$bareIdentifier.test(argument)) throw new Error(\"variable is not a bare identifier: \" + argument);\n    } else {\n        // If a variable is not specified, place data values in local scope.\n        source = \"with(obj||{}){\\n\" + source + \"}\\n\";\n        argument = \"obj\";\n    }\n    source = \"var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\\n\" + source + \"return __p;\\n\";\n    var render;\n    try {\n        render = new Function(argument, \"_\", source);\n    } catch (e) {\n        e.source = source;\n        throw e;\n    }\n    var template = function(data) {\n        return render.call(this, data, (0, $ca35147c638b60d3$export$2e2bcd8739ae039));\n    };\n    // Provide the compiled source as a convenience for precompilation.\n    template.source = \"function(\" + argument + \"){\\n\" + source + \"}\";\n    return template;\n}\n\n\n\n\nfunction $4b977a61e7f77743$export$2e2bcd8739ae039(obj, path, fallback) {\n    path = (0, $8cb949c6979e4725$export$2e2bcd8739ae039)(path);\n    var length = path.length;\n    if (!length) return (0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(fallback) ? fallback.call(obj) : fallback;\n    for(var i = 0; i < length; i++){\n        var prop = obj == null ? void 0 : obj[path[i]];\n        if (prop === void 0) {\n            prop = fallback;\n            i = length; // Ensure we don't continue iterating.\n        }\n        obj = (0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(prop) ? prop.call(obj) : prop;\n    }\n    return obj;\n}\n\n\n// Generate a unique integer id (unique within the entire client session).\n// Useful for temporary DOM ids.\nvar $c5e0ec1dad369d84$var$idCounter = 0;\nfunction $c5e0ec1dad369d84$export$2e2bcd8739ae039(prefix) {\n    var id = ++$c5e0ec1dad369d84$var$idCounter + \"\";\n    return prefix ? prefix + id : id;\n}\n\n\n\nfunction $75db5d04108636db$export$2e2bcd8739ae039(obj) {\n    var instance = (0, $ca35147c638b60d3$export$2e2bcd8739ae039)(obj);\n    instance._chain = true;\n    return instance;\n}\n\n\n\n\n\n\nfunction $a9123220e97b4e51$export$2e2bcd8739ae039(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = (0, $a5436f5acc9af5e1$export$2e2bcd8739ae039)(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if ((0, $7455759b7c96d90b$export$2e2bcd8739ae039)(result)) return result;\n    return self;\n}\n\n\n\n// Partially apply a function by creating a version that has had some of its\n// arguments pre-filled, without changing its dynamic `this` context. `_` acts\n// as a placeholder by default, allowing any combination of arguments to be\n// pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\nvar $c065e766094e50a6$var$partial = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)(function(func, boundArgs) {\n    var placeholder = $c065e766094e50a6$var$partial.placeholder;\n    var bound = function() {\n        var position = 0, length = boundArgs.length;\n        var args = Array(length);\n        for(var i = 0; i < length; i++)args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n        while(position < arguments.length)args.push(arguments[position++]);\n        return (0, $a9123220e97b4e51$export$2e2bcd8739ae039)(func, bound, this, this, args);\n    };\n    return bound;\n});\n$c065e766094e50a6$var$partial.placeholder = (0, $ca35147c638b60d3$export$2e2bcd8739ae039);\nvar $c065e766094e50a6$export$2e2bcd8739ae039 = $c065e766094e50a6$var$partial;\n\n\n\n\n\nvar // Create a function bound to a given object (assigning `this`, and arguments,\n// optionally).\n$5cb6e6a08089b86e$export$2e2bcd8739ae039 = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)(function(func, context, args) {\n    if (!(0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(func)) throw new TypeError(\"Bind must be called on a function\");\n    var bound = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)(function(callArgs) {\n        return (0, $a9123220e97b4e51$export$2e2bcd8739ae039)(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n});\n\n\n\n\n\n\nvar // Internal helper for collection methods to determine whether a collection\n// should be iterated as an array or as an object.\n// Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n// Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n$1948354935d18a42$export$2e2bcd8739ae039 = (0, $0728a9c2eef2ff28$export$2e2bcd8739ae039)((0, $69a46ada1dc9e118$export$2e2bcd8739ae039));\n\n\n\n\nfunction $5b57026276184be5$export$2e2bcd8739ae039(input, depth, strict, output) {\n    output = output || [];\n    if (!depth && depth !== 0) depth = Infinity;\n    else if (depth <= 0) return output.concat(input);\n    var idx = output.length;\n    for(var i = 0, length = (0, $69a46ada1dc9e118$export$2e2bcd8739ae039)(input); i < length; i++){\n        var value = input[i];\n        if ((0, $1948354935d18a42$export$2e2bcd8739ae039)(value) && ((0, $8d2cabfa0672ccfd$export$2e2bcd8739ae039)(value) || (0, $1a47e7a4d17a4e15$export$2e2bcd8739ae039)(value))) {\n            // Flatten current level of array or arguments object.\n            if (depth > 1) {\n                $5b57026276184be5$export$2e2bcd8739ae039(value, depth - 1, strict, output);\n                idx = output.length;\n            } else {\n                var j = 0, len = value.length;\n                while(j < len)output[idx++] = value[j++];\n            }\n        } else if (!strict) output[idx++] = value;\n    }\n    return output;\n}\n\n\n\nvar // Bind a number of an object's methods to that object. Remaining arguments\n// are the method names to be bound. Useful for ensuring that all callbacks\n// defined on an object belong to it.\n$70d424dbf8841be5$export$2e2bcd8739ae039 = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)(function(obj, keys) {\n    keys = (0, $5b57026276184be5$export$2e2bcd8739ae039)(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error(\"bindAll must be passed function names\");\n    while(index--){\n        var key = keys[index];\n        obj[key] = (0, $5cb6e6a08089b86e$export$2e2bcd8739ae039)(obj[key], obj);\n    }\n    return obj;\n});\n\n\n\nfunction $d928e5e0a79cae34$export$2e2bcd8739ae039(func, hasher) {\n    var memoize = function(key) {\n        var cache = memoize.cache;\n        var address = \"\" + (hasher ? hasher.apply(this, arguments) : key);\n        if (!(0, $c5c89c4e60c806a4$export$2e2bcd8739ae039)(cache, address)) cache[address] = func.apply(this, arguments);\n        return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n}\n\n\n\nvar // Delays a function for the given number of milliseconds, and then calls\n// it with the arguments supplied.\n$c9bc583a8b562914$export$2e2bcd8739ae039 = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)(function(func, wait, args) {\n    return setTimeout(function() {\n        return func.apply(null, args);\n    }, wait);\n});\n\n\n\n\n\nvar // Defers a function, scheduling it to run after the current call stack has\n// cleared.\n$a7402757b4638aeb$export$2e2bcd8739ae039 = (0, $c065e766094e50a6$export$2e2bcd8739ae039)((0, $c9bc583a8b562914$export$2e2bcd8739ae039), (0, $ca35147c638b60d3$export$2e2bcd8739ae039), 1);\n\n\n\nfunction $c7185e650a7e10b2$export$2e2bcd8739ae039(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n        previous = options.leading === false ? 0 : (0, $514f12979ade38e2$export$2e2bcd8739ae039)();\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n    };\n    var throttled = function() {\n        var _now = (0, $514f12979ade38e2$export$2e2bcd8739ae039)();\n        if (!previous && options.leading === false) previous = _now;\n        var remaining = wait - (_now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = _now;\n            result = func.apply(context, args);\n            if (!timeout) context = args = null;\n        } else if (!timeout && options.trailing !== false) timeout = setTimeout(later, remaining);\n        return result;\n    };\n    throttled.cancel = function() {\n        clearTimeout(timeout);\n        previous = 0;\n        timeout = context = args = null;\n    };\n    return throttled;\n}\n\n\n\n\nfunction $4c54d472742b7ac1$export$2e2bcd8739ae039(func, wait, immediate) {\n    var timeout, previous, args, result, context;\n    var later = function() {\n        var passed = (0, $514f12979ade38e2$export$2e2bcd8739ae039)() - previous;\n        if (wait > passed) timeout = setTimeout(later, wait - passed);\n        else {\n            timeout = null;\n            if (!immediate) result = func.apply(context, args);\n            // This check is needed because `func` can recursively invoke `debounced`.\n            if (!timeout) args = context = null;\n        }\n    };\n    var debounced = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)(function(_args) {\n        context = this;\n        args = _args;\n        previous = (0, $514f12979ade38e2$export$2e2bcd8739ae039)();\n        if (!timeout) {\n            timeout = setTimeout(later, wait);\n            if (immediate) result = func.apply(context, args);\n        }\n        return result;\n    });\n    debounced.cancel = function() {\n        clearTimeout(timeout);\n        timeout = args = context = null;\n    };\n    return debounced;\n}\n\n\n\nfunction $207269d620e1a8c3$export$2e2bcd8739ae039(func, wrapper) {\n    return (0, $c065e766094e50a6$export$2e2bcd8739ae039)(wrapper, func);\n}\n\n\n// Returns a negated version of the passed-in predicate.\nfunction $bbb73bfa41e59211$export$2e2bcd8739ae039(predicate) {\n    return function() {\n        return !predicate.apply(this, arguments);\n    };\n}\n\n\n// Returns a function that is the composition of a list of functions, each\n// consuming the return value of the function that follows.\nfunction $1973ebafc5dad97b$export$2e2bcd8739ae039() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n        var i = start;\n        var result = args[start].apply(this, arguments);\n        while(i--)result = args[i].call(this, result);\n        return result;\n    };\n}\n\n\n// Returns a function that will only be executed on and after the Nth call.\nfunction $d7147efecbf07fcf$export$2e2bcd8739ae039(times, func) {\n    return function() {\n        if (--times < 1) return func.apply(this, arguments);\n    };\n}\n\n\n// Returns a function that will only be executed up to (but not including) the\n// Nth call.\nfunction $1eaafab21993b862$export$2e2bcd8739ae039(times, func) {\n    var memo;\n    return function() {\n        if (--times > 0) memo = func.apply(this, arguments);\n        if (times <= 1) func = null;\n        return memo;\n    };\n}\n\n\n\n\nvar // Returns a function that will be executed at most one time, no matter how\n// often you call it. Useful for lazy initialization.\n$03a6e7765eaccbd3$export$2e2bcd8739ae039 = (0, $c065e766094e50a6$export$2e2bcd8739ae039)((0, $1eaafab21993b862$export$2e2bcd8739ae039), 2);\n\n\n\n\nfunction $df8a1c5d5d219215$export$2e2bcd8739ae039(obj, predicate, context) {\n    predicate = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(predicate, context);\n    var _keys = (0, $393c4048a48382d0$export$2e2bcd8739ae039)(obj), key;\n    for(var i = 0, length = _keys.length; i < length; i++){\n        key = _keys[i];\n        if (predicate(obj[key], key, obj)) return key;\n    }\n}\n\n\n\n\nfunction $5f541b1530382cad$export$2e2bcd8739ae039(dir) {\n    return function(array, predicate, context) {\n        predicate = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(predicate, context);\n        var length = (0, $69a46ada1dc9e118$export$2e2bcd8739ae039)(array);\n        var index = dir > 0 ? 0 : length - 1;\n        for(; index >= 0 && index < length; index += dir){\n            if (predicate(array[index], index, array)) return index;\n        }\n        return -1;\n    };\n}\n\n\nvar // Returns the first index on an array-like that passes a truth test.\n$69938fd0307412e5$export$2e2bcd8739ae039 = (0, $5f541b1530382cad$export$2e2bcd8739ae039)(1);\n\n\n\nvar // Returns the last index on an array-like that passes a truth test.\n$faa6db362c31848b$export$2e2bcd8739ae039 = (0, $5f541b1530382cad$export$2e2bcd8739ae039)(-1);\n\n\n\n\nfunction $4d53740a32253d87$export$2e2bcd8739ae039(array, obj, iteratee, context) {\n    iteratee = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = (0, $69a46ada1dc9e118$export$2e2bcd8739ae039)(array);\n    while(low < high){\n        var mid = Math.floor((low + high) / 2);\n        if (iteratee(array[mid]) < value) low = mid + 1;\n        else high = mid;\n    }\n    return low;\n}\n\n\n\n\n\n\n\nfunction $bd359d1f70bf0a9c$export$2e2bcd8739ae039(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n        var i = 0, length = (0, $69a46ada1dc9e118$export$2e2bcd8739ae039)(array);\n        if (typeof idx == \"number\") {\n            if (dir > 0) i = idx >= 0 ? idx : Math.max(idx + length, i);\n            else length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        } else if (sortedIndex && idx && length) {\n            idx = sortedIndex(array, item);\n            return array[idx] === item ? idx : -1;\n        }\n        if (item !== item) {\n            idx = predicateFind((0, $05d7c2cba8bc6781$export$58adb3bec8346d0f).call(array, i, length), (0, $70e931fec09cede3$export$2e2bcd8739ae039));\n            return idx >= 0 ? idx + i : -1;\n        }\n        for(idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir){\n            if (array[idx] === item) return idx;\n        }\n        return -1;\n    };\n}\n\n\nvar // Return the position of the first occurrence of an item in an array,\n// or -1 if the item is not included in the array.\n// If the array is large and already in sort order, pass `true`\n// for **isSorted** to use binary search.\n$aac4ec8062964015$export$2e2bcd8739ae039 = (0, $bd359d1f70bf0a9c$export$2e2bcd8739ae039)(1, (0, $69938fd0307412e5$export$2e2bcd8739ae039), (0, $4d53740a32253d87$export$2e2bcd8739ae039));\n\n\n\n\nvar // Return the position of the last occurrence of an item in an array,\n// or -1 if the item is not included in the array.\n$d5e8ed62ed31a7e1$export$2e2bcd8739ae039 = (0, $bd359d1f70bf0a9c$export$2e2bcd8739ae039)(-1, (0, $faa6db362c31848b$export$2e2bcd8739ae039));\n\n\n\n\n\nfunction $b7145ac83befc757$export$2e2bcd8739ae039(obj, predicate, context) {\n    var keyFinder = (0, $1948354935d18a42$export$2e2bcd8739ae039)(obj) ? (0, $69938fd0307412e5$export$2e2bcd8739ae039) : (0, $df8a1c5d5d219215$export$2e2bcd8739ae039);\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n}\n\n\n\n\nfunction $319371ffc5ef1edc$export$2e2bcd8739ae039(obj, attrs) {\n    return (0, $b7145ac83befc757$export$2e2bcd8739ae039)(obj, (0, $4aa1d46d5f0feb03$export$2e2bcd8739ae039)(attrs));\n}\n\n\n\n\n\nfunction $20d45cff29fa3729$export$2e2bcd8739ae039(obj, iteratee, context) {\n    iteratee = (0, $5e93597635dad7e9$export$2e2bcd8739ae039)(iteratee, context);\n    var i, length;\n    if ((0, $1948354935d18a42$export$2e2bcd8739ae039)(obj)) for(i = 0, length = obj.length; i < length; i++)iteratee(obj[i], i, obj);\n    else {\n        var _keys = (0, $393c4048a48382d0$export$2e2bcd8739ae039)(obj);\n        for(i = 0, length = _keys.length; i < length; i++)iteratee(obj[_keys[i]], _keys[i], obj);\n    }\n    return obj;\n}\n\n\n\n\n\nfunction $3dd5ec26060f1fde$export$2e2bcd8739ae039(obj, iteratee, context) {\n    iteratee = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(iteratee, context);\n    var _keys = !(0, $1948354935d18a42$export$2e2bcd8739ae039)(obj) && (0, $393c4048a48382d0$export$2e2bcd8739ae039)(obj), length = (_keys || obj).length, results = Array(length);\n    for(var index = 0; index < length; index++){\n        var currentKey = _keys ? _keys[index] : index;\n        results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n}\n\n\n\n\n\nfunction $f05b1c341bd5ef7d$export$2e2bcd8739ae039(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function(obj, iteratee, memo, initial) {\n        var _keys = !(0, $1948354935d18a42$export$2e2bcd8739ae039)(obj) && (0, $393c4048a48382d0$export$2e2bcd8739ae039)(obj), length = (_keys || obj).length, index = dir > 0 ? 0 : length - 1;\n        if (!initial) {\n            memo = obj[_keys ? _keys[index] : index];\n            index += dir;\n        }\n        for(; index >= 0 && index < length; index += dir){\n            var currentKey = _keys ? _keys[index] : index;\n            memo = iteratee(memo, obj[currentKey], currentKey, obj);\n        }\n        return memo;\n    };\n    return function(obj, iteratee, memo, context) {\n        var initial = arguments.length >= 3;\n        return reducer(obj, (0, $5e93597635dad7e9$export$2e2bcd8739ae039)(iteratee, context, 4), memo, initial);\n    };\n}\n\n\nvar // **Reduce** builds up a single result from a list of values, aka `inject`,\n// or `foldl`.\n$45cfb3c69625f3cd$export$2e2bcd8739ae039 = (0, $f05b1c341bd5ef7d$export$2e2bcd8739ae039)(1);\n\n\n\nvar // The right-associative version of reduce, also known as `foldr`.\n$23a10db6f4c742ff$export$2e2bcd8739ae039 = (0, $f05b1c341bd5ef7d$export$2e2bcd8739ae039)(-1);\n\n\n\n\nfunction $9d6db8d7982fa7eb$export$2e2bcd8739ae039(obj, predicate, context) {\n    var results = [];\n    predicate = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(predicate, context);\n    (0, $20d45cff29fa3729$export$2e2bcd8739ae039)(obj, function(value, index, list) {\n        if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n}\n\n\n\n\n\nfunction $8586e6509f228fe9$export$2e2bcd8739ae039(obj, predicate, context) {\n    return (0, $9d6db8d7982fa7eb$export$2e2bcd8739ae039)(obj, (0, $bbb73bfa41e59211$export$2e2bcd8739ae039)((0, $1782c4b2e4601278$export$2e2bcd8739ae039)(predicate)), context);\n}\n\n\n\n\n\nfunction $277debd07a5ce1de$export$2e2bcd8739ae039(obj, predicate, context) {\n    predicate = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(predicate, context);\n    var _keys = !(0, $1948354935d18a42$export$2e2bcd8739ae039)(obj) && (0, $393c4048a48382d0$export$2e2bcd8739ae039)(obj), length = (_keys || obj).length;\n    for(var index = 0; index < length; index++){\n        var currentKey = _keys ? _keys[index] : index;\n        if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n}\n\n\n\n\n\nfunction $df2a06eace2e3f42$export$2e2bcd8739ae039(obj, predicate, context) {\n    predicate = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(predicate, context);\n    var _keys = !(0, $1948354935d18a42$export$2e2bcd8739ae039)(obj) && (0, $393c4048a48382d0$export$2e2bcd8739ae039)(obj), length = (_keys || obj).length;\n    for(var index = 0; index < length; index++){\n        var currentKey = _keys ? _keys[index] : index;\n        if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n}\n\n\n\n\n\nfunction $c77e4c660447e150$export$2e2bcd8739ae039(obj, item, fromIndex, guard) {\n    if (!(0, $1948354935d18a42$export$2e2bcd8739ae039)(obj)) obj = (0, $99599505685447d9$export$2e2bcd8739ae039)(obj);\n    if (typeof fromIndex != \"number\" || guard) fromIndex = 0;\n    return (0, $aac4ec8062964015$export$2e2bcd8739ae039)(obj, item, fromIndex) >= 0;\n}\n\n\n\n\n\n\n\nvar // Invoke a method (with arguments) on every item in a collection.\n$3a188d4ecce54238$export$2e2bcd8739ae039 = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)(function(obj, path, args) {\n    var contextPath, func;\n    if ((0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(path)) func = path;\n    else {\n        path = (0, $8cb949c6979e4725$export$2e2bcd8739ae039)(path);\n        contextPath = path.slice(0, -1);\n        path = path[path.length - 1];\n    }\n    return (0, $3dd5ec26060f1fde$export$2e2bcd8739ae039)(obj, function(context) {\n        var method = func;\n        if (!method) {\n            if (contextPath && contextPath.length) context = (0, $be1eab882e127005$export$2e2bcd8739ae039)(context, contextPath);\n            if (context == null) return void 0;\n            method = context[path];\n        }\n        return method == null ? method : method.apply(context, args);\n    });\n});\n\n\n\n\nfunction $456be431d728cc75$export$2e2bcd8739ae039(obj, key) {\n    return (0, $3dd5ec26060f1fde$export$2e2bcd8739ae039)(obj, (0, $e1c10a0c7ed7aee8$export$2e2bcd8739ae039)(key));\n}\n\n\n\n\nfunction $977d2dbf5fdf01d2$export$2e2bcd8739ae039(obj, attrs) {\n    return (0, $9d6db8d7982fa7eb$export$2e2bcd8739ae039)(obj, (0, $4aa1d46d5f0feb03$export$2e2bcd8739ae039)(attrs));\n}\n\n\n\n\n\n\nfunction $be7e492c47cb54c5$export$2e2bcd8739ae039(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity, value, computed;\n    if (iteratee == null || typeof iteratee == \"number\" && typeof obj[0] != \"object\" && obj != null) {\n        obj = (0, $1948354935d18a42$export$2e2bcd8739ae039)(obj) ? obj : (0, $99599505685447d9$export$2e2bcd8739ae039)(obj);\n        for(var i = 0, length = obj.length; i < length; i++){\n            value = obj[i];\n            if (value != null && value > result) result = value;\n        }\n    } else {\n        iteratee = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(iteratee, context);\n        (0, $20d45cff29fa3729$export$2e2bcd8739ae039)(obj, function(v, index, list) {\n            computed = iteratee(v, index, list);\n            if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n                result = v;\n                lastComputed = computed;\n            }\n        });\n    }\n    return result;\n}\n\n\n\n\n\n\nfunction $43edba651a322868$export$2e2bcd8739ae039(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity, value, computed;\n    if (iteratee == null || typeof iteratee == \"number\" && typeof obj[0] != \"object\" && obj != null) {\n        obj = (0, $1948354935d18a42$export$2e2bcd8739ae039)(obj) ? obj : (0, $99599505685447d9$export$2e2bcd8739ae039)(obj);\n        for(var i = 0, length = obj.length; i < length; i++){\n            value = obj[i];\n            if (value != null && value < result) result = value;\n        }\n    } else {\n        iteratee = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(iteratee, context);\n        (0, $20d45cff29fa3729$export$2e2bcd8739ae039)(obj, function(v, index, list) {\n            computed = iteratee(v, index, list);\n            if (computed < lastComputed || computed === Infinity && result === Infinity) {\n                result = v;\n                lastComputed = computed;\n            }\n        });\n    }\n    return result;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Safely create a real, live array from anything iterable.\nvar $201d9b466f2498c1$var$reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\nfunction $201d9b466f2498c1$export$2e2bcd8739ae039(obj) {\n    if (!obj) return [];\n    if ((0, $8d2cabfa0672ccfd$export$2e2bcd8739ae039)(obj)) return (0, $05d7c2cba8bc6781$export$58adb3bec8346d0f).call(obj);\n    if ((0, $5e7ffcd018d5a045$export$2e2bcd8739ae039)(obj)) // Keep surrogate pair characters together.\n    return obj.match($201d9b466f2498c1$var$reStrSymbol);\n    if ((0, $1948354935d18a42$export$2e2bcd8739ae039)(obj)) return (0, $3dd5ec26060f1fde$export$2e2bcd8739ae039)(obj, (0, $5153dcf3ca5fcb44$export$2e2bcd8739ae039));\n    return (0, $99599505685447d9$export$2e2bcd8739ae039)(obj);\n}\n\n\nfunction $6022571411429450$export$2e2bcd8739ae039(obj, n, guard) {\n    if (n == null || guard) {\n        if (!(0, $1948354935d18a42$export$2e2bcd8739ae039)(obj)) obj = (0, $99599505685447d9$export$2e2bcd8739ae039)(obj);\n        return obj[(0, $52180227c308dc3a$export$2e2bcd8739ae039)(obj.length - 1)];\n    }\n    var sample = (0, $201d9b466f2498c1$export$2e2bcd8739ae039)(obj);\n    var length = (0, $69a46ada1dc9e118$export$2e2bcd8739ae039)(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n    for(var index = 0; index < n; index++){\n        var rand = (0, $52180227c308dc3a$export$2e2bcd8739ae039)(index, last);\n        var temp = sample[index];\n        sample[index] = sample[rand];\n        sample[rand] = temp;\n    }\n    return sample.slice(0, n);\n}\n\n\nfunction $df695bddcd73d70c$export$2e2bcd8739ae039(obj) {\n    return (0, $6022571411429450$export$2e2bcd8739ae039)(obj, Infinity);\n}\n\n\n\n\n\n\nfunction $91d03f0e74bb36d3$export$2e2bcd8739ae039(obj, iteratee, context) {\n    var index = 0;\n    iteratee = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(iteratee, context);\n    return (0, $456be431d728cc75$export$2e2bcd8739ae039)((0, $3dd5ec26060f1fde$export$2e2bcd8739ae039)(obj, function(value, key, list) {\n        return {\n            value: value,\n            index: index++,\n            criteria: iteratee(value, key, list)\n        };\n    }).sort(function(left, right) {\n        var a = left.criteria;\n        var b = right.criteria;\n        if (a !== b) {\n            if (a > b || a === void 0) return 1;\n            if (a < b || b === void 0) return -1;\n        }\n        return left.index - right.index;\n    }), \"value\");\n}\n\n\n\n\nfunction $e1e3c531676dfb56$export$2e2bcd8739ae039(behavior, partition) {\n    return function(obj, iteratee, context) {\n        var result = partition ? [\n            [],\n            []\n        ] : {};\n        iteratee = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(iteratee, context);\n        (0, $20d45cff29fa3729$export$2e2bcd8739ae039)(obj, function(value, index) {\n            var key = iteratee(value, index, obj);\n            behavior(result, value, key);\n        });\n        return result;\n    };\n}\n\n\n\nvar // Groups the object's values by a criterion. Pass either a string attribute\n// to group by, or a function that returns the criterion.\n$87e5756d46fce283$export$2e2bcd8739ae039 = (0, $e1e3c531676dfb56$export$2e2bcd8739ae039)(function(result, value, key) {\n    if ((0, $c5c89c4e60c806a4$export$2e2bcd8739ae039)(result, key)) result[key].push(value);\n    else result[key] = [\n        value\n    ];\n});\n\n\n\nvar // Indexes the object's values by a criterion, similar to `_.groupBy`, but for\n// when you know that your index values will be unique.\n$864205024f807f86$export$2e2bcd8739ae039 = (0, $e1e3c531676dfb56$export$2e2bcd8739ae039)(function(result, value, key) {\n    result[key] = value;\n});\n\n\n\n\nvar // Counts instances of an object that group by a certain criterion. Pass\n// either a string attribute to count by, or a function that returns the\n// criterion.\n$fb2c5d9a91985e58$export$2e2bcd8739ae039 = (0, $e1e3c531676dfb56$export$2e2bcd8739ae039)(function(result, value, key) {\n    if ((0, $c5c89c4e60c806a4$export$2e2bcd8739ae039)(result, key)) result[key]++;\n    else result[key] = 1;\n});\n\n\n\nvar // Split a collection into two arrays: one whose elements all pass the given\n// truth test, and one whose elements all do not pass the truth test.\n$cc7b953126689faf$export$2e2bcd8739ae039 = (0, $e1e3c531676dfb56$export$2e2bcd8739ae039)(function(result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n}, true);\n\n\n\n\n\nfunction $b3d63bc1721d3160$export$2e2bcd8739ae039(obj) {\n    if (obj == null) return 0;\n    return (0, $1948354935d18a42$export$2e2bcd8739ae039)(obj) ? obj.length : (0, $393c4048a48382d0$export$2e2bcd8739ae039)(obj).length;\n}\n\n\n\n\n\n\n// Internal `_.pick` helper function to determine whether `key` is an enumerable\n// property name of `obj`.\nfunction $d3cc3207fc44117a$export$2e2bcd8739ae039(value, key, obj) {\n    return key in obj;\n}\n\n\n\nvar // Return a copy of the object only containing the allowed properties.\n$237ea5a47c6bb364$export$2e2bcd8739ae039 = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)(function(obj, keys) {\n    var result = {}, iteratee = keys[0];\n    if (obj == null) return result;\n    if ((0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(iteratee)) {\n        if (keys.length > 1) iteratee = (0, $5e93597635dad7e9$export$2e2bcd8739ae039)(iteratee, keys[1]);\n        keys = (0, $5de0de2b18b9ad30$export$2e2bcd8739ae039)(obj);\n    } else {\n        iteratee = (0, $d3cc3207fc44117a$export$2e2bcd8739ae039);\n        keys = (0, $5b57026276184be5$export$2e2bcd8739ae039)(keys, false, false);\n        obj = Object(obj);\n    }\n    for(var i = 0, length = keys.length; i < length; i++){\n        var key = keys[i];\n        var value = obj[key];\n        if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n});\n\n\n\n\n\n\n\n\n\nvar // Return a copy of the object without the disallowed properties.\n$01d9c165c680005e$export$2e2bcd8739ae039 = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)(function(obj, keys) {\n    var iteratee = keys[0], context;\n    if ((0, $eebfce9fce6919bf$export$2e2bcd8739ae039)(iteratee)) {\n        iteratee = (0, $bbb73bfa41e59211$export$2e2bcd8739ae039)(iteratee);\n        if (keys.length > 1) context = keys[1];\n    } else {\n        keys = (0, $3dd5ec26060f1fde$export$2e2bcd8739ae039)((0, $5b57026276184be5$export$2e2bcd8739ae039)(keys, false, false), String);\n        iteratee = function(value, key) {\n            return !(0, $c77e4c660447e150$export$2e2bcd8739ae039)(keys, key);\n        };\n    }\n    return (0, $237ea5a47c6bb364$export$2e2bcd8739ae039)(obj, iteratee, context);\n});\n\n\n\nfunction $eae4e320f004c3ab$export$2e2bcd8739ae039(array, n, guard) {\n    return (0, $05d7c2cba8bc6781$export$58adb3bec8346d0f).call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n}\n\n\nfunction $e21c2132f572d7c5$export$2e2bcd8739ae039(array, n, guard) {\n    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return (0, $eae4e320f004c3ab$export$2e2bcd8739ae039)(array, array.length - n);\n}\n\n\n\n\nfunction $3b9f4bd329c25176$export$2e2bcd8739ae039(array, n, guard) {\n    return (0, $05d7c2cba8bc6781$export$58adb3bec8346d0f).call(array, n == null || guard ? 1 : n);\n}\n\n\nfunction $0d83d7e9bedb334c$export$2e2bcd8739ae039(array, n, guard) {\n    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return (0, $3b9f4bd329c25176$export$2e2bcd8739ae039)(array, Math.max(0, array.length - n));\n}\n\n\n\n\nfunction $04518f4576db782f$export$2e2bcd8739ae039(array) {\n    return (0, $9d6db8d7982fa7eb$export$2e2bcd8739ae039)(array, Boolean);\n}\n\n\n\nfunction $6570ec059bd85af0$export$2e2bcd8739ae039(array, depth) {\n    return (0, $5b57026276184be5$export$2e2bcd8739ae039)(array, depth, false);\n}\n\n\n\n\n\n\n\nvar // Take the difference between one array and a number of other arrays.\n// Only the elements present in just the first array will remain.\n$a5a1d2b728d9aa28$export$2e2bcd8739ae039 = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)(function(array, rest) {\n    rest = (0, $5b57026276184be5$export$2e2bcd8739ae039)(rest, true, true);\n    return (0, $9d6db8d7982fa7eb$export$2e2bcd8739ae039)(array, function(value) {\n        return !(0, $c77e4c660447e150$export$2e2bcd8739ae039)(rest, value);\n    });\n});\n\n\nvar // Return a version of the array that does not contain the specified value(s).\n$aeb4f858c3a25379$export$2e2bcd8739ae039 = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)(function(array, otherArrays) {\n    return (0, $a5a1d2b728d9aa28$export$2e2bcd8739ae039)(array, otherArrays);\n});\n\n\n\n\n\n\nfunction $6aabf5f8e75d3766$export$2e2bcd8739ae039(array, isSorted, iteratee, context) {\n    if (!(0, $66a39a9dcb84bae8$export$2e2bcd8739ae039)(isSorted)) {\n        context = iteratee;\n        iteratee = isSorted;\n        isSorted = false;\n    }\n    if (iteratee != null) iteratee = (0, $1782c4b2e4601278$export$2e2bcd8739ae039)(iteratee, context);\n    var result = [];\n    var seen = [];\n    for(var i = 0, length = (0, $69a46ada1dc9e118$export$2e2bcd8739ae039)(array); i < length; i++){\n        var value = array[i], computed = iteratee ? iteratee(value, i, array) : value;\n        if (isSorted && !iteratee) {\n            if (!i || seen !== computed) result.push(value);\n            seen = computed;\n        } else if (iteratee) {\n            if (!(0, $c77e4c660447e150$export$2e2bcd8739ae039)(seen, computed)) {\n                seen.push(computed);\n                result.push(value);\n            }\n        } else if (!(0, $c77e4c660447e150$export$2e2bcd8739ae039)(result, value)) result.push(value);\n    }\n    return result;\n}\n\n\n\n\n\nvar // Produce an array that contains the union: each distinct element from all of\n// the passed-in arrays.\n$e0c98ccec3b6432a$export$2e2bcd8739ae039 = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)(function(arrays) {\n    return (0, $6aabf5f8e75d3766$export$2e2bcd8739ae039)((0, $5b57026276184be5$export$2e2bcd8739ae039)(arrays, true, true));\n});\n\n\n\n\nfunction $936b3793e16cdbf4$export$2e2bcd8739ae039(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for(var i = 0, length = (0, $69a46ada1dc9e118$export$2e2bcd8739ae039)(array); i < length; i++){\n        var item = array[i];\n        if ((0, $c77e4c660447e150$export$2e2bcd8739ae039)(result, item)) continue;\n        var j;\n        for(j = 1; j < argsLength; j++){\n            if (!(0, $c77e4c660447e150$export$2e2bcd8739ae039)(arguments[j], item)) break;\n        }\n        if (j === argsLength) result.push(item);\n    }\n    return result;\n}\n\n\n\n\n\n\nfunction $f1b2e6c56c644522$export$2e2bcd8739ae039(array) {\n    var length = array && (0, $be7e492c47cb54c5$export$2e2bcd8739ae039)(array, (0, $69a46ada1dc9e118$export$2e2bcd8739ae039)).length || 0;\n    var result = Array(length);\n    for(var index = 0; index < length; index++)result[index] = (0, $456be431d728cc75$export$2e2bcd8739ae039)(array, index);\n    return result;\n}\n\n\n\n\nvar // Zip together multiple lists into a single array -- elements that share\n// an index go together.\n$14b989efb43f80df$export$2e2bcd8739ae039 = (0, $fc1fd36bde4114f9$export$2e2bcd8739ae039)((0, $f1b2e6c56c644522$export$2e2bcd8739ae039));\n\n\n\nfunction $2c985141e4622117$export$2e2bcd8739ae039(list, values) {\n    var result = {};\n    for(var i = 0, length = (0, $69a46ada1dc9e118$export$2e2bcd8739ae039)(list); i < length; i++)if (values) result[list[i]] = values[i];\n    else result[list[i][0]] = list[i][1];\n    return result;\n}\n\n\n// Generate an integer Array containing an arithmetic progression. A port of\n// the native Python `range()` function. See\n// [the Python documentation](https://docs.python.org/library/functions.html#range).\nfunction $cdd7231087a20698$export$2e2bcd8739ae039(start, stop, step) {\n    if (stop == null) {\n        stop = start || 0;\n        start = 0;\n    }\n    if (!step) step = stop < start ? -1 : 1;\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n    for(var idx = 0; idx < length; idx++, start += step)range[idx] = start;\n    return range;\n}\n\n\n\nfunction $a76f1cdbc561b6ca$export$2e2bcd8739ae039(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0, length = array.length;\n    while(i < length)result.push((0, $05d7c2cba8bc6781$export$58adb3bec8346d0f).call(array, i, i += count));\n    return result;\n}\n\n\n\n\n\n\n\nfunction $e3a6df194c8b9f81$export$2e2bcd8739ae039(instance, obj) {\n    return instance._chain ? (0, $ca35147c638b60d3$export$2e2bcd8739ae039)(obj).chain() : obj;\n}\n\n\nfunction $47f18316120b371a$export$2e2bcd8739ae039(obj) {\n    (0, $20d45cff29fa3729$export$2e2bcd8739ae039)((0, $0f196b5807c1f31f$export$2e2bcd8739ae039)(obj), function(name) {\n        var func = (0, $ca35147c638b60d3$export$2e2bcd8739ae039)[name] = obj[name];\n        (0, $ca35147c638b60d3$export$2e2bcd8739ae039).prototype[name] = function() {\n            var args = [\n                this._wrapped\n            ];\n            (0, $05d7c2cba8bc6781$export$4cbf152802aa238).apply(args, arguments);\n            return (0, $e3a6df194c8b9f81$export$2e2bcd8739ae039)(this, func.apply((0, $ca35147c638b60d3$export$2e2bcd8739ae039), args));\n        };\n    });\n    return 0, $ca35147c638b60d3$export$2e2bcd8739ae039;\n}\n\n\n\n\n\n\n// Add all mutator `Array` functions to the wrapper.\n(0, $20d45cff29fa3729$export$2e2bcd8739ae039)([\n    \"pop\",\n    \"push\",\n    \"reverse\",\n    \"shift\",\n    \"sort\",\n    \"splice\",\n    \"unshift\"\n], function(name) {\n    var method = (0, $05d7c2cba8bc6781$export$aabeece9448a227a)[name];\n    (0, $ca35147c638b60d3$export$2e2bcd8739ae039).prototype[name] = function() {\n        var obj = this._wrapped;\n        if (obj != null) {\n            method.apply(obj, arguments);\n            if ((name === \"shift\" || name === \"splice\") && obj.length === 0) delete obj[0];\n        }\n        return (0, $e3a6df194c8b9f81$export$2e2bcd8739ae039)(this, obj);\n    };\n});\n// Add all accessor `Array` functions to the wrapper.\n(0, $20d45cff29fa3729$export$2e2bcd8739ae039)([\n    \"concat\",\n    \"join\",\n    \"slice\"\n], function(name) {\n    var method = (0, $05d7c2cba8bc6781$export$aabeece9448a227a)[name];\n    (0, $ca35147c638b60d3$export$2e2bcd8739ae039).prototype[name] = function() {\n        var obj = this._wrapped;\n        if (obj != null) obj = method.apply(obj, arguments);\n        return (0, $e3a6df194c8b9f81$export$2e2bcd8739ae039)(this, obj);\n    };\n});\nvar $fdc534663a23b27c$export$2e2bcd8739ae039 = (0, $ca35147c638b60d3$export$2e2bcd8739ae039);\n\n\n\n\n// Add all of the Underscore functions to the wrapper object.\nvar $22b2cacfb0e08dbc$var$_ = (0, $47f18316120b371a$export$2e2bcd8739ae039)($1e7e3d3a578a13ba$exports);\n// Legacy Node.js API.\n$22b2cacfb0e08dbc$var$_._ = $22b2cacfb0e08dbc$var$_;\nvar // Export the Underscore API.\n$22b2cacfb0e08dbc$export$2e2bcd8739ae039 = $22b2cacfb0e08dbc$var$_;\n\n\n\n\n\nvar $589e12536ead20e8$exports = {};\n\n$589e12536ead20e8$exports = new URL((parcelRequire(\"1Zafa\")).resolve(\"krwP2\"), import.meta.url).toString();\n\n\nlet [$0054a5a76f313ec0$var$x, $0054a5a76f313ec0$var$y] = [\n    0,\n    0\n];\nfunction $0054a5a76f313ec0$export$3a4caaf77291f077(e) {\n    window.activeApp = e.target.closest(\".app\");\n    $0054a5a76f313ec0$var$x = e.clientX;\n    $0054a5a76f313ec0$var$y = e.clientY;\n    document.addEventListener(\"mousemove\", $0054a5a76f313ec0$var$appMoveHandler2);\n    document.addEventListener(\"mouseup\", $0054a5a76f313ec0$var$appUpHandler);\n}\nfunction $0054a5a76f313ec0$var$appMoveHandler2(e) {\n    const dx = e.clientX - $0054a5a76f313ec0$var$x;\n    const dy = e.clientY - $0054a5a76f313ec0$var$y;\n    window.activeApp.style.top = `${Math.min(Math.max(window.activeApp.offsetTop + dy, 0), window.innerHeight - window.activeApp.offsetHeight)}px`;\n    window.activeApp.style.left = `${Math.min(Math.max(window.activeApp.offsetLeft + dx, 0), window.innerWidth - window.activeApp.offsetWidth)}px`;\n    $0054a5a76f313ec0$var$x = e.clientX;\n    $0054a5a76f313ec0$var$y = e.clientY;\n}\nfunction $0054a5a76f313ec0$var$appUpHandler() {\n    let name = window.activeApp.querySelector(\"span\").innerText;\n    let loadedApps = JSON.parse(localStorage.getItem(\"apps\"));\n    loadedApps[name] = [\n        window.activeApp.offsetLeft,\n        window.activeApp.offsetTop\n    ];\n    localStorage.setItem(\"apps\", JSON.stringify(loadedApps));\n    document.removeEventListener(\"mousemove\", $0054a5a76f313ec0$var$appMoveHandler2);\n    document.removeEventListener(\"mouseup\", $0054a5a76f313ec0$var$appUpHandler);\n}\n\n\nfunction $555d7ff54d54d493$export$4e373c34abfa8c68(text, launcher, x = 0, y = 0, icon = (0, (/*@__PURE__*/$parcel$interopDefault($589e12536ead20e8$exports)))) {\n    let appDiv = document.createElement(\"div\");\n    appDiv.classList.add(\"app\");\n    appDiv.onmousedown = (0, $0054a5a76f313ec0$export$3a4caaf77291f077);\n    appDiv.ondblclick = launcher;\n    appDiv.innerHTML = /*html*/ `\r\n        <img src=\"${icon}\" alt=\"icon\" width=\"48\" draggable=\"false\">\r\n        <span>${text}</span>\r\n    `;\n    appDiv.style.left = `${x}px`;\n    appDiv.style.top = `${y}px`;\n    document.getElementById(\"desktop\").append(appDiv);\n}\n\n\n\nlet [$0ca891b54ee0c012$var$x, $0ca891b54ee0c012$var$y] = [\n    0,\n    0\n];\nfunction $0ca891b54ee0c012$export$651d802023326a2e(e) {\n    if (e.target.closest(\".controls\")) return;\n    window.activeWindow = e.target.closest(\".window\");\n    $0ca891b54ee0c012$var$x = e.clientX;\n    $0ca891b54ee0c012$var$y = e.clientY;\n    window.activeWindow.style.zIndex = ++window.zIndex;\n    document.addEventListener(\"mousemove\", $0ca891b54ee0c012$var$mouseMoveHandler);\n    document.addEventListener(\"mouseup\", $0ca891b54ee0c012$var$mouseUpHandler);\n}\nfunction $0ca891b54ee0c012$var$mouseMoveHandler(e) {\n    const dx = e.clientX - $0ca891b54ee0c012$var$x;\n    const dy = e.clientY - $0ca891b54ee0c012$var$y;\n    window.activeWindow.style.top = `${Math.min(Math.max(window.activeWindow.offsetTop + dy, 0), window.innerHeight - window.activeWindow.offsetHeight)}px`;\n    window.activeWindow.style.left = `${Math.min(Math.max(window.activeWindow.offsetLeft + dx, 0), window.innerWidth - window.activeWindow.offsetWidth)}px`;\n    $0ca891b54ee0c012$var$x = e.clientX;\n    $0ca891b54ee0c012$var$y = e.clientY;\n}\nfunction $0ca891b54ee0c012$var$mouseUpHandler() {\n    // window.activeWindow = null;\n    document.removeEventListener(\"mousemove\", $0ca891b54ee0c012$var$mouseMoveHandler);\n    document.removeEventListener(\"mouseup\", $0ca891b54ee0c012$var$mouseUpHandler);\n}\n\n\nlet $74205ff061d3d471$var$selectedWindowResize = null;\nlet [$74205ff061d3d471$var$x, $74205ff061d3d471$var$y] = [\n    0,\n    0\n];\nfunction $74205ff061d3d471$export$5ce1f518aad8a1ad(e) {\n    window.activeWindow = e.target.parentElement;\n    $74205ff061d3d471$var$selectedWindowResize = e.target;\n    $74205ff061d3d471$var$x = e.clientX;\n    $74205ff061d3d471$var$y = e.clientY;\n    window.activeWindow.style.zIndex = ++window.zIndex;\n    document.addEventListener(\"mousemove\", $74205ff061d3d471$var$windowResizeMouseMoveHandler);\n    document.addEventListener(\"mouseup\", $74205ff061d3d471$var$windowResizeMouseUpHandler);\n}\nfunction $74205ff061d3d471$var$windowResizeMouseMoveHandler(e) {\n    const dx = e.clientX - $74205ff061d3d471$var$x;\n    const dy = e.clientY - $74205ff061d3d471$var$y;\n    if ($74205ff061d3d471$var$selectedWindowResize.classList.contains(\"top-resize\") || $74205ff061d3d471$var$selectedWindowResize.classList.contains(\"top-left-resize\") || $74205ff061d3d471$var$selectedWindowResize.classList.contains(\"top-right-resize\")) {\n        window.activeWindow.style.height = `${window.activeWindow.offsetHeight - dy}px`;\n        if (window.activeWindow.offsetHeight - dy > 99) window.activeWindow.style.top = `${window.activeWindow.offsetTop + dy}px`;\n    }\n    if ($74205ff061d3d471$var$selectedWindowResize.classList.contains(\"right-resize\") || $74205ff061d3d471$var$selectedWindowResize.classList.contains(\"top-right-resize\") || $74205ff061d3d471$var$selectedWindowResize.classList.contains(\"bottom-right-resize\")) window.activeWindow.style.width = `${window.activeWindow.offsetWidth + dx}px`;\n    if ($74205ff061d3d471$var$selectedWindowResize.classList.contains(\"bottom-resize\") || $74205ff061d3d471$var$selectedWindowResize.classList.contains(\"bottom-left-resize\") || $74205ff061d3d471$var$selectedWindowResize.classList.contains(\"bottom-right-resize\")) window.activeWindow.style.height = `${window.activeWindow.offsetHeight + dy}px`;\n    if ($74205ff061d3d471$var$selectedWindowResize.classList.contains(\"left-resize\") || $74205ff061d3d471$var$selectedWindowResize.classList.contains(\"top-left-resize\") || $74205ff061d3d471$var$selectedWindowResize.classList.contains(\"bottom-left-resize\")) {\n        window.activeWindow.style.width = `${window.activeWindow.offsetWidth - dx}px`;\n        if (window.activeWindow.offsetWidth - dx > 99) window.activeWindow.style.left = `${window.activeWindow.offsetLeft + dx}px`;\n    }\n    $74205ff061d3d471$var$x = e.clientX;\n    $74205ff061d3d471$var$y = e.clientY;\n}\nfunction $74205ff061d3d471$var$windowResizeMouseUpHandler() {\n    if (window.activeWindow.offsetWidth % 2 == 1) window.activeWindow.style.width = `${window.activeWindow.offsetWidth + 1}px`;\n    $74205ff061d3d471$var$selectedWindowResize = null;\n    document.removeEventListener(\"mousemove\", $74205ff061d3d471$var$windowResizeMouseMoveHandler);\n    document.removeEventListener(\"mouseup\", $74205ff061d3d471$var$windowResizeMouseUpHandler);\n}\n\n\nconst $278360e0666719fc$var$createWindowDefaultOptions = {\n    title: \"untitled window\",\n    icon: \"\",\n    body: \"\",\n    resize: true,\n    move: true,\n    close: true,\n    minimize: true,\n    center: false,\n    x: 0,\n    y: 0,\n    width: 300,\n    height: 300,\n    hideOverflow: false,\n    flexCenter: false\n};\nfunction $278360e0666719fc$export$ba255020126e276e(options) {\n    options = (0, $22b2cacfb0e08dbc$export$2e2bcd8739ae039).defaults({}, (0, $22b2cacfb0e08dbc$export$2e2bcd8739ae039).clone(options), $278360e0666719fc$var$createWindowDefaultOptions);\n    let id = Math.random();\n    let windowDiv = document.createElement(\"div\");\n    windowDiv.classList.add(\"window\");\n    windowDiv.innerHTML = /*html*/ `\r\n        <div class=\"head\">\r\n            <div class=\"title\">\r\n                ${options.icon ? `<img src=\"${options.icon}\" alt=\"icon\" draggable=\"false\">` : \"\"}\r\n                <span>${options.title}</span>\r\n            </div>\r\n            <div class=\"controls\">\r\n                ${options.minimize ? `<button class=\"minimize\">_</button>` : \"\"}\r\n                ${options.close ? `<button class=\"close\">x</button>` : \"\"}\r\n            </div>\r\n        </div>\r\n        <div class=\"body ${options.flexCenter ? \"body-center\" : \"\"}\">${options.body}</div>\r\n\r\n        ${options.resize ? /*html*/ `\r\n        <div class=\"resize top-resize\"></div>\r\n        <div class=\"resize top-right-resize\"></div>\r\n        <div class=\"resize right-resize\"></div>\r\n        <div class=\"resize bottom-right-resize\"></div>\r\n        <div class=\"resize bottom-resize\"></div>\r\n        <div class=\"resize bottom-left-resize\"></div>\r\n        <div class=\"resize left-resize\"></div>\r\n        <div class=\"resize top-left-resize\"></div>\r\n        ` : \"\"}\r\n    `;\n    windowDiv.onclick = ()=>{\n        window.activeWindow = windowDiv;\n        window.activeWindow.style.zIndex = ++window.zIndex;\n    };\n    windowDiv.querySelector(\".head\").onmousedown = (0, $0ca891b54ee0c012$export$651d802023326a2e);\n    windowDiv.querySelectorAll(\".resize\").forEach((r)=>r.onmousedown = (0, $74205ff061d3d471$export$5ce1f518aad8a1ad));\n    windowDiv.querySelector(\".close\").onclick = $278360e0666719fc$var$closeWindow;\n    document.getElementById(\"window-container\").append(windowDiv);\n    windowDiv.style.zIndex = ++window.zIndex;\n    windowDiv.style.left = `${options.x}px`;\n    windowDiv.style.top = `${options.y}px`;\n    windowDiv.style.width = `${options.width}px`;\n    windowDiv.style.height = `${options.height}px`;\n    if (options.hideOverflow) windowDiv.querySelector(\".body\").style.overflow = \"hidden\";\n    if (options.center) {\n        windowDiv.style.left = `${~~(window.innerWidth / 2 - windowDiv.offsetWidth / 2)}px`;\n        windowDiv.style.top = `${~~(window.innerHeight / 2 - windowDiv.offsetHeight / 2)}px`;\n    }\n    window.windows.push(id);\n    window.activeWindow = windowDiv;\n    return windowDiv;\n}\nfunction $278360e0666719fc$var$closeWindow(e) {\n    let windowDiv = e.target.closest(\".window\");\n    windowDiv.remove();\n    window.activeWindow = null;\n}\n\n\n\nfunction $03d8b5c69b86b708$export$13c7b7ad60c806b8() {\n    (0, $278360e0666719fc$export$ba255020126e276e)({\n        title: \"about lumOS\",\n        icon: (0, (/*@__PURE__*/$parcel$interopDefault($589e12536ead20e8$exports))),\n        center: true,\n        minimize: false,\n        flexCenter: true,\n        body: /*html*/ `\r\n            <div class=\"df fdc g8\">    \r\n                <div class=\"df aic g8\">\r\n                    <img src=${(0, (/*@__PURE__*/$parcel$interopDefault($589e12536ead20e8$exports)))} alt=\"lumos\" width=\"48\">\r\n                    <div class=\"div\">\r\n                        <h1>lumOS</h1>\r\n                        <span>version 0.2</span>\r\n                    </div>\r\n                </div>\r\n                <p>really cool operating system</p>\r\n                <button class=\"asc\">ok</button>\r\n            </div>\r\n        `\n    });\n}\n\n\n\n/**\nThe data structure for documents. @nonabstract\n*/ class $ccfb9497d8ef598f$export$5f1af8db9871e1d6 {\n    /**\n    Get the line description around the given position.\n    */ lineAt(pos) {\n        if (pos < 0 || pos > this.length) throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);\n        return this.lineInner(pos, false, 1, 0);\n    }\n    /**\n    Get the description for the given (1-based) line number.\n    */ line(n) {\n        if (n < 1 || n > this.lines) throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);\n        return this.lineInner(n, true, 1, 0);\n    }\n    /**\n    Replace a range of the text with the given content.\n    */ replace(from, to, text) {\n        let parts = [];\n        this.decompose(0, from, parts, 2 /* Open.To */ );\n        if (text.length) text.decompose(0, text.length, parts, 3 /* Open.To */ );\n        this.decompose(to, this.length, parts, 1 /* Open.From */ );\n        return $ccfb9497d8ef598f$var$TextNode.from(parts, this.length - (to - from) + text.length);\n    }\n    /**\n    Append another document to this one.\n    */ append(other) {\n        return this.replace(this.length, this.length, other);\n    }\n    /**\n    Retrieve the text between the given points.\n    */ slice(from, to = this.length) {\n        let parts = [];\n        this.decompose(from, to, parts, 0);\n        return $ccfb9497d8ef598f$var$TextNode.from(parts, to - from);\n    }\n    /**\n    Test whether this text is equal to another instance.\n    */ eq(other) {\n        if (other == this) return true;\n        if (other.length != this.length || other.lines != this.lines) return false;\n        let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);\n        let a = new $ccfb9497d8ef598f$var$RawTextCursor(this), b = new $ccfb9497d8ef598f$var$RawTextCursor(other);\n        for(let skip = start, pos = start;;){\n            a.next(skip);\n            b.next(skip);\n            skip = 0;\n            if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value) return false;\n            pos += a.value.length;\n            if (a.done || pos >= end) return true;\n        }\n    }\n    /**\n    Iterate over the text. When `dir` is `-1`, iteration happens\n    from end to start. This will return lines and the breaks between\n    them as separate strings.\n    */ iter(dir = 1) {\n        return new $ccfb9497d8ef598f$var$RawTextCursor(this, dir);\n    }\n    /**\n    Iterate over a range of the text. When `from` > `to`, the\n    iterator will run in reverse.\n    */ iterRange(from, to = this.length) {\n        return new $ccfb9497d8ef598f$var$PartialTextCursor(this, from, to);\n    }\n    /**\n    Return a cursor that iterates over the given range of lines,\n    _without_ returning the line breaks between, and yielding empty\n    strings for empty lines.\n    \n    When `from` and `to` are given, they should be 1-based line numbers.\n    */ iterLines(from, to) {\n        let inner;\n        if (from == null) inner = this.iter();\n        else {\n            if (to == null) to = this.lines + 1;\n            let start = this.line(from).from;\n            inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));\n        }\n        return new $ccfb9497d8ef598f$var$LineCursor(inner);\n    }\n    /**\n    Return the document as a string, using newline characters to\n    separate lines.\n    */ toString() {\n        return this.sliceString(0);\n    }\n    /**\n    Convert the document to an array of lines (which can be\n    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).\n    */ toJSON() {\n        let lines = [];\n        this.flatten(lines);\n        return lines;\n    }\n    /**\n    @internal\n    */ constructor(){}\n    /**\n    Create a `Text` instance for the given array of lines.\n    */ static of(text) {\n        if (text.length == 0) throw new RangeError(\"A document must have at least one line\");\n        if (text.length == 1 && !text[0]) return $ccfb9497d8ef598f$export$5f1af8db9871e1d6.empty;\n        return text.length <= 32 /* Tree.Branch */  ? new $ccfb9497d8ef598f$var$TextLeaf(text) : $ccfb9497d8ef598f$var$TextNode.from($ccfb9497d8ef598f$var$TextLeaf.split(text, []));\n    }\n}\n// Leaves store an array of line strings. There are always line breaks\n// between these strings. Leaves are limited in size and have to be\n// contained in TextNode instances for bigger documents.\nclass $ccfb9497d8ef598f$var$TextLeaf extends $ccfb9497d8ef598f$export$5f1af8db9871e1d6 {\n    constructor(text, length = $ccfb9497d8ef598f$var$textLength(text)){\n        super();\n        this.text = text;\n        this.length = length;\n    }\n    get lines() {\n        return this.text.length;\n    }\n    get children() {\n        return null;\n    }\n    lineInner(target, isLine, line, offset) {\n        for(let i = 0;; i++){\n            let string = this.text[i], end = offset + string.length;\n            if ((isLine ? line : end) >= target) return new $ccfb9497d8ef598f$export$17d680238e50603e(offset, end, line, string);\n            offset = end + 1;\n            line++;\n        }\n    }\n    decompose(from, to, target, open) {\n        let text = from <= 0 && to >= this.length ? this : new $ccfb9497d8ef598f$var$TextLeaf($ccfb9497d8ef598f$var$sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));\n        if (open & 1 /* Open.From */ ) {\n            let prev = target.pop();\n            let joined = $ccfb9497d8ef598f$var$appendText(text.text, prev.text.slice(), 0, text.length);\n            if (joined.length <= 32 /* Tree.Branch */ ) target.push(new $ccfb9497d8ef598f$var$TextLeaf(joined, prev.length + text.length));\n            else {\n                let mid = joined.length >> 1;\n                target.push(new $ccfb9497d8ef598f$var$TextLeaf(joined.slice(0, mid)), new $ccfb9497d8ef598f$var$TextLeaf(joined.slice(mid)));\n            }\n        } else target.push(text);\n    }\n    replace(from, to, text) {\n        if (!(text instanceof $ccfb9497d8ef598f$var$TextLeaf)) return super.replace(from, to, text);\n        let lines = $ccfb9497d8ef598f$var$appendText(this.text, $ccfb9497d8ef598f$var$appendText(text.text, $ccfb9497d8ef598f$var$sliceText(this.text, 0, from)), to);\n        let newLen = this.length + text.length - (to - from);\n        if (lines.length <= 32 /* Tree.Branch */ ) return new $ccfb9497d8ef598f$var$TextLeaf(lines, newLen);\n        return $ccfb9497d8ef598f$var$TextNode.from($ccfb9497d8ef598f$var$TextLeaf.split(lines, []), newLen);\n    }\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\n        let result = \"\";\n        for(let pos = 0, i = 0; pos <= to && i < this.text.length; i++){\n            let line = this.text[i], end = pos + line.length;\n            if (pos > from && i) result += lineSep;\n            if (from < end && to > pos) result += line.slice(Math.max(0, from - pos), to - pos);\n            pos = end + 1;\n        }\n        return result;\n    }\n    flatten(target) {\n        for (let line of this.text)target.push(line);\n    }\n    scanIdentical() {\n        return 0;\n    }\n    static split(text, target) {\n        let part = [], len = -1;\n        for (let line of text){\n            part.push(line);\n            len += line.length + 1;\n            if (part.length == 32 /* Tree.Branch */ ) {\n                target.push(new $ccfb9497d8ef598f$var$TextLeaf(part, len));\n                part = [];\n                len = -1;\n            }\n        }\n        if (len > -1) target.push(new $ccfb9497d8ef598f$var$TextLeaf(part, len));\n        return target;\n    }\n}\n// Nodes provide the tree structure of the `Text` type. They store a\n// number of other nodes or leaves, taking care to balance themselves\n// on changes. There are implied line breaks _between_ the children of\n// a node (but not before the first or after the last child).\nclass $ccfb9497d8ef598f$var$TextNode extends $ccfb9497d8ef598f$export$5f1af8db9871e1d6 {\n    constructor(children, length){\n        super();\n        this.children = children;\n        this.length = length;\n        this.lines = 0;\n        for (let child of children)this.lines += child.lines;\n    }\n    lineInner(target, isLine, line, offset) {\n        for(let i = 0;; i++){\n            let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;\n            if ((isLine ? endLine : end) >= target) return child.lineInner(target, isLine, line, offset);\n            offset = end + 1;\n            line = endLine + 1;\n        }\n    }\n    decompose(from, to, target, open) {\n        for(let i = 0, pos = 0; pos <= to && i < this.children.length; i++){\n            let child = this.children[i], end = pos + child.length;\n            if (from <= end && to >= pos) {\n                let childOpen = open & ((pos <= from ? 1 /* Open.From */  : 0) | (end >= to ? 2 /* Open.To */  : 0));\n                if (pos >= from && end <= to && !childOpen) target.push(child);\n                else child.decompose(from - pos, to - pos, target, childOpen);\n            }\n            pos = end + 1;\n        }\n    }\n    replace(from, to, text) {\n        if (text.lines < this.lines) for(let i = 0, pos = 0; i < this.children.length; i++){\n            let child = this.children[i], end = pos + child.length;\n            // Fast path: if the change only affects one child and the\n            // child's size remains in the acceptable range, only update\n            // that child\n            if (from >= pos && to <= end) {\n                let updated = child.replace(from - pos, to - pos, text);\n                let totalLines = this.lines - child.lines + updated.lines;\n                if (updated.lines < totalLines >> 4 && updated.lines > totalLines >> 6) {\n                    let copy = this.children.slice();\n                    copy[i] = updated;\n                    return new $ccfb9497d8ef598f$var$TextNode(copy, this.length - (to - from) + text.length);\n                }\n                return super.replace(pos, end, updated);\n            }\n            pos = end + 1;\n        }\n        return super.replace(from, to, text);\n    }\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\n        let result = \"\";\n        for(let i = 0, pos = 0; i < this.children.length && pos <= to; i++){\n            let child = this.children[i], end = pos + child.length;\n            if (pos > from && i) result += lineSep;\n            if (from < end && to > pos) result += child.sliceString(from - pos, to - pos, lineSep);\n            pos = end + 1;\n        }\n        return result;\n    }\n    flatten(target) {\n        for (let child of this.children)child.flatten(target);\n    }\n    scanIdentical(other, dir) {\n        if (!(other instanceof $ccfb9497d8ef598f$var$TextNode)) return 0;\n        let length = 0;\n        let [iA, iB, eA, eB] = dir > 0 ? [\n            0,\n            0,\n            this.children.length,\n            other.children.length\n        ] : [\n            this.children.length - 1,\n            other.children.length - 1,\n            -1,\n            -1\n        ];\n        for(;; iA += dir, iB += dir){\n            if (iA == eA || iB == eB) return length;\n            let chA = this.children[iA], chB = other.children[iB];\n            if (chA != chB) return length + chA.scanIdentical(chB, dir);\n            length += chA.length + 1;\n        }\n    }\n    static from(children, length = children.reduce((l, ch)=>l + ch.length + 1, -1)) {\n        let lines = 0;\n        for (let ch of children)lines += ch.lines;\n        if (lines < 32 /* Tree.Branch */ ) {\n            let flat = [];\n            for (let ch of children)ch.flatten(flat);\n            return new $ccfb9497d8ef598f$var$TextLeaf(flat, length);\n        }\n        let chunk = Math.max(32 /* Tree.Branch */ , lines >> 5 /* Tree.BranchShift */ ), maxChunk = chunk << 1, minChunk = chunk >> 1;\n        let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];\n        function add(child) {\n            let last;\n            if (child.lines > maxChunk && child instanceof $ccfb9497d8ef598f$var$TextNode) for (let node of child.children)add(node);\n            else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {\n                flush();\n                chunked.push(child);\n            } else if (child instanceof $ccfb9497d8ef598f$var$TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof $ccfb9497d8ef598f$var$TextLeaf && child.lines + last.lines <= 32 /* Tree.Branch */ ) {\n                currentLines += child.lines;\n                currentLen += child.length + 1;\n                currentChunk[currentChunk.length - 1] = new $ccfb9497d8ef598f$var$TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);\n            } else {\n                if (currentLines + child.lines > chunk) flush();\n                currentLines += child.lines;\n                currentLen += child.length + 1;\n                currentChunk.push(child);\n            }\n        }\n        function flush() {\n            if (currentLines == 0) return;\n            chunked.push(currentChunk.length == 1 ? currentChunk[0] : $ccfb9497d8ef598f$var$TextNode.from(currentChunk, currentLen));\n            currentLen = -1;\n            currentLines = currentChunk.length = 0;\n        }\n        for (let child of children)add(child);\n        flush();\n        return chunked.length == 1 ? chunked[0] : new $ccfb9497d8ef598f$var$TextNode(chunked, length);\n    }\n}\n$ccfb9497d8ef598f$export$5f1af8db9871e1d6.empty = /*@__PURE__*/ new $ccfb9497d8ef598f$var$TextLeaf([\n    \"\"\n], 0);\nfunction $ccfb9497d8ef598f$var$textLength(text) {\n    let length = -1;\n    for (let line of text)length += line.length + 1;\n    return length;\n}\nfunction $ccfb9497d8ef598f$var$appendText(text, target, from = 0, to = 1e9) {\n    for(let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++){\n        let line = text[i], end = pos + line.length;\n        if (end >= from) {\n            if (end > to) line = line.slice(0, to - pos);\n            if (pos < from) line = line.slice(from - pos);\n            if (first) {\n                target[target.length - 1] += line;\n                first = false;\n            } else target.push(line);\n        }\n        pos = end + 1;\n    }\n    return target;\n}\nfunction $ccfb9497d8ef598f$var$sliceText(text, from, to) {\n    return $ccfb9497d8ef598f$var$appendText(text, [\n        \"\"\n    ], from, to);\n}\nclass $ccfb9497d8ef598f$var$RawTextCursor {\n    constructor(text, dir = 1){\n        this.dir = dir;\n        this.done = false;\n        this.lineBreak = false;\n        this.value = \"\";\n        this.nodes = [\n            text\n        ];\n        this.offsets = [\n            dir > 0 ? 1 : (text instanceof $ccfb9497d8ef598f$var$TextLeaf ? text.text.length : text.children.length) << 1\n        ];\n    }\n    nextInner(skip, dir) {\n        this.done = this.lineBreak = false;\n        for(;;){\n            let last = this.nodes.length - 1;\n            let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;\n            let size = top instanceof $ccfb9497d8ef598f$var$TextLeaf ? top.text.length : top.children.length;\n            if (offset == (dir > 0 ? size : 0)) {\n                if (last == 0) {\n                    this.done = true;\n                    this.value = \"\";\n                    return this;\n                }\n                if (dir > 0) this.offsets[last - 1]++;\n                this.nodes.pop();\n                this.offsets.pop();\n            } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {\n                this.offsets[last] += dir;\n                if (skip == 0) {\n                    this.lineBreak = true;\n                    this.value = \"\\n\";\n                    return this;\n                }\n                skip--;\n            } else if (top instanceof $ccfb9497d8ef598f$var$TextLeaf) {\n                // Move to the next string\n                let next = top.text[offset + (dir < 0 ? -1 : 0)];\n                this.offsets[last] += dir;\n                if (next.length > Math.max(0, skip)) {\n                    this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);\n                    return this;\n                }\n                skip -= next.length;\n            } else {\n                let next = top.children[offset + (dir < 0 ? -1 : 0)];\n                if (skip > next.length) {\n                    skip -= next.length;\n                    this.offsets[last] += dir;\n                } else {\n                    if (dir < 0) this.offsets[last]--;\n                    this.nodes.push(next);\n                    this.offsets.push(dir > 0 ? 1 : (next instanceof $ccfb9497d8ef598f$var$TextLeaf ? next.text.length : next.children.length) << 1);\n                }\n            }\n        }\n    }\n    next(skip = 0) {\n        if (skip < 0) {\n            this.nextInner(-skip, -this.dir);\n            skip = this.value.length;\n        }\n        return this.nextInner(skip, this.dir);\n    }\n}\nclass $ccfb9497d8ef598f$var$PartialTextCursor {\n    constructor(text, start, end){\n        this.value = \"\";\n        this.done = false;\n        this.cursor = new $ccfb9497d8ef598f$var$RawTextCursor(text, start > end ? -1 : 1);\n        this.pos = start > end ? text.length : 0;\n        this.from = Math.min(start, end);\n        this.to = Math.max(start, end);\n    }\n    nextInner(skip, dir) {\n        if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {\n            this.value = \"\";\n            this.done = true;\n            return this;\n        }\n        skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);\n        let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;\n        if (skip > limit) skip = limit;\n        limit -= skip;\n        let { value: value } = this.cursor.next(skip);\n        this.pos += (value.length + skip) * dir;\n        this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);\n        this.done = !this.value;\n        return this;\n    }\n    next(skip = 0) {\n        if (skip < 0) skip = Math.max(skip, this.from - this.pos);\n        else if (skip > 0) skip = Math.min(skip, this.to - this.pos);\n        return this.nextInner(skip, this.cursor.dir);\n    }\n    get lineBreak() {\n        return this.cursor.lineBreak && this.value != \"\";\n    }\n}\nclass $ccfb9497d8ef598f$var$LineCursor {\n    constructor(inner){\n        this.inner = inner;\n        this.afterBreak = true;\n        this.value = \"\";\n        this.done = false;\n    }\n    next(skip = 0) {\n        let { done: done, lineBreak: lineBreak, value: value } = this.inner.next(skip);\n        if (done) {\n            this.done = true;\n            this.value = \"\";\n        } else if (lineBreak) {\n            if (this.afterBreak) this.value = \"\";\n            else {\n                this.afterBreak = true;\n                this.next();\n            }\n        } else {\n            this.value = value;\n            this.afterBreak = false;\n        }\n        return this;\n    }\n    get lineBreak() {\n        return false;\n    }\n}\nif (typeof Symbol != \"undefined\") {\n    $ccfb9497d8ef598f$export$5f1af8db9871e1d6.prototype[Symbol.iterator] = function() {\n        return this.iter();\n    };\n    $ccfb9497d8ef598f$var$RawTextCursor.prototype[Symbol.iterator] = $ccfb9497d8ef598f$var$PartialTextCursor.prototype[Symbol.iterator] = $ccfb9497d8ef598f$var$LineCursor.prototype[Symbol.iterator] = function() {\n        return this;\n    };\n}\n/**\nThis type describes a line in the document. It is created\non-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).\n*/ class $ccfb9497d8ef598f$export$17d680238e50603e {\n    /**\n    @internal\n    */ constructor(/**\n    The position of the start of the line.\n    */ from, /**\n    The position at the end of the line (_before_ the line break,\n    or at the end of document for the last line).\n    */ to, /**\n    This line's line number (1-based).\n    */ number, /**\n    The line's content.\n    */ text){\n        this.from = from;\n        this.to = to;\n        this.number = number;\n        this.text = text;\n    }\n    /**\n    The length of the line (not including any line break after it).\n    */ get length() {\n        return this.to - this.from;\n    }\n}\n// Compressed representation of the Grapheme_Cluster_Break=Extend\n// information from\n// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.\n// Each pair of elements represents a range, as an offet from the\n// previous range and a length. Numbers are in base-36, with the empty\n// string being a shorthand for 1.\nlet $ccfb9497d8ef598f$var$extend = /*@__PURE__*/ \"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o\".split(\",\").map((s)=>s ? parseInt(s, 36) : 1);\n// Convert offsets into absolute values\nfor(let i = 1; i < $ccfb9497d8ef598f$var$extend.length; i++)$ccfb9497d8ef598f$var$extend[i] += $ccfb9497d8ef598f$var$extend[i - 1];\nfunction $ccfb9497d8ef598f$var$isExtendingChar(code) {\n    for(let i = 1; i < $ccfb9497d8ef598f$var$extend.length; i += 2)if ($ccfb9497d8ef598f$var$extend[i] > code) return $ccfb9497d8ef598f$var$extend[i - 1] <= code;\n    return false;\n}\nfunction $ccfb9497d8ef598f$var$isRegionalIndicator(code) {\n    return code >= 0x1F1E6 && code <= 0x1F1FF;\n}\nconst $ccfb9497d8ef598f$var$ZWJ = 0x200d;\n/**\nReturns a next grapheme cluster break _after_ (not equal to)\n`pos`, if `forward` is true, or before otherwise. Returns `pos`\nitself if no further cluster break is available in the string.\nMoves across surrogate pairs, extending characters (when\n`includeExtending` is true), characters joined with zero-width\njoiners, and flag emoji.\n*/ function $ccfb9497d8ef598f$export$a0fa439fd515e1ed(str, pos, forward = true, includeExtending = true) {\n    return (forward ? $ccfb9497d8ef598f$var$nextClusterBreak : $ccfb9497d8ef598f$var$prevClusterBreak)(str, pos, includeExtending);\n}\nfunction $ccfb9497d8ef598f$var$nextClusterBreak(str, pos, includeExtending) {\n    if (pos == str.length) return pos;\n    // If pos is in the middle of a surrogate pair, move to its start\n    if (pos && $ccfb9497d8ef598f$var$surrogateLow(str.charCodeAt(pos)) && $ccfb9497d8ef598f$var$surrogateHigh(str.charCodeAt(pos - 1))) pos--;\n    let prev = $ccfb9497d8ef598f$export$42977f40461e1360(str, pos);\n    pos += $ccfb9497d8ef598f$export$a870abf234f6353c(prev);\n    while(pos < str.length){\n        let next = $ccfb9497d8ef598f$export$42977f40461e1360(str, pos);\n        if (prev == $ccfb9497d8ef598f$var$ZWJ || next == $ccfb9497d8ef598f$var$ZWJ || includeExtending && $ccfb9497d8ef598f$var$isExtendingChar(next)) {\n            pos += $ccfb9497d8ef598f$export$a870abf234f6353c(next);\n            prev = next;\n        } else if ($ccfb9497d8ef598f$var$isRegionalIndicator(next)) {\n            let countBefore = 0, i = pos - 2;\n            while(i >= 0 && $ccfb9497d8ef598f$var$isRegionalIndicator($ccfb9497d8ef598f$export$42977f40461e1360(str, i))){\n                countBefore++;\n                i -= 2;\n            }\n            if (countBefore % 2 == 0) break;\n            else pos += 2;\n        } else break;\n    }\n    return pos;\n}\nfunction $ccfb9497d8ef598f$var$prevClusterBreak(str, pos, includeExtending) {\n    while(pos > 0){\n        let found = $ccfb9497d8ef598f$var$nextClusterBreak(str, pos - 2, includeExtending);\n        if (found < pos) return found;\n        pos--;\n    }\n    return 0;\n}\nfunction $ccfb9497d8ef598f$var$surrogateLow(ch) {\n    return ch >= 0xDC00 && ch < 0xE000;\n}\nfunction $ccfb9497d8ef598f$var$surrogateHigh(ch) {\n    return ch >= 0xD800 && ch < 0xDC00;\n}\n/**\nFind the code point at the given position in a string (like the\n[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\nstring method).\n*/ function $ccfb9497d8ef598f$export$42977f40461e1360(str, pos) {\n    let code0 = str.charCodeAt(pos);\n    if (!$ccfb9497d8ef598f$var$surrogateHigh(code0) || pos + 1 == str.length) return code0;\n    let code1 = str.charCodeAt(pos + 1);\n    if (!$ccfb9497d8ef598f$var$surrogateLow(code1)) return code0;\n    return (code0 - 0xd800 << 10) + (code1 - 0xdc00) + 0x10000;\n}\n/**\nGiven a Unicode codepoint, return the JavaScript string that\nrespresents it (like\n[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).\n*/ function $ccfb9497d8ef598f$export$73bfc63873071f74(code) {\n    if (code <= 0xffff) return String.fromCharCode(code);\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);\n}\n/**\nThe amount of positions a character takes up a JavaScript string.\n*/ function $ccfb9497d8ef598f$export$a870abf234f6353c(code) {\n    return code < 0x10000 ? 1 : 2;\n}\nconst $ccfb9497d8ef598f$var$DefaultSplit = /\\r\\n?|\\n/;\n/**\nDistinguishes different ways in which positions can be mapped.\n*/ var $ccfb9497d8ef598f$export$39cf3280165f92aa = /*@__PURE__*/ function(MapMode) {\n    /**\n    Map a position to a valid new position, even when its context\n    was deleted.\n    */ MapMode[MapMode[\"Simple\"] = 0] = \"Simple\";\n    /**\n    Return null if deletion happens across the position.\n    */ MapMode[MapMode[\"TrackDel\"] = 1] = \"TrackDel\";\n    /**\n    Return null if the character _before_ the position is deleted.\n    */ MapMode[MapMode[\"TrackBefore\"] = 2] = \"TrackBefore\";\n    /**\n    Return null if the character _after_ the position is deleted.\n    */ MapMode[MapMode[\"TrackAfter\"] = 3] = \"TrackAfter\";\n    return MapMode;\n}($ccfb9497d8ef598f$export$39cf3280165f92aa || ($ccfb9497d8ef598f$export$39cf3280165f92aa = {}));\n/**\nA change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)\nthat doesn't store the inserted text. As such, it can't be\napplied, but is cheaper to store and manipulate.\n*/ class $ccfb9497d8ef598f$export$34b6a936f2bb06a2 {\n    // Sections are encoded as pairs of integers. The first is the\n    // length in the current document, and the second is -1 for\n    // unaffected sections, and the length of the replacement content\n    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,\n    // 0), and a replacement two positive numbers.\n    /**\n    @internal\n    */ constructor(/**\n    @internal\n    */ sections){\n        this.sections = sections;\n    }\n    /**\n    The length of the document before the change.\n    */ get length() {\n        let result = 0;\n        for(let i = 0; i < this.sections.length; i += 2)result += this.sections[i];\n        return result;\n    }\n    /**\n    The length of the document after the change.\n    */ get newLength() {\n        let result = 0;\n        for(let i = 0; i < this.sections.length; i += 2){\n            let ins = this.sections[i + 1];\n            result += ins < 0 ? this.sections[i] : ins;\n        }\n        return result;\n    }\n    /**\n    False when there are actual changes in this set.\n    */ get empty() {\n        return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;\n    }\n    /**\n    Iterate over the unchanged parts left by these changes. `posA`\n    provides the position of the range in the old document, `posB`\n    the new position in the changed document.\n    */ iterGaps(f) {\n        for(let i = 0, posA = 0, posB = 0; i < this.sections.length;){\n            let len = this.sections[i++], ins = this.sections[i++];\n            if (ins < 0) {\n                f(posA, posB, len);\n                posB += len;\n            } else posB += ins;\n            posA += len;\n        }\n    }\n    /**\n    Iterate over the ranges changed by these changes. (See\n    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a\n    variant that also provides you with the inserted text.)\n    `fromA`/`toA` provides the extent of the change in the starting\n    document, `fromB`/`toB` the extent of the replacement in the\n    changed document.\n    \n    When `individual` is true, adjacent changes (which are kept\n    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are\n    reported separately.\n    */ iterChangedRanges(f, individual = false) {\n        $ccfb9497d8ef598f$var$iterChanges(this, f, individual);\n    }\n    /**\n    Get a description of the inverted form of these changes.\n    */ get invertedDesc() {\n        let sections = [];\n        for(let i = 0; i < this.sections.length;){\n            let len = this.sections[i++], ins = this.sections[i++];\n            if (ins < 0) sections.push(len, ins);\n            else sections.push(ins, len);\n        }\n        return new $ccfb9497d8ef598f$export$34b6a936f2bb06a2(sections);\n    }\n    /**\n    Compute the combined effect of applying another set of changes\n    after this one. The length of the document after this set should\n    match the length before `other`.\n    */ composeDesc(other) {\n        return this.empty ? other : other.empty ? this : $ccfb9497d8ef598f$var$composeSets(this, other);\n    }\n    /**\n    Map this description, which should start with the same document\n    as `other`, over another set of changes, so that it can be\n    applied after it. When `before` is true, map as if the changes\n    in `other` happened before the ones in `this`.\n    */ mapDesc(other, before = false) {\n        return other.empty ? this : $ccfb9497d8ef598f$var$mapSet(this, other, before);\n    }\n    mapPos(pos, assoc = -1, mode = $ccfb9497d8ef598f$export$39cf3280165f92aa.Simple) {\n        let posA = 0, posB = 0;\n        for(let i = 0; i < this.sections.length;){\n            let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;\n            if (ins < 0) {\n                if (endA > pos) return posB + (pos - posA);\n                posB += len;\n            } else {\n                if (mode != $ccfb9497d8ef598f$export$39cf3280165f92aa.Simple && endA >= pos && (mode == $ccfb9497d8ef598f$export$39cf3280165f92aa.TrackDel && posA < pos && endA > pos || mode == $ccfb9497d8ef598f$export$39cf3280165f92aa.TrackBefore && posA < pos || mode == $ccfb9497d8ef598f$export$39cf3280165f92aa.TrackAfter && endA > pos)) return null;\n                if (endA > pos || endA == pos && assoc < 0 && !len) return pos == posA || assoc < 0 ? posB : posB + ins;\n                posB += ins;\n            }\n            posA = endA;\n        }\n        if (pos > posA) throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);\n        return posB;\n    }\n    /**\n    Check whether these changes touch a given range. When one of the\n    changes entirely covers the range, the string `\"cover\"` is\n    returned.\n    */ touchesRange(from, to = from) {\n        for(let i = 0, pos = 0; i < this.sections.length && pos <= to;){\n            let len = this.sections[i++], ins = this.sections[i++], end = pos + len;\n            if (ins >= 0 && pos <= to && end >= from) return pos < from && end > to ? \"cover\" : true;\n            pos = end;\n        }\n        return false;\n    }\n    /**\n    @internal\n    */ toString() {\n        let result = \"\";\n        for(let i = 0; i < this.sections.length;){\n            let len = this.sections[i++], ins = this.sections[i++];\n            result += (result ? \" \" : \"\") + len + (ins >= 0 ? \":\" + ins : \"\");\n        }\n        return result;\n    }\n    /**\n    Serialize this change desc to a JSON-representable value.\n    */ toJSON() {\n        return this.sections;\n    }\n    /**\n    Create a change desc from its JSON representation (as produced\n    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).\n    */ static fromJSON(json) {\n        if (!Array.isArray(json) || json.length % 2 || json.some((a)=>typeof a != \"number\")) throw new RangeError(\"Invalid JSON representation of ChangeDesc\");\n        return new $ccfb9497d8ef598f$export$34b6a936f2bb06a2(json);\n    }\n    /**\n    @internal\n    */ static create(sections) {\n        return new $ccfb9497d8ef598f$export$34b6a936f2bb06a2(sections);\n    }\n}\n/**\nA change set represents a group of modifications to a document. It\nstores the document length, and can only be applied to documents\nwith exactly that length.\n*/ class $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c extends $ccfb9497d8ef598f$export$34b6a936f2bb06a2 {\n    constructor(sections, /**\n    @internal\n    */ inserted){\n        super(sections);\n        this.inserted = inserted;\n    }\n    /**\n    Apply the changes to a document, returning the modified\n    document.\n    */ apply(doc) {\n        if (this.length != doc.length) throw new RangeError(\"Applying change set to a document with the wrong length\");\n        $ccfb9497d8ef598f$var$iterChanges(this, (fromA, toA, fromB, _toB, text)=>doc = doc.replace(fromB, fromB + (toA - fromA), text), false);\n        return doc;\n    }\n    mapDesc(other, before = false) {\n        return $ccfb9497d8ef598f$var$mapSet(this, other, before, true);\n    }\n    /**\n    Given the document as it existed _before_ the changes, return a\n    change set that represents the inverse of this set, which could\n    be used to go from the document created by the changes back to\n    the document as it existed before the changes.\n    */ invert(doc) {\n        let sections = this.sections.slice(), inserted = [];\n        for(let i = 0, pos = 0; i < sections.length; i += 2){\n            let len = sections[i], ins = sections[i + 1];\n            if (ins >= 0) {\n                sections[i] = ins;\n                sections[i + 1] = len;\n                let index = i >> 1;\n                while(inserted.length < index)inserted.push($ccfb9497d8ef598f$export$5f1af8db9871e1d6.empty);\n                inserted.push(len ? doc.slice(pos, pos + len) : $ccfb9497d8ef598f$export$5f1af8db9871e1d6.empty);\n            }\n            pos += len;\n        }\n        return new $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c(sections, inserted);\n    }\n    /**\n    Combine two subsequent change sets into a single set. `other`\n    must start in the document produced by `this`. If `this` goes\n    `docA` → `docB` and `other` represents `docB` → `docC`, the\n    returned value will represent the change `docA` → `docC`.\n    */ compose(other) {\n        return this.empty ? other : other.empty ? this : $ccfb9497d8ef598f$var$composeSets(this, other, true);\n    }\n    /**\n    Given another change set starting in the same document, maps this\n    change set over the other, producing a new change set that can be\n    applied to the document produced by applying `other`. When\n    `before` is `true`, order changes as if `this` comes before\n    `other`, otherwise (the default) treat `other` as coming first.\n    \n    Given two changes `A` and `B`, `A.compose(B.map(A))` and\n    `B.compose(A.map(B, true))` will produce the same document. This\n    provides a basic form of [operational\n    transformation](https://en.wikipedia.org/wiki/Operational_transformation),\n    and can be used for collaborative editing.\n    */ map(other, before = false) {\n        return other.empty ? this : $ccfb9497d8ef598f$var$mapSet(this, other, before, true);\n    }\n    /**\n    Iterate over the changed ranges in the document, calling `f` for\n    each, with the range in the original document (`fromA`-`toA`)\n    and the range that replaces it in the new document\n    (`fromB`-`toB`).\n    \n    When `individual` is true, adjacent changes are reported\n    separately.\n    */ iterChanges(f, individual = false) {\n        $ccfb9497d8ef598f$var$iterChanges(this, f, individual);\n    }\n    /**\n    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change\n    set.\n    */ get desc() {\n        return $ccfb9497d8ef598f$export$34b6a936f2bb06a2.create(this.sections);\n    }\n    /**\n    @internal\n    */ filter(ranges) {\n        let resultSections = [], resultInserted = [], filteredSections = [];\n        let iter = new $ccfb9497d8ef598f$var$SectionIter(this);\n        done: for(let i = 0, pos = 0;;){\n            let next = i == ranges.length ? 1e9 : ranges[i++];\n            while(pos < next || pos == next && iter.len == 0){\n                if (iter.done) break done;\n                let len = Math.min(iter.len, next - pos);\n                $ccfb9497d8ef598f$var$addSection(filteredSections, len, -1);\n                let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;\n                $ccfb9497d8ef598f$var$addSection(resultSections, len, ins);\n                if (ins > 0) $ccfb9497d8ef598f$var$addInsert(resultInserted, resultSections, iter.text);\n                iter.forward(len);\n                pos += len;\n            }\n            let end = ranges[i++];\n            while(pos < end){\n                if (iter.done) break done;\n                let len = Math.min(iter.len, end - pos);\n                $ccfb9497d8ef598f$var$addSection(resultSections, len, -1);\n                $ccfb9497d8ef598f$var$addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);\n                iter.forward(len);\n                pos += len;\n            }\n        }\n        return {\n            changes: new $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c(resultSections, resultInserted),\n            filtered: $ccfb9497d8ef598f$export$34b6a936f2bb06a2.create(filteredSections)\n        };\n    }\n    /**\n    Serialize this change set to a JSON-representable value.\n    */ toJSON() {\n        let parts = [];\n        for(let i = 0; i < this.sections.length; i += 2){\n            let len = this.sections[i], ins = this.sections[i + 1];\n            if (ins < 0) parts.push(len);\n            else if (ins == 0) parts.push([\n                len\n            ]);\n            else parts.push([\n                len\n            ].concat(this.inserted[i >> 1].toJSON()));\n        }\n        return parts;\n    }\n    /**\n    Create a change set for the given changes, for a document of the\n    given length, using `lineSep` as line separator.\n    */ static of(changes, length, lineSep) {\n        let sections = [], inserted = [], pos = 0;\n        let total = null;\n        function flush(force = false) {\n            if (!force && !sections.length) return;\n            if (pos < length) $ccfb9497d8ef598f$var$addSection(sections, length - pos, -1);\n            let set = new $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c(sections, inserted);\n            total = total ? total.compose(set.map(total)) : set;\n            sections = [];\n            inserted = [];\n            pos = 0;\n        }\n        function process(spec) {\n            if (Array.isArray(spec)) for (let sub of spec)process(sub);\n            else if (spec instanceof $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c) {\n                if (spec.length != length) throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);\n                flush();\n                total = total ? total.compose(spec.map(total)) : spec;\n            } else {\n                let { from: from, to: to = from, insert: insert } = spec;\n                if (from > to || from < 0 || to > length) throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);\n                let insText = !insert ? $ccfb9497d8ef598f$export$5f1af8db9871e1d6.empty : typeof insert == \"string\" ? $ccfb9497d8ef598f$export$5f1af8db9871e1d6.of(insert.split(lineSep || $ccfb9497d8ef598f$var$DefaultSplit)) : insert;\n                let insLen = insText.length;\n                if (from == to && insLen == 0) return;\n                if (from < pos) flush();\n                if (from > pos) $ccfb9497d8ef598f$var$addSection(sections, from - pos, -1);\n                $ccfb9497d8ef598f$var$addSection(sections, to - from, insLen);\n                $ccfb9497d8ef598f$var$addInsert(inserted, sections, insText);\n                pos = to;\n            }\n        }\n        process(changes);\n        flush(!total);\n        return total;\n    }\n    /**\n    Create an empty changeset of the given length.\n    */ static empty(length) {\n        return new $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c(length ? [\n            length,\n            -1\n        ] : [], []);\n    }\n    /**\n    Create a changeset from its JSON representation (as produced by\n    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).\n    */ static fromJSON(json) {\n        if (!Array.isArray(json)) throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n        let sections = [], inserted = [];\n        for(let i = 0; i < json.length; i++){\n            let part = json[i];\n            if (typeof part == \"number\") sections.push(part, -1);\n            else if (!Array.isArray(part) || typeof part[0] != \"number\" || part.some((e, i)=>i && typeof e != \"string\")) throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n            else if (part.length == 1) sections.push(part[0], 0);\n            else {\n                while(inserted.length < i)inserted.push($ccfb9497d8ef598f$export$5f1af8db9871e1d6.empty);\n                inserted[i] = $ccfb9497d8ef598f$export$5f1af8db9871e1d6.of(part.slice(1));\n                sections.push(part[0], inserted[i].length);\n            }\n        }\n        return new $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c(sections, inserted);\n    }\n    /**\n    @internal\n    */ static createSet(sections, inserted) {\n        return new $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c(sections, inserted);\n    }\n}\nfunction $ccfb9497d8ef598f$var$addSection(sections, len, ins, forceJoin = false) {\n    if (len == 0 && ins <= 0) return;\n    let last = sections.length - 2;\n    if (last >= 0 && ins <= 0 && ins == sections[last + 1]) sections[last] += len;\n    else if (len == 0 && sections[last] == 0) sections[last + 1] += ins;\n    else if (forceJoin) {\n        sections[last] += len;\n        sections[last + 1] += ins;\n    } else sections.push(len, ins);\n}\nfunction $ccfb9497d8ef598f$var$addInsert(values, sections, value) {\n    if (value.length == 0) return;\n    let index = sections.length - 2 >> 1;\n    if (index < values.length) values[values.length - 1] = values[values.length - 1].append(value);\n    else {\n        while(values.length < index)values.push($ccfb9497d8ef598f$export$5f1af8db9871e1d6.empty);\n        values.push(value);\n    }\n}\nfunction $ccfb9497d8ef598f$var$iterChanges(desc, f, individual) {\n    let inserted = desc.inserted;\n    for(let posA = 0, posB = 0, i = 0; i < desc.sections.length;){\n        let len = desc.sections[i++], ins = desc.sections[i++];\n        if (ins < 0) {\n            posA += len;\n            posB += len;\n        } else {\n            let endA = posA, endB = posB, text = $ccfb9497d8ef598f$export$5f1af8db9871e1d6.empty;\n            for(;;){\n                endA += len;\n                endB += ins;\n                if (ins && inserted) text = text.append(inserted[i - 2 >> 1]);\n                if (individual || i == desc.sections.length || desc.sections[i + 1] < 0) break;\n                len = desc.sections[i++];\n                ins = desc.sections[i++];\n            }\n            f(posA, endA, posB, endB, text);\n            posA = endA;\n            posB = endB;\n        }\n    }\n}\nfunction $ccfb9497d8ef598f$var$mapSet(setA, setB, before, mkSet = false) {\n    // Produce a copy of setA that applies to the document after setB\n    // has been applied (assuming both start at the same document).\n    let sections = [], insert = mkSet ? [] : null;\n    let a = new $ccfb9497d8ef598f$var$SectionIter(setA), b = new $ccfb9497d8ef598f$var$SectionIter(setB);\n    // Iterate over both sets in parallel. inserted tracks, for changes\n    // in A that have to be processed piece-by-piece, whether their\n    // content has been inserted already, and refers to the section\n    // index.\n    for(let inserted = -1;;){\n        if (a.ins == -1 && b.ins == -1) {\n            // Move across ranges skipped by both sets.\n            let len = Math.min(a.len, b.len);\n            $ccfb9497d8ef598f$var$addSection(sections, len, -1);\n            a.forward(len);\n            b.forward(len);\n        } else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {\n            // If there's a change in B that comes before the next change in\n            // A (ordered by start pos, then len, then before flag), skip\n            // that (and process any changes in A it covers).\n            let len = b.len;\n            $ccfb9497d8ef598f$var$addSection(sections, b.ins, -1);\n            while(len){\n                let piece = Math.min(a.len, len);\n                if (a.ins >= 0 && inserted < a.i && a.len <= piece) {\n                    $ccfb9497d8ef598f$var$addSection(sections, 0, a.ins);\n                    if (insert) $ccfb9497d8ef598f$var$addInsert(insert, sections, a.text);\n                    inserted = a.i;\n                }\n                a.forward(piece);\n                len -= piece;\n            }\n            b.next();\n        } else if (a.ins >= 0) {\n            // Process the part of a change in A up to the start of the next\n            // non-deletion change in B (if overlapping).\n            let len = 0, left = a.len;\n            while(left){\n                if (b.ins == -1) {\n                    let piece = Math.min(left, b.len);\n                    len += piece;\n                    left -= piece;\n                    b.forward(piece);\n                } else if (b.ins == 0 && b.len < left) {\n                    left -= b.len;\n                    b.next();\n                } else break;\n            }\n            $ccfb9497d8ef598f$var$addSection(sections, len, inserted < a.i ? a.ins : 0);\n            if (insert && inserted < a.i) $ccfb9497d8ef598f$var$addInsert(insert, sections, a.text);\n            inserted = a.i;\n            a.forward(a.len - left);\n        } else if (a.done && b.done) return insert ? $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c.createSet(sections, insert) : $ccfb9497d8ef598f$export$34b6a936f2bb06a2.create(sections);\n        else throw new Error(\"Mismatched change set lengths\");\n    }\n}\nfunction $ccfb9497d8ef598f$var$composeSets(setA, setB, mkSet = false) {\n    let sections = [];\n    let insert = mkSet ? [] : null;\n    let a = new $ccfb9497d8ef598f$var$SectionIter(setA), b = new $ccfb9497d8ef598f$var$SectionIter(setB);\n    for(let open = false;;){\n        if (a.done && b.done) return insert ? $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c.createSet(sections, insert) : $ccfb9497d8ef598f$export$34b6a936f2bb06a2.create(sections);\n        else if (a.ins == 0) {\n            $ccfb9497d8ef598f$var$addSection(sections, a.len, 0, open);\n            a.next();\n        } else if (b.len == 0 && !b.done) {\n            $ccfb9497d8ef598f$var$addSection(sections, 0, b.ins, open);\n            if (insert) $ccfb9497d8ef598f$var$addInsert(insert, sections, b.text);\n            b.next();\n        } else if (a.done || b.done) throw new Error(\"Mismatched change set lengths\");\n        else {\n            let len = Math.min(a.len2, b.len), sectionLen = sections.length;\n            if (a.ins == -1) {\n                let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;\n                $ccfb9497d8ef598f$var$addSection(sections, len, insB, open);\n                if (insert && insB) $ccfb9497d8ef598f$var$addInsert(insert, sections, b.text);\n            } else if (b.ins == -1) {\n                $ccfb9497d8ef598f$var$addSection(sections, a.off ? 0 : a.len, len, open);\n                if (insert) $ccfb9497d8ef598f$var$addInsert(insert, sections, a.textBit(len));\n            } else {\n                $ccfb9497d8ef598f$var$addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);\n                if (insert && !b.off) $ccfb9497d8ef598f$var$addInsert(insert, sections, b.text);\n            }\n            open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);\n            a.forward2(len);\n            b.forward(len);\n        }\n    }\n}\nclass $ccfb9497d8ef598f$var$SectionIter {\n    constructor(set){\n        this.set = set;\n        this.i = 0;\n        this.next();\n    }\n    next() {\n        let { sections: sections } = this.set;\n        if (this.i < sections.length) {\n            this.len = sections[this.i++];\n            this.ins = sections[this.i++];\n        } else {\n            this.len = 0;\n            this.ins = -2;\n        }\n        this.off = 0;\n    }\n    get done() {\n        return this.ins == -2;\n    }\n    get len2() {\n        return this.ins < 0 ? this.len : this.ins;\n    }\n    get text() {\n        let { inserted: inserted } = this.set, index = this.i - 2 >> 1;\n        return index >= inserted.length ? $ccfb9497d8ef598f$export$5f1af8db9871e1d6.empty : inserted[index];\n    }\n    textBit(len) {\n        let { inserted: inserted } = this.set, index = this.i - 2 >> 1;\n        return index >= inserted.length && !len ? $ccfb9497d8ef598f$export$5f1af8db9871e1d6.empty : inserted[index].slice(this.off, len == null ? undefined : this.off + len);\n    }\n    forward(len) {\n        if (len == this.len) this.next();\n        else {\n            this.len -= len;\n            this.off += len;\n        }\n    }\n    forward2(len) {\n        if (this.ins == -1) this.forward(len);\n        else if (len == this.ins) this.next();\n        else {\n            this.ins -= len;\n            this.off += len;\n        }\n    }\n}\n/**\nA single selection range. When\n[`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\nis enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold\nmultiple ranges. By default, selections hold exactly one range.\n*/ class $ccfb9497d8ef598f$export$7bd1839c3c5d5bd4 {\n    constructor(/**\n    The lower boundary of the range.\n    */ from, /**\n    The upper boundary of the range.\n    */ to, flags){\n        this.from = from;\n        this.to = to;\n        this.flags = flags;\n    }\n    /**\n    The anchor of the range—the side that doesn't move when you\n    extend it.\n    */ get anchor() {\n        return this.flags & 16 /* RangeFlag.Inverted */  ? this.to : this.from;\n    }\n    /**\n    The head of the range, which is moved when the range is\n    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).\n    */ get head() {\n        return this.flags & 16 /* RangeFlag.Inverted */  ? this.from : this.to;\n    }\n    /**\n    True when `anchor` and `head` are at the same position.\n    */ get empty() {\n        return this.from == this.to;\n    }\n    /**\n    If this is a cursor that is explicitly associated with the\n    character on one of its sides, this returns the side. -1 means\n    the character before its position, 1 the character after, and 0\n    means no association.\n    */ get assoc() {\n        return this.flags & 4 /* RangeFlag.AssocBefore */  ? -1 : this.flags & 8 /* RangeFlag.AssocAfter */  ? 1 : 0;\n    }\n    /**\n    The bidirectional text level associated with this cursor, if\n    any.\n    */ get bidiLevel() {\n        let level = this.flags & 3 /* RangeFlag.BidiLevelMask */ ;\n        return level == 3 ? null : level;\n    }\n    /**\n    The goal column (stored vertical offset) associated with a\n    cursor. This is used to preserve the vertical position when\n    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across\n    lines of different length.\n    */ get goalColumn() {\n        let value = this.flags >> 5 /* RangeFlag.GoalColumnOffset */ ;\n        return value == 33554431 /* RangeFlag.NoGoalColumn */  ? undefined : value;\n    }\n    /**\n    Map this range through a change, producing a valid range in the\n    updated document.\n    */ map(change, assoc = -1) {\n        let from, to;\n        if (this.empty) from = to = change.mapPos(this.from, assoc);\n        else {\n            from = change.mapPos(this.from, 1);\n            to = change.mapPos(this.to, -1);\n        }\n        return from == this.from && to == this.to ? this : new $ccfb9497d8ef598f$export$7bd1839c3c5d5bd4(from, to, this.flags);\n    }\n    /**\n    Extend this range to cover at least `from` to `to`.\n    */ extend(from, to = from) {\n        if (from <= this.anchor && to >= this.anchor) return $ccfb9497d8ef598f$export$3bb1bd44aee62999.range(from, to);\n        let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;\n        return $ccfb9497d8ef598f$export$3bb1bd44aee62999.range(this.anchor, head);\n    }\n    /**\n    Compare this range to another range.\n    */ eq(other) {\n        return this.anchor == other.anchor && this.head == other.head;\n    }\n    /**\n    Return a JSON-serializable object representing the range.\n    */ toJSON() {\n        return {\n            anchor: this.anchor,\n            head: this.head\n        };\n    }\n    /**\n    Convert a JSON representation of a range to a `SelectionRange`\n    instance.\n    */ static fromJSON(json) {\n        if (!json || typeof json.anchor != \"number\" || typeof json.head != \"number\") throw new RangeError(\"Invalid JSON representation for SelectionRange\");\n        return $ccfb9497d8ef598f$export$3bb1bd44aee62999.range(json.anchor, json.head);\n    }\n    /**\n    @internal\n    */ static create(from, to, flags) {\n        return new $ccfb9497d8ef598f$export$7bd1839c3c5d5bd4(from, to, flags);\n    }\n}\n/**\nAn editor selection holds one or more selection ranges.\n*/ class $ccfb9497d8ef598f$export$3bb1bd44aee62999 {\n    constructor(/**\n    The ranges in the selection, sorted by position. Ranges cannot\n    overlap (but they may touch, if they aren't empty).\n    */ ranges, /**\n    The index of the _main_ range in the selection (which is\n    usually the range that was added last).\n    */ mainIndex){\n        this.ranges = ranges;\n        this.mainIndex = mainIndex;\n    }\n    /**\n    Map a selection through a change. Used to adjust the selection\n    position for changes.\n    */ map(change, assoc = -1) {\n        if (change.empty) return this;\n        return $ccfb9497d8ef598f$export$3bb1bd44aee62999.create(this.ranges.map((r)=>r.map(change, assoc)), this.mainIndex);\n    }\n    /**\n    Compare this selection to another selection.\n    */ eq(other) {\n        if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex) return false;\n        for(let i = 0; i < this.ranges.length; i++)if (!this.ranges[i].eq(other.ranges[i])) return false;\n        return true;\n    }\n    /**\n    Get the primary selection range. Usually, you should make sure\n    your code applies to _all_ ranges, by using methods like\n    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).\n    */ get main() {\n        return this.ranges[this.mainIndex];\n    }\n    /**\n    Make sure the selection only has one range. Returns a selection\n    holding only the main range from this selection.\n    */ asSingle() {\n        return this.ranges.length == 1 ? this : new $ccfb9497d8ef598f$export$3bb1bd44aee62999([\n            this.main\n        ], 0);\n    }\n    /**\n    Extend this selection with an extra range.\n    */ addRange(range, main = true) {\n        return $ccfb9497d8ef598f$export$3bb1bd44aee62999.create([\n            range\n        ].concat(this.ranges), main ? 0 : this.mainIndex + 1);\n    }\n    /**\n    Replace a given range with another range, and then normalize the\n    selection to merge and sort ranges if necessary.\n    */ replaceRange(range, which = this.mainIndex) {\n        let ranges = this.ranges.slice();\n        ranges[which] = range;\n        return $ccfb9497d8ef598f$export$3bb1bd44aee62999.create(ranges, this.mainIndex);\n    }\n    /**\n    Convert this selection to an object that can be serialized to\n    JSON.\n    */ toJSON() {\n        return {\n            ranges: this.ranges.map((r)=>r.toJSON()),\n            main: this.mainIndex\n        };\n    }\n    /**\n    Create a selection from a JSON representation.\n    */ static fromJSON(json) {\n        if (!json || !Array.isArray(json.ranges) || typeof json.main != \"number\" || json.main >= json.ranges.length) throw new RangeError(\"Invalid JSON representation for EditorSelection\");\n        return new $ccfb9497d8ef598f$export$3bb1bd44aee62999(json.ranges.map((r)=>$ccfb9497d8ef598f$export$7bd1839c3c5d5bd4.fromJSON(r)), json.main);\n    }\n    /**\n    Create a selection holding a single range.\n    */ static single(anchor, head = anchor) {\n        return new $ccfb9497d8ef598f$export$3bb1bd44aee62999([\n            $ccfb9497d8ef598f$export$3bb1bd44aee62999.range(anchor, head)\n        ], 0);\n    }\n    /**\n    Sort and merge the given set of ranges, creating a valid\n    selection.\n    */ static create(ranges, mainIndex = 0) {\n        if (ranges.length == 0) throw new RangeError(\"A selection needs at least one range\");\n        for(let pos = 0, i = 0; i < ranges.length; i++){\n            let range = ranges[i];\n            if (range.empty ? range.from <= pos : range.from < pos) return $ccfb9497d8ef598f$export$3bb1bd44aee62999.normalized(ranges.slice(), mainIndex);\n            pos = range.to;\n        }\n        return new $ccfb9497d8ef598f$export$3bb1bd44aee62999(ranges, mainIndex);\n    }\n    /**\n    Create a cursor selection range at the given position. You can\n    safely ignore the optional arguments in most situations.\n    */ static cursor(pos, assoc = 0, bidiLevel, goalColumn) {\n        return $ccfb9497d8ef598f$export$7bd1839c3c5d5bd4.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* RangeFlag.AssocBefore */  : 8 /* RangeFlag.AssocAfter */ ) | (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */ ) << 5 /* RangeFlag.GoalColumnOffset */ );\n    }\n    /**\n    Create a selection range.\n    */ static range(anchor, head, goalColumn, bidiLevel) {\n        let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */ ) << 5 /* RangeFlag.GoalColumnOffset */  | (bidiLevel == null ? 3 : Math.min(2, bidiLevel));\n        return head < anchor ? $ccfb9497d8ef598f$export$7bd1839c3c5d5bd4.create(head, anchor, 24 /* RangeFlag.AssocAfter */  | flags) : $ccfb9497d8ef598f$export$7bd1839c3c5d5bd4.create(anchor, head, (head > anchor ? 4 /* RangeFlag.AssocBefore */  : 0) | flags);\n    }\n    /**\n    @internal\n    */ static normalized(ranges, mainIndex = 0) {\n        let main = ranges[mainIndex];\n        ranges.sort((a, b)=>a.from - b.from);\n        mainIndex = ranges.indexOf(main);\n        for(let i = 1; i < ranges.length; i++){\n            let range = ranges[i], prev = ranges[i - 1];\n            if (range.empty ? range.from <= prev.to : range.from < prev.to) {\n                let from = prev.from, to = Math.max(range.to, prev.to);\n                if (i <= mainIndex) mainIndex--;\n                ranges.splice(--i, 2, range.anchor > range.head ? $ccfb9497d8ef598f$export$3bb1bd44aee62999.range(to, from) : $ccfb9497d8ef598f$export$3bb1bd44aee62999.range(from, to));\n            }\n        }\n        return new $ccfb9497d8ef598f$export$3bb1bd44aee62999(ranges, mainIndex);\n    }\n}\nfunction $ccfb9497d8ef598f$var$checkSelection(selection, docLength) {\n    for (let range of selection.ranges)if (range.to > docLength) throw new RangeError(\"Selection points outside of document\");\n}\nlet $ccfb9497d8ef598f$var$nextID = 0;\n/**\nA facet is a labeled value that is associated with an editor\nstate. It takes inputs from any number of extensions, and combines\nthose into a single output value.\n\nExamples of uses of facets are the [tab\nsize](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor\nattributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update\nlisteners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).\n*/ class $ccfb9497d8ef598f$export$ef7d5e9b79fa1504 {\n    constructor(/**\n    @internal\n    */ combine, /**\n    @internal\n    */ compareInput, /**\n    @internal\n    */ compare, isStatic, enables){\n        this.combine = combine;\n        this.compareInput = compareInput;\n        this.compare = compare;\n        this.isStatic = isStatic;\n        /**\n        @internal\n        */ this.id = $ccfb9497d8ef598f$var$nextID++;\n        this.default = combine([]);\n        this.extensions = typeof enables == \"function\" ? enables(this) : enables;\n    }\n    /**\n    Define a new facet.\n    */ static define(config = {}) {\n        return new $ccfb9497d8ef598f$export$ef7d5e9b79fa1504(config.combine || ((a)=>a), config.compareInput || ((a, b)=>a === b), config.compare || (!config.combine ? $ccfb9497d8ef598f$var$sameArray : (a, b)=>a === b), !!config.static, config.enables);\n    }\n    /**\n    Returns an extension that adds the given value to this facet.\n    */ of(value) {\n        return new $ccfb9497d8ef598f$var$FacetProvider([], this, 0 /* Provider.Static */ , value);\n    }\n    /**\n    Create an extension that computes a value for the facet from a\n    state. You must take care to declare the parts of the state that\n    this value depends on, since your function is only called again\n    for a new state when one of those parts changed.\n    \n    In cases where your value depends only on a single field, you'll\n    want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.\n    */ compute(deps, get) {\n        if (this.isStatic) throw new Error(\"Can't compute a static facet\");\n        return new $ccfb9497d8ef598f$var$FacetProvider(deps, this, 1 /* Provider.Single */ , get);\n    }\n    /**\n    Create an extension that computes zero or more values for this\n    facet from a state.\n    */ computeN(deps, get) {\n        if (this.isStatic) throw new Error(\"Can't compute a static facet\");\n        return new $ccfb9497d8ef598f$var$FacetProvider(deps, this, 2 /* Provider.Multi */ , get);\n    }\n    from(field, get) {\n        if (!get) get = (x)=>x;\n        return this.compute([\n            field\n        ], (state)=>get(state.field(field)));\n    }\n}\nfunction $ccfb9497d8ef598f$var$sameArray(a, b) {\n    return a == b || a.length == b.length && a.every((e, i)=>e === b[i]);\n}\nclass $ccfb9497d8ef598f$var$FacetProvider {\n    constructor(dependencies, facet, type, value){\n        this.dependencies = dependencies;\n        this.facet = facet;\n        this.type = type;\n        this.value = value;\n        this.id = $ccfb9497d8ef598f$var$nextID++;\n    }\n    dynamicSlot(addresses) {\n        var _a;\n        let getter = this.value;\n        let compare = this.facet.compareInput;\n        let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */ ;\n        let depDoc = false, depSel = false, depAddrs = [];\n        for (let dep of this.dependencies){\n            if (dep == \"doc\") depDoc = true;\n            else if (dep == \"selection\") depSel = true;\n            else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0) depAddrs.push(addresses[dep.id]);\n        }\n        return {\n            create (state) {\n                state.values[idx] = getter(state);\n                return 1 /* SlotStatus.Changed */ ;\n            },\n            update (state, tr) {\n                if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || $ccfb9497d8ef598f$var$ensureAll(state, depAddrs)) {\n                    let newVal = getter(state);\n                    if (multi ? !$ccfb9497d8ef598f$var$compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {\n                        state.values[idx] = newVal;\n                        return 1 /* SlotStatus.Changed */ ;\n                    }\n                }\n                return 0;\n            },\n            reconfigure: (state, oldState)=>{\n                let newVal, oldAddr = oldState.config.address[id];\n                if (oldAddr != null) {\n                    let oldVal = $ccfb9497d8ef598f$var$getAddr(oldState, oldAddr);\n                    if (this.dependencies.every((dep)=>{\n                        return dep instanceof $ccfb9497d8ef598f$export$ef7d5e9b79fa1504 ? oldState.facet(dep) === state.facet(dep) : dep instanceof $ccfb9497d8ef598f$export$34381b1ce2130245 ? oldState.field(dep, false) == state.field(dep, false) : true;\n                    }) || (multi ? $ccfb9497d8ef598f$var$compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {\n                        state.values[idx] = oldVal;\n                        return 0;\n                    }\n                } else newVal = getter(state);\n                state.values[idx] = newVal;\n                return 1 /* SlotStatus.Changed */ ;\n            }\n        };\n    }\n}\nfunction $ccfb9497d8ef598f$var$compareArray(a, b, compare) {\n    if (a.length != b.length) return false;\n    for(let i = 0; i < a.length; i++)if (!compare(a[i], b[i])) return false;\n    return true;\n}\nfunction $ccfb9497d8ef598f$var$ensureAll(state, addrs) {\n    let changed = false;\n    for (let addr of addrs)if ($ccfb9497d8ef598f$var$ensureAddr(state, addr) & 1 /* SlotStatus.Changed */ ) changed = true;\n    return changed;\n}\nfunction $ccfb9497d8ef598f$var$dynamicFacetSlot(addresses, facet, providers) {\n    let providerAddrs = providers.map((p)=>addresses[p.id]);\n    let providerTypes = providers.map((p)=>p.type);\n    let dynamic = providerAddrs.filter((p)=>!(p & 1));\n    let idx = addresses[facet.id] >> 1;\n    function get(state) {\n        let values = [];\n        for(let i = 0; i < providerAddrs.length; i++){\n            let value = $ccfb9497d8ef598f$var$getAddr(state, providerAddrs[i]);\n            if (providerTypes[i] == 2 /* Provider.Multi */ ) for (let val of value)values.push(val);\n            else values.push(value);\n        }\n        return facet.combine(values);\n    }\n    return {\n        create (state) {\n            for (let addr of providerAddrs)$ccfb9497d8ef598f$var$ensureAddr(state, addr);\n            state.values[idx] = get(state);\n            return 1 /* SlotStatus.Changed */ ;\n        },\n        update (state, tr) {\n            if (!$ccfb9497d8ef598f$var$ensureAll(state, dynamic)) return 0;\n            let value = get(state);\n            if (facet.compare(value, state.values[idx])) return 0;\n            state.values[idx] = value;\n            return 1 /* SlotStatus.Changed */ ;\n        },\n        reconfigure (state, oldState) {\n            let depChanged = $ccfb9497d8ef598f$var$ensureAll(state, providerAddrs);\n            let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);\n            if (oldProviders && !depChanged && $ccfb9497d8ef598f$var$sameArray(providers, oldProviders)) {\n                state.values[idx] = oldValue;\n                return 0;\n            }\n            let value = get(state);\n            if (facet.compare(value, oldValue)) {\n                state.values[idx] = oldValue;\n                return 0;\n            }\n            state.values[idx] = value;\n            return 1 /* SlotStatus.Changed */ ;\n        }\n    };\n}\nconst $ccfb9497d8ef598f$var$initField = /*@__PURE__*/ $ccfb9497d8ef598f$export$ef7d5e9b79fa1504.define({\n    static: true\n});\n/**\nFields can store additional information in an editor state, and\nkeep it in sync with the rest of the state.\n*/ class $ccfb9497d8ef598f$export$34381b1ce2130245 {\n    constructor(/**\n    @internal\n    */ id, createF, updateF, compareF, /**\n    @internal\n    */ spec){\n        this.id = id;\n        this.createF = createF;\n        this.updateF = updateF;\n        this.compareF = compareF;\n        this.spec = spec;\n        /**\n        @internal\n        */ this.provides = undefined;\n    }\n    /**\n    Define a state field.\n    */ static define(config) {\n        let field = new $ccfb9497d8ef598f$export$34381b1ce2130245($ccfb9497d8ef598f$var$nextID++, config.create, config.update, config.compare || ((a, b)=>a === b), config);\n        if (config.provide) field.provides = config.provide(field);\n        return field;\n    }\n    create(state) {\n        let init = state.facet($ccfb9497d8ef598f$var$initField).find((i)=>i.field == this);\n        return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);\n    }\n    /**\n    @internal\n    */ slot(addresses) {\n        let idx = addresses[this.id] >> 1;\n        return {\n            create: (state)=>{\n                state.values[idx] = this.create(state);\n                return 1 /* SlotStatus.Changed */ ;\n            },\n            update: (state, tr)=>{\n                let oldVal = state.values[idx];\n                let value = this.updateF(oldVal, tr);\n                if (this.compareF(oldVal, value)) return 0;\n                state.values[idx] = value;\n                return 1 /* SlotStatus.Changed */ ;\n            },\n            reconfigure: (state, oldState)=>{\n                if (oldState.config.address[this.id] != null) {\n                    state.values[idx] = oldState.field(this);\n                    return 0;\n                }\n                state.values[idx] = this.create(state);\n                return 1 /* SlotStatus.Changed */ ;\n            }\n        };\n    }\n    /**\n    Returns an extension that enables this field and overrides the\n    way it is initialized. Can be useful when you need to provide a\n    non-default starting value for the field.\n    */ init(create) {\n        return [\n            this,\n            $ccfb9497d8ef598f$var$initField.of({\n                field: this,\n                create: create\n            })\n        ];\n    }\n    /**\n    State field instances can be used as\n    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a\n    given state.\n    */ get extension() {\n        return this;\n    }\n}\nconst $ccfb9497d8ef598f$var$Prec_ = {\n    lowest: 4,\n    low: 3,\n    default: 2,\n    high: 1,\n    highest: 0\n};\nfunction $ccfb9497d8ef598f$var$prec(value) {\n    return (ext)=>new $ccfb9497d8ef598f$var$PrecExtension(ext, value);\n}\n/**\nBy default extensions are registered in the order they are found\nin the flattened form of nested array that was provided.\nIndividual extension values can be assigned a precedence to\noverride this. Extensions that do not have a precedence set get\nthe precedence of the nearest parent with a precedence, or\n[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The\nfinal ordering of extensions is determined by first sorting by\nprecedence and then by order within each precedence.\n*/ const $ccfb9497d8ef598f$export$b92464a736444411 = {\n    /**\n    The highest precedence level, for extensions that should end up\n    near the start of the precedence ordering.\n    */ highest: /*@__PURE__*/ $ccfb9497d8ef598f$var$prec($ccfb9497d8ef598f$var$Prec_.highest),\n    /**\n    A higher-than-default precedence, for extensions that should\n    come before those with default precedence.\n    */ high: /*@__PURE__*/ $ccfb9497d8ef598f$var$prec($ccfb9497d8ef598f$var$Prec_.high),\n    /**\n    The default precedence, which is also used for extensions\n    without an explicit precedence.\n    */ default: /*@__PURE__*/ $ccfb9497d8ef598f$var$prec($ccfb9497d8ef598f$var$Prec_.default),\n    /**\n    A lower-than-default precedence.\n    */ low: /*@__PURE__*/ $ccfb9497d8ef598f$var$prec($ccfb9497d8ef598f$var$Prec_.low),\n    /**\n    The lowest precedence level. Meant for things that should end up\n    near the end of the extension order.\n    */ lowest: /*@__PURE__*/ $ccfb9497d8ef598f$var$prec($ccfb9497d8ef598f$var$Prec_.lowest)\n};\nclass $ccfb9497d8ef598f$var$PrecExtension {\n    constructor(inner, prec){\n        this.inner = inner;\n        this.prec = prec;\n    }\n}\n/**\nExtension compartments can be used to make a configuration\ndynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your\nconfiguration in a compartment, you can later\n[replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a\ntransaction.\n*/ class $ccfb9497d8ef598f$export$d51c0172eb2c2431 {\n    /**\n    Create an instance of this compartment to add to your [state\n    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).\n    */ of(ext) {\n        return new $ccfb9497d8ef598f$var$CompartmentInstance(this, ext);\n    }\n    /**\n    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that\n    reconfigures this compartment.\n    */ reconfigure(content) {\n        return $ccfb9497d8ef598f$export$d51c0172eb2c2431.reconfigure.of({\n            compartment: this,\n            extension: content\n        });\n    }\n    /**\n    Get the current content of the compartment in the state, or\n    `undefined` if it isn't present.\n    */ get(state) {\n        return state.config.compartments.get(this);\n    }\n}\nclass $ccfb9497d8ef598f$var$CompartmentInstance {\n    constructor(compartment, inner){\n        this.compartment = compartment;\n        this.inner = inner;\n    }\n}\nclass $ccfb9497d8ef598f$var$Configuration {\n    constructor(base, compartments, dynamicSlots, address, staticValues, facets){\n        this.base = base;\n        this.compartments = compartments;\n        this.dynamicSlots = dynamicSlots;\n        this.address = address;\n        this.staticValues = staticValues;\n        this.facets = facets;\n        this.statusTemplate = [];\n        while(this.statusTemplate.length < dynamicSlots.length)this.statusTemplate.push(0 /* SlotStatus.Unresolved */ );\n    }\n    staticFacet(facet) {\n        let addr = this.address[facet.id];\n        return addr == null ? facet.default : this.staticValues[addr >> 1];\n    }\n    static resolve(base, compartments, oldState) {\n        let fields = [];\n        let facets = Object.create(null);\n        let newCompartments = new Map();\n        for (let ext of $ccfb9497d8ef598f$var$flatten(base, compartments, newCompartments))if (ext instanceof $ccfb9497d8ef598f$export$34381b1ce2130245) fields.push(ext);\n        else (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);\n        let address = Object.create(null);\n        let staticValues = [];\n        let dynamicSlots = [];\n        for (let field of fields){\n            address[field.id] = dynamicSlots.length << 1;\n            dynamicSlots.push((a)=>field.slot(a));\n        }\n        let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;\n        for(let id in facets){\n            let providers = facets[id], facet = providers[0].facet;\n            let oldProviders = oldFacets && oldFacets[id] || [];\n            if (providers.every((p)=>p.type == 0 /* Provider.Static */ )) {\n                address[facet.id] = staticValues.length << 1 | 1;\n                if ($ccfb9497d8ef598f$var$sameArray(oldProviders, providers)) staticValues.push(oldState.facet(facet));\n                else {\n                    let value = facet.combine(providers.map((p)=>p.value));\n                    staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);\n                }\n            } else {\n                for (let p of providers)if (p.type == 0 /* Provider.Static */ ) {\n                    address[p.id] = staticValues.length << 1 | 1;\n                    staticValues.push(p.value);\n                } else {\n                    address[p.id] = dynamicSlots.length << 1;\n                    dynamicSlots.push((a)=>p.dynamicSlot(a));\n                }\n                address[facet.id] = dynamicSlots.length << 1;\n                dynamicSlots.push((a)=>$ccfb9497d8ef598f$var$dynamicFacetSlot(a, facet, providers));\n            }\n        }\n        let dynamic = dynamicSlots.map((f)=>f(address));\n        return new $ccfb9497d8ef598f$var$Configuration(base, newCompartments, dynamic, address, staticValues, facets);\n    }\n}\nfunction $ccfb9497d8ef598f$var$flatten(extension, compartments, newCompartments) {\n    let result = [\n        [],\n        [],\n        [],\n        [],\n        []\n    ];\n    let seen = new Map();\n    function inner(ext, prec) {\n        let known = seen.get(ext);\n        if (known != null) {\n            if (known <= prec) return;\n            let found = result[known].indexOf(ext);\n            if (found > -1) result[known].splice(found, 1);\n            if (ext instanceof $ccfb9497d8ef598f$var$CompartmentInstance) newCompartments.delete(ext.compartment);\n        }\n        seen.set(ext, prec);\n        if (Array.isArray(ext)) for (let e of ext)inner(e, prec);\n        else if (ext instanceof $ccfb9497d8ef598f$var$CompartmentInstance) {\n            if (newCompartments.has(ext.compartment)) throw new RangeError(`Duplicate use of compartment in extensions`);\n            let content = compartments.get(ext.compartment) || ext.inner;\n            newCompartments.set(ext.compartment, content);\n            inner(content, prec);\n        } else if (ext instanceof $ccfb9497d8ef598f$var$PrecExtension) inner(ext.inner, ext.prec);\n        else if (ext instanceof $ccfb9497d8ef598f$export$34381b1ce2130245) {\n            result[prec].push(ext);\n            if (ext.provides) inner(ext.provides, prec);\n        } else if (ext instanceof $ccfb9497d8ef598f$var$FacetProvider) {\n            result[prec].push(ext);\n            if (ext.facet.extensions) inner(ext.facet.extensions, $ccfb9497d8ef598f$var$Prec_.default);\n        } else {\n            let content = ext.extension;\n            if (!content) throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);\n            inner(content, prec);\n        }\n    }\n    inner(extension, $ccfb9497d8ef598f$var$Prec_.default);\n    return result.reduce((a, b)=>a.concat(b));\n}\nfunction $ccfb9497d8ef598f$var$ensureAddr(state, addr) {\n    if (addr & 1) return 2 /* SlotStatus.Computed */ ;\n    let idx = addr >> 1;\n    let status = state.status[idx];\n    if (status == 4 /* SlotStatus.Computing */ ) throw new Error(\"Cyclic dependency between fields and/or facets\");\n    if (status & 2 /* SlotStatus.Computed */ ) return status;\n    state.status[idx] = 4 /* SlotStatus.Computing */ ;\n    let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);\n    return state.status[idx] = 2 /* SlotStatus.Computed */  | changed;\n}\nfunction $ccfb9497d8ef598f$var$getAddr(state, addr) {\n    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];\n}\nconst $ccfb9497d8ef598f$var$languageData = /*@__PURE__*/ $ccfb9497d8ef598f$export$ef7d5e9b79fa1504.define();\nconst $ccfb9497d8ef598f$var$allowMultipleSelections = /*@__PURE__*/ $ccfb9497d8ef598f$export$ef7d5e9b79fa1504.define({\n    combine: (values)=>values.some((v)=>v),\n    static: true\n});\nconst $ccfb9497d8ef598f$var$lineSeparator = /*@__PURE__*/ $ccfb9497d8ef598f$export$ef7d5e9b79fa1504.define({\n    combine: (values)=>values.length ? values[0] : undefined,\n    static: true\n});\nconst $ccfb9497d8ef598f$var$changeFilter = /*@__PURE__*/ $ccfb9497d8ef598f$export$ef7d5e9b79fa1504.define();\nconst $ccfb9497d8ef598f$var$transactionFilter = /*@__PURE__*/ $ccfb9497d8ef598f$export$ef7d5e9b79fa1504.define();\nconst $ccfb9497d8ef598f$var$transactionExtender = /*@__PURE__*/ $ccfb9497d8ef598f$export$ef7d5e9b79fa1504.define();\nconst $ccfb9497d8ef598f$var$readOnly = /*@__PURE__*/ $ccfb9497d8ef598f$export$ef7d5e9b79fa1504.define({\n    combine: (values)=>values.length ? values[0] : false\n});\n/**\nAnnotations are tagged values that are used to add metadata to\ntransactions in an extensible way. They should be used to model\nthings that effect the entire transaction (such as its [time\nstamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its\n[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen\n_alongside_ the other changes made by the transaction, [state\neffects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.\n*/ class $ccfb9497d8ef598f$export$9279461326b8700a {\n    /**\n    @internal\n    */ constructor(/**\n    The annotation type.\n    */ type, /**\n    The value of this annotation.\n    */ value){\n        this.type = type;\n        this.value = value;\n    }\n    /**\n    Define a new type of annotation.\n    */ static define() {\n        return new $ccfb9497d8ef598f$export$f50c3066a53a6f2c();\n    }\n}\n/**\nMarker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).\n*/ class $ccfb9497d8ef598f$export$f50c3066a53a6f2c {\n    /**\n    Create an instance of this annotation.\n    */ of(value) {\n        return new $ccfb9497d8ef598f$export$9279461326b8700a(this, value);\n    }\n}\n/**\nRepresentation of a type of state effect. Defined with\n[`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).\n*/ class $ccfb9497d8ef598f$export$e41ff6bd17cc4417 {\n    /**\n    @internal\n    */ constructor(// The `any` types in these function types are there to work\n    // around TypeScript issue #37631, where the type guard on\n    // `StateEffect.is` mysteriously stops working when these properly\n    // have type `Value`.\n    /**\n    @internal\n    */ map){\n        this.map = map;\n    }\n    /**\n    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this\n    type.\n    */ of(value) {\n        return new $ccfb9497d8ef598f$export$95000d4efaa4321f(this, value);\n    }\n}\n/**\nState effects can be used to represent additional effects\nassociated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They\nare often useful to model changes to custom [state\nfields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in\ndocument or selection changes.\n*/ class $ccfb9497d8ef598f$export$95000d4efaa4321f {\n    /**\n    @internal\n    */ constructor(/**\n    @internal\n    */ type, /**\n    The value of this effect.\n    */ value){\n        this.type = type;\n        this.value = value;\n    }\n    /**\n    Map this effect through a position mapping. Will return\n    `undefined` when that ends up deleting the effect.\n    */ map(mapping) {\n        let mapped = this.type.map(this.value, mapping);\n        return mapped === undefined ? undefined : mapped == this.value ? this : new $ccfb9497d8ef598f$export$95000d4efaa4321f(this.type, mapped);\n    }\n    /**\n    Tells you whether this effect object is of a given\n    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).\n    */ is(type) {\n        return this.type == type;\n    }\n    /**\n    Define a new effect type. The type parameter indicates the type\n    of values that his effect holds. It should be a type that\n    doesn't include `undefined`, since that is used in\n    [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is\n    removed.\n    */ static define(spec = {}) {\n        return new $ccfb9497d8ef598f$export$e41ff6bd17cc4417(spec.map || ((v)=>v));\n    }\n    /**\n    Map an array of effects through a change set.\n    */ static mapEffects(effects, mapping) {\n        if (!effects.length) return effects;\n        let result = [];\n        for (let effect of effects){\n            let mapped = effect.map(mapping);\n            if (mapped) result.push(mapped);\n        }\n        return result;\n    }\n}\n/**\nThis effect can be used to reconfigure the root extensions of\nthe editor. Doing this will discard any extensions\n[appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset\nthe content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)\ncompartments.\n*/ $ccfb9497d8ef598f$export$95000d4efaa4321f.reconfigure = /*@__PURE__*/ $ccfb9497d8ef598f$export$95000d4efaa4321f.define();\n/**\nAppend extensions to the top-level configuration of the editor.\n*/ $ccfb9497d8ef598f$export$95000d4efaa4321f.appendConfig = /*@__PURE__*/ $ccfb9497d8ef598f$export$95000d4efaa4321f.define();\n/**\nChanges to the editor state are grouped into transactions.\nTypically, a user action creates a single transaction, which may\ncontain any number of document changes, may change the selection,\nor have other effects. Create a transaction by calling\n[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately\ndispatch one by calling\n[`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).\n*/ class $ccfb9497d8ef598f$export$febc5573c75cefb0 {\n    constructor(/**\n    The state from which the transaction starts.\n    */ startState, /**\n    The document changes made by this transaction.\n    */ changes, /**\n    The selection set by this transaction, or undefined if it\n    doesn't explicitly set a selection.\n    */ selection, /**\n    The effects added to the transaction.\n    */ effects, /**\n    @internal\n    */ annotations, /**\n    Whether the selection should be scrolled into view after this\n    transaction is dispatched.\n    */ scrollIntoView){\n        this.startState = startState;\n        this.changes = changes;\n        this.selection = selection;\n        this.effects = effects;\n        this.annotations = annotations;\n        this.scrollIntoView = scrollIntoView;\n        /**\n        @internal\n        */ this._doc = null;\n        /**\n        @internal\n        */ this._state = null;\n        if (selection) $ccfb9497d8ef598f$var$checkSelection(selection, changes.newLength);\n        if (!annotations.some((a)=>a.type == $ccfb9497d8ef598f$export$febc5573c75cefb0.time)) this.annotations = annotations.concat($ccfb9497d8ef598f$export$febc5573c75cefb0.time.of(Date.now()));\n    }\n    /**\n    @internal\n    */ static create(startState, changes, selection, effects, annotations, scrollIntoView) {\n        return new $ccfb9497d8ef598f$export$febc5573c75cefb0(startState, changes, selection, effects, annotations, scrollIntoView);\n    }\n    /**\n    The new document produced by the transaction. Contrary to\n    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't\n    force the entire new state to be computed right away, so it is\n    recommended that [transaction\n    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter\n    when they need to look at the new document.\n    */ get newDoc() {\n        return this._doc || (this._doc = this.changes.apply(this.startState.doc));\n    }\n    /**\n    The new selection produced by the transaction. If\n    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,\n    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's\n    current selection through the changes made by the transaction.\n    */ get newSelection() {\n        return this.selection || this.startState.selection.map(this.changes);\n    }\n    /**\n    The new state created by the transaction. Computed on demand\n    (but retained for subsequent access), so it is recommended not to\n    access it in [transaction\n    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.\n    */ get state() {\n        if (!this._state) this.startState.applyTransaction(this);\n        return this._state;\n    }\n    /**\n    Get the value of the given annotation type, if any.\n    */ annotation(type) {\n        for (let ann of this.annotations)if (ann.type == type) return ann.value;\n        return undefined;\n    }\n    /**\n    Indicates whether the transaction changed the document.\n    */ get docChanged() {\n        return !this.changes.empty;\n    }\n    /**\n    Indicates whether this transaction reconfigures the state\n    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or\n    with a top-level configuration\n    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).\n    */ get reconfigured() {\n        return this.startState.config != this.state.config;\n    }\n    /**\n    Returns true if the transaction has a [user\n    event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to\n    or more specific than `event`. For example, if the transaction\n    has `\"select.pointer\"` as user event, `\"select\"` and\n    `\"select.pointer\"` will match it.\n    */ isUserEvent(event) {\n        let e = this.annotation($ccfb9497d8ef598f$export$febc5573c75cefb0.userEvent);\n        return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == \".\"));\n    }\n}\n/**\nAnnotation used to store transaction timestamps. Automatically\nadded to every transaction, holding `Date.now()`.\n*/ $ccfb9497d8ef598f$export$febc5573c75cefb0.time = /*@__PURE__*/ $ccfb9497d8ef598f$export$9279461326b8700a.define();\n/**\nAnnotation used to associate a transaction with a user interface\nevent. Holds a string identifying the event, using a\ndot-separated format to support attaching more specific\ninformation. The events used by the core libraries are:\n\n - `\"input\"` when content is entered\n   - `\"input.type\"` for typed input\n     - `\"input.type.compose\"` for composition\n   - `\"input.paste\"` for pasted input\n   - `\"input.drop\"` when adding content with drag-and-drop\n   - `\"input.complete\"` when autocompleting\n - `\"delete\"` when the user deletes content\n   - `\"delete.selection\"` when deleting the selection\n   - `\"delete.forward\"` when deleting forward from the selection\n   - `\"delete.backward\"` when deleting backward from the selection\n   - `\"delete.cut\"` when cutting to the clipboard\n - `\"move\"` when content is moved\n   - `\"move.drop\"` when content is moved within the editor through drag-and-drop\n - `\"select\"` when explicitly changing the selection\n   - `\"select.pointer\"` when selecting with a mouse or other pointing device\n - `\"undo\"` and `\"redo\"` for history actions\n\nUse [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check\nwhether the annotation matches a given event.\n*/ $ccfb9497d8ef598f$export$febc5573c75cefb0.userEvent = /*@__PURE__*/ $ccfb9497d8ef598f$export$9279461326b8700a.define();\n/**\nAnnotation indicating whether a transaction should be added to\nthe undo history or not.\n*/ $ccfb9497d8ef598f$export$febc5573c75cefb0.addToHistory = /*@__PURE__*/ $ccfb9497d8ef598f$export$9279461326b8700a.define();\n/**\nAnnotation indicating (when present and true) that a transaction\nrepresents a change made by some other actor, not the user. This\nis used, for example, to tag other people's changes in\ncollaborative editing.\n*/ $ccfb9497d8ef598f$export$febc5573c75cefb0.remote = /*@__PURE__*/ $ccfb9497d8ef598f$export$9279461326b8700a.define();\nfunction $ccfb9497d8ef598f$var$joinRanges(a, b) {\n    let result = [];\n    for(let iA = 0, iB = 0;;){\n        let from, to;\n        if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {\n            from = a[iA++];\n            to = a[iA++];\n        } else if (iB < b.length) {\n            from = b[iB++];\n            to = b[iB++];\n        } else return result;\n        if (!result.length || result[result.length - 1] < from) result.push(from, to);\n        else if (result[result.length - 1] < to) result[result.length - 1] = to;\n    }\n}\nfunction $ccfb9497d8ef598f$var$mergeTransaction(a, b, sequential) {\n    var _a;\n    let mapForA, mapForB, changes;\n    if (sequential) {\n        mapForA = b.changes;\n        mapForB = $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c.empty(b.changes.length);\n        changes = a.changes.compose(b.changes);\n    } else {\n        mapForA = b.changes.map(a.changes);\n        mapForB = a.changes.mapDesc(b.changes, true);\n        changes = a.changes.compose(mapForA);\n    }\n    return {\n        changes: changes,\n        selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),\n        effects: $ccfb9497d8ef598f$export$95000d4efaa4321f.mapEffects(a.effects, mapForA).concat($ccfb9497d8ef598f$export$95000d4efaa4321f.mapEffects(b.effects, mapForB)),\n        annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,\n        scrollIntoView: a.scrollIntoView || b.scrollIntoView\n    };\n}\nfunction $ccfb9497d8ef598f$var$resolveTransactionInner(state, spec, docSize) {\n    let sel = spec.selection, annotations = $ccfb9497d8ef598f$var$asArray(spec.annotations);\n    if (spec.userEvent) annotations = annotations.concat($ccfb9497d8ef598f$export$febc5573c75cefb0.userEvent.of(spec.userEvent));\n    return {\n        changes: spec.changes instanceof $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c ? spec.changes : $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c.of(spec.changes || [], docSize, state.facet($ccfb9497d8ef598f$var$lineSeparator)),\n        selection: sel && (sel instanceof $ccfb9497d8ef598f$export$3bb1bd44aee62999 ? sel : $ccfb9497d8ef598f$export$3bb1bd44aee62999.single(sel.anchor, sel.head)),\n        effects: $ccfb9497d8ef598f$var$asArray(spec.effects),\n        annotations: annotations,\n        scrollIntoView: !!spec.scrollIntoView\n    };\n}\nfunction $ccfb9497d8ef598f$var$resolveTransaction(state, specs, filter) {\n    let s = $ccfb9497d8ef598f$var$resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);\n    if (specs.length && specs[0].filter === false) filter = false;\n    for(let i = 1; i < specs.length; i++){\n        if (specs[i].filter === false) filter = false;\n        let seq = !!specs[i].sequential;\n        s = $ccfb9497d8ef598f$var$mergeTransaction(s, $ccfb9497d8ef598f$var$resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);\n    }\n    let tr = $ccfb9497d8ef598f$export$febc5573c75cefb0.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);\n    return $ccfb9497d8ef598f$var$extendTransaction(filter ? $ccfb9497d8ef598f$var$filterTransaction(tr) : tr);\n}\n// Finish a transaction by applying filters if necessary.\nfunction $ccfb9497d8ef598f$var$filterTransaction(tr) {\n    let state = tr.startState;\n    // Change filters\n    let result = true;\n    for (let filter of state.facet($ccfb9497d8ef598f$var$changeFilter)){\n        let value = filter(tr);\n        if (value === false) {\n            result = false;\n            break;\n        }\n        if (Array.isArray(value)) result = result === true ? value : $ccfb9497d8ef598f$var$joinRanges(result, value);\n    }\n    if (result !== true) {\n        let changes, back;\n        if (result === false) {\n            back = tr.changes.invertedDesc;\n            changes = $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c.empty(state.doc.length);\n        } else {\n            let filtered = tr.changes.filter(result);\n            changes = filtered.changes;\n            back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;\n        }\n        tr = $ccfb9497d8ef598f$export$febc5573c75cefb0.create(state, changes, tr.selection && tr.selection.map(back), $ccfb9497d8ef598f$export$95000d4efaa4321f.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);\n    }\n    // Transaction filters\n    let filters = state.facet($ccfb9497d8ef598f$var$transactionFilter);\n    for(let i = filters.length - 1; i >= 0; i--){\n        let filtered = filters[i](tr);\n        if (filtered instanceof $ccfb9497d8ef598f$export$febc5573c75cefb0) tr = filtered;\n        else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof $ccfb9497d8ef598f$export$febc5573c75cefb0) tr = filtered[0];\n        else tr = $ccfb9497d8ef598f$var$resolveTransaction(state, $ccfb9497d8ef598f$var$asArray(filtered), false);\n    }\n    return tr;\n}\nfunction $ccfb9497d8ef598f$var$extendTransaction(tr) {\n    let state = tr.startState, extenders = state.facet($ccfb9497d8ef598f$var$transactionExtender), spec = tr;\n    for(let i = extenders.length - 1; i >= 0; i--){\n        let extension = extenders[i](tr);\n        if (extension && Object.keys(extension).length) spec = $ccfb9497d8ef598f$var$mergeTransaction(spec, $ccfb9497d8ef598f$var$resolveTransactionInner(state, extension, tr.changes.newLength), true);\n    }\n    return spec == tr ? tr : $ccfb9497d8ef598f$export$febc5573c75cefb0.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);\n}\nconst $ccfb9497d8ef598f$var$none = [];\nfunction $ccfb9497d8ef598f$var$asArray(value) {\n    return value == null ? $ccfb9497d8ef598f$var$none : Array.isArray(value) ? value : [\n        value\n    ];\n}\n/**\nThe categories produced by a [character\ncategorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used\ndo things like selecting by word.\n*/ var $ccfb9497d8ef598f$export$239a3d59567c1401 = /*@__PURE__*/ function(CharCategory) {\n    /**\n    Word characters.\n    */ CharCategory[CharCategory[\"Word\"] = 0] = \"Word\";\n    /**\n    Whitespace.\n    */ CharCategory[CharCategory[\"Space\"] = 1] = \"Space\";\n    /**\n    Anything else.\n    */ CharCategory[CharCategory[\"Other\"] = 2] = \"Other\";\n    return CharCategory;\n}($ccfb9497d8ef598f$export$239a3d59567c1401 || ($ccfb9497d8ef598f$export$239a3d59567c1401 = {}));\nconst $ccfb9497d8ef598f$var$nonASCIISingleCaseWordChar = /[\\u00df\\u0587\\u0590-\\u05f4\\u0600-\\u06ff\\u3040-\\u309f\\u30a0-\\u30ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\uac00-\\ud7af]/;\nlet $ccfb9497d8ef598f$var$wordChar;\ntry {\n    $ccfb9497d8ef598f$var$wordChar = /*@__PURE__*/ new RegExp(\"[\\\\p{Alphabetic}\\\\p{Number}_]\", \"u\");\n} catch (_) {}\nfunction $ccfb9497d8ef598f$var$hasWordChar(str) {\n    if ($ccfb9497d8ef598f$var$wordChar) return $ccfb9497d8ef598f$var$wordChar.test(str);\n    for(let i = 0; i < str.length; i++){\n        let ch = str[i];\n        if (/\\w/.test(ch) || ch > \"\\x80\" && (ch.toUpperCase() != ch.toLowerCase() || $ccfb9497d8ef598f$var$nonASCIISingleCaseWordChar.test(ch))) return true;\n    }\n    return false;\n}\nfunction $ccfb9497d8ef598f$var$makeCategorizer(wordChars) {\n    return (char)=>{\n        if (!/\\S/.test(char)) return $ccfb9497d8ef598f$export$239a3d59567c1401.Space;\n        if ($ccfb9497d8ef598f$var$hasWordChar(char)) return $ccfb9497d8ef598f$export$239a3d59567c1401.Word;\n        for(let i = 0; i < wordChars.length; i++)if (char.indexOf(wordChars[i]) > -1) return $ccfb9497d8ef598f$export$239a3d59567c1401.Word;\n        return $ccfb9497d8ef598f$export$239a3d59567c1401.Other;\n    };\n}\n/**\nThe editor state class is a persistent (immutable) data structure.\nTo update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a\n[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state\ninstance, without modifying the original object.\n\nAs such, _never_ mutate properties of a state directly. That'll\njust break things.\n*/ class $ccfb9497d8ef598f$export$afa855cbfaff27f2 {\n    constructor(/**\n    @internal\n    */ config, /**\n    The current document.\n    */ doc, /**\n    The current selection.\n    */ selection, /**\n    @internal\n    */ values, computeSlot, tr){\n        this.config = config;\n        this.doc = doc;\n        this.selection = selection;\n        this.values = values;\n        this.status = config.statusTemplate.slice();\n        this.computeSlot = computeSlot;\n        // Fill in the computed state immediately, so that further queries\n        // for it made during the update return this state\n        if (tr) tr._state = this;\n        for(let i = 0; i < this.config.dynamicSlots.length; i++)$ccfb9497d8ef598f$var$ensureAddr(this, i << 1);\n        this.computeSlot = null;\n    }\n    field(field, require = true) {\n        let addr = this.config.address[field.id];\n        if (addr == null) {\n            if (require) throw new RangeError(\"Field is not present in this state\");\n            return undefined;\n        }\n        $ccfb9497d8ef598f$var$ensureAddr(this, addr);\n        return $ccfb9497d8ef598f$var$getAddr(this, addr);\n    }\n    /**\n    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this\n    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)\n    can be passed. Unless\n    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the\n    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec\n    are assumed to start in the _current_ document (not the document\n    produced by previous specs), and its\n    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and\n    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer\n    to the document created by its _own_ changes. The resulting\n    transaction contains the combined effect of all the different\n    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later\n    specs take precedence over earlier ones.\n    */ update(...specs) {\n        return $ccfb9497d8ef598f$var$resolveTransaction(this, specs, true);\n    }\n    /**\n    @internal\n    */ applyTransaction(tr) {\n        let conf = this.config, { base: base, compartments: compartments } = conf;\n        for (let effect of tr.effects){\n            if (effect.is($ccfb9497d8ef598f$export$d51c0172eb2c2431.reconfigure)) {\n                if (conf) {\n                    compartments = new Map;\n                    conf.compartments.forEach((val, key)=>compartments.set(key, val));\n                    conf = null;\n                }\n                compartments.set(effect.value.compartment, effect.value.extension);\n            } else if (effect.is($ccfb9497d8ef598f$export$95000d4efaa4321f.reconfigure)) {\n                conf = null;\n                base = effect.value;\n            } else if (effect.is($ccfb9497d8ef598f$export$95000d4efaa4321f.appendConfig)) {\n                conf = null;\n                base = $ccfb9497d8ef598f$var$asArray(base).concat(effect.value);\n            }\n        }\n        let startValues;\n        if (!conf) {\n            conf = $ccfb9497d8ef598f$var$Configuration.resolve(base, compartments, this);\n            let intermediateState = new $ccfb9497d8ef598f$export$afa855cbfaff27f2(conf, this.doc, this.selection, conf.dynamicSlots.map(()=>null), (state, slot)=>slot.reconfigure(state, this), null);\n            startValues = intermediateState.values;\n        } else startValues = tr.startState.values.slice();\n        new $ccfb9497d8ef598f$export$afa855cbfaff27f2(conf, tr.newDoc, tr.newSelection, startValues, (state, slot)=>slot.update(state, tr), tr);\n    }\n    /**\n    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that\n    replaces every selection range with the given content.\n    */ replaceSelection(text) {\n        if (typeof text == \"string\") text = this.toText(text);\n        return this.changeByRange((range)=>({\n                changes: {\n                    from: range.from,\n                    to: range.to,\n                    insert: text\n                },\n                range: $ccfb9497d8ef598f$export$3bb1bd44aee62999.cursor(range.from + text.length)\n            }));\n    }\n    /**\n    Create a set of changes and a new selection by running the given\n    function for each range in the active selection. The function\n    can return an optional set of changes (in the coordinate space\n    of the start document), plus an updated range (in the coordinate\n    space of the document produced by the call's own changes). This\n    method will merge all the changes and ranges into a single\n    changeset and selection, and return it as a [transaction\n    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to\n    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).\n    */ changeByRange(f) {\n        let sel = this.selection;\n        let result1 = f(sel.ranges[0]);\n        let changes = this.changes(result1.changes), ranges = [\n            result1.range\n        ];\n        let effects = $ccfb9497d8ef598f$var$asArray(result1.effects);\n        for(let i = 1; i < sel.ranges.length; i++){\n            let result = f(sel.ranges[i]);\n            let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);\n            for(let j = 0; j < i; j++)ranges[j] = ranges[j].map(newMapped);\n            let mapBy = changes.mapDesc(newChanges, true);\n            ranges.push(result.range.map(mapBy));\n            changes = changes.compose(newMapped);\n            effects = $ccfb9497d8ef598f$export$95000d4efaa4321f.mapEffects(effects, newMapped).concat($ccfb9497d8ef598f$export$95000d4efaa4321f.mapEffects($ccfb9497d8ef598f$var$asArray(result.effects), mapBy));\n        }\n        return {\n            changes: changes,\n            selection: $ccfb9497d8ef598f$export$3bb1bd44aee62999.create(ranges, sel.mainIndex),\n            effects: effects\n        };\n    }\n    /**\n    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change\n    description, taking the state's document length and line\n    separator into account.\n    */ changes(spec = []) {\n        if (spec instanceof $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c) return spec;\n        return $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c.of(spec, this.doc.length, this.facet($ccfb9497d8ef598f$export$afa855cbfaff27f2.lineSeparator));\n    }\n    /**\n    Using the state's [line\n    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a\n    [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.\n    */ toText(string) {\n        return $ccfb9497d8ef598f$export$5f1af8db9871e1d6.of(string.split(this.facet($ccfb9497d8ef598f$export$afa855cbfaff27f2.lineSeparator) || $ccfb9497d8ef598f$var$DefaultSplit));\n    }\n    /**\n    Return the given range of the document as a string.\n    */ sliceDoc(from = 0, to = this.doc.length) {\n        return this.doc.sliceString(from, to, this.lineBreak);\n    }\n    /**\n    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).\n    */ facet(facet) {\n        let addr = this.config.address[facet.id];\n        if (addr == null) return facet.default;\n        $ccfb9497d8ef598f$var$ensureAddr(this, addr);\n        return $ccfb9497d8ef598f$var$getAddr(this, addr);\n    }\n    /**\n    Convert this state to a JSON-serializable object. When custom\n    fields should be serialized, you can pass them in as an object\n    mapping property names (in the resulting object, which should\n    not use `doc` or `selection`) to fields.\n    */ toJSON(fields) {\n        let result = {\n            doc: this.sliceDoc(),\n            selection: this.selection.toJSON()\n        };\n        if (fields) for(let prop in fields){\n            let value = fields[prop];\n            if (value instanceof $ccfb9497d8ef598f$export$34381b1ce2130245 && this.config.address[value.id] != null) result[prop] = value.spec.toJSON(this.field(fields[prop]), this);\n        }\n        return result;\n    }\n    /**\n    Deserialize a state from its JSON representation. When custom\n    fields should be deserialized, pass the same object you passed\n    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as\n    third argument.\n    */ static fromJSON(json, config = {}, fields) {\n        if (!json || typeof json.doc != \"string\") throw new RangeError(\"Invalid JSON representation for EditorState\");\n        let fieldInit = [];\n        if (fields) {\n            for(let prop in fields)if (Object.prototype.hasOwnProperty.call(json, prop)) {\n                let field = fields[prop], value = json[prop];\n                fieldInit.push(field.init((state)=>field.spec.fromJSON(value, state)));\n            }\n        }\n        return $ccfb9497d8ef598f$export$afa855cbfaff27f2.create({\n            doc: json.doc,\n            selection: $ccfb9497d8ef598f$export$3bb1bd44aee62999.fromJSON(json.selection),\n            extensions: config.extensions ? fieldInit.concat([\n                config.extensions\n            ]) : fieldInit\n        });\n    }\n    /**\n    Create a new state. You'll usually only need this when\n    initializing an editor—updated states are created by applying\n    transactions.\n    */ static create(config = {}) {\n        let configuration = $ccfb9497d8ef598f$var$Configuration.resolve(config.extensions || [], new Map);\n        let doc = config.doc instanceof $ccfb9497d8ef598f$export$5f1af8db9871e1d6 ? config.doc : $ccfb9497d8ef598f$export$5f1af8db9871e1d6.of((config.doc || \"\").split(configuration.staticFacet($ccfb9497d8ef598f$export$afa855cbfaff27f2.lineSeparator) || $ccfb9497d8ef598f$var$DefaultSplit));\n        let selection = !config.selection ? $ccfb9497d8ef598f$export$3bb1bd44aee62999.single(0) : config.selection instanceof $ccfb9497d8ef598f$export$3bb1bd44aee62999 ? config.selection : $ccfb9497d8ef598f$export$3bb1bd44aee62999.single(config.selection.anchor, config.selection.head);\n        $ccfb9497d8ef598f$var$checkSelection(selection, doc.length);\n        if (!configuration.staticFacet($ccfb9497d8ef598f$var$allowMultipleSelections)) selection = selection.asSingle();\n        return new $ccfb9497d8ef598f$export$afa855cbfaff27f2(configuration, doc, selection, configuration.dynamicSlots.map(()=>null), (state, slot)=>slot.create(state), null);\n    }\n    /**\n    The size (in columns) of a tab in the document, determined by\n    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.\n    */ get tabSize() {\n        return this.facet($ccfb9497d8ef598f$export$afa855cbfaff27f2.tabSize);\n    }\n    /**\n    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)\n    string for this state.\n    */ get lineBreak() {\n        return this.facet($ccfb9497d8ef598f$export$afa855cbfaff27f2.lineSeparator) || \"\\n\";\n    }\n    /**\n    Returns true when the editor is\n    [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.\n    */ get readOnly() {\n        return this.facet($ccfb9497d8ef598f$var$readOnly);\n    }\n    /**\n    Look up a translation for the given phrase (via the\n    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the\n    original string if no translation is found.\n    \n    If additional arguments are passed, they will be inserted in\n    place of markers like `$1` (for the first value) and `$2`, etc.\n    A single `$` is equivalent to `$1`, and `$$` will produce a\n    literal dollar sign.\n    */ phrase(phrase, ...insert) {\n        for (let map of this.facet($ccfb9497d8ef598f$export$afa855cbfaff27f2.phrases))if (Object.prototype.hasOwnProperty.call(map, phrase)) {\n            phrase = map[phrase];\n            break;\n        }\n        if (insert.length) phrase = phrase.replace(/\\$(\\$|\\d*)/g, (m, i)=>{\n            if (i == \"$\") return \"$\";\n            let n = +(i || 1);\n            return !n || n > insert.length ? m : insert[n - 1];\n        });\n        return phrase;\n    }\n    /**\n    Find the values for a given language data field, provided by the\n    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.\n    \n    Examples of language data fields are...\n    \n    - [`\"commentTokens\"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying\n      comment syntax.\n    - [`\"autocomplete\"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)\n      for providing language-specific completion sources.\n    - [`\"wordChars\"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding\n      characters that should be considered part of words in this\n      language.\n    - [`\"closeBrackets\"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls\n      bracket closing behavior.\n    */ languageDataAt(name, pos, side = -1) {\n        let values = [];\n        for (let provider of this.facet($ccfb9497d8ef598f$var$languageData)){\n            for (let result of provider(this, pos, side))if (Object.prototype.hasOwnProperty.call(result, name)) values.push(result[name]);\n        }\n        return values;\n    }\n    /**\n    Return a function that can categorize strings (expected to\n    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))\n    into one of:\n    \n     - Word (contains an alphanumeric character or a character\n       explicitly listed in the local language's `\"wordChars\"`\n       language data, which should be a string)\n     - Space (contains only whitespace)\n     - Other (anything else)\n    */ charCategorizer(at) {\n        return $ccfb9497d8ef598f$var$makeCategorizer(this.languageDataAt(\"wordChars\", at).join(\"\"));\n    }\n    /**\n    Find the word at the given position, meaning the range\n    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters\n    around it. If no word characters are adjacent to the position,\n    this returns null.\n    */ wordAt(pos) {\n        let { text: text, from: from, length: length } = this.doc.lineAt(pos);\n        let cat = this.charCategorizer(pos);\n        let start = pos - from, end = pos - from;\n        while(start > 0){\n            let prev = $ccfb9497d8ef598f$export$a0fa439fd515e1ed(text, start, false);\n            if (cat(text.slice(prev, start)) != $ccfb9497d8ef598f$export$239a3d59567c1401.Word) break;\n            start = prev;\n        }\n        while(end < length){\n            let next = $ccfb9497d8ef598f$export$a0fa439fd515e1ed(text, end);\n            if (cat(text.slice(end, next)) != $ccfb9497d8ef598f$export$239a3d59567c1401.Word) break;\n            end = next;\n        }\n        return start == end ? null : $ccfb9497d8ef598f$export$3bb1bd44aee62999.range(start + from, end + from);\n    }\n}\n/**\nA facet that, when enabled, causes the editor to allow multiple\nranges to be selected. Be careful though, because by default the\neditor relies on the native DOM selection, which cannot handle\nmultiple selections. An extension like\n[`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make\nsecondary selections visible to the user.\n*/ $ccfb9497d8ef598f$export$afa855cbfaff27f2.allowMultipleSelections = $ccfb9497d8ef598f$var$allowMultipleSelections;\n/**\nConfigures the tab size to use in this state. The first\n(highest-precedence) value of the facet is used. If no value is\ngiven, this defaults to 4.\n*/ $ccfb9497d8ef598f$export$afa855cbfaff27f2.tabSize = /*@__PURE__*/ $ccfb9497d8ef598f$export$ef7d5e9b79fa1504.define({\n    combine: (values)=>values.length ? values[0] : 4\n});\n/**\nThe line separator to use. By default, any of `\"\\n\"`, `\"\\r\\n\"`\nand `\"\\r\"` is treated as a separator when splitting lines, and\nlines are joined with `\"\\n\"`.\n\nWhen you configure a value here, only that precise separator\nwill be used, allowing you to round-trip documents through the\neditor without normalizing line separators.\n*/ $ccfb9497d8ef598f$export$afa855cbfaff27f2.lineSeparator = $ccfb9497d8ef598f$var$lineSeparator;\n/**\nThis facet controls the value of the\n[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is\nconsulted by commands and extensions that implement editing\nfunctionality to determine whether they should apply. It\ndefaults to false, but when its highest-precedence value is\n`true`, such functionality disables itself.\n\nNot to be confused with\n[`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which\ncontrols whether the editor's DOM is set to be editable (and\nthus focusable).\n*/ $ccfb9497d8ef598f$export$afa855cbfaff27f2.readOnly = $ccfb9497d8ef598f$var$readOnly;\n/**\nRegisters translation phrases. The\n[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through\nall objects registered with this facet to find translations for\nits argument.\n*/ $ccfb9497d8ef598f$export$afa855cbfaff27f2.phrases = /*@__PURE__*/ $ccfb9497d8ef598f$export$ef7d5e9b79fa1504.define({\n    compare (a, b) {\n        let kA = Object.keys(a), kB = Object.keys(b);\n        return kA.length == kB.length && kA.every((k)=>a[k] == b[k]);\n    }\n});\n/**\nA facet used to register [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.\n*/ $ccfb9497d8ef598f$export$afa855cbfaff27f2.languageData = $ccfb9497d8ef598f$var$languageData;\n/**\nFacet used to register change filters, which are called for each\ntransaction (unless explicitly\n[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress\npart of the transaction's changes.\n\nSuch a function can return `true` to indicate that it doesn't\nwant to do anything, `false` to completely stop the changes in\nthe transaction, or a set of ranges in which changes should be\nsuppressed. Such ranges are represented as an array of numbers,\nwith each pair of two numbers indicating the start and end of a\nrange. So for example `[10, 20, 100, 110]` suppresses changes\nbetween 10 and 20, and between 100 and 110.\n*/ $ccfb9497d8ef598f$export$afa855cbfaff27f2.changeFilter = $ccfb9497d8ef598f$var$changeFilter;\n/**\nFacet used to register a hook that gets a chance to update or\nreplace transaction specs before they are applied. This will\nonly be applied for transactions that don't have\n[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You\ncan either return a single transaction spec (possibly the input\ntransaction), or an array of specs (which will be combined in\nthe same way as the arguments to\n[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).\n\nWhen possible, it is recommended to avoid accessing\n[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,\nsince it will force creation of a state that will then be\ndiscarded again, if the transaction is actually filtered.\n\n(This functionality should be used with care. Indiscriminately\nmodifying transaction is likely to break something or degrade\nthe user experience.)\n*/ $ccfb9497d8ef598f$export$afa855cbfaff27f2.transactionFilter = $ccfb9497d8ef598f$var$transactionFilter;\n/**\nThis is a more limited form of\n[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),\nwhich can only add\n[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and\n[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type\nof filter runs even if the transaction has disabled regular\n[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable\nfor effects that don't need to touch the changes or selection,\nbut do want to process every transaction.\n\nExtenders run _after_ filters, when both are present.\n*/ $ccfb9497d8ef598f$export$afa855cbfaff27f2.transactionExtender = $ccfb9497d8ef598f$var$transactionExtender;\n$ccfb9497d8ef598f$export$d51c0172eb2c2431.reconfigure = /*@__PURE__*/ $ccfb9497d8ef598f$export$95000d4efaa4321f.define();\n/**\nUtility function for combining behaviors to fill in a config\nobject from an array of provided configs. `defaults` should hold\ndefault values for all optional fields in `Config`.\n\nThe function will, by default, error\nwhen a field gets two values that aren't `===`-equal, but you can\nprovide combine functions per field to do something else.\n*/ function $ccfb9497d8ef598f$export$4e19c0b693794a7e(configs, defaults, combine = {}) {\n    let result = {};\n    for (let config of configs)for (let key of Object.keys(config)){\n        let value = config[key], current = result[key];\n        if (current === undefined) result[key] = value;\n        else if (current === value || value === undefined) ; // No conflict\n        else if (Object.hasOwnProperty.call(combine, key)) result[key] = combine[key](current, value);\n        else throw new Error(\"Config merge conflict for field \" + key);\n    }\n    for(let key in defaults)if (result[key] === undefined) result[key] = defaults[key];\n    return result;\n}\n/**\nEach range is associated with a value, which must inherit from\nthis class.\n*/ class $ccfb9497d8ef598f$export$d60f08ed93a48611 {\n    /**\n    Compare this value with another value. Used when comparing\n    rangesets. The default implementation compares by identity.\n    Unless you are only creating a fixed number of unique instances\n    of your value type, it is a good idea to implement this\n    properly.\n    */ eq(other) {\n        return this == other;\n    }\n    /**\n    Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.\n    */ range(from, to = from) {\n        return $ccfb9497d8ef598f$export$9a58ef0d7ad3278c.create(from, to, this);\n    }\n}\n$ccfb9497d8ef598f$export$d60f08ed93a48611.prototype.startSide = $ccfb9497d8ef598f$export$d60f08ed93a48611.prototype.endSide = 0;\n$ccfb9497d8ef598f$export$d60f08ed93a48611.prototype.point = false;\n$ccfb9497d8ef598f$export$d60f08ed93a48611.prototype.mapMode = $ccfb9497d8ef598f$export$39cf3280165f92aa.TrackDel;\n/**\nA range associates a value with a range of positions.\n*/ class $ccfb9497d8ef598f$export$9a58ef0d7ad3278c {\n    constructor(/**\n    The range's start position.\n    */ from, /**\n    Its end position.\n    */ to, /**\n    The value associated with this range.\n    */ value){\n        this.from = from;\n        this.to = to;\n        this.value = value;\n    }\n    /**\n    @internal\n    */ static create(from, to, value) {\n        return new $ccfb9497d8ef598f$export$9a58ef0d7ad3278c(from, to, value);\n    }\n}\nfunction $ccfb9497d8ef598f$var$cmpRange(a, b) {\n    return a.from - b.from || a.value.startSide - b.value.startSide;\n}\nclass $ccfb9497d8ef598f$var$Chunk {\n    constructor(from, to, value, // Chunks are marked with the largest point that occurs\n    // in them (or -1 for no points), so that scans that are\n    // only interested in points (such as the\n    // heightmap-related logic) can skip range-only chunks.\n    maxPoint){\n        this.from = from;\n        this.to = to;\n        this.value = value;\n        this.maxPoint = maxPoint;\n    }\n    get length() {\n        return this.to[this.to.length - 1];\n    }\n    // Find the index of the given position and side. Use the ranges'\n    // `from` pos when `end == false`, `to` when `end == true`.\n    findIndex(pos, side, end, startAt = 0) {\n        let arr = end ? this.to : this.from;\n        for(let lo = startAt, hi = arr.length;;){\n            if (lo == hi) return lo;\n            let mid = lo + hi >> 1;\n            let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;\n            if (mid == lo) return diff >= 0 ? lo : hi;\n            if (diff >= 0) hi = mid;\n            else lo = mid + 1;\n        }\n    }\n    between(offset, from, to, f) {\n        for(let i = this.findIndex(from, -1000000000 /* C.Far */ , true), e = this.findIndex(to, 1000000000 /* C.Far */ , false, i); i < e; i++)if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false) return false;\n    }\n    map(offset, changes) {\n        let value = [], from = [], to = [], newPos = -1, maxPoint = -1;\n        for(let i = 0; i < this.value.length; i++){\n            let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;\n            if (curFrom == curTo) {\n                let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);\n                if (mapped == null) continue;\n                newFrom = newTo = mapped;\n                if (val.startSide != val.endSide) {\n                    newTo = changes.mapPos(curFrom, val.endSide);\n                    if (newTo < newFrom) continue;\n                }\n            } else {\n                newFrom = changes.mapPos(curFrom, val.startSide);\n                newTo = changes.mapPos(curTo, val.endSide);\n                if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0) continue;\n            }\n            if ((newTo - newFrom || val.endSide - val.startSide) < 0) continue;\n            if (newPos < 0) newPos = newFrom;\n            if (val.point) maxPoint = Math.max(maxPoint, newTo - newFrom);\n            value.push(val);\n            from.push(newFrom - newPos);\n            to.push(newTo - newPos);\n        }\n        return {\n            mapped: value.length ? new $ccfb9497d8ef598f$var$Chunk(from, to, value, maxPoint) : null,\n            pos: newPos\n        };\n    }\n}\n/**\nA range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a\nway that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and\n[update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data\nstructure.\n*/ class $ccfb9497d8ef598f$export$34cb5241245008dd {\n    constructor(/**\n    @internal\n    */ chunkPos, /**\n    @internal\n    */ chunk, /**\n    @internal\n    */ nextLayer, /**\n    @internal\n    */ maxPoint){\n        this.chunkPos = chunkPos;\n        this.chunk = chunk;\n        this.nextLayer = nextLayer;\n        this.maxPoint = maxPoint;\n    }\n    /**\n    @internal\n    */ static create(chunkPos, chunk, nextLayer, maxPoint) {\n        return new $ccfb9497d8ef598f$export$34cb5241245008dd(chunkPos, chunk, nextLayer, maxPoint);\n    }\n    /**\n    @internal\n    */ get length() {\n        let last = this.chunk.length - 1;\n        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);\n    }\n    /**\n    The number of ranges in the set.\n    */ get size() {\n        if (this.isEmpty) return 0;\n        let size = this.nextLayer.size;\n        for (let chunk of this.chunk)size += chunk.value.length;\n        return size;\n    }\n    /**\n    @internal\n    */ chunkEnd(index) {\n        return this.chunkPos[index] + this.chunk[index].length;\n    }\n    /**\n    Update the range set, optionally adding new ranges or filtering\n    out existing ones.\n    \n    (Note: The type parameter is just there as a kludge to work\n    around TypeScript variance issues that prevented `RangeSet<X>`\n    from being a subtype of `RangeSet<Y>` when `X` is a subtype of\n    `Y`.)\n    */ update(updateSpec) {\n        let { add: add = [], sort: sort = false, filterFrom: filterFrom = 0, filterTo: filterTo = this.length } = updateSpec;\n        let filter = updateSpec.filter;\n        if (add.length == 0 && !filter) return this;\n        if (sort) add = add.slice().sort($ccfb9497d8ef598f$var$cmpRange);\n        if (this.isEmpty) return add.length ? $ccfb9497d8ef598f$export$34cb5241245008dd.of(add) : this;\n        let cur = new $ccfb9497d8ef598f$var$LayerCursor(this, null, -1).goto(0), i = 0, spill = [];\n        let builder = new $ccfb9497d8ef598f$export$89e09ce03c7e8594();\n        while(cur.value || i < add.length){\n            if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {\n                let range = add[i++];\n                if (!builder.addInner(range.from, range.to, range.value)) spill.push(range);\n            } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) cur.nextChunk();\n            else {\n                if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {\n                    if (!builder.addInner(cur.from, cur.to, cur.value)) spill.push($ccfb9497d8ef598f$export$9a58ef0d7ad3278c.create(cur.from, cur.to, cur.value));\n                }\n                cur.next();\n            }\n        }\n        return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? $ccfb9497d8ef598f$export$34cb5241245008dd.empty : this.nextLayer.update({\n            add: spill,\n            filter: filter,\n            filterFrom: filterFrom,\n            filterTo: filterTo\n        }));\n    }\n    /**\n    Map this range set through a set of changes, return the new set.\n    */ map(changes) {\n        if (changes.empty || this.isEmpty) return this;\n        let chunks = [], chunkPos = [], maxPoint = -1;\n        for(let i = 0; i < this.chunk.length; i++){\n            let start = this.chunkPos[i], chunk = this.chunk[i];\n            let touch = changes.touchesRange(start, start + chunk.length);\n            if (touch === false) {\n                maxPoint = Math.max(maxPoint, chunk.maxPoint);\n                chunks.push(chunk);\n                chunkPos.push(changes.mapPos(start));\n            } else if (touch === true) {\n                let { mapped: mapped, pos: pos } = chunk.map(start, changes);\n                if (mapped) {\n                    maxPoint = Math.max(maxPoint, mapped.maxPoint);\n                    chunks.push(mapped);\n                    chunkPos.push(pos);\n                }\n            }\n        }\n        let next = this.nextLayer.map(changes);\n        return chunks.length == 0 ? next : new $ccfb9497d8ef598f$export$34cb5241245008dd(chunkPos, chunks, next || $ccfb9497d8ef598f$export$34cb5241245008dd.empty, maxPoint);\n    }\n    /**\n    Iterate over the ranges that touch the region `from` to `to`,\n    calling `f` for each. There is no guarantee that the ranges will\n    be reported in any specific order. When the callback returns\n    `false`, iteration stops.\n    */ between(from, to, f) {\n        if (this.isEmpty) return;\n        for(let i = 0; i < this.chunk.length; i++){\n            let start = this.chunkPos[i], chunk = this.chunk[i];\n            if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false) return;\n        }\n        this.nextLayer.between(from, to, f);\n    }\n    /**\n    Iterate over the ranges in this set, in order, including all\n    ranges that end at or after `from`.\n    */ iter(from = 0) {\n        return $ccfb9497d8ef598f$var$HeapCursor.from([\n            this\n        ]).goto(from);\n    }\n    /**\n    @internal\n    */ get isEmpty() {\n        return this.nextLayer == this;\n    }\n    /**\n    Iterate over the ranges in a collection of sets, in order,\n    starting from `from`.\n    */ static iter(sets, from = 0) {\n        return $ccfb9497d8ef598f$var$HeapCursor.from(sets).goto(from);\n    }\n    /**\n    Iterate over two groups of sets, calling methods on `comparator`\n    to notify it of possible differences.\n    */ static compare(oldSets, newSets, /**\n    This indicates how the underlying data changed between these\n    ranges, and is needed to synchronize the iteration.\n    */ textDiff, comparator, /**\n    Can be used to ignore all non-point ranges, and points below\n    the given size. When -1, all ranges are compared.\n    */ minPointSize = -1) {\n        let a = oldSets.filter((set)=>set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);\n        let b = newSets.filter((set)=>set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);\n        let sharedChunks = $ccfb9497d8ef598f$var$findSharedChunks(a, b, textDiff);\n        let sideA = new $ccfb9497d8ef598f$var$SpanCursor(a, sharedChunks, minPointSize);\n        let sideB = new $ccfb9497d8ef598f$var$SpanCursor(b, sharedChunks, minPointSize);\n        textDiff.iterGaps((fromA, fromB, length)=>$ccfb9497d8ef598f$var$compare(sideA, fromA, sideB, fromB, length, comparator));\n        if (textDiff.empty && textDiff.length == 0) $ccfb9497d8ef598f$var$compare(sideA, 0, sideB, 0, 0, comparator);\n    }\n    /**\n    Compare the contents of two groups of range sets, returning true\n    if they are equivalent in the given range.\n    */ static eq(oldSets, newSets, from = 0, to) {\n        if (to == null) to = 999999999;\n        let a = oldSets.filter((set)=>!set.isEmpty && newSets.indexOf(set) < 0);\n        let b = newSets.filter((set)=>!set.isEmpty && oldSets.indexOf(set) < 0);\n        if (a.length != b.length) return false;\n        if (!a.length) return true;\n        let sharedChunks = $ccfb9497d8ef598f$var$findSharedChunks(a, b);\n        let sideA = new $ccfb9497d8ef598f$var$SpanCursor(a, sharedChunks, 0).goto(from), sideB = new $ccfb9497d8ef598f$var$SpanCursor(b, sharedChunks, 0).goto(from);\n        for(;;){\n            if (sideA.to != sideB.to || !$ccfb9497d8ef598f$var$sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point))) return false;\n            if (sideA.to > to) return true;\n            sideA.next();\n            sideB.next();\n        }\n    }\n    /**\n    Iterate over a group of range sets at the same time, notifying\n    the iterator about the ranges covering every given piece of\n    content. Returns the open count (see\n    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end\n    of the iteration.\n    */ static spans(sets, from, to, iterator, /**\n    When given and greater than -1, only points of at least this\n    size are taken into account.\n    */ minPointSize = -1) {\n        let cursor = new $ccfb9497d8ef598f$var$SpanCursor(sets, null, minPointSize).goto(from), pos = from;\n        let openRanges = cursor.openStart;\n        for(;;){\n            let curTo = Math.min(cursor.to, to);\n            if (cursor.point) {\n                let active = cursor.activeForPoint(cursor.to);\n                let openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);\n                iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);\n                openRanges = Math.min(cursor.openEnd(curTo), active.length);\n            } else if (curTo > pos) {\n                iterator.span(pos, curTo, cursor.active, openRanges);\n                openRanges = cursor.openEnd(curTo);\n            }\n            if (cursor.to > to) return openRanges + (cursor.point && cursor.to > to ? 1 : 0);\n            pos = cursor.to;\n            cursor.next();\n        }\n    }\n    /**\n    Create a range set for the given range or array of ranges. By\n    default, this expects the ranges to be _sorted_ (by start\n    position and, if two start at the same position,\n    `value.startSide`). You can pass `true` as second argument to\n    cause the method to sort them.\n    */ static of(ranges, sort = false) {\n        let build = new $ccfb9497d8ef598f$export$89e09ce03c7e8594();\n        for (let range of ranges instanceof $ccfb9497d8ef598f$export$9a58ef0d7ad3278c ? [\n            ranges\n        ] : sort ? $ccfb9497d8ef598f$var$lazySort(ranges) : ranges)build.add(range.from, range.to, range.value);\n        return build.finish();\n    }\n}\n/**\nThe empty set of ranges.\n*/ $ccfb9497d8ef598f$export$34cb5241245008dd.empty = /*@__PURE__*/ new $ccfb9497d8ef598f$export$34cb5241245008dd([], [], null, -1);\nfunction $ccfb9497d8ef598f$var$lazySort(ranges) {\n    if (ranges.length > 1) for(let prev = ranges[0], i = 1; i < ranges.length; i++){\n        let cur = ranges[i];\n        if ($ccfb9497d8ef598f$var$cmpRange(prev, cur) > 0) return ranges.slice().sort($ccfb9497d8ef598f$var$cmpRange);\n        prev = cur;\n    }\n    return ranges;\n}\n$ccfb9497d8ef598f$export$34cb5241245008dd.empty.nextLayer = $ccfb9497d8ef598f$export$34cb5241245008dd.empty;\n/**\nA range set builder is a data structure that helps build up a\n[range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating\nan array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.\n*/ class $ccfb9497d8ef598f$export$89e09ce03c7e8594 {\n    finishChunk(newArrays) {\n        this.chunks.push(new $ccfb9497d8ef598f$var$Chunk(this.from, this.to, this.value, this.maxPoint));\n        this.chunkPos.push(this.chunkStart);\n        this.chunkStart = -1;\n        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);\n        this.maxPoint = -1;\n        if (newArrays) {\n            this.from = [];\n            this.to = [];\n            this.value = [];\n        }\n    }\n    /**\n    Create an empty builder.\n    */ constructor(){\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunkStart = -1;\n        this.last = null;\n        this.lastFrom = -1000000000 /* C.Far */ ;\n        this.lastTo = -1000000000 /* C.Far */ ;\n        this.from = [];\n        this.to = [];\n        this.value = [];\n        this.maxPoint = -1;\n        this.setMaxPoint = -1;\n        this.nextLayer = null;\n    }\n    /**\n    Add a range. Ranges should be added in sorted (by `from` and\n    `value.startSide`) order.\n    */ add(from, to, value) {\n        if (!this.addInner(from, to, value)) (this.nextLayer || (this.nextLayer = new $ccfb9497d8ef598f$export$89e09ce03c7e8594)).add(from, to, value);\n    }\n    /**\n    @internal\n    */ addInner(from, to, value) {\n        let diff = from - this.lastTo || value.startSide - this.last.endSide;\n        if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0) throw new Error(\"Ranges must be added sorted by `from` position and `startSide`\");\n        if (diff < 0) return false;\n        if (this.from.length == 250 /* C.ChunkSize */ ) this.finishChunk(true);\n        if (this.chunkStart < 0) this.chunkStart = from;\n        this.from.push(from - this.chunkStart);\n        this.to.push(to - this.chunkStart);\n        this.last = value;\n        this.lastFrom = from;\n        this.lastTo = to;\n        this.value.push(value);\n        if (value.point) this.maxPoint = Math.max(this.maxPoint, to - from);\n        return true;\n    }\n    /**\n    @internal\n    */ addChunk(from, chunk) {\n        if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0) return false;\n        if (this.from.length) this.finishChunk(true);\n        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);\n        this.chunks.push(chunk);\n        this.chunkPos.push(from);\n        let last = chunk.value.length - 1;\n        this.last = chunk.value[last];\n        this.lastFrom = chunk.from[last] + from;\n        this.lastTo = chunk.to[last] + from;\n        return true;\n    }\n    /**\n    Finish the range set. Returns the new set. The builder can't be\n    used anymore after this has been called.\n    */ finish() {\n        return this.finishInner($ccfb9497d8ef598f$export$34cb5241245008dd.empty);\n    }\n    /**\n    @internal\n    */ finishInner(next) {\n        if (this.from.length) this.finishChunk(false);\n        if (this.chunks.length == 0) return next;\n        let result = $ccfb9497d8ef598f$export$34cb5241245008dd.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);\n        this.from = null; // Make sure further `add` calls produce errors\n        return result;\n    }\n}\nfunction $ccfb9497d8ef598f$var$findSharedChunks(a, b, textDiff) {\n    let inA = new Map();\n    for (let set of a)for(let i = 0; i < set.chunk.length; i++)if (set.chunk[i].maxPoint <= 0) inA.set(set.chunk[i], set.chunkPos[i]);\n    let shared = new Set();\n    for (let set of b)for(let i = 0; i < set.chunk.length; i++){\n        let known = inA.get(set.chunk[i]);\n        if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length))) shared.add(set.chunk[i]);\n    }\n    return shared;\n}\nclass $ccfb9497d8ef598f$var$LayerCursor {\n    constructor(layer, skip, minPoint, rank = 0){\n        this.layer = layer;\n        this.skip = skip;\n        this.minPoint = minPoint;\n        this.rank = rank;\n    }\n    get startSide() {\n        return this.value ? this.value.startSide : 0;\n    }\n    get endSide() {\n        return this.value ? this.value.endSide : 0;\n    }\n    goto(pos, side = -1000000000 /* C.Far */ ) {\n        this.chunkIndex = this.rangeIndex = 0;\n        this.gotoInner(pos, side, false);\n        return this;\n    }\n    gotoInner(pos, side, forward) {\n        while(this.chunkIndex < this.layer.chunk.length){\n            let next = this.layer.chunk[this.chunkIndex];\n            if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint)) break;\n            this.chunkIndex++;\n            forward = false;\n        }\n        if (this.chunkIndex < this.layer.chunk.length) {\n            let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);\n            if (!forward || this.rangeIndex < rangeIndex) this.setRangeIndex(rangeIndex);\n        }\n        this.next();\n    }\n    forward(pos, side) {\n        if ((this.to - pos || this.endSide - side) < 0) this.gotoInner(pos, side, true);\n    }\n    next() {\n        for(;;)if (this.chunkIndex == this.layer.chunk.length) {\n            this.from = this.to = 1000000000 /* C.Far */ ;\n            this.value = null;\n            break;\n        } else {\n            let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];\n            let from = chunkPos + chunk.from[this.rangeIndex];\n            this.from = from;\n            this.to = chunkPos + chunk.to[this.rangeIndex];\n            this.value = chunk.value[this.rangeIndex];\n            this.setRangeIndex(this.rangeIndex + 1);\n            if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint) break;\n        }\n    }\n    setRangeIndex(index) {\n        if (index == this.layer.chunk[this.chunkIndex].value.length) {\n            this.chunkIndex++;\n            if (this.skip) while(this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))this.chunkIndex++;\n            this.rangeIndex = 0;\n        } else this.rangeIndex = index;\n    }\n    nextChunk() {\n        this.chunkIndex++;\n        this.rangeIndex = 0;\n        this.next();\n    }\n    compare(other) {\n        return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;\n    }\n}\nclass $ccfb9497d8ef598f$var$HeapCursor {\n    constructor(heap){\n        this.heap = heap;\n    }\n    static from(sets, skip = null, minPoint = -1) {\n        let heap = [];\n        for(let i = 0; i < sets.length; i++){\n            for(let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer)if (cur.maxPoint >= minPoint) heap.push(new $ccfb9497d8ef598f$var$LayerCursor(cur, skip, minPoint, i));\n        }\n        return heap.length == 1 ? heap[0] : new $ccfb9497d8ef598f$var$HeapCursor(heap);\n    }\n    get startSide() {\n        return this.value ? this.value.startSide : 0;\n    }\n    goto(pos, side = -1000000000 /* C.Far */ ) {\n        for (let cur of this.heap)cur.goto(pos, side);\n        for(let i = this.heap.length >> 1; i >= 0; i--)$ccfb9497d8ef598f$var$heapBubble(this.heap, i);\n        this.next();\n        return this;\n    }\n    forward(pos, side) {\n        for (let cur of this.heap)cur.forward(pos, side);\n        for(let i = this.heap.length >> 1; i >= 0; i--)$ccfb9497d8ef598f$var$heapBubble(this.heap, i);\n        if ((this.to - pos || this.value.endSide - side) < 0) this.next();\n    }\n    next() {\n        if (this.heap.length == 0) {\n            this.from = this.to = 1000000000 /* C.Far */ ;\n            this.value = null;\n            this.rank = -1;\n        } else {\n            let top = this.heap[0];\n            this.from = top.from;\n            this.to = top.to;\n            this.value = top.value;\n            this.rank = top.rank;\n            if (top.value) top.next();\n            $ccfb9497d8ef598f$var$heapBubble(this.heap, 0);\n        }\n    }\n}\nfunction $ccfb9497d8ef598f$var$heapBubble(heap, index) {\n    for(let cur = heap[index];;){\n        let childIndex = (index << 1) + 1;\n        if (childIndex >= heap.length) break;\n        let child = heap[childIndex];\n        if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {\n            child = heap[childIndex + 1];\n            childIndex++;\n        }\n        if (cur.compare(child) < 0) break;\n        heap[childIndex] = cur;\n        heap[index] = child;\n        index = childIndex;\n    }\n}\nclass $ccfb9497d8ef598f$var$SpanCursor {\n    constructor(sets, skip, minPoint){\n        this.minPoint = minPoint;\n        this.active = [];\n        this.activeTo = [];\n        this.activeRank = [];\n        this.minActive = -1;\n        // A currently active point range, if any\n        this.point = null;\n        this.pointFrom = 0;\n        this.pointRank = 0;\n        this.to = -1000000000 /* C.Far */ ;\n        this.endSide = 0;\n        // The amount of open active ranges at the start of the iterator.\n        // Not including points.\n        this.openStart = -1;\n        this.cursor = $ccfb9497d8ef598f$var$HeapCursor.from(sets, skip, minPoint);\n    }\n    goto(pos, side = -1000000000 /* C.Far */ ) {\n        this.cursor.goto(pos, side);\n        this.active.length = this.activeTo.length = this.activeRank.length = 0;\n        this.minActive = -1;\n        this.to = pos;\n        this.endSide = side;\n        this.openStart = -1;\n        this.next();\n        return this;\n    }\n    forward(pos, side) {\n        while(this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)this.removeActive(this.minActive);\n        this.cursor.forward(pos, side);\n    }\n    removeActive(index) {\n        $ccfb9497d8ef598f$var$remove(this.active, index);\n        $ccfb9497d8ef598f$var$remove(this.activeTo, index);\n        $ccfb9497d8ef598f$var$remove(this.activeRank, index);\n        this.minActive = $ccfb9497d8ef598f$var$findMinIndex(this.active, this.activeTo);\n    }\n    addActive(trackOpen) {\n        let i = 0, { value: value, to: to, rank: rank } = this.cursor;\n        while(i < this.activeRank.length && this.activeRank[i] <= rank)i++;\n        $ccfb9497d8ef598f$var$insert(this.active, i, value);\n        $ccfb9497d8ef598f$var$insert(this.activeTo, i, to);\n        $ccfb9497d8ef598f$var$insert(this.activeRank, i, rank);\n        if (trackOpen) $ccfb9497d8ef598f$var$insert(trackOpen, i, this.cursor.from);\n        this.minActive = $ccfb9497d8ef598f$var$findMinIndex(this.active, this.activeTo);\n    }\n    // After calling this, if `this.point` != null, the next range is a\n    // point. Otherwise, it's a regular range, covered by `this.active`.\n    next() {\n        let from = this.to, wasPoint = this.point;\n        this.point = null;\n        let trackOpen = this.openStart < 0 ? [] : null;\n        for(;;){\n            let a = this.minActive;\n            if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {\n                if (this.activeTo[a] > from) {\n                    this.to = this.activeTo[a];\n                    this.endSide = this.active[a].endSide;\n                    break;\n                }\n                this.removeActive(a);\n                if (trackOpen) $ccfb9497d8ef598f$var$remove(trackOpen, a);\n            } else if (!this.cursor.value) {\n                this.to = this.endSide = 1000000000 /* C.Far */ ;\n                break;\n            } else if (this.cursor.from > from) {\n                this.to = this.cursor.from;\n                this.endSide = this.cursor.startSide;\n                break;\n            } else {\n                let nextVal = this.cursor.value;\n                if (!nextVal.point) {\n                    this.addActive(trackOpen);\n                    this.cursor.next();\n                } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) // Ignore any non-empty points that end precisely at the end of the prev point\n                this.cursor.next();\n                else {\n                    this.point = nextVal;\n                    this.pointFrom = this.cursor.from;\n                    this.pointRank = this.cursor.rank;\n                    this.to = this.cursor.to;\n                    this.endSide = nextVal.endSide;\n                    this.cursor.next();\n                    this.forward(this.to, this.endSide);\n                    break;\n                }\n            }\n        }\n        if (trackOpen) {\n            this.openStart = 0;\n            for(let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)this.openStart++;\n        }\n    }\n    activeForPoint(to) {\n        if (!this.active.length) return this.active;\n        let active = [];\n        for(let i = this.active.length - 1; i >= 0; i--){\n            if (this.activeRank[i] < this.pointRank) break;\n            if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide) active.push(this.active[i]);\n        }\n        return active.reverse();\n    }\n    openEnd(to) {\n        let open = 0;\n        for(let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)open++;\n        return open;\n    }\n}\nfunction $ccfb9497d8ef598f$var$compare(a, startA, b, startB, length, comparator) {\n    a.goto(startA);\n    b.goto(startB);\n    let endB = startB + length;\n    let pos = startB, dPos = startB - startA;\n    for(;;){\n        let diff = a.to + dPos - b.to || a.endSide - b.endSide;\n        let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);\n        if (a.point || b.point) {\n            if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && $ccfb9497d8ef598f$var$sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to)))) comparator.comparePoint(pos, clipEnd, a.point, b.point);\n        } else if (clipEnd > pos && !$ccfb9497d8ef598f$var$sameValues(a.active, b.active)) comparator.compareRange(pos, clipEnd, a.active, b.active);\n        if (end > endB) break;\n        pos = end;\n        if (diff <= 0) a.next();\n        if (diff >= 0) b.next();\n    }\n}\nfunction $ccfb9497d8ef598f$var$sameValues(a, b) {\n    if (a.length != b.length) return false;\n    for(let i = 0; i < a.length; i++)if (a[i] != b[i] && !a[i].eq(b[i])) return false;\n    return true;\n}\nfunction $ccfb9497d8ef598f$var$remove(array, index) {\n    for(let i = index, e = array.length - 1; i < e; i++)array[i] = array[i + 1];\n    array.pop();\n}\nfunction $ccfb9497d8ef598f$var$insert(array, index, value) {\n    for(let i = array.length - 1; i >= index; i--)array[i + 1] = array[i];\n    array[index] = value;\n}\nfunction $ccfb9497d8ef598f$var$findMinIndex(value, array) {\n    let found = -1, foundPos = 1000000000 /* C.Far */ ;\n    for(let i = 0; i < array.length; i++)if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {\n        found = i;\n        foundPos = array[i];\n    }\n    return found;\n}\n/**\nCount the column position at the given offset into the string,\ntaking extending characters and tab size into account.\n*/ function $ccfb9497d8ef598f$export$20b4ab289374d0ac(string, tabSize, to = string.length) {\n    let n = 0;\n    for(let i = 0; i < to;)if (string.charCodeAt(i) == 9) {\n        n += tabSize - n % tabSize;\n        i++;\n    } else {\n        n++;\n        i = $ccfb9497d8ef598f$export$a0fa439fd515e1ed(string, i);\n    }\n    return n;\n}\n/**\nFind the offset that corresponds to the given column position in a\nstring, taking extending characters and tab size into account. By\ndefault, the string length is returned when it is too short to\nreach the column. Pass `strict` true to make it return -1 in that\nsituation.\n*/ function $ccfb9497d8ef598f$export$718b3d71c384ca05(string, col, tabSize, strict) {\n    for(let i = 0, n = 0;;){\n        if (n >= col) return i;\n        if (i == string.length) break;\n        n += string.charCodeAt(i) == 9 ? tabSize - n % tabSize : 1;\n        i = $ccfb9497d8ef598f$export$a0fa439fd515e1ed(string, i);\n    }\n    return strict === true ? -1 : string.length;\n}\n\n\nconst $fa62f485c41d169a$var$C = \"ͼ\";\nconst $fa62f485c41d169a$var$COUNT = typeof Symbol == \"undefined\" ? \"__\" + $fa62f485c41d169a$var$C : Symbol.for($fa62f485c41d169a$var$C);\nconst $fa62f485c41d169a$var$SET = typeof Symbol == \"undefined\" ? \"__styleSet\" + Math.floor(Math.random() * 1e8) : Symbol(\"styleSet\");\nconst $fa62f485c41d169a$var$top = typeof globalThis != \"undefined\" ? globalThis : typeof window != \"undefined\" ? window : {};\nclass $fa62f485c41d169a$export$b920c662d2efee20 {\n    // :: (Object<Style>, ?{finish: ?(string) → string})\n    // Create a style module from the given spec.\n    //\n    // When `finish` is given, it is called on regular (non-`@`)\n    // selectors (after `&` expansion) to compute the final selector.\n    constructor(spec, options){\n        this.rules = [];\n        let { finish: finish } = options || {};\n        function splitSelector(selector) {\n            return /^@/.test(selector) ? [\n                selector\n            ] : selector.split(/,\\s*/);\n        }\n        function render(selectors, spec, target, isKeyframes) {\n            let local = [], isAt = /^@(\\w+)\\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == \"keyframes\";\n            if (isAt && spec == null) return target.push(selectors[0] + \";\");\n            for(let prop in spec){\n                let value = spec[prop];\n                if (/&/.test(prop)) render(prop.split(/,\\s*/).map((part)=>selectors.map((sel)=>part.replace(/&/, sel))).reduce((a, b)=>a.concat(b)), value, target);\n                else if (value && typeof value == \"object\") {\n                    if (!isAt) throw new RangeError(\"The value of a property (\" + prop + \") should be a primitive value.\");\n                    render(splitSelector(prop), value, local, keyframes);\n                } else if (value != null) local.push(prop.replace(/_.*/, \"\").replace(/[A-Z]/g, (l)=>\"-\" + l.toLowerCase()) + \": \" + value + \";\");\n            }\n            if (local.length || keyframes) target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(\", \") + \" {\" + local.join(\" \") + \"}\");\n        }\n        for(let prop in spec)render(splitSelector(prop), spec[prop], this.rules);\n    }\n    // :: () → string\n    // Returns a string containing the module's CSS rules.\n    getRules() {\n        return this.rules.join(\"\\n\");\n    }\n    // :: () → string\n    // Generate a new unique CSS class name.\n    static newName() {\n        let id = $fa62f485c41d169a$var$top[$fa62f485c41d169a$var$COUNT] || 1;\n        $fa62f485c41d169a$var$top[$fa62f485c41d169a$var$COUNT] = id + 1;\n        return $fa62f485c41d169a$var$C + id.toString(36);\n    }\n    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)\n    //\n    // Mount the given set of modules in the given DOM root, which ensures\n    // that the CSS rules defined by the module are available in that\n    // context.\n    //\n    // Rules are only added to the document once per root.\n    //\n    // Rule order will follow the order of the modules, so that rules from\n    // modules later in the array take precedence of those from earlier\n    // modules. If you call this function multiple times for the same root\n    // in a way that changes the order of already mounted modules, the old\n    // order will be changed.\n    static mount(root, modules) {\n        (root[$fa62f485c41d169a$var$SET] || new $fa62f485c41d169a$var$StyleSet(root)).mount(Array.isArray(modules) ? modules : [\n            modules\n        ]);\n    }\n}\nlet $fa62f485c41d169a$var$adoptedSet = new Map //<Document, StyleSet>\n;\nclass $fa62f485c41d169a$var$StyleSet {\n    constructor(root){\n        let doc = root.ownerDocument || root, win = doc.defaultView;\n        if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {\n            let adopted = $fa62f485c41d169a$var$adoptedSet.get(doc);\n            if (adopted) {\n                root.adoptedStyleSheets = [\n                    adopted.sheet,\n                    ...root.adoptedStyleSheets\n                ];\n                return root[$fa62f485c41d169a$var$SET] = adopted;\n            }\n            this.sheet = new win.CSSStyleSheet;\n            root.adoptedStyleSheets = [\n                this.sheet,\n                ...root.adoptedStyleSheets\n            ];\n            $fa62f485c41d169a$var$adoptedSet.set(doc, this);\n        } else {\n            this.styleTag = doc.createElement(\"style\");\n            let target = root.head || root;\n            target.insertBefore(this.styleTag, target.firstChild);\n        }\n        this.modules = [];\n        root[$fa62f485c41d169a$var$SET] = this;\n    }\n    mount(modules) {\n        let sheet = this.sheet;\n        let pos = 0 /* Current rule offset */ , j = 0 /* Index into this.modules */ ;\n        for(let i = 0; i < modules.length; i++){\n            let mod = modules[i], index = this.modules.indexOf(mod);\n            if (index < j && index > -1) {\n                this.modules.splice(index, 1);\n                j--;\n                index = -1;\n            }\n            if (index == -1) {\n                this.modules.splice(j++, 0, mod);\n                if (sheet) for(let k = 0; k < mod.rules.length; k++)sheet.insertRule(mod.rules[k], pos++);\n            } else {\n                while(j < index)pos += this.modules[j++].rules.length;\n                pos += mod.rules.length;\n                j++;\n            }\n        }\n        if (!sheet) {\n            let text = \"\";\n            for(let i = 0; i < this.modules.length; i++)text += this.modules[i].getRules() + \"\\n\";\n            this.styleTag.textContent = text;\n        }\n    }\n} // Style::Object<union<Style,string>>\n //\n // A style is an object that, in the simple case, maps CSS property\n // names to strings holding their values, as in `{color: \"red\",\n // fontWeight: \"bold\"}`. The property names can be given in\n // camel-case—the library will insert a dash before capital letters\n // when converting them to CSS.\n //\n // If you include an underscore in a property name, it and everything\n // after it will be removed from the output, which can be useful when\n // providing a property multiple times, for browser compatibility\n // reasons.\n //\n // A property in a style object can also be a sub-selector, which\n // extends the current context to add a pseudo-selector or a child\n // selector. Such a property should contain a `&` character, which\n // will be replaced by the current selector. For example `{\"&:before\":\n // {content: '\"hi\"'}}`. Sub-selectors and regular properties can\n // freely be mixed in a given object. Any property containing a `&` is\n // assumed to be a sub-selector.\n //\n // Finally, a property can specify an @-block to be wrapped around the\n // styles defined inside the object that's the property's value. For\n // example to create a media query you can do `{\"@media screen and\n // (min-width: 400px)\": {...}}`.\n\n\nvar $fdefb3038aa23227$export$e2253033e6e1df16 = {\n    8: \"Backspace\",\n    9: \"Tab\",\n    10: \"Enter\",\n    12: \"NumLock\",\n    13: \"Enter\",\n    16: \"Shift\",\n    17: \"Control\",\n    18: \"Alt\",\n    20: \"CapsLock\",\n    27: \"Escape\",\n    32: \" \",\n    33: \"PageUp\",\n    34: \"PageDown\",\n    35: \"End\",\n    36: \"Home\",\n    37: \"ArrowLeft\",\n    38: \"ArrowUp\",\n    39: \"ArrowRight\",\n    40: \"ArrowDown\",\n    44: \"PrintScreen\",\n    45: \"Insert\",\n    46: \"Delete\",\n    59: \";\",\n    61: \"=\",\n    91: \"Meta\",\n    92: \"Meta\",\n    106: \"*\",\n    107: \"+\",\n    108: \",\",\n    109: \"-\",\n    110: \".\",\n    111: \"/\",\n    144: \"NumLock\",\n    145: \"ScrollLock\",\n    160: \"Shift\",\n    161: \"Shift\",\n    162: \"Control\",\n    163: \"Control\",\n    164: \"Alt\",\n    165: \"Alt\",\n    173: \"-\",\n    186: \";\",\n    187: \"=\",\n    188: \",\",\n    189: \"-\",\n    190: \".\",\n    191: \"/\",\n    192: \"`\",\n    219: \"[\",\n    220: \"\\\\\",\n    221: \"]\",\n    222: \"'\"\n};\nvar $fdefb3038aa23227$export$fba63a578e423eb = {\n    48: \")\",\n    49: \"!\",\n    50: \"@\",\n    51: \"#\",\n    52: \"$\",\n    53: \"%\",\n    54: \"^\",\n    55: \"&\",\n    56: \"*\",\n    57: \"(\",\n    59: \":\",\n    61: \"+\",\n    173: \"_\",\n    186: \":\",\n    187: \"+\",\n    188: \"<\",\n    189: \"_\",\n    190: \">\",\n    191: \"?\",\n    192: \"~\",\n    219: \"{\",\n    220: \"|\",\n    221: \"}\",\n    222: '\"'\n};\nvar $fdefb3038aa23227$var$mac = typeof navigator != \"undefined\" && /Mac/.test(navigator.platform);\nvar $fdefb3038aa23227$var$ie = typeof navigator != \"undefined\" && /MSIE \\d|Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent);\n// Fill in the digit keys\nfor(var $fdefb3038aa23227$var$i = 0; $fdefb3038aa23227$var$i < 10; $fdefb3038aa23227$var$i++)$fdefb3038aa23227$export$e2253033e6e1df16[48 + $fdefb3038aa23227$var$i] = $fdefb3038aa23227$export$e2253033e6e1df16[96 + $fdefb3038aa23227$var$i] = String($fdefb3038aa23227$var$i);\n// The function keys\nfor(var $fdefb3038aa23227$var$i = 1; $fdefb3038aa23227$var$i <= 24; $fdefb3038aa23227$var$i++)$fdefb3038aa23227$export$e2253033e6e1df16[$fdefb3038aa23227$var$i + 111] = \"F\" + $fdefb3038aa23227$var$i;\n// And the alphabetic keys\nfor(var $fdefb3038aa23227$var$i = 65; $fdefb3038aa23227$var$i <= 90; $fdefb3038aa23227$var$i++){\n    $fdefb3038aa23227$export$e2253033e6e1df16[$fdefb3038aa23227$var$i] = String.fromCharCode($fdefb3038aa23227$var$i + 32);\n    $fdefb3038aa23227$export$fba63a578e423eb[$fdefb3038aa23227$var$i] = String.fromCharCode($fdefb3038aa23227$var$i);\n}\n// For each code that doesn't have a shift-equivalent, copy the base name\nfor(var $fdefb3038aa23227$var$code in $fdefb3038aa23227$export$e2253033e6e1df16)if (!$fdefb3038aa23227$export$fba63a578e423eb.hasOwnProperty($fdefb3038aa23227$var$code)) $fdefb3038aa23227$export$fba63a578e423eb[$fdefb3038aa23227$var$code] = $fdefb3038aa23227$export$e2253033e6e1df16[$fdefb3038aa23227$var$code];\nfunction $fdefb3038aa23227$export$fb33aafd75404f4c(event) {\n    // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.\n    // On IE, shift effect is never included in `.key`.\n    var ignoreKey = $fdefb3038aa23227$var$mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || $fdefb3038aa23227$var$ie && event.shiftKey && event.key && event.key.length == 1 || event.key == \"Unidentified\";\n    var name = !ignoreKey && event.key || (event.shiftKey ? $fdefb3038aa23227$export$fba63a578e423eb : $fdefb3038aa23227$export$e2253033e6e1df16)[event.keyCode] || event.key || \"Unidentified\";\n    // Edge sometimes produces wrong names (Issue #3)\n    if (name == \"Esc\") name = \"Escape\";\n    if (name == \"Del\") name = \"Delete\";\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n    if (name == \"Left\") name = \"ArrowLeft\";\n    if (name == \"Up\") name = \"ArrowUp\";\n    if (name == \"Right\") name = \"ArrowRight\";\n    if (name == \"Down\") name = \"ArrowDown\";\n    return name;\n}\n\n\nfunction $071334078f8d3f8a$var$getSelection(root) {\n    let target;\n    // Browsers differ on whether shadow roots have a getSelection\n    // method. If it exists, use that, otherwise, call it on the\n    // document.\n    if (root.nodeType == 11) target = root.getSelection ? root : root.ownerDocument;\n    else target = root;\n    return target.getSelection();\n}\nfunction $071334078f8d3f8a$var$contains(dom, node) {\n    return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;\n}\nfunction $071334078f8d3f8a$var$deepActiveElement(doc) {\n    let elt = doc.activeElement;\n    while(elt && elt.shadowRoot)elt = elt.shadowRoot.activeElement;\n    return elt;\n}\nfunction $071334078f8d3f8a$var$hasSelection(dom, selection) {\n    if (!selection.anchorNode) return false;\n    try {\n        // Firefox will raise 'permission denied' errors when accessing\n        // properties of `sel.anchorNode` when it's in a generated CSS\n        // element.\n        return $071334078f8d3f8a$var$contains(dom, selection.anchorNode);\n    } catch (_) {\n        return false;\n    }\n}\nfunction $071334078f8d3f8a$var$clientRectsFor(dom) {\n    if (dom.nodeType == 3) return $071334078f8d3f8a$var$textRange(dom, 0, dom.nodeValue.length).getClientRects();\n    else if (dom.nodeType == 1) return dom.getClientRects();\n    else return [];\n}\n// Scans forward and backward through DOM positions equivalent to the\n// given one to see if the two are in the same place (i.e. after a\n// text node vs at the end of that text node)\nfunction $071334078f8d3f8a$var$isEquivalentPosition(node, off, targetNode, targetOff) {\n    return targetNode ? $071334078f8d3f8a$var$scanFor(node, off, targetNode, targetOff, -1) || $071334078f8d3f8a$var$scanFor(node, off, targetNode, targetOff, 1) : false;\n}\nfunction $071334078f8d3f8a$var$domIndex(node) {\n    for(var index = 0;; index++){\n        node = node.previousSibling;\n        if (!node) return index;\n    }\n}\nfunction $071334078f8d3f8a$var$scanFor(node, off, targetNode, targetOff, dir) {\n    for(;;){\n        if (node == targetNode && off == targetOff) return true;\n        if (off == (dir < 0 ? 0 : $071334078f8d3f8a$var$maxOffset(node))) {\n            if (node.nodeName == \"DIV\") return false;\n            let parent = node.parentNode;\n            if (!parent || parent.nodeType != 1) return false;\n            off = $071334078f8d3f8a$var$domIndex(node) + (dir < 0 ? 0 : 1);\n            node = parent;\n        } else if (node.nodeType == 1) {\n            node = node.childNodes[off + (dir < 0 ? -1 : 0)];\n            if (node.nodeType == 1 && node.contentEditable == \"false\") return false;\n            off = dir < 0 ? $071334078f8d3f8a$var$maxOffset(node) : 0;\n        } else return false;\n    }\n}\nfunction $071334078f8d3f8a$var$maxOffset(node) {\n    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;\n}\nfunction $071334078f8d3f8a$var$flattenRect(rect, left) {\n    let x = left ? rect.left : rect.right;\n    return {\n        left: x,\n        right: x,\n        top: rect.top,\n        bottom: rect.bottom\n    };\n}\nfunction $071334078f8d3f8a$var$windowRect(win) {\n    return {\n        left: 0,\n        right: win.innerWidth,\n        top: 0,\n        bottom: win.innerHeight\n    };\n}\nfunction $071334078f8d3f8a$var$scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {\n    let doc = dom.ownerDocument, win = doc.defaultView || window;\n    for(let cur = dom, stop = false; cur && !stop;){\n        if (cur.nodeType == 1) {\n            let bounding, top = cur == doc.body;\n            if (top) bounding = $071334078f8d3f8a$var$windowRect(win);\n            else {\n                if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position)) stop = true;\n                if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {\n                    cur = cur.assignedSlot || cur.parentNode;\n                    continue;\n                }\n                let rect = cur.getBoundingClientRect();\n                // Make sure scrollbar width isn't included in the rectangle\n                bounding = {\n                    left: rect.left,\n                    right: rect.left + cur.clientWidth,\n                    top: rect.top,\n                    bottom: rect.top + cur.clientHeight\n                };\n            }\n            let moveX = 0, moveY = 0;\n            if (y == \"nearest\") {\n                if (rect.top < bounding.top) {\n                    moveY = -(bounding.top - rect.top + yMargin);\n                    if (side > 0 && rect.bottom > bounding.bottom + moveY) moveY = rect.bottom - bounding.bottom + moveY + yMargin;\n                } else if (rect.bottom > bounding.bottom) {\n                    moveY = rect.bottom - bounding.bottom + yMargin;\n                    if (side < 0 && rect.top - moveY < bounding.top) moveY = -(bounding.top + moveY - rect.top + yMargin);\n                }\n            } else {\n                let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;\n                let targetTop = y == \"center\" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y == \"start\" || y == \"center\" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;\n                moveY = targetTop - bounding.top;\n            }\n            if (x == \"nearest\") {\n                if (rect.left < bounding.left) {\n                    moveX = -(bounding.left - rect.left + xMargin);\n                    if (side > 0 && rect.right > bounding.right + moveX) moveX = rect.right - bounding.right + moveX + xMargin;\n                } else if (rect.right > bounding.right) {\n                    moveX = rect.right - bounding.right + xMargin;\n                    if (side < 0 && rect.left < bounding.left + moveX) moveX = -(bounding.left + moveX - rect.left + xMargin);\n                }\n            } else {\n                let targetLeft = x == \"center\" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x == \"start\" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;\n                moveX = targetLeft - bounding.left;\n            }\n            if (moveX || moveY) {\n                if (top) win.scrollBy(moveX, moveY);\n                else {\n                    let movedX = 0, movedY = 0;\n                    if (moveY) {\n                        let start = cur.scrollTop;\n                        cur.scrollTop += moveY;\n                        movedY = cur.scrollTop - start;\n                    }\n                    if (moveX) {\n                        let start = cur.scrollLeft;\n                        cur.scrollLeft += moveX;\n                        movedX = cur.scrollLeft - start;\n                    }\n                    rect = {\n                        left: rect.left - movedX,\n                        top: rect.top - movedY,\n                        right: rect.right - movedX,\n                        bottom: rect.bottom - movedY\n                    };\n                    if (movedX && Math.abs(movedX - moveX) < 1) x = \"nearest\";\n                    if (movedY && Math.abs(movedY - moveY) < 1) y = \"nearest\";\n                }\n            }\n            if (top) break;\n            cur = cur.assignedSlot || cur.parentNode;\n        } else if (cur.nodeType == 11) cur = cur.host;\n        else break;\n    }\n}\nfunction $071334078f8d3f8a$var$scrollableParent(dom) {\n    let doc = dom.ownerDocument;\n    for(let cur = dom.parentNode; cur;){\n        if (cur == doc.body) break;\n        else if (cur.nodeType == 1) {\n            if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth) return cur;\n            cur = cur.assignedSlot || cur.parentNode;\n        } else if (cur.nodeType == 11) cur = cur.host;\n        else break;\n    }\n    return null;\n}\nclass $071334078f8d3f8a$var$DOMSelectionState {\n    constructor(){\n        this.anchorNode = null;\n        this.anchorOffset = 0;\n        this.focusNode = null;\n        this.focusOffset = 0;\n    }\n    eq(domSel) {\n        return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;\n    }\n    setRange(range) {\n        let { anchorNode: anchorNode, focusNode: focusNode } = range;\n        // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)\n        this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? $071334078f8d3f8a$var$maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? $071334078f8d3f8a$var$maxOffset(focusNode) : 0));\n    }\n    set(anchorNode, anchorOffset, focusNode, focusOffset) {\n        this.anchorNode = anchorNode;\n        this.anchorOffset = anchorOffset;\n        this.focusNode = focusNode;\n        this.focusOffset = focusOffset;\n    }\n}\nlet $071334078f8d3f8a$var$preventScrollSupported = null;\n// Feature-detects support for .focus({preventScroll: true}), and uses\n// a fallback kludge when not supported.\nfunction $071334078f8d3f8a$var$focusPreventScroll(dom) {\n    if (dom.setActive) return dom.setActive(); // in IE\n    if ($071334078f8d3f8a$var$preventScrollSupported) return dom.focus($071334078f8d3f8a$var$preventScrollSupported);\n    let stack = [];\n    for(let cur = dom; cur; cur = cur.parentNode){\n        stack.push(cur, cur.scrollTop, cur.scrollLeft);\n        if (cur == cur.ownerDocument) break;\n    }\n    dom.focus($071334078f8d3f8a$var$preventScrollSupported == null ? {\n        get preventScroll () {\n            $071334078f8d3f8a$var$preventScrollSupported = {\n                preventScroll: true\n            };\n            return true;\n        }\n    } : undefined);\n    if (!$071334078f8d3f8a$var$preventScrollSupported) {\n        $071334078f8d3f8a$var$preventScrollSupported = false;\n        for(let i = 0; i < stack.length;){\n            let elt = stack[i++], top = stack[i++], left = stack[i++];\n            if (elt.scrollTop != top) elt.scrollTop = top;\n            if (elt.scrollLeft != left) elt.scrollLeft = left;\n        }\n    }\n}\nlet $071334078f8d3f8a$var$scratchRange;\nfunction $071334078f8d3f8a$var$textRange(node, from, to = from) {\n    let range = $071334078f8d3f8a$var$scratchRange || ($071334078f8d3f8a$var$scratchRange = document.createRange());\n    range.setEnd(node, to);\n    range.setStart(node, from);\n    return range;\n}\nfunction $071334078f8d3f8a$var$dispatchKey(elt, name, code) {\n    let options = {\n        key: name,\n        code: name,\n        keyCode: code,\n        which: code,\n        cancelable: true\n    };\n    let down = new KeyboardEvent(\"keydown\", options);\n    down.synthetic = true;\n    elt.dispatchEvent(down);\n    let up = new KeyboardEvent(\"keyup\", options);\n    up.synthetic = true;\n    elt.dispatchEvent(up);\n    return down.defaultPrevented || up.defaultPrevented;\n}\nfunction $071334078f8d3f8a$var$getRoot(node) {\n    while(node){\n        if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host)) return node;\n        node = node.assignedSlot || node.parentNode;\n    }\n    return null;\n}\nfunction $071334078f8d3f8a$var$clearAttributes(node) {\n    while(node.attributes.length)node.removeAttributeNode(node.attributes[0]);\n}\nfunction $071334078f8d3f8a$var$atElementStart(doc, selection) {\n    let node = selection.focusNode, offset = selection.focusOffset;\n    if (!node || selection.anchorNode != node || selection.anchorOffset != offset) return false;\n    // Safari can report bogus offsets (#1152)\n    offset = Math.min(offset, $071334078f8d3f8a$var$maxOffset(node));\n    for(;;){\n        if (offset) {\n            if (node.nodeType != 1) return false;\n            let prev = node.childNodes[offset - 1];\n            if (prev.contentEditable == \"false\") offset--;\n            else {\n                node = prev;\n                offset = $071334078f8d3f8a$var$maxOffset(node);\n            }\n        } else if (node == doc) return true;\n        else {\n            offset = $071334078f8d3f8a$var$domIndex(node);\n            node = node.parentNode;\n        }\n    }\n}\nfunction $071334078f8d3f8a$var$isScrolledToBottom(elt) {\n    return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);\n}\nclass $071334078f8d3f8a$var$DOMPos {\n    constructor(node, offset, precise = true){\n        this.node = node;\n        this.offset = offset;\n        this.precise = precise;\n    }\n    static before(dom, precise) {\n        return new $071334078f8d3f8a$var$DOMPos(dom.parentNode, $071334078f8d3f8a$var$domIndex(dom), precise);\n    }\n    static after(dom, precise) {\n        return new $071334078f8d3f8a$var$DOMPos(dom.parentNode, $071334078f8d3f8a$var$domIndex(dom) + 1, precise);\n    }\n}\nconst $071334078f8d3f8a$var$noChildren = [];\nclass $071334078f8d3f8a$var$ContentView {\n    constructor(){\n        this.parent = null;\n        this.dom = null;\n        this.flags = 2 /* NodeDirty */ ;\n    }\n    get overrideDOMText() {\n        return null;\n    }\n    get posAtStart() {\n        return this.parent ? this.parent.posBefore(this) : 0;\n    }\n    get posAtEnd() {\n        return this.posAtStart + this.length;\n    }\n    posBefore(view) {\n        let pos = this.posAtStart;\n        for (let child of this.children){\n            if (child == view) return pos;\n            pos += child.length + child.breakAfter;\n        }\n        throw new RangeError(\"Invalid child in posBefore\");\n    }\n    posAfter(view) {\n        return this.posBefore(view) + view.length;\n    }\n    sync(view, track) {\n        if (this.flags & 2 /* NodeDirty */ ) {\n            let parent = this.dom;\n            let prev = null, next;\n            for (let child of this.children){\n                if (child.flags & 7 /* Dirty */ ) {\n                    if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {\n                        let contentView = $071334078f8d3f8a$var$ContentView.get(next);\n                        if (!contentView || !contentView.parent && contentView.canReuseDOM(child)) child.reuseDOM(next);\n                    }\n                    child.sync(view, track);\n                    child.flags &= -8 /* Dirty */ ;\n                }\n                next = prev ? prev.nextSibling : parent.firstChild;\n                if (track && !track.written && track.node == parent && next != child.dom) track.written = true;\n                if (child.dom.parentNode == parent) while(next && next != child.dom)next = $071334078f8d3f8a$var$rm$1(next);\n                else parent.insertBefore(child.dom, next);\n                prev = child.dom;\n            }\n            next = prev ? prev.nextSibling : parent.firstChild;\n            if (next && track && track.node == parent) track.written = true;\n            while(next)next = $071334078f8d3f8a$var$rm$1(next);\n        } else if (this.flags & 1 /* ChildDirty */ ) {\n            for (let child of this.children)if (child.flags & 7 /* Dirty */ ) {\n                child.sync(view, track);\n                child.flags &= -8 /* Dirty */ ;\n            }\n        }\n    }\n    reuseDOM(_dom) {}\n    localPosFromDOM(node, offset) {\n        let after;\n        if (node == this.dom) after = this.dom.childNodes[offset];\n        else {\n            let bias = $071334078f8d3f8a$var$maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;\n            for(;;){\n                let parent = node.parentNode;\n                if (parent == this.dom) break;\n                if (bias == 0 && parent.firstChild != parent.lastChild) {\n                    if (node == parent.firstChild) bias = -1;\n                    else bias = 1;\n                }\n                node = parent;\n            }\n            if (bias < 0) after = node;\n            else after = node.nextSibling;\n        }\n        if (after == this.dom.firstChild) return 0;\n        while(after && !$071334078f8d3f8a$var$ContentView.get(after))after = after.nextSibling;\n        if (!after) return this.length;\n        for(let i = 0, pos = 0;; i++){\n            let child = this.children[i];\n            if (child.dom == after) return pos;\n            pos += child.length + child.breakAfter;\n        }\n    }\n    domBoundsAround(from, to, offset = 0) {\n        let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;\n        for(let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++){\n            let child = this.children[i], end = pos + child.length;\n            if (pos < from && end > to) return child.domBoundsAround(from, to, pos);\n            if (end >= from && fromI == -1) {\n                fromI = i;\n                fromStart = pos;\n            }\n            if (pos > to && child.dom.parentNode == this.dom) {\n                toI = i;\n                toEnd = prevEnd;\n                break;\n            }\n            prevEnd = end;\n            pos = end + child.breakAfter;\n        }\n        return {\n            from: fromStart,\n            to: toEnd < 0 ? offset + this.length : toEnd,\n            startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,\n            endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null\n        };\n    }\n    markDirty(andParent = false) {\n        this.flags |= 2 /* NodeDirty */ ;\n        this.markParentsDirty(andParent);\n    }\n    markParentsDirty(childList) {\n        for(let parent = this.parent; parent; parent = parent.parent){\n            if (childList) parent.flags |= 2 /* NodeDirty */ ;\n            if (parent.flags & 1 /* ChildDirty */ ) return;\n            parent.flags |= 1 /* ChildDirty */ ;\n            childList = false;\n        }\n    }\n    setParent(parent) {\n        if (this.parent != parent) {\n            this.parent = parent;\n            if (this.flags & 7 /* Dirty */ ) this.markParentsDirty(true);\n        }\n    }\n    setDOM(dom) {\n        if (this.dom) this.dom.cmView = null;\n        this.dom = dom;\n        dom.cmView = this;\n    }\n    get rootView() {\n        for(let v = this;;){\n            let parent = v.parent;\n            if (!parent) return v;\n            v = parent;\n        }\n    }\n    replaceChildren(from, to, children = $071334078f8d3f8a$var$noChildren) {\n        this.markDirty();\n        for(let i = from; i < to; i++){\n            let child = this.children[i];\n            if (child.parent == this) child.destroy();\n        }\n        this.children.splice(from, to - from, ...children);\n        for(let i = 0; i < children.length; i++)children[i].setParent(this);\n    }\n    ignoreMutation(_rec) {\n        return false;\n    }\n    ignoreEvent(_event) {\n        return false;\n    }\n    childCursor(pos = this.length) {\n        return new $071334078f8d3f8a$var$ChildCursor(this.children, pos, this.children.length);\n    }\n    childPos(pos, bias = 1) {\n        return this.childCursor().findPos(pos, bias);\n    }\n    toString() {\n        let name = this.constructor.name.replace(\"View\", \"\");\n        return name + (this.children.length ? \"(\" + this.children.join() + \")\" : this.length ? \"[\" + (name == \"Text\" ? this.text : this.length) + \"]\" : \"\") + (this.breakAfter ? \"#\" : \"\");\n    }\n    static get(node) {\n        return node.cmView;\n    }\n    get isEditable() {\n        return true;\n    }\n    get isWidget() {\n        return false;\n    }\n    get isHidden() {\n        return false;\n    }\n    merge(from, to, source, hasStart, openStart, openEnd) {\n        return false;\n    }\n    become(other) {\n        return false;\n    }\n    canReuseDOM(other) {\n        return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* Composition */ );\n    }\n    // When this is a zero-length view with a side, this should return a\n    // number <= 0 to indicate it is before its position, or a\n    // number > 0 when after its position.\n    getSide() {\n        return 0;\n    }\n    destroy() {\n        this.parent = null;\n    }\n}\n$071334078f8d3f8a$var$ContentView.prototype.breakAfter = 0;\n// Remove a DOM node and return its next sibling.\nfunction $071334078f8d3f8a$var$rm$1(dom) {\n    let next = dom.nextSibling;\n    dom.parentNode.removeChild(dom);\n    return next;\n}\nclass $071334078f8d3f8a$var$ChildCursor {\n    constructor(children, pos, i){\n        this.children = children;\n        this.pos = pos;\n        this.i = i;\n        this.off = 0;\n    }\n    findPos(pos, bias = 1) {\n        for(;;){\n            if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {\n                this.off = pos - this.pos;\n                return this;\n            }\n            let next = this.children[--this.i];\n            this.pos -= next.length + next.breakAfter;\n        }\n    }\n}\nfunction $071334078f8d3f8a$var$replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {\n    let { children: children } = parent;\n    let before = children.length ? children[fromI] : null;\n    let last = insert.length ? insert[insert.length - 1] : null;\n    let breakAtEnd = last ? last.breakAfter : breakAtStart;\n    // Change within a single child\n    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 && before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd)) return;\n    if (toI < children.length) {\n        let after = children[toI];\n        // Make sure the end of the child after the update is preserved in `after`\n        if (after && toOff < after.length) {\n            // If we're splitting a child, separate part of it to avoid that\n            // being mangled when updating the child before the update.\n            if (fromI == toI) {\n                after = after.split(toOff);\n                toOff = 0;\n            }\n            // If the element after the replacement should be merged with\n            // the last replacing element, update `content`\n            if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) insert[insert.length - 1] = after;\n            else {\n                // Remove the start of the after element, if necessary, and\n                // add it to `content`.\n                if (toOff) after.merge(0, toOff, null, false, 0, openEnd);\n                insert.push(after);\n            }\n        } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {\n            // The element at `toI` is entirely covered by this range.\n            // Preserve its line break, if any.\n            if (last) last.breakAfter = 1;\n            else breakAtStart = 1;\n        }\n        // Since we've handled the next element from the current elements\n        // now, make sure `toI` points after that.\n        toI++;\n    }\n    if (before) {\n        before.breakAfter = breakAtStart;\n        if (fromOff > 0) {\n            if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) before.breakAfter = insert.shift().breakAfter;\n            else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) before.merge(fromOff, before.length, null, false, openStart, 0);\n            fromI++;\n        }\n    }\n    // Try to merge widgets on the boundaries of the replacement\n    while(fromI < toI && insert.length){\n        if (children[toI - 1].become(insert[insert.length - 1])) {\n            toI--;\n            insert.pop();\n            openEnd = insert.length ? 0 : openStart;\n        } else if (children[fromI].become(insert[0])) {\n            fromI++;\n            insert.shift();\n            openStart = insert.length ? 0 : openEnd;\n        } else break;\n    }\n    if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd)) fromI--;\n    if (fromI < toI || insert.length) parent.replaceChildren(fromI, toI, insert);\n}\nfunction $071334078f8d3f8a$var$mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {\n    let cur = parent.childCursor();\n    let { i: toI, off: toOff } = cur.findPos(to, 1);\n    let { i: fromI, off: fromOff } = cur.findPos(from, -1);\n    let dLen = from - to;\n    for (let view of insert)dLen += view.length;\n    parent.length += dLen;\n    $071334078f8d3f8a$var$replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);\n}\nconst $071334078f8d3f8a$var$LineBreakPlaceholder = \"￿\";\nclass $071334078f8d3f8a$var$DOMReader {\n    constructor(points, state){\n        this.points = points;\n        this.text = \"\";\n        this.lineSeparator = state.facet((0, $ccfb9497d8ef598f$export$afa855cbfaff27f2).lineSeparator);\n    }\n    append(text) {\n        this.text += text;\n    }\n    lineBreak() {\n        this.text += $071334078f8d3f8a$var$LineBreakPlaceholder;\n    }\n    readRange(start, end) {\n        if (!start) return this;\n        let parent = start.parentNode;\n        for(let cur = start;;){\n            this.findPointBefore(parent, cur);\n            let oldLen = this.text.length;\n            this.readNode(cur);\n            let next = cur.nextSibling;\n            if (next == end) break;\n            let view = $071334078f8d3f8a$var$ContentView.get(cur), nextView = $071334078f8d3f8a$var$ContentView.get(next);\n            if (view && nextView ? view.breakAfter : (view ? view.breakAfter : $071334078f8d3f8a$var$isBlockElement(cur)) || $071334078f8d3f8a$var$isBlockElement(next) && (cur.nodeName != \"BR\" || cur.cmIgnore) && this.text.length > oldLen) this.lineBreak();\n            cur = next;\n        }\n        this.findPointBefore(parent, end);\n        return this;\n    }\n    readTextNode(node) {\n        let text = node.nodeValue;\n        for (let point of this.points)if (point.node == node) point.pos = this.text.length + Math.min(point.offset, text.length);\n        for(let off = 0, re = this.lineSeparator ? null : /\\r\\n?|\\n/g;;){\n            let nextBreak = -1, breakSize = 1, m;\n            if (this.lineSeparator) {\n                nextBreak = text.indexOf(this.lineSeparator, off);\n                breakSize = this.lineSeparator.length;\n            } else if (m = re.exec(text)) {\n                nextBreak = m.index;\n                breakSize = m[0].length;\n            }\n            this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));\n            if (nextBreak < 0) break;\n            this.lineBreak();\n            if (breakSize > 1) {\n                for (let point of this.points)if (point.node == node && point.pos > this.text.length) point.pos -= breakSize - 1;\n            }\n            off = nextBreak + breakSize;\n        }\n    }\n    readNode(node) {\n        if (node.cmIgnore) return;\n        let view = $071334078f8d3f8a$var$ContentView.get(node);\n        let fromView = view && view.overrideDOMText;\n        if (fromView != null) {\n            this.findPointInside(node, fromView.length);\n            for(let i = fromView.iter(); !i.next().done;)if (i.lineBreak) this.lineBreak();\n            else this.append(i.value);\n        } else if (node.nodeType == 3) this.readTextNode(node);\n        else if (node.nodeName == \"BR\") {\n            if (node.nextSibling) this.lineBreak();\n        } else if (node.nodeType == 1) this.readRange(node.firstChild, null);\n    }\n    findPointBefore(node, next) {\n        for (let point of this.points)if (point.node == node && node.childNodes[point.offset] == next) point.pos = this.text.length;\n    }\n    findPointInside(node, maxLen) {\n        for (let point of this.points)if (node.nodeType == 3 ? point.node == node : node.contains(point.node)) point.pos = this.text.length + Math.min(maxLen, point.offset);\n    }\n}\nfunction $071334078f8d3f8a$var$isBlockElement(node) {\n    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\\d|SECTION|PRE)$/.test(node.nodeName);\n}\nclass $071334078f8d3f8a$var$DOMPoint {\n    constructor(node, offset){\n        this.node = node;\n        this.offset = offset;\n        this.pos = -1;\n    }\n}\nlet $071334078f8d3f8a$var$nav = typeof navigator != \"undefined\" ? navigator : {\n    userAgent: \"\",\n    vendor: \"\",\n    platform: \"\"\n};\nlet $071334078f8d3f8a$var$doc = typeof document != \"undefined\" ? document : {\n    documentElement: {\n        style: {}\n    }\n};\nconst $071334078f8d3f8a$var$ie_edge = /*@__PURE__*/ /Edge\\/(\\d+)/.exec($071334078f8d3f8a$var$nav.userAgent);\nconst $071334078f8d3f8a$var$ie_upto10 = /*@__PURE__*/ /MSIE \\d/.test($071334078f8d3f8a$var$nav.userAgent);\nconst $071334078f8d3f8a$var$ie_11up = /*@__PURE__*/ /Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec($071334078f8d3f8a$var$nav.userAgent);\nconst $071334078f8d3f8a$var$ie = !!($071334078f8d3f8a$var$ie_upto10 || $071334078f8d3f8a$var$ie_11up || $071334078f8d3f8a$var$ie_edge);\nconst $071334078f8d3f8a$var$gecko = !$071334078f8d3f8a$var$ie && /*@__PURE__*/ /gecko\\/(\\d+)/i.test($071334078f8d3f8a$var$nav.userAgent);\nconst $071334078f8d3f8a$var$chrome = !$071334078f8d3f8a$var$ie && /*@__PURE__*/ /Chrome\\/(\\d+)/.exec($071334078f8d3f8a$var$nav.userAgent);\nconst $071334078f8d3f8a$var$webkit = \"webkitFontSmoothing\" in $071334078f8d3f8a$var$doc.documentElement.style;\nconst $071334078f8d3f8a$var$safari = !$071334078f8d3f8a$var$ie && /*@__PURE__*/ /Apple Computer/.test($071334078f8d3f8a$var$nav.vendor);\nconst $071334078f8d3f8a$var$ios = $071334078f8d3f8a$var$safari && /*@__PURE__*/ (/Mobile\\/\\w+/.test($071334078f8d3f8a$var$nav.userAgent) || $071334078f8d3f8a$var$nav.maxTouchPoints > 2);\nvar $071334078f8d3f8a$var$browser = {\n    mac: $071334078f8d3f8a$var$ios || /*@__PURE__*/ /Mac/.test($071334078f8d3f8a$var$nav.platform),\n    windows: /*@__PURE__*/ /Win/.test($071334078f8d3f8a$var$nav.platform),\n    linux: /*@__PURE__*/ /Linux|X11/.test($071334078f8d3f8a$var$nav.platform),\n    ie: $071334078f8d3f8a$var$ie,\n    ie_version: $071334078f8d3f8a$var$ie_upto10 ? $071334078f8d3f8a$var$doc.documentMode || 6 : $071334078f8d3f8a$var$ie_11up ? +$071334078f8d3f8a$var$ie_11up[1] : $071334078f8d3f8a$var$ie_edge ? +$071334078f8d3f8a$var$ie_edge[1] : 0,\n    gecko: $071334078f8d3f8a$var$gecko,\n    gecko_version: $071334078f8d3f8a$var$gecko ? +/*@__PURE__*/ (/Firefox\\/(\\d+)/.exec($071334078f8d3f8a$var$nav.userAgent) || [\n        0,\n        0\n    ])[1] : 0,\n    chrome: !!$071334078f8d3f8a$var$chrome,\n    chrome_version: $071334078f8d3f8a$var$chrome ? +$071334078f8d3f8a$var$chrome[1] : 0,\n    ios: $071334078f8d3f8a$var$ios,\n    android: /*@__PURE__*/ /Android\\b/.test($071334078f8d3f8a$var$nav.userAgent),\n    webkit: $071334078f8d3f8a$var$webkit,\n    safari: $071334078f8d3f8a$var$safari,\n    webkit_version: $071334078f8d3f8a$var$webkit ? +/*@__PURE__*/ (/\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [\n        0,\n        0\n    ])[1] : 0,\n    tabSize: $071334078f8d3f8a$var$doc.documentElement.style.tabSize != null ? \"tab-size\" : \"-moz-tab-size\"\n};\nconst $071334078f8d3f8a$var$MaxJoinLen = 256;\nclass $071334078f8d3f8a$var$TextView extends $071334078f8d3f8a$var$ContentView {\n    constructor(text){\n        super();\n        this.text = text;\n    }\n    get length() {\n        return this.text.length;\n    }\n    createDOM(textDOM) {\n        this.setDOM(textDOM || document.createTextNode(this.text));\n    }\n    sync(view, track) {\n        if (!this.dom) this.createDOM();\n        if (this.dom.nodeValue != this.text) {\n            if (track && track.node == this.dom) track.written = true;\n            this.dom.nodeValue = this.text;\n        }\n    }\n    reuseDOM(dom) {\n        if (dom.nodeType == 3) this.createDOM(dom);\n    }\n    merge(from, to, source) {\n        if (this.flags & 8 /* Composition */  || source && (!(source instanceof $071334078f8d3f8a$var$TextView) || this.length - (to - from) + source.length > $071334078f8d3f8a$var$MaxJoinLen || source.flags & 8 /* Composition */ )) return false;\n        this.text = this.text.slice(0, from) + (source ? source.text : \"\") + this.text.slice(to);\n        this.markDirty();\n        return true;\n    }\n    split(from) {\n        let result = new $071334078f8d3f8a$var$TextView(this.text.slice(from));\n        this.text = this.text.slice(0, from);\n        this.markDirty();\n        result.flags |= this.flags & 8 /* Composition */ ;\n        return result;\n    }\n    localPosFromDOM(node, offset) {\n        return node == this.dom ? offset : offset ? this.text.length : 0;\n    }\n    domAtPos(pos) {\n        return new $071334078f8d3f8a$var$DOMPos(this.dom, pos);\n    }\n    domBoundsAround(_from, _to, offset) {\n        return {\n            from: offset,\n            to: offset + this.length,\n            startDOM: this.dom,\n            endDOM: this.dom.nextSibling\n        };\n    }\n    coordsAt(pos, side) {\n        return $071334078f8d3f8a$var$textCoords(this.dom, pos, side);\n    }\n}\nclass $071334078f8d3f8a$var$MarkView extends $071334078f8d3f8a$var$ContentView {\n    constructor(mark, children = [], length = 0){\n        super();\n        this.mark = mark;\n        this.children = children;\n        this.length = length;\n        for (let ch of children)ch.setParent(this);\n    }\n    setAttrs(dom) {\n        $071334078f8d3f8a$var$clearAttributes(dom);\n        if (this.mark.class) dom.className = this.mark.class;\n        if (this.mark.attrs) for(let name in this.mark.attrs)dom.setAttribute(name, this.mark.attrs[name]);\n        return dom;\n    }\n    canReuseDOM(other) {\n        return super.canReuseDOM(other) && !((this.flags | other.flags) & 8 /* Composition */ );\n    }\n    reuseDOM(node) {\n        if (node.nodeName == this.mark.tagName.toUpperCase()) {\n            this.setDOM(node);\n            this.flags |= 6 /* NodeDirty */ ;\n        }\n    }\n    sync(view, track) {\n        if (!this.dom) this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));\n        else if (this.flags & 4 /* AttrsDirty */ ) this.setAttrs(this.dom);\n        super.sync(view, track);\n    }\n    merge(from, to, source, _hasStart, openStart, openEnd) {\n        if (source && (!(source instanceof $071334078f8d3f8a$var$MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0)) return false;\n        $071334078f8d3f8a$var$mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);\n        this.markDirty();\n        return true;\n    }\n    split(from) {\n        let result = [], off = 0, detachFrom = -1, i = 0;\n        for (let elt of this.children){\n            let end = off + elt.length;\n            if (end > from) result.push(off < from ? elt.split(from - off) : elt);\n            if (detachFrom < 0 && off >= from) detachFrom = i;\n            off = end;\n            i++;\n        }\n        let length = this.length - from;\n        this.length = from;\n        if (detachFrom > -1) {\n            this.children.length = detachFrom;\n            this.markDirty();\n        }\n        return new $071334078f8d3f8a$var$MarkView(this.mark, result, length);\n    }\n    domAtPos(pos) {\n        return $071334078f8d3f8a$var$inlineDOMAtPos(this, pos);\n    }\n    coordsAt(pos, side) {\n        return $071334078f8d3f8a$var$coordsInChildren(this, pos, side);\n    }\n}\nfunction $071334078f8d3f8a$var$textCoords(text, pos, side) {\n    let length = text.nodeValue.length;\n    if (pos > length) pos = length;\n    let from = pos, to = pos, flatten = 0;\n    if (pos == 0 && side < 0 || pos == length && side >= 0) {\n        if (!($071334078f8d3f8a$var$browser.chrome || $071334078f8d3f8a$var$browser.gecko)) {\n            if (pos) {\n                from--;\n                flatten = 1;\n            } else if (to < length) {\n                to++;\n                flatten = -1;\n            }\n        }\n    } else {\n        if (side < 0) from--;\n        else if (to < length) to++;\n    }\n    let rects = $071334078f8d3f8a$var$textRange(text, from, to).getClientRects();\n    if (!rects.length) return null;\n    let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];\n    if ($071334078f8d3f8a$var$browser.safari && !flatten && rect.width == 0) rect = Array.prototype.find.call(rects, (r)=>r.width) || rect;\n    return flatten ? $071334078f8d3f8a$var$flattenRect(rect, flatten < 0) : rect || null;\n}\n// Also used for collapsed ranges that don't have a placeholder widget!\nclass $071334078f8d3f8a$var$WidgetView extends $071334078f8d3f8a$var$ContentView {\n    constructor(widget, length, side){\n        super();\n        this.widget = widget;\n        this.length = length;\n        this.side = side;\n        this.prevWidget = null;\n    }\n    static create(widget, length, side) {\n        return new $071334078f8d3f8a$var$WidgetView(widget, length, side);\n    }\n    split(from) {\n        let result = $071334078f8d3f8a$var$WidgetView.create(this.widget, this.length - from, this.side);\n        this.length -= from;\n        return result;\n    }\n    sync(view) {\n        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {\n            if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);\n            this.prevWidget = null;\n            this.setDOM(this.widget.toDOM(view));\n            this.dom.contentEditable = \"false\";\n        }\n    }\n    getSide() {\n        return this.side;\n    }\n    merge(from, to, source, hasStart, openStart, openEnd) {\n        if (source && (!(source instanceof $071334078f8d3f8a$var$WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;\n        this.length = from + (source ? source.length : 0) + (this.length - to);\n        return true;\n    }\n    become(other) {\n        if (other instanceof $071334078f8d3f8a$var$WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {\n            if (!this.widget.compare(other.widget)) this.markDirty(true);\n            if (this.dom && !this.prevWidget) this.prevWidget = this.widget;\n            this.widget = other.widget;\n            this.length = other.length;\n            return true;\n        }\n        return false;\n    }\n    ignoreMutation() {\n        return true;\n    }\n    ignoreEvent(event) {\n        return this.widget.ignoreEvent(event);\n    }\n    get overrideDOMText() {\n        if (this.length == 0) return (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).empty;\n        let top = this;\n        while(top.parent)top = top.parent;\n        let { view: view } = top, text = view && view.state.doc, start = this.posAtStart;\n        return text ? text.slice(start, start + this.length) : (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).empty;\n    }\n    domAtPos(pos) {\n        return (this.length ? pos == 0 : this.side > 0) ? $071334078f8d3f8a$var$DOMPos.before(this.dom) : $071334078f8d3f8a$var$DOMPos.after(this.dom, pos == this.length);\n    }\n    domBoundsAround() {\n        return null;\n    }\n    coordsAt(pos, side) {\n        let custom = this.widget.coordsAt(this.dom, pos, side);\n        if (custom) return custom;\n        let rects = this.dom.getClientRects(), rect = null;\n        if (!rects.length) return null;\n        let fromBack = this.side ? this.side < 0 : pos > 0;\n        for(let i = fromBack ? rects.length - 1 : 0;; i += fromBack ? -1 : 1){\n            rect = rects[i];\n            if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom) break;\n        }\n        return $071334078f8d3f8a$var$flattenRect(rect, !fromBack);\n    }\n    get isEditable() {\n        return false;\n    }\n    get isWidget() {\n        return true;\n    }\n    get isHidden() {\n        return this.widget.isHidden;\n    }\n    destroy() {\n        super.destroy();\n        if (this.dom) this.widget.destroy(this.dom);\n    }\n}\n// These are drawn around uneditable widgets to avoid a number of\n// browser bugs that show up when the cursor is directly next to\n// uneditable inline content.\nclass $071334078f8d3f8a$var$WidgetBufferView extends $071334078f8d3f8a$var$ContentView {\n    constructor(side){\n        super();\n        this.side = side;\n    }\n    get length() {\n        return 0;\n    }\n    merge() {\n        return false;\n    }\n    become(other) {\n        return other instanceof $071334078f8d3f8a$var$WidgetBufferView && other.side == this.side;\n    }\n    split() {\n        return new $071334078f8d3f8a$var$WidgetBufferView(this.side);\n    }\n    sync() {\n        if (!this.dom) {\n            let dom = document.createElement(\"img\");\n            dom.className = \"cm-widgetBuffer\";\n            dom.setAttribute(\"aria-hidden\", \"true\");\n            this.setDOM(dom);\n        }\n    }\n    getSide() {\n        return this.side;\n    }\n    domAtPos(pos) {\n        return this.side > 0 ? $071334078f8d3f8a$var$DOMPos.before(this.dom) : $071334078f8d3f8a$var$DOMPos.after(this.dom);\n    }\n    localPosFromDOM() {\n        return 0;\n    }\n    domBoundsAround() {\n        return null;\n    }\n    coordsAt(pos) {\n        return this.dom.getBoundingClientRect();\n    }\n    get overrideDOMText() {\n        return (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).empty;\n    }\n    get isHidden() {\n        return true;\n    }\n}\n$071334078f8d3f8a$var$TextView.prototype.children = $071334078f8d3f8a$var$WidgetView.prototype.children = $071334078f8d3f8a$var$WidgetBufferView.prototype.children = $071334078f8d3f8a$var$noChildren;\nfunction $071334078f8d3f8a$var$inlineDOMAtPos(parent, pos) {\n    let dom = parent.dom, { children: children } = parent, i = 0;\n    for(let off = 0; i < children.length; i++){\n        let child = children[i], end = off + child.length;\n        if (end == off && child.getSide() <= 0) continue;\n        if (pos > off && pos < end && child.dom.parentNode == dom) return child.domAtPos(pos - off);\n        if (pos <= off) break;\n        off = end;\n    }\n    for(let j = i; j > 0; j--){\n        let prev = children[j - 1];\n        if (prev.dom.parentNode == dom) return prev.domAtPos(prev.length);\n    }\n    for(let j = i; j < children.length; j++){\n        let next = children[j];\n        if (next.dom.parentNode == dom) return next.domAtPos(0);\n    }\n    return new $071334078f8d3f8a$var$DOMPos(dom, 0);\n}\n// Assumes `view`, if a mark view, has precisely 1 child.\nfunction $071334078f8d3f8a$var$joinInlineInto(parent, view, open) {\n    let last, { children: children } = parent;\n    if (open > 0 && view instanceof $071334078f8d3f8a$var$MarkView && children.length && (last = children[children.length - 1]) instanceof $071334078f8d3f8a$var$MarkView && last.mark.eq(view.mark)) $071334078f8d3f8a$var$joinInlineInto(last, view.children[0], open - 1);\n    else {\n        children.push(view);\n        view.setParent(parent);\n    }\n    parent.length += view.length;\n}\nfunction $071334078f8d3f8a$var$coordsInChildren(view, pos, side) {\n    let before = null, beforePos = -1, after = null, afterPos = -1;\n    function scan(view, pos) {\n        for(let i = 0, off = 0; i < view.children.length && off <= pos; i++){\n            let child = view.children[i], end = off + child.length;\n            if (end >= pos) {\n                if (child.children.length) scan(child, pos - off);\n                else if ((!after || after.isHidden && side > 0) && (end > pos || off == end && child.getSide() > 0)) {\n                    after = child;\n                    afterPos = pos - off;\n                } else if (off < pos || off == end && child.getSide() < 0 && !child.isHidden) {\n                    before = child;\n                    beforePos = pos - off;\n                }\n            }\n            off = end;\n        }\n    }\n    scan(view, pos);\n    let target = (side < 0 ? before : after) || before || after;\n    if (target) return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);\n    return $071334078f8d3f8a$var$fallbackRect(view);\n}\nfunction $071334078f8d3f8a$var$fallbackRect(view) {\n    let last = view.dom.lastChild;\n    if (!last) return view.dom.getBoundingClientRect();\n    let rects = $071334078f8d3f8a$var$clientRectsFor(last);\n    return rects[rects.length - 1] || null;\n}\nfunction $071334078f8d3f8a$var$combineAttrs(source, target) {\n    for(let name in source){\n        if (name == \"class\" && target.class) target.class += \" \" + source.class;\n        else if (name == \"style\" && target.style) target.style += \";\" + source.style;\n        else target[name] = source[name];\n    }\n    return target;\n}\nconst $071334078f8d3f8a$var$noAttrs = /*@__PURE__*/ Object.create(null);\nfunction $071334078f8d3f8a$var$attrsEq(a, b, ignore) {\n    if (a == b) return true;\n    if (!a) a = $071334078f8d3f8a$var$noAttrs;\n    if (!b) b = $071334078f8d3f8a$var$noAttrs;\n    let keysA = Object.keys(a), keysB = Object.keys(b);\n    if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) != keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0)) return false;\n    for (let key of keysA){\n        if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key])) return false;\n    }\n    return true;\n}\nfunction $071334078f8d3f8a$var$updateAttrs(dom, prev, attrs) {\n    let changed = null;\n    if (prev) {\n        for(let name in prev)if (!(attrs && name in attrs)) dom.removeAttribute(changed = name);\n    }\n    if (attrs) {\n        for(let name in attrs)if (!(prev && prev[name] == attrs[name])) dom.setAttribute(changed = name, attrs[name]);\n    }\n    return !!changed;\n}\nfunction $071334078f8d3f8a$var$getAttrs(dom) {\n    let attrs = Object.create(null);\n    for(let i = 0; i < dom.attributes.length; i++){\n        let attr = dom.attributes[i];\n        attrs[attr.name] = attr.value;\n    }\n    return attrs;\n}\n/**\nWidgets added to the content are described by subclasses of this\nclass. Using a description object like that makes it possible to\ndelay creating of the DOM structure for a widget until it is\nneeded, and to avoid redrawing widgets even if the decorations\nthat define them are recreated.\n*/ class $071334078f8d3f8a$export$95cdd842edb044c5 {\n    /**\n    Compare this instance to another instance of the same type.\n    (TypeScript can't express this, but only instances of the same\n    specific class will be passed to this method.) This is used to\n    avoid redrawing widgets when they are replaced by a new\n    decoration of the same type. The default implementation just\n    returns `false`, which will cause new instances of the widget to\n    always be redrawn.\n    */ eq(widget) {\n        return false;\n    }\n    /**\n    Update a DOM element created by a widget of the same type (but\n    different, non-`eq` content) to reflect this widget. May return\n    true to indicate that it could update, false to indicate it\n    couldn't (in which case the widget will be redrawn). The default\n    implementation just returns false.\n    */ updateDOM(dom, view) {\n        return false;\n    }\n    /**\n    @internal\n    */ compare(other) {\n        return this == other || this.constructor == other.constructor && this.eq(other);\n    }\n    /**\n    The estimated height this widget will have, to be used when\n    estimating the height of content that hasn't been drawn. May\n    return -1 to indicate you don't know. The default implementation\n    returns -1.\n    */ get estimatedHeight() {\n        return -1;\n    }\n    /**\n    For inline widgets that are displayed inline (as opposed to\n    `inline-block`) and introduce line breaks (through `<br>` tags\n    or textual newlines), this must indicate the amount of line\n    breaks they introduce. Defaults to 0.\n    */ get lineBreaks() {\n        return 0;\n    }\n    /**\n    Can be used to configure which kinds of events inside the widget\n    should be ignored by the editor. The default is to ignore all\n    events.\n    */ ignoreEvent(event) {\n        return true;\n    }\n    /**\n    Override the way screen coordinates for positions at/in the\n    widget are found. `pos` will be the offset into the widget, and\n    `side` the side of the position that is being queried—less than\n    zero for before, greater than zero for after, and zero for\n    directly at that position.\n    */ coordsAt(dom, pos, side) {\n        return null;\n    }\n    /**\n    @internal\n    */ get isHidden() {\n        return false;\n    }\n    /**\n    This is called when the an instance of the widget is removed\n    from the editor view.\n    */ destroy(dom) {}\n}\n/**\nThe different types of blocks that can occur in an editor view.\n*/ var $071334078f8d3f8a$export$48808c686fe495c4 = /*@__PURE__*/ function(BlockType) {\n    /**\n    A line of text.\n    */ BlockType[BlockType[\"Text\"] = 0] = \"Text\";\n    /**\n    A block widget associated with the position after it.\n    */ BlockType[BlockType[\"WidgetBefore\"] = 1] = \"WidgetBefore\";\n    /**\n    A block widget associated with the position before it.\n    */ BlockType[BlockType[\"WidgetAfter\"] = 2] = \"WidgetAfter\";\n    /**\n    A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.\n    */ BlockType[BlockType[\"WidgetRange\"] = 3] = \"WidgetRange\";\n    return BlockType;\n}($071334078f8d3f8a$export$48808c686fe495c4 || ($071334078f8d3f8a$export$48808c686fe495c4 = {}));\n/**\nA decoration provides information on how to draw or style a piece\nof content. You'll usually use it wrapped in a\n[`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.\n@nonabstract\n*/ class $071334078f8d3f8a$export$10e30b733df217ea extends (0, $ccfb9497d8ef598f$export$d60f08ed93a48611) {\n    constructor(/**\n    @internal\n    */ startSide, /**\n    @internal\n    */ endSide, /**\n    @internal\n    */ widget, /**\n    The config object used to create this decoration. You can\n    include additional properties in there to store metadata about\n    your decoration.\n    */ spec){\n        super();\n        this.startSide = startSide;\n        this.endSide = endSide;\n        this.widget = widget;\n        this.spec = spec;\n    }\n    /**\n    @internal\n    */ get heightRelevant() {\n        return false;\n    }\n    /**\n    Create a mark decoration, which influences the styling of the\n    content in its range. Nested mark decorations will cause nested\n    DOM elements to be created. Nesting order is determined by\n    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with\n    the higher-precedence decorations creating the inner DOM nodes.\n    Such elements are split on line boundaries and on the boundaries\n    of lower-precedence decorations.\n    */ static mark(spec) {\n        return new $071334078f8d3f8a$var$MarkDecoration(spec);\n    }\n    /**\n    Create a widget decoration, which displays a DOM element at the\n    given position.\n    */ static widget(spec) {\n        let side = Math.max(-10000, Math.min(10000, spec.side || 0)), block = !!spec.block;\n        side += block && !spec.inlineOrder ? side > 0 ? 300000000 /* BlockAfter */  : -400000000 /* BlockBefore */  : side > 0 ? 100000000 /* InlineAfter */  : -100000000 /* InlineBefore */ ;\n        return new $071334078f8d3f8a$var$PointDecoration(spec, side, side, block, spec.widget || null, false);\n    }\n    /**\n    Create a replace decoration which replaces the given range with\n    a widget, or simply hides it.\n    */ static replace(spec) {\n        let block = !!spec.block, startSide, endSide;\n        if (spec.isBlockGap) {\n            startSide = -500000000 /* GapStart */ ;\n            endSide = 400000000 /* GapEnd */ ;\n        } else {\n            let { start: start, end: end } = $071334078f8d3f8a$var$getInclusive(spec, block);\n            startSide = (start ? block ? -300000000 /* BlockIncStart */  : -1 /* InlineIncStart */  : 500000000 /* NonIncStart */ ) - 1;\n            endSide = (end ? block ? 200000000 /* BlockIncEnd */  : 1 /* InlineIncEnd */  : -600000000 /* NonIncEnd */ ) + 1;\n        }\n        return new $071334078f8d3f8a$var$PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);\n    }\n    /**\n    Create a line decoration, which can add DOM attributes to the\n    line starting at the given position.\n    */ static line(spec) {\n        return new $071334078f8d3f8a$var$LineDecoration(spec);\n    }\n    /**\n    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given\n    decorated range or ranges. If the ranges aren't already sorted,\n    pass `true` for `sort` to make the library sort them for you.\n    */ static set(of, sort = false) {\n        return (0, $ccfb9497d8ef598f$export$34cb5241245008dd).of(of, sort);\n    }\n    /**\n    @internal\n    */ hasHeight() {\n        return this.widget ? this.widget.estimatedHeight > -1 : false;\n    }\n}\n/**\nThe empty set of decorations.\n*/ $071334078f8d3f8a$export$10e30b733df217ea.none = (0, $ccfb9497d8ef598f$export$34cb5241245008dd).empty;\nclass $071334078f8d3f8a$var$MarkDecoration extends $071334078f8d3f8a$export$10e30b733df217ea {\n    constructor(spec){\n        let { start: start, end: end } = $071334078f8d3f8a$var$getInclusive(spec);\n        super(start ? -1 /* InlineIncStart */  : 500000000 /* NonIncStart */ , end ? 1 /* InlineIncEnd */  : -600000000 /* NonIncEnd */ , null, spec);\n        this.tagName = spec.tagName || \"span\";\n        this.class = spec.class || \"\";\n        this.attrs = spec.attributes || null;\n    }\n    eq(other) {\n        var _a, _b;\n        return this == other || other instanceof $071334078f8d3f8a$var$MarkDecoration && this.tagName == other.tagName && (this.class || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) && $071334078f8d3f8a$var$attrsEq(this.attrs, other.attrs, \"class\");\n    }\n    range(from, to = from) {\n        if (from >= to) throw new RangeError(\"Mark decorations may not be empty\");\n        return super.range(from, to);\n    }\n}\n$071334078f8d3f8a$var$MarkDecoration.prototype.point = false;\nclass $071334078f8d3f8a$var$LineDecoration extends $071334078f8d3f8a$export$10e30b733df217ea {\n    constructor(spec){\n        super(-200000000 /* Line */ , -200000000 /* Line */ , null, spec);\n    }\n    eq(other) {\n        return other instanceof $071334078f8d3f8a$var$LineDecoration && this.spec.class == other.spec.class && $071334078f8d3f8a$var$attrsEq(this.spec.attributes, other.spec.attributes);\n    }\n    range(from, to = from) {\n        if (to != from) throw new RangeError(\"Line decoration ranges must be zero-length\");\n        return super.range(from, to);\n    }\n}\n$071334078f8d3f8a$var$LineDecoration.prototype.mapMode = (0, $ccfb9497d8ef598f$export$39cf3280165f92aa).TrackBefore;\n$071334078f8d3f8a$var$LineDecoration.prototype.point = true;\nclass $071334078f8d3f8a$var$PointDecoration extends $071334078f8d3f8a$export$10e30b733df217ea {\n    constructor(spec, startSide, endSide, block, widget, isReplace){\n        super(startSide, endSide, widget, spec);\n        this.block = block;\n        this.isReplace = isReplace;\n        this.mapMode = !block ? (0, $ccfb9497d8ef598f$export$39cf3280165f92aa).TrackDel : startSide <= 0 ? (0, $ccfb9497d8ef598f$export$39cf3280165f92aa).TrackBefore : (0, $ccfb9497d8ef598f$export$39cf3280165f92aa).TrackAfter;\n    }\n    // Only relevant when this.block == true\n    get type() {\n        return this.startSide < this.endSide ? $071334078f8d3f8a$export$48808c686fe495c4.WidgetRange : this.startSide <= 0 ? $071334078f8d3f8a$export$48808c686fe495c4.WidgetBefore : $071334078f8d3f8a$export$48808c686fe495c4.WidgetAfter;\n    }\n    get heightRelevant() {\n        return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);\n    }\n    eq(other) {\n        return other instanceof $071334078f8d3f8a$var$PointDecoration && $071334078f8d3f8a$var$widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;\n    }\n    range(from, to = from) {\n        if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0)) throw new RangeError(\"Invalid range for replacement decoration\");\n        if (!this.isReplace && to != from) throw new RangeError(\"Widget decorations can only have zero-length ranges\");\n        return super.range(from, to);\n    }\n}\n$071334078f8d3f8a$var$PointDecoration.prototype.point = true;\nfunction $071334078f8d3f8a$var$getInclusive(spec, block = false) {\n    let { inclusiveStart: start, inclusiveEnd: end } = spec;\n    if (start == null) start = spec.inclusive;\n    if (end == null) end = spec.inclusive;\n    return {\n        start: start !== null && start !== void 0 ? start : block,\n        end: end !== null && end !== void 0 ? end : block\n    };\n}\nfunction $071334078f8d3f8a$var$widgetsEq(a, b) {\n    return a == b || !!(a && b && a.compare(b));\n}\nfunction $071334078f8d3f8a$var$addRange(from, to, ranges, margin = 0) {\n    let last = ranges.length - 1;\n    if (last >= 0 && ranges[last] + margin >= from) ranges[last] = Math.max(ranges[last], to);\n    else ranges.push(from, to);\n}\nclass $071334078f8d3f8a$var$LineView extends $071334078f8d3f8a$var$ContentView {\n    constructor(){\n        super(...arguments);\n        this.children = [];\n        this.length = 0;\n        this.prevAttrs = undefined;\n        this.attrs = null;\n        this.breakAfter = 0;\n    }\n    // Consumes source\n    merge(from, to, source, hasStart, openStart, openEnd) {\n        if (source) {\n            if (!(source instanceof $071334078f8d3f8a$var$LineView)) return false;\n            if (!this.dom) source.transferDOM(this); // Reuse source.dom when appropriate\n        }\n        if (hasStart) this.setDeco(source ? source.attrs : null);\n        $071334078f8d3f8a$var$mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);\n        return true;\n    }\n    split(at) {\n        let end = new $071334078f8d3f8a$var$LineView;\n        end.breakAfter = this.breakAfter;\n        if (this.length == 0) return end;\n        let { i: i, off: off } = this.childPos(at);\n        if (off) {\n            end.append(this.children[i].split(off), 0);\n            this.children[i].merge(off, this.children[i].length, null, false, 0, 0);\n            i++;\n        }\n        for(let j = i; j < this.children.length; j++)end.append(this.children[j], 0);\n        while(i > 0 && this.children[i - 1].length == 0)this.children[--i].destroy();\n        this.children.length = i;\n        this.markDirty();\n        this.length = at;\n        return end;\n    }\n    transferDOM(other) {\n        if (!this.dom) return;\n        this.markDirty();\n        other.setDOM(this.dom);\n        other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;\n        this.prevAttrs = undefined;\n        this.dom = null;\n    }\n    setDeco(attrs) {\n        if (!$071334078f8d3f8a$var$attrsEq(this.attrs, attrs)) {\n            if (this.dom) {\n                this.prevAttrs = this.attrs;\n                this.markDirty();\n            }\n            this.attrs = attrs;\n        }\n    }\n    append(child, openStart) {\n        $071334078f8d3f8a$var$joinInlineInto(this, child, openStart);\n    }\n    // Only called when building a line view in ContentBuilder\n    addLineDeco(deco) {\n        let attrs = deco.spec.attributes, cls = deco.spec.class;\n        if (attrs) this.attrs = $071334078f8d3f8a$var$combineAttrs(attrs, this.attrs || {});\n        if (cls) this.attrs = $071334078f8d3f8a$var$combineAttrs({\n            class: cls\n        }, this.attrs || {});\n    }\n    domAtPos(pos) {\n        return $071334078f8d3f8a$var$inlineDOMAtPos(this, pos);\n    }\n    reuseDOM(node) {\n        if (node.nodeName == \"DIV\") {\n            this.setDOM(node);\n            this.flags |= 6 /* NodeDirty */ ;\n        }\n    }\n    sync(view, track) {\n        var _a;\n        if (!this.dom) {\n            this.setDOM(document.createElement(\"div\"));\n            this.dom.className = \"cm-line\";\n            this.prevAttrs = this.attrs ? null : undefined;\n        } else if (this.flags & 4 /* AttrsDirty */ ) {\n            $071334078f8d3f8a$var$clearAttributes(this.dom);\n            this.dom.className = \"cm-line\";\n            this.prevAttrs = this.attrs ? null : undefined;\n        }\n        if (this.prevAttrs !== undefined) {\n            $071334078f8d3f8a$var$updateAttrs(this.dom, this.prevAttrs, this.attrs);\n            this.dom.classList.add(\"cm-line\");\n            this.prevAttrs = undefined;\n        }\n        super.sync(view, track);\n        let last = this.dom.lastChild;\n        while(last && $071334078f8d3f8a$var$ContentView.get(last) instanceof $071334078f8d3f8a$var$MarkView)last = last.lastChild;\n        if (!last || !this.length || last.nodeName != \"BR\" && ((_a = $071334078f8d3f8a$var$ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false && (!$071334078f8d3f8a$var$browser.ios || !this.children.some((ch)=>ch instanceof $071334078f8d3f8a$var$TextView))) {\n            let hack = document.createElement(\"BR\");\n            hack.cmIgnore = true;\n            this.dom.appendChild(hack);\n        }\n    }\n    measureTextSize() {\n        if (this.children.length == 0 || this.length > 20) return null;\n        let totalWidth = 0, textHeight;\n        for (let child of this.children){\n            if (!(child instanceof $071334078f8d3f8a$var$TextView) || /[^ -~]/.test(child.text)) return null;\n            let rects = $071334078f8d3f8a$var$clientRectsFor(child.dom);\n            if (rects.length != 1) return null;\n            totalWidth += rects[0].width;\n            textHeight = rects[0].height;\n        }\n        return !totalWidth ? null : {\n            lineHeight: this.dom.getBoundingClientRect().height,\n            charWidth: totalWidth / this.length,\n            textHeight: textHeight\n        };\n    }\n    coordsAt(pos, side) {\n        let rect = $071334078f8d3f8a$var$coordsInChildren(this, pos, side);\n        // Correct rectangle height for empty lines when the returned\n        // height is larger than the text height.\n        if (!this.children.length && rect && this.parent) {\n            let { heightOracle: heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;\n            if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {\n                let dist = (height - heightOracle.textHeight) / 2;\n                return {\n                    top: rect.top + dist,\n                    bottom: rect.bottom - dist,\n                    left: rect.left,\n                    right: rect.left\n                };\n            }\n        }\n        return rect;\n    }\n    become(_other) {\n        return false;\n    }\n    get type() {\n        return $071334078f8d3f8a$export$48808c686fe495c4.Text;\n    }\n    static find(docView, pos) {\n        for(let i = 0, off = 0; i < docView.children.length; i++){\n            let block = docView.children[i], end = off + block.length;\n            if (end >= pos) {\n                if (block instanceof $071334078f8d3f8a$var$LineView) return block;\n                if (end > pos) break;\n            }\n            off = end + block.breakAfter;\n        }\n        return null;\n    }\n}\nclass $071334078f8d3f8a$var$BlockWidgetView extends $071334078f8d3f8a$var$ContentView {\n    constructor(widget, length, type){\n        super();\n        this.widget = widget;\n        this.length = length;\n        this.type = type;\n        this.breakAfter = 0;\n        this.prevWidget = null;\n    }\n    merge(from, to, source, _takeDeco, openStart, openEnd) {\n        if (source && (!(source instanceof $071334078f8d3f8a$var$BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;\n        this.length = from + (source ? source.length : 0) + (this.length - to);\n        return true;\n    }\n    domAtPos(pos) {\n        return pos == 0 ? $071334078f8d3f8a$var$DOMPos.before(this.dom) : $071334078f8d3f8a$var$DOMPos.after(this.dom, pos == this.length);\n    }\n    split(at) {\n        let len = this.length - at;\n        this.length = at;\n        let end = new $071334078f8d3f8a$var$BlockWidgetView(this.widget, len, this.type);\n        end.breakAfter = this.breakAfter;\n        return end;\n    }\n    get children() {\n        return $071334078f8d3f8a$var$noChildren;\n    }\n    sync(view) {\n        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {\n            if (this.dom && this.prevWidget) this.prevWidget.destroy(this.dom);\n            this.prevWidget = null;\n            this.setDOM(this.widget.toDOM(view));\n            this.dom.contentEditable = \"false\";\n        }\n    }\n    get overrideDOMText() {\n        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).empty;\n    }\n    domBoundsAround() {\n        return null;\n    }\n    become(other) {\n        if (other instanceof $071334078f8d3f8a$var$BlockWidgetView && other.widget.constructor == this.widget.constructor) {\n            if (!other.widget.compare(this.widget)) this.markDirty(true);\n            if (this.dom && !this.prevWidget) this.prevWidget = this.widget;\n            this.widget = other.widget;\n            this.length = other.length;\n            this.type = other.type;\n            this.breakAfter = other.breakAfter;\n            return true;\n        }\n        return false;\n    }\n    ignoreMutation() {\n        return true;\n    }\n    ignoreEvent(event) {\n        return this.widget.ignoreEvent(event);\n    }\n    get isEditable() {\n        return false;\n    }\n    get isWidget() {\n        return true;\n    }\n    coordsAt(pos, side) {\n        return this.widget.coordsAt(this.dom, pos, side);\n    }\n    destroy() {\n        super.destroy();\n        if (this.dom) this.widget.destroy(this.dom);\n    }\n}\nclass $071334078f8d3f8a$var$ContentBuilder {\n    constructor(doc, pos, end, disallowBlockEffectsFor){\n        this.doc = doc;\n        this.pos = pos;\n        this.end = end;\n        this.disallowBlockEffectsFor = disallowBlockEffectsFor;\n        this.content = [];\n        this.curLine = null;\n        this.breakAtStart = 0;\n        this.pendingBuffer = 0 /* No */ ;\n        this.bufferMarks = [];\n        // Set to false directly after a widget that covers the position after it\n        this.atCursorPos = true;\n        this.openStart = -1;\n        this.openEnd = -1;\n        this.text = \"\";\n        this.textOff = 0;\n        this.cursor = doc.iter();\n        this.skip = pos;\n    }\n    posCovered() {\n        if (this.content.length == 0) return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;\n        let last = this.content[this.content.length - 1];\n        return !last.breakAfter && !(last instanceof $071334078f8d3f8a$var$BlockWidgetView && last.type == $071334078f8d3f8a$export$48808c686fe495c4.WidgetBefore);\n    }\n    getLine() {\n        if (!this.curLine) {\n            this.content.push(this.curLine = new $071334078f8d3f8a$var$LineView);\n            this.atCursorPos = true;\n        }\n        return this.curLine;\n    }\n    flushBuffer(active = this.bufferMarks) {\n        if (this.pendingBuffer) {\n            this.curLine.append($071334078f8d3f8a$var$wrapMarks(new $071334078f8d3f8a$var$WidgetBufferView(-1), active), active.length);\n            this.pendingBuffer = 0 /* No */ ;\n        }\n    }\n    addBlockWidget(view) {\n        this.flushBuffer();\n        this.curLine = null;\n        this.content.push(view);\n    }\n    finish(openEnd) {\n        if (this.pendingBuffer && openEnd <= this.bufferMarks.length) this.flushBuffer();\n        else this.pendingBuffer = 0 /* No */ ;\n        if (!this.posCovered()) this.getLine();\n    }\n    buildText(length, active, openStart) {\n        while(length > 0){\n            if (this.textOff == this.text.length) {\n                let { value: value, lineBreak: lineBreak, done: done } = this.cursor.next(this.skip);\n                this.skip = 0;\n                if (done) throw new Error(\"Ran out of text content when drawing inline views\");\n                if (lineBreak) {\n                    if (!this.posCovered()) this.getLine();\n                    if (this.content.length) this.content[this.content.length - 1].breakAfter = 1;\n                    else this.breakAtStart = 1;\n                    this.flushBuffer();\n                    this.curLine = null;\n                    this.atCursorPos = true;\n                    length--;\n                    continue;\n                } else {\n                    this.text = value;\n                    this.textOff = 0;\n                }\n            }\n            let take = Math.min(this.text.length - this.textOff, length, 512 /* Chunk */ );\n            this.flushBuffer(active.slice(active.length - openStart));\n            this.getLine().append($071334078f8d3f8a$var$wrapMarks(new $071334078f8d3f8a$var$TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);\n            this.atCursorPos = true;\n            this.textOff += take;\n            length -= take;\n            openStart = 0;\n        }\n    }\n    span(from, to, active, openStart) {\n        this.buildText(to - from, active, openStart);\n        this.pos = to;\n        if (this.openStart < 0) this.openStart = openStart;\n    }\n    point(from, to, deco, active, openStart, index) {\n        if (this.disallowBlockEffectsFor[index] && deco instanceof $071334078f8d3f8a$var$PointDecoration) {\n            if (deco.block) throw new RangeError(\"Block decorations may not be specified via plugins\");\n            if (to > this.doc.lineAt(this.pos).to) throw new RangeError(\"Decorations that replace line breaks may not be specified via plugins\");\n        }\n        let len = to - from;\n        if (deco instanceof $071334078f8d3f8a$var$PointDecoration) {\n            if (deco.block) {\n                let { type: type } = deco;\n                if (type == $071334078f8d3f8a$export$48808c686fe495c4.WidgetAfter && !this.posCovered()) this.getLine();\n                this.addBlockWidget(new $071334078f8d3f8a$var$BlockWidgetView(deco.widget || new $071334078f8d3f8a$var$NullWidget(\"div\"), len, type));\n            } else {\n                let view = $071334078f8d3f8a$var$WidgetView.create(deco.widget || new $071334078f8d3f8a$var$NullWidget(\"span\"), len, len ? 0 : deco.startSide);\n                let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);\n                let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);\n                let line = this.getLine();\n                if (this.pendingBuffer == 2 /* IfCursor */  && !cursorBefore && !view.isEditable) this.pendingBuffer = 0 /* No */ ;\n                this.flushBuffer(active);\n                if (cursorBefore) {\n                    line.append($071334078f8d3f8a$var$wrapMarks(new $071334078f8d3f8a$var$WidgetBufferView(1), active), openStart);\n                    openStart = active.length + Math.max(0, openStart - active.length);\n                }\n                line.append($071334078f8d3f8a$var$wrapMarks(view, active), openStart);\n                this.atCursorPos = cursorAfter;\n                this.pendingBuffer = !cursorAfter ? 0 /* No */  : from < to || openStart > active.length ? 1 /* Yes */  : 2 /* IfCursor */ ;\n                if (this.pendingBuffer) this.bufferMarks = active.slice();\n            }\n        } else if (this.doc.lineAt(this.pos).from == this.pos) this.getLine().addLineDeco(deco);\n        if (len) {\n            // Advance the iterator past the replaced content\n            if (this.textOff + len <= this.text.length) this.textOff += len;\n            else {\n                this.skip += len - (this.text.length - this.textOff);\n                this.text = \"\";\n                this.textOff = 0;\n            }\n            this.pos = to;\n        }\n        if (this.openStart < 0) this.openStart = openStart;\n    }\n    static build(text, from, to, decorations, dynamicDecorationMap) {\n        let builder = new $071334078f8d3f8a$var$ContentBuilder(text, from, to, dynamicDecorationMap);\n        builder.openEnd = (0, $ccfb9497d8ef598f$export$34cb5241245008dd).spans(decorations, from, to, builder);\n        if (builder.openStart < 0) builder.openStart = builder.openEnd;\n        builder.finish(builder.openEnd);\n        return builder;\n    }\n}\nfunction $071334078f8d3f8a$var$wrapMarks(view, active) {\n    for (let mark of active)view = new $071334078f8d3f8a$var$MarkView(mark, [\n        view\n    ], view.length);\n    return view;\n}\nclass $071334078f8d3f8a$var$NullWidget extends $071334078f8d3f8a$export$95cdd842edb044c5 {\n    constructor(tag){\n        super();\n        this.tag = tag;\n    }\n    eq(other) {\n        return other.tag == this.tag;\n    }\n    toDOM() {\n        return document.createElement(this.tag);\n    }\n    updateDOM(elt) {\n        return elt.nodeName.toLowerCase() == this.tag;\n    }\n    get isHidden() {\n        return true;\n    }\n}\nconst $071334078f8d3f8a$var$clickAddsSelectionRange = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $071334078f8d3f8a$var$dragMovesSelection$1 = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $071334078f8d3f8a$var$mouseSelectionStyle = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $071334078f8d3f8a$var$exceptionSink = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $071334078f8d3f8a$var$updateListener = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $071334078f8d3f8a$var$inputHandler = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $071334078f8d3f8a$var$focusChangeEffect = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $071334078f8d3f8a$var$perLineTextDirection = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine: (values)=>values.some((x)=>x)\n});\nconst $071334078f8d3f8a$var$nativeSelectionHidden = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine: (values)=>values.some((x)=>x)\n});\nclass $071334078f8d3f8a$var$ScrollTarget {\n    constructor(range, y = \"nearest\", x = \"nearest\", yMargin = 5, xMargin = 5){\n        this.range = range;\n        this.y = y;\n        this.x = x;\n        this.yMargin = yMargin;\n        this.xMargin = xMargin;\n    }\n    map(changes) {\n        return changes.empty ? this : new $071334078f8d3f8a$var$ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);\n    }\n}\nconst $071334078f8d3f8a$var$scrollIntoView = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define({\n    map: (t, ch)=>t.map(ch)\n});\n/**\nLog or report an unhandled exception in client code. Should\nprobably only be used by extension code that allows client code to\nprovide functions, and calls those functions in a context where an\nexception can't be propagated to calling code in a reasonable way\n(for example when in an event handler).\n\nEither calls a handler registered with\n[`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),\n`window.onerror`, if defined, or `console.error` (in which case\nit'll pass `context`, when given, as first argument).\n*/ function $071334078f8d3f8a$export$f86b2a1a2ce291b3(state, exception, context) {\n    let handler = state.facet($071334078f8d3f8a$var$exceptionSink);\n    if (handler.length) handler[0](exception);\n    else if (window.onerror) window.onerror(String(exception), context, undefined, undefined, exception);\n    else if (context) console.error(context + \":\", exception);\n    else console.error(exception);\n}\nconst $071334078f8d3f8a$var$editable = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine: (values)=>values.length ? values[0] : true\n});\nlet $071334078f8d3f8a$var$nextPluginID = 0;\nconst $071334078f8d3f8a$var$viewPlugin = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\n/**\nView plugins associate stateful values with a view. They can\ninfluence the way the content is drawn, and are notified of things\nthat happen in the view.\n*/ class $071334078f8d3f8a$export$44d5eccfd62adda7 {\n    constructor(/**\n    @internal\n    */ id, /**\n    @internal\n    */ create, /**\n    @internal\n    */ domEventHandlers, buildExtensions){\n        this.id = id;\n        this.create = create;\n        this.domEventHandlers = domEventHandlers;\n        this.extension = buildExtensions(this);\n    }\n    /**\n    Define a plugin from a constructor function that creates the\n    plugin's value, given an editor view.\n    */ static define(create, spec) {\n        const { eventHandlers: eventHandlers, provide: provide, decorations: deco } = spec || {};\n        return new $071334078f8d3f8a$export$44d5eccfd62adda7($071334078f8d3f8a$var$nextPluginID++, create, eventHandlers, (plugin)=>{\n            let ext = [\n                $071334078f8d3f8a$var$viewPlugin.of(plugin)\n            ];\n            if (deco) ext.push($071334078f8d3f8a$var$decorations.of((view)=>{\n                let pluginInst = view.plugin(plugin);\n                return pluginInst ? deco(pluginInst) : $071334078f8d3f8a$export$10e30b733df217ea.none;\n            }));\n            if (provide) ext.push(provide(plugin));\n            return ext;\n        });\n    }\n    /**\n    Create a plugin for a class whose constructor takes a single\n    editor view as argument.\n    */ static fromClass(cls, spec) {\n        return $071334078f8d3f8a$export$44d5eccfd62adda7.define((view)=>new cls(view), spec);\n    }\n}\nclass $071334078f8d3f8a$var$PluginInstance {\n    constructor(spec){\n        this.spec = spec;\n        // When starting an update, all plugins have this field set to the\n        // update object, indicating they need to be updated. When finished\n        // updating, it is set to `false`. Retrieving a plugin that needs to\n        // be updated with `view.plugin` forces an eager update.\n        this.mustUpdate = null;\n        // This is null when the plugin is initially created, but\n        // initialized on the first update.\n        this.value = null;\n    }\n    update(view) {\n        if (!this.value) {\n            if (this.spec) try {\n                this.value = this.spec.create(view);\n            } catch (e) {\n                $071334078f8d3f8a$export$f86b2a1a2ce291b3(view.state, e, \"CodeMirror plugin crashed\");\n                this.deactivate();\n            }\n        } else if (this.mustUpdate) {\n            let update = this.mustUpdate;\n            this.mustUpdate = null;\n            if (this.value.update) try {\n                this.value.update(update);\n            } catch (e) {\n                $071334078f8d3f8a$export$f86b2a1a2ce291b3(update.state, e, \"CodeMirror plugin crashed\");\n                if (this.value.destroy) try {\n                    this.value.destroy();\n                } catch (_) {}\n                this.deactivate();\n            }\n        }\n        return this;\n    }\n    destroy(view) {\n        var _a;\n        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) try {\n            this.value.destroy();\n        } catch (e) {\n            $071334078f8d3f8a$export$f86b2a1a2ce291b3(view.state, e, \"CodeMirror plugin crashed\");\n        }\n    }\n    deactivate() {\n        this.spec = this.value = null;\n    }\n}\nconst $071334078f8d3f8a$var$editorAttributes = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $071334078f8d3f8a$var$contentAttributes = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\n// Provide decorations\nconst $071334078f8d3f8a$var$decorations = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $071334078f8d3f8a$var$atomicRanges = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $071334078f8d3f8a$var$scrollMargins = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nfunction $071334078f8d3f8a$var$getScrollMargins(view) {\n    let left = 0, right = 0, top = 0, bottom = 0;\n    for (let source of view.state.facet($071334078f8d3f8a$var$scrollMargins)){\n        let m = source(view);\n        if (m) {\n            if (m.left != null) left = Math.max(left, m.left);\n            if (m.right != null) right = Math.max(right, m.right);\n            if (m.top != null) top = Math.max(top, m.top);\n            if (m.bottom != null) bottom = Math.max(bottom, m.bottom);\n        }\n    }\n    return {\n        left: left,\n        right: right,\n        top: top,\n        bottom: bottom\n    };\n}\nconst $071334078f8d3f8a$var$styleModule = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nclass $071334078f8d3f8a$var$ChangedRange {\n    constructor(fromA, toA, fromB, toB){\n        this.fromA = fromA;\n        this.toA = toA;\n        this.fromB = fromB;\n        this.toB = toB;\n    }\n    join(other) {\n        return new $071334078f8d3f8a$var$ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));\n    }\n    addToSet(set) {\n        let i = set.length, me = this;\n        for(; i > 0; i--){\n            let range = set[i - 1];\n            if (range.fromA > me.toA) continue;\n            if (range.toA < me.fromA) break;\n            me = me.join(range);\n            set.splice(i - 1, 1);\n        }\n        set.splice(i, 0, me);\n        return set;\n    }\n    static extendWithRanges(diff, ranges) {\n        if (ranges.length == 0) return diff;\n        let result = [];\n        for(let dI = 0, rI = 0, posA = 0, posB = 0;; dI++){\n            let next = dI == diff.length ? null : diff[dI], off = posA - posB;\n            let end = next ? next.fromB : 1e9;\n            while(rI < ranges.length && ranges[rI] < end){\n                let from = ranges[rI], to = ranges[rI + 1];\n                let fromB = Math.max(posB, from), toB = Math.min(end, to);\n                if (fromB <= toB) new $071334078f8d3f8a$var$ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);\n                if (to > end) break;\n                else rI += 2;\n            }\n            if (!next) return result;\n            new $071334078f8d3f8a$var$ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);\n            posA = next.toA;\n            posB = next.toB;\n        }\n    }\n}\n/**\nView [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this\nclass, which describe what happened, whenever the view is updated.\n*/ class $071334078f8d3f8a$export$b5b084f95c87edf7 {\n    constructor(/**\n    The editor view that the update is associated with.\n    */ view, /**\n    The new editor state.\n    */ state, /**\n    The transactions involved in the update. May be empty.\n    */ transactions){\n        this.view = view;\n        this.state = state;\n        this.transactions = transactions;\n        /**\n        @internal\n        */ this.flags = 0;\n        this.startState = view.state;\n        this.changes = (0, $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c).empty(this.startState.doc.length);\n        for (let tr of transactions)this.changes = this.changes.compose(tr.changes);\n        let changedRanges = [];\n        this.changes.iterChangedRanges((fromA, toA, fromB, toB)=>changedRanges.push(new $071334078f8d3f8a$var$ChangedRange(fromA, toA, fromB, toB)));\n        this.changedRanges = changedRanges;\n    }\n    /**\n    @internal\n    */ static create(view, state, transactions) {\n        return new $071334078f8d3f8a$export$b5b084f95c87edf7(view, state, transactions);\n    }\n    /**\n    Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or\n    [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this\n    update.\n    */ get viewportChanged() {\n        return (this.flags & 4 /* Viewport */ ) > 0;\n    }\n    /**\n    Indicates whether the height of a block element in the editor\n    changed in this update.\n    */ get heightChanged() {\n        return (this.flags & 2 /* Height */ ) > 0;\n    }\n    /**\n    Returns true when the document was modified or the size of the\n    editor, or elements within the editor, changed.\n    */ get geometryChanged() {\n        return this.docChanged || (this.flags & 10 /* Height */ ) > 0;\n    }\n    /**\n    True when this update indicates a focus change.\n    */ get focusChanged() {\n        return (this.flags & 1 /* Focus */ ) > 0;\n    }\n    /**\n    Whether the document changed in this update.\n    */ get docChanged() {\n        return !this.changes.empty;\n    }\n    /**\n    Whether the selection was explicitly set in this update.\n    */ get selectionSet() {\n        return this.transactions.some((tr)=>tr.selection);\n    }\n    /**\n    @internal\n    */ get empty() {\n        return this.flags == 0 && this.transactions.length == 0;\n    }\n}\n/**\nUsed to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).\n*/ var $071334078f8d3f8a$export$cacd6541cfeeb6c1 = /*@__PURE__*/ function(Direction) {\n    // (These are chosen to match the base levels, in bidi algorithm\n    // terms, of spans in that direction.)\n    /**\n    Left-to-right.\n    */ Direction[Direction[\"LTR\"] = 0] = \"LTR\";\n    /**\n    Right-to-left.\n    */ Direction[Direction[\"RTL\"] = 1] = \"RTL\";\n    return Direction;\n}($071334078f8d3f8a$export$cacd6541cfeeb6c1 || ($071334078f8d3f8a$export$cacd6541cfeeb6c1 = {}));\nconst $071334078f8d3f8a$var$LTR = $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR, $071334078f8d3f8a$var$RTL = $071334078f8d3f8a$export$cacd6541cfeeb6c1.RTL;\n// Decode a string with each type encoded as log2(type)\nfunction $071334078f8d3f8a$var$dec(str) {\n    let result = [];\n    for(let i = 0; i < str.length; i++)result.push(1 << +str[i]);\n    return result;\n}\n// Character types for codepoints 0 to 0xf8\nconst $071334078f8d3f8a$var$LowTypes = /*@__PURE__*/ $071334078f8d3f8a$var$dec(\"88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008\");\n// Character types for codepoints 0x600 to 0x6f9\nconst $071334078f8d3f8a$var$ArabicTypes = /*@__PURE__*/ $071334078f8d3f8a$var$dec(\"4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333\");\nconst $071334078f8d3f8a$var$Brackets = /*@__PURE__*/ Object.create(null), $071334078f8d3f8a$var$BracketStack = [];\n// There's a lot more in\n// https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,\n// which are left out to keep code size down.\nfor (let p of [\n    \"()\",\n    \"[]\",\n    \"{}\"\n]){\n    let l = /*@__PURE__*/ p.charCodeAt(0), r = /*@__PURE__*/ p.charCodeAt(1);\n    $071334078f8d3f8a$var$Brackets[l] = r;\n    $071334078f8d3f8a$var$Brackets[r] = -l;\n}\nfunction $071334078f8d3f8a$var$charType(ch) {\n    return ch <= 0xf7 ? $071334078f8d3f8a$var$LowTypes[ch] : 0x590 <= ch && ch <= 0x5f4 ? 2 /* R */  : 0x600 <= ch && ch <= 0x6f9 ? $071334078f8d3f8a$var$ArabicTypes[ch - 0x600] : 0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */  : 0x2000 <= ch && ch <= 0x200b ? 256 /* NI */  : 0xfb50 <= ch && ch <= 0xfdff ? 4 /* AL */  : ch == 0x200c ? 256 /* NI */  : 1 /* L */ ;\n}\nconst $071334078f8d3f8a$var$BidiRE = /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac\\ufb50-\\ufdff]/;\n/**\nRepresents a contiguous range of text that has a single direction\n(as in left-to-right or right-to-left).\n*/ class $071334078f8d3f8a$export$e1ed96b746bb516a {\n    /**\n    @internal\n    */ constructor(/**\n    The start of the span (relative to the start of the line).\n    */ from, /**\n    The end of the span.\n    */ to, /**\n    The [\"bidi\n    level\"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)\n    of the span (in this context, 0 means\n    left-to-right, 1 means right-to-left, 2 means left-to-right\n    number inside right-to-left text).\n    */ level){\n        this.from = from;\n        this.to = to;\n        this.level = level;\n    }\n    /**\n    The direction of this span.\n    */ get dir() {\n        return this.level % 2 ? $071334078f8d3f8a$var$RTL : $071334078f8d3f8a$var$LTR;\n    }\n    /**\n    @internal\n    */ side(end, dir) {\n        return this.dir == dir == end ? this.to : this.from;\n    }\n    /**\n    @internal\n    */ static find(order, index, level, assoc) {\n        let maybe = -1;\n        for(let i = 0; i < order.length; i++){\n            let span = order[i];\n            if (span.from <= index && span.to >= index) {\n                if (span.level == level) return i;\n                // When multiple spans match, if assoc != 0, take the one that\n                // covers that side, otherwise take the one with the minimum\n                // level.\n                if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level)) maybe = i;\n            }\n        }\n        if (maybe < 0) throw new RangeError(\"Index out of range\");\n        return maybe;\n    }\n}\n// Reused array of character types\nconst $071334078f8d3f8a$var$types = [];\nfunction $071334078f8d3f8a$var$computeOrder(line, direction) {\n    let len = line.length, outerType = direction == $071334078f8d3f8a$var$LTR ? 1 /* L */  : 2 /* R */ , oppositeType = direction == $071334078f8d3f8a$var$LTR ? 2 /* R */  : 1 /* L */ ;\n    if (!line || outerType == 1 /* L */  && !$071334078f8d3f8a$var$BidiRE.test(line)) return $071334078f8d3f8a$var$trivialOrder(len);\n    // W1. Examine each non-spacing mark (NSM) in the level run, and\n    // change the type of the NSM to the type of the previous\n    // character. If the NSM is at the start of the level run, it will\n    // get the type of sor.\n    // W2. Search backwards from each instance of a European number\n    // until the first strong type (R, L, AL, or sor) is found. If an\n    // AL is found, change the type of the European number to Arabic\n    // number.\n    // W3. Change all ALs to R.\n    // (Left after this: L, R, EN, AN, ET, CS, NI)\n    for(let i = 0, prev = outerType, prevStrong = outerType; i < len; i++){\n        let type = $071334078f8d3f8a$var$charType(line.charCodeAt(i));\n        if (type == 512 /* NSM */ ) type = prev;\n        else if (type == 8 /* EN */  && prevStrong == 4 /* AL */ ) type = 16 /* AN */ ;\n        $071334078f8d3f8a$var$types[i] = type == 4 /* AL */  ? 2 /* R */  : type;\n        if (type & 7 /* Strong */ ) prevStrong = type;\n        prev = type;\n    }\n    // W5. A sequence of European terminators adjacent to European\n    // numbers changes to all European numbers.\n    // W6. Otherwise, separators and terminators change to Other\n    // Neutral.\n    // W7. Search backwards from each instance of a European number\n    // until the first strong type (R, L, or sor) is found. If an L is\n    // found, then change the type of the European number to L.\n    // (Left after this: L, R, EN+AN, NI)\n    for(let i = 0, prev = outerType, prevStrong = outerType; i < len; i++){\n        let type = $071334078f8d3f8a$var$types[i];\n        if (type == 128 /* CS */ ) {\n            if (i < len - 1 && prev == $071334078f8d3f8a$var$types[i + 1] && prev & 24 /* Num */ ) type = $071334078f8d3f8a$var$types[i] = prev;\n            else $071334078f8d3f8a$var$types[i] = 256 /* NI */ ;\n        } else if (type == 64 /* ET */ ) {\n            let end = i + 1;\n            while(end < len && $071334078f8d3f8a$var$types[end] == 64 /* ET */ )end++;\n            let replace = i && prev == 8 /* EN */  || end < len && $071334078f8d3f8a$var$types[end] == 8 /* EN */  ? prevStrong == 1 /* L */  ? 1 /* L */  : 8 /* EN */  : 256 /* NI */ ;\n            for(let j = i; j < end; j++)$071334078f8d3f8a$var$types[j] = replace;\n            i = end - 1;\n        } else if (type == 8 /* EN */  && prevStrong == 1 /* L */ ) $071334078f8d3f8a$var$types[i] = 1 /* L */ ;\n        prev = type;\n        if (type & 7 /* Strong */ ) prevStrong = type;\n    }\n    // N0. Process bracket pairs in an isolating run sequence\n    // sequentially in the logical order of the text positions of the\n    // opening paired brackets using the logic given below. Within this\n    // scope, bidirectional types EN and AN are treated as R.\n    for(let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++){\n        // Keeps [startIndex, type, strongSeen] triples for each open\n        // bracket on BracketStack.\n        if (br = $071334078f8d3f8a$var$Brackets[ch = line.charCodeAt(i)]) {\n            if (br < 0) {\n                for(let sJ = sI - 3; sJ >= 0; sJ -= 3)if ($071334078f8d3f8a$var$BracketStack[sJ + 1] == -br) {\n                    let flags = $071334078f8d3f8a$var$BracketStack[sJ + 2];\n                    let type = flags & 2 /* EmbedInside */  ? outerType : !(flags & 4 /* OppositeInside */ ) ? 0 : flags & 1 /* OppositeBefore */  ? oppositeType : outerType;\n                    if (type) $071334078f8d3f8a$var$types[i] = $071334078f8d3f8a$var$types[$071334078f8d3f8a$var$BracketStack[sJ]] = type;\n                    sI = sJ;\n                    break;\n                }\n            } else if ($071334078f8d3f8a$var$BracketStack.length == 189 /* MaxDepth */ ) break;\n            else {\n                $071334078f8d3f8a$var$BracketStack[sI++] = i;\n                $071334078f8d3f8a$var$BracketStack[sI++] = ch;\n                $071334078f8d3f8a$var$BracketStack[sI++] = context;\n            }\n        } else if ((type = $071334078f8d3f8a$var$types[i]) == 2 /* R */  || type == 1 /* L */ ) {\n            let embed = type == outerType;\n            context = embed ? 0 : 1 /* OppositeBefore */ ;\n            for(let sJ = sI - 3; sJ >= 0; sJ -= 3){\n                let cur = $071334078f8d3f8a$var$BracketStack[sJ + 2];\n                if (cur & 2 /* EmbedInside */ ) break;\n                if (embed) $071334078f8d3f8a$var$BracketStack[sJ + 2] |= 2 /* EmbedInside */ ;\n                else {\n                    if (cur & 4 /* OppositeInside */ ) break;\n                    $071334078f8d3f8a$var$BracketStack[sJ + 2] |= 4 /* OppositeInside */ ;\n                }\n            }\n        }\n    }\n    // N1. A sequence of neutrals takes the direction of the\n    // surrounding strong text if the text on both sides has the same\n    // direction. European and Arabic numbers act as if they were R in\n    // terms of their influence on neutrals. Start-of-level-run (sor)\n    // and end-of-level-run (eor) are used at level run boundaries.\n    // N2. Any remaining neutrals take the embedding direction.\n    // (Left after this: L, R, EN+AN)\n    for(let i = 0; i < len; i++)if ($071334078f8d3f8a$var$types[i] == 256 /* NI */ ) {\n        let end = i + 1;\n        while(end < len && $071334078f8d3f8a$var$types[end] == 256 /* NI */ )end++;\n        let beforeL = (i ? $071334078f8d3f8a$var$types[i - 1] : outerType) == 1 /* L */ ;\n        let afterL = (end < len ? $071334078f8d3f8a$var$types[end] : outerType) == 1 /* L */ ;\n        let replace = beforeL == afterL ? beforeL ? 1 /* L */  : 2 /* R */  : outerType;\n        for(let j = i; j < end; j++)$071334078f8d3f8a$var$types[j] = replace;\n        i = end - 1;\n    }\n    // Here we depart from the documented algorithm, in order to avoid\n    // building up an actual levels array. Since there are only three\n    // levels (0, 1, 2) in an implementation that doesn't take\n    // explicit embedding into account, we can build up the order on\n    // the fly, without following the level-based algorithm.\n    let order = [];\n    if (outerType == 1 /* L */ ) for(let i = 0; i < len;){\n        let start = i, rtl = $071334078f8d3f8a$var$types[i++] != 1 /* L */ ;\n        while(i < len && rtl == ($071334078f8d3f8a$var$types[i] != 1 /* L */ ))i++;\n        if (rtl) for(let j = i; j > start;){\n            let end = j, l = $071334078f8d3f8a$var$types[--j] != 2 /* R */ ;\n            while(j > start && l == ($071334078f8d3f8a$var$types[j - 1] != 2 /* R */ ))j--;\n            order.push(new $071334078f8d3f8a$export$e1ed96b746bb516a(j, end, l ? 2 : 1));\n        }\n        else order.push(new $071334078f8d3f8a$export$e1ed96b746bb516a(start, i, 0));\n    }\n    else for(let i = 0; i < len;){\n        let start = i, rtl = $071334078f8d3f8a$var$types[i++] == 2 /* R */ ;\n        while(i < len && rtl == ($071334078f8d3f8a$var$types[i] == 2 /* R */ ))i++;\n        order.push(new $071334078f8d3f8a$export$e1ed96b746bb516a(start, i, rtl ? 1 : 2));\n    }\n    return order;\n}\nfunction $071334078f8d3f8a$var$trivialOrder(length) {\n    return [\n        new $071334078f8d3f8a$export$e1ed96b746bb516a(0, length, 0)\n    ];\n}\nlet $071334078f8d3f8a$var$movedOver = \"\";\nfunction $071334078f8d3f8a$var$moveVisually(line, order, dir, start, forward) {\n    var _a;\n    let startIndex = start.head - line.from, spanI = -1;\n    if (startIndex == 0) {\n        if (!forward || !line.length) return null;\n        if (order[0].level != dir) {\n            startIndex = order[0].side(false, dir);\n            spanI = 0;\n        }\n    } else if (startIndex == line.length) {\n        if (forward) return null;\n        let last = order[order.length - 1];\n        if (last.level != dir) {\n            startIndex = last.side(true, dir);\n            spanI = order.length - 1;\n        }\n    }\n    if (spanI < 0) spanI = $071334078f8d3f8a$export$e1ed96b746bb516a.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);\n    let span = order[spanI];\n    // End of span. (But not end of line--that was checked for above.)\n    if (startIndex == span.side(forward, dir)) {\n        span = order[spanI += forward ? 1 : -1];\n        startIndex = span.side(!forward, dir);\n    }\n    let indexForward = forward == (span.dir == dir);\n    let nextIndex = (0, $ccfb9497d8ef598f$export$a0fa439fd515e1ed)(line.text, startIndex, indexForward);\n    $071334078f8d3f8a$var$movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));\n    if (nextIndex != span.side(forward, dir)) return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);\n    let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];\n    if (!nextSpan && span.level != dir) return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);\n    if (nextSpan && nextSpan.level < span.level) return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);\n    return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(nextIndex + line.from, forward ? -1 : 1, span.level);\n}\nclass $071334078f8d3f8a$var$DocView extends $071334078f8d3f8a$var$ContentView {\n    constructor(view){\n        super();\n        this.view = view;\n        this.decorations = [];\n        this.dynamicDecorationMap = [];\n        this.hasComposition = null;\n        this.markedForComposition = new Set;\n        // Track a minimum width for the editor. When measuring sizes in\n        // measureVisibleLineHeights, this is updated to point at the width\n        // of a given element and its extent in the document. When a change\n        // happens in that range, these are reset. That way, once we've seen\n        // a line/element of a given length, we keep the editor wide enough\n        // to fit at least that element, until it is changed, at which point\n        // we forget it again.\n        this.minWidth = 0;\n        this.minWidthFrom = 0;\n        this.minWidthTo = 0;\n        // Track whether the DOM selection was set in a lossy way, so that\n        // we don't mess it up when reading it back it\n        this.impreciseAnchor = null;\n        this.impreciseHead = null;\n        this.forceSelection = false;\n        // Used by the resize observer to ignore resizes that we caused\n        // ourselves\n        this.lastUpdate = Date.now();\n        this.setDOM(view.contentDOM);\n        this.children = [\n            new $071334078f8d3f8a$var$LineView\n        ];\n        this.children[0].setParent(this);\n        this.updateDeco();\n        this.updateInner([\n            new $071334078f8d3f8a$var$ChangedRange(0, 0, 0, view.state.doc.length)\n        ], 0, null);\n    }\n    get length() {\n        return this.view.state.doc.length;\n    }\n    // Update the document view to a given state.\n    update(update) {\n        let changedRanges = update.changedRanges;\n        if (this.minWidth > 0 && changedRanges.length) {\n            if (!changedRanges.every(({ fromA: fromA, toA: toA })=>toA < this.minWidthFrom || fromA > this.minWidthTo)) this.minWidth = this.minWidthFrom = this.minWidthTo = 0;\n            else {\n                this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);\n                this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);\n            }\n        }\n        let composition = this.view.inputState.composing < 0 ? null : $071334078f8d3f8a$var$findCompositionRange(this.view, update.changes);\n        if (this.hasComposition) {\n            this.markedForComposition.clear();\n            let { from: from, to: to } = this.hasComposition;\n            changedRanges = new $071334078f8d3f8a$var$ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1)).addToSet(changedRanges.slice());\n        }\n        this.hasComposition = composition ? {\n            from: composition.range.fromB,\n            to: composition.range.toB\n        } : null;\n        // When the DOM nodes around the selection are moved to another\n        // parent, Chrome sometimes reports a different selection through\n        // getSelection than the one that it actually shows to the user.\n        // This forces a selection update when lines are joined to work\n        // around that. Issue #54\n        if (($071334078f8d3f8a$var$browser.ie || $071334078f8d3f8a$var$browser.chrome) && !composition && update && update.state.doc.lines != update.startState.doc.lines) this.forceSelection = true;\n        let prevDeco = this.decorations, deco = this.updateDeco();\n        let decoDiff = $071334078f8d3f8a$var$findChangedDeco(prevDeco, deco, update.changes);\n        changedRanges = $071334078f8d3f8a$var$ChangedRange.extendWithRanges(changedRanges, decoDiff);\n        if (!(this.flags & 7 /* Dirty */ ) && changedRanges.length == 0) return false;\n        else {\n            this.updateInner(changedRanges, update.startState.doc.length, composition);\n            if (update.transactions.length) this.lastUpdate = Date.now();\n            return true;\n        }\n    }\n    // Used by update and the constructor do perform the actual DOM\n    // update\n    updateInner(changes, oldLength, composition) {\n        this.view.viewState.mustMeasureContent = true;\n        this.updateChildren(changes, oldLength, composition);\n        let { observer: observer } = this.view;\n        observer.ignore(()=>{\n            // Lock the height during redrawing, since Chrome sometimes\n            // messes with the scroll position during DOM mutation (though\n            // no relayout is triggered and I cannot imagine how it can\n            // recompute the scroll position without a layout)\n            this.dom.style.height = this.view.viewState.contentHeight + \"px\";\n            this.dom.style.flexBasis = this.minWidth ? this.minWidth + \"px\" : \"\";\n            // Chrome will sometimes, when DOM mutations occur directly\n            // around the selection, get confused and report a different\n            // selection from the one it displays (issue #218). This tries\n            // to detect that situation.\n            let track = $071334078f8d3f8a$var$browser.chrome || $071334078f8d3f8a$var$browser.ios ? {\n                node: observer.selectionRange.focusNode,\n                written: false\n            } : undefined;\n            this.sync(this.view, track);\n            this.flags &= -8 /* Dirty */ ;\n            if (track && (track.written || observer.selectionRange.focusNode != track.node)) this.forceSelection = true;\n            this.dom.style.height = \"\";\n        });\n        this.markedForComposition.forEach((cView)=>cView.flags &= -9 /* Composition */ );\n        let gaps = [];\n        if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {\n            for (let child of this.children)if (child instanceof $071334078f8d3f8a$var$BlockWidgetView && child.widget instanceof $071334078f8d3f8a$var$BlockGapWidget) gaps.push(child.dom);\n        }\n        observer.updateGaps(gaps);\n    }\n    updateChildren(changes, oldLength, composition) {\n        let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;\n        let cursor = this.childCursor(oldLength);\n        for(let i = ranges.length - 1;; i--){\n            let next = i >= 0 ? ranges[i] : null;\n            if (!next) break;\n            let { fromA: fromA, toA: toA, fromB: fromB, toB: toB } = next, content, breakAtStart, openStart, openEnd;\n            if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {\n                let before = $071334078f8d3f8a$var$ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);\n                let after = $071334078f8d3f8a$var$ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);\n                breakAtStart = before.breakAtStart;\n                openStart = before.openStart;\n                openEnd = after.openEnd;\n                let compLine = this.compositionView(composition);\n                if (after.breakAtStart) compLine.breakAfter = 1;\n                else if (after.content.length && compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {\n                    compLine.breakAfter = after.content[0].breakAfter;\n                    after.content.shift();\n                }\n                if (before.content.length && compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) before.content.pop();\n                content = before.content.concat(compLine).concat(after.content);\n            } else ({ content: content, breakAtStart: breakAtStart, openStart: openStart, openEnd: openEnd } = $071334078f8d3f8a$var$ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));\n            let { i: toI, off: toOff } = cursor.findPos(toA, 1);\n            let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);\n            $071334078f8d3f8a$var$replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);\n        }\n        if (composition) this.fixCompositionDOM(composition);\n    }\n    compositionView(composition) {\n        let cur = new $071334078f8d3f8a$var$TextView(composition.text.nodeValue);\n        cur.flags |= 8 /* Composition */ ;\n        for (let { deco: deco } of composition.marks)cur = new $071334078f8d3f8a$var$MarkView(deco, [\n            cur\n        ], cur.length);\n        let line = new $071334078f8d3f8a$var$LineView;\n        line.append(cur, 0);\n        return line;\n    }\n    fixCompositionDOM(composition) {\n        let fix = (dom, cView)=>{\n            cView.flags |= 8 /* Composition */ ;\n            this.markedForComposition.add(cView);\n            let prev = $071334078f8d3f8a$var$ContentView.get(dom);\n            if (prev != cView) {\n                if (prev) prev.dom = null;\n                cView.setDOM(dom);\n            }\n        };\n        let pos = this.childPos(composition.range.fromB, 1);\n        let cView = this.children[pos.i];\n        fix(composition.line, cView);\n        for(let i = composition.marks.length - 1; i >= -1; i--){\n            pos = cView.childPos(pos.off, 1);\n            cView = cView.children[pos.i];\n            fix(i >= 0 ? composition.marks[i].node : composition.text, cView);\n        }\n    }\n    // Sync the DOM selection to this.state.selection\n    updateSelection(mustRead = false, fromPointer = false) {\n        if (mustRead || !this.view.observer.selectionRange.focusNode) this.view.observer.readSelectionRange();\n        let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;\n        let selectionNotFocus = !focused && $071334078f8d3f8a$var$hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));\n        if (!(focused || fromPointer || selectionNotFocus)) return;\n        let force = this.forceSelection;\n        this.forceSelection = false;\n        let main = this.view.state.selection.main;\n        // FIXME need to handle the case where the selection falls inside a block range\n        let anchor = this.domAtPos(main.anchor);\n        let head = main.empty ? anchor : this.domAtPos(main.head);\n        // Always reset on Firefox when next to an uneditable node to\n        // avoid invisible cursor bugs (#111)\n        if ($071334078f8d3f8a$var$browser.gecko && main.empty && !this.hasComposition && $071334078f8d3f8a$var$betweenUneditable(anchor)) {\n            let dummy = document.createTextNode(\"\");\n            this.view.observer.ignore(()=>anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));\n            anchor = head = new $071334078f8d3f8a$var$DOMPos(dummy, 0);\n            force = true;\n        }\n        let domSel = this.view.observer.selectionRange;\n        // If the selection is already here, or in an equivalent position, don't touch it\n        if (force || !domSel.focusNode || !$071334078f8d3f8a$var$isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !$071334078f8d3f8a$var$isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {\n            this.view.observer.ignore(()=>{\n                // Chrome Android will hide the virtual keyboard when tapping\n                // inside an uneditable node, and not bring it back when we\n                // move the cursor to its proper position. This tries to\n                // restore the keyboard by cycling focus.\n                if ($071334078f8d3f8a$var$browser.android && $071334078f8d3f8a$var$browser.chrome && this.dom.contains(domSel.focusNode) && $071334078f8d3f8a$var$inUneditable(domSel.focusNode, this.dom)) {\n                    this.dom.blur();\n                    this.dom.focus({\n                        preventScroll: true\n                    });\n                }\n                let rawSel = $071334078f8d3f8a$var$getSelection(this.view.root);\n                if (!rawSel) ;\n                else if (main.empty) {\n                    // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076\n                    if ($071334078f8d3f8a$var$browser.gecko) {\n                        let nextTo = $071334078f8d3f8a$var$nextToUneditable(anchor.node, anchor.offset);\n                        if (nextTo && nextTo != 3 /* After */ ) {\n                            let text = $071334078f8d3f8a$var$nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* Before */  ? 1 : -1);\n                            if (text) anchor = new $071334078f8d3f8a$var$DOMPos(text, nextTo == 1 /* Before */  ? 0 : text.nodeValue.length);\n                        }\n                    }\n                    rawSel.collapse(anchor.node, anchor.offset);\n                    if (main.bidiLevel != null && domSel.cursorBidiLevel != null) domSel.cursorBidiLevel = main.bidiLevel;\n                } else if (rawSel.extend) {\n                    // Selection.extend can be used to create an 'inverted' selection\n                    // (one where the focus is before the anchor), but not all\n                    // browsers support it yet.\n                    rawSel.collapse(anchor.node, anchor.offset);\n                    // Safari will ignore the call above when the editor is\n                    // hidden, and then raise an error on the call to extend\n                    // (#940).\n                    try {\n                        rawSel.extend(head.node, head.offset);\n                    } catch (_) {}\n                } else {\n                    // Primitive (IE) way\n                    let range = document.createRange();\n                    if (main.anchor > main.head) [anchor, head] = [\n                        head,\n                        anchor\n                    ];\n                    range.setEnd(head.node, head.offset);\n                    range.setStart(anchor.node, anchor.offset);\n                    rawSel.removeAllRanges();\n                    rawSel.addRange(range);\n                }\n                if (selectionNotFocus && this.view.root.activeElement == this.dom) {\n                    this.dom.blur();\n                    if (activeElt) activeElt.focus();\n                }\n            });\n            this.view.observer.setSelectionRange(anchor, head);\n        }\n        this.impreciseAnchor = anchor.precise ? null : new $071334078f8d3f8a$var$DOMPos(domSel.anchorNode, domSel.anchorOffset);\n        this.impreciseHead = head.precise ? null : new $071334078f8d3f8a$var$DOMPos(domSel.focusNode, domSel.focusOffset);\n    }\n    enforceCursorAssoc() {\n        if (this.hasComposition) return;\n        let { view: view } = this, cursor = view.state.selection.main;\n        let sel = $071334078f8d3f8a$var$getSelection(view.root);\n        let { anchorNode: anchorNode, anchorOffset: anchorOffset } = view.observer.selectionRange;\n        if (!sel || !cursor.empty || !cursor.assoc || !sel.modify) return;\n        let line = $071334078f8d3f8a$var$LineView.find(this, cursor.head);\n        if (!line) return;\n        let lineStart = line.posAtStart;\n        if (cursor.head == lineStart || cursor.head == lineStart + line.length) return;\n        let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);\n        if (!before || !after || before.bottom > after.top) return;\n        let dom = this.domAtPos(cursor.head + cursor.assoc);\n        sel.collapse(dom.node, dom.offset);\n        sel.modify(\"move\", cursor.assoc < 0 ? \"forward\" : \"backward\", \"lineboundary\");\n        // This can go wrong in corner cases like single-character lines,\n        // so check and reset if necessary.\n        view.observer.readSelectionRange();\n        let newRange = view.observer.selectionRange;\n        if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from) sel.collapse(anchorNode, anchorOffset);\n    }\n    nearest(dom) {\n        for(let cur = dom; cur;){\n            let domView = $071334078f8d3f8a$var$ContentView.get(cur);\n            if (domView && domView.rootView == this) return domView;\n            cur = cur.parentNode;\n        }\n        return null;\n    }\n    posFromDOM(node, offset) {\n        let view = this.nearest(node);\n        if (!view) throw new RangeError(\"Trying to find position for a DOM position outside of the document\");\n        return view.localPosFromDOM(node, offset) + view.posAtStart;\n    }\n    domAtPos(pos) {\n        let { i: i, off: off } = this.childCursor().findPos(pos, -1);\n        for(; i < this.children.length - 1;){\n            let child = this.children[i];\n            if (off < child.length || child instanceof $071334078f8d3f8a$var$LineView) break;\n            i++;\n            off = 0;\n        }\n        return this.children[i].domAtPos(off);\n    }\n    coordsAt(pos, side) {\n        for(let off = this.length, i = this.children.length - 1;; i--){\n            let child = this.children[i], start = off - child.breakAfter - child.length;\n            if (pos > start || pos == start && child.type != $071334078f8d3f8a$export$48808c686fe495c4.WidgetBefore && child.type != $071334078f8d3f8a$export$48808c686fe495c4.WidgetAfter && (!i || side == 2 || this.children[i - 1].breakAfter || this.children[i - 1].type == $071334078f8d3f8a$export$48808c686fe495c4.WidgetBefore && side > -2)) return child.coordsAt(pos - start, side);\n            off = start;\n        }\n    }\n    coordsForChar(pos) {\n        let { i: i, off: off } = this.childPos(pos, 1), child = this.children[i];\n        if (!(child instanceof $071334078f8d3f8a$var$LineView)) return null;\n        while(child.children.length){\n            let { i: i, off: childOff } = child.childPos(off, 1);\n            for(;; i++){\n                if (i == child.children.length) return null;\n                if ((child = child.children[i]).length) break;\n            }\n            off = childOff;\n        }\n        if (!(child instanceof $071334078f8d3f8a$var$TextView)) return null;\n        let end = (0, $ccfb9497d8ef598f$export$a0fa439fd515e1ed)(child.text, off);\n        if (end == off) return null;\n        let rects = $071334078f8d3f8a$var$textRange(child.dom, off, end).getClientRects();\n        return !rects.length || rects[0].top >= rects[0].bottom ? null : rects[0];\n    }\n    measureVisibleLineHeights(viewport) {\n        let result = [], { from: from, to: to } = viewport;\n        let contentWidth = this.view.contentDOM.clientWidth;\n        let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;\n        let widest = -1, ltr = this.view.textDirection == $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR;\n        for(let pos = 0, i = 0; i < this.children.length; i++){\n            let child = this.children[i], end = pos + child.length;\n            if (end > to) break;\n            if (pos >= from) {\n                let childRect = child.dom.getBoundingClientRect();\n                result.push(childRect.height);\n                if (isWider) {\n                    let last = child.dom.lastChild;\n                    let rects = last ? $071334078f8d3f8a$var$clientRectsFor(last) : [];\n                    if (rects.length) {\n                        let rect = rects[rects.length - 1];\n                        let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;\n                        if (width > widest) {\n                            widest = width;\n                            this.minWidth = contentWidth;\n                            this.minWidthFrom = pos;\n                            this.minWidthTo = end;\n                        }\n                    }\n                }\n            }\n            pos = end + child.breakAfter;\n        }\n        return result;\n    }\n    textDirectionAt(pos) {\n        let { i: i } = this.childPos(pos, 1);\n        return getComputedStyle(this.children[i].dom).direction == \"rtl\" ? $071334078f8d3f8a$export$cacd6541cfeeb6c1.RTL : $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR;\n    }\n    measureTextSize() {\n        for (let child of this.children)if (child instanceof $071334078f8d3f8a$var$LineView) {\n            let measure = child.measureTextSize();\n            if (measure) return measure;\n        }\n        // If no workable line exists, force a layout of a measurable element\n        let dummy = document.createElement(\"div\"), lineHeight, charWidth, textHeight;\n        dummy.className = \"cm-line\";\n        dummy.style.width = \"99999px\";\n        dummy.style.position = \"absolute\";\n        dummy.textContent = \"abc def ghi jkl mno pqr stu\";\n        this.view.observer.ignore(()=>{\n            this.dom.appendChild(dummy);\n            let rect = $071334078f8d3f8a$var$clientRectsFor(dummy.firstChild)[0];\n            lineHeight = dummy.getBoundingClientRect().height;\n            charWidth = rect ? rect.width / 27 : 7;\n            textHeight = rect ? rect.height : lineHeight;\n            dummy.remove();\n        });\n        return {\n            lineHeight: lineHeight,\n            charWidth: charWidth,\n            textHeight: textHeight\n        };\n    }\n    childCursor(pos = this.length) {\n        // Move back to start of last element when possible, so that\n        // `ChildCursor.findPos` doesn't have to deal with the edge case\n        // of being after the last element.\n        let i = this.children.length;\n        if (i) pos -= this.children[--i].length;\n        return new $071334078f8d3f8a$var$ChildCursor(this.children, pos, i);\n    }\n    computeBlockGapDeco() {\n        let deco = [], vs = this.view.viewState;\n        for(let pos = 0, i = 0;; i++){\n            let next = i == vs.viewports.length ? null : vs.viewports[i];\n            let end = next ? next.from - 1 : this.length;\n            if (end > pos) {\n                let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;\n                deco.push($071334078f8d3f8a$export$10e30b733df217ea.replace({\n                    widget: new $071334078f8d3f8a$var$BlockGapWidget(height),\n                    block: true,\n                    inclusive: true,\n                    isBlockGap: true\n                }).range(pos, end));\n            }\n            if (!next) break;\n            pos = next.to + 1;\n        }\n        return $071334078f8d3f8a$export$10e30b733df217ea.set(deco);\n    }\n    updateDeco() {\n        let allDeco = this.view.state.facet($071334078f8d3f8a$var$decorations).map((d, i)=>{\n            let dynamic = this.dynamicDecorationMap[i] = typeof d == \"function\";\n            return dynamic ? d(this.view) : d;\n        });\n        for(let i = allDeco.length; i < allDeco.length + 3; i++)this.dynamicDecorationMap[i] = false;\n        return this.decorations = [\n            ...allDeco,\n            this.computeBlockGapDeco(),\n            this.view.viewState.lineGapDeco\n        ];\n    }\n    scrollIntoView(target) {\n        let { range: range } = target;\n        let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;\n        if (!rect) return;\n        if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1))) rect = {\n            left: Math.min(rect.left, other.left),\n            top: Math.min(rect.top, other.top),\n            right: Math.max(rect.right, other.right),\n            bottom: Math.max(rect.bottom, other.bottom)\n        };\n        let margins = $071334078f8d3f8a$var$getScrollMargins(this.view);\n        let targetRect = {\n            left: rect.left - margins.left,\n            top: rect.top - margins.top,\n            right: rect.right + margins.right,\n            bottom: rect.bottom + margins.bottom\n        };\n        $071334078f8d3f8a$var$scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR);\n    }\n}\nfunction $071334078f8d3f8a$var$betweenUneditable(pos) {\n    return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == \"false\") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == \"false\");\n}\nclass $071334078f8d3f8a$var$BlockGapWidget extends $071334078f8d3f8a$export$95cdd842edb044c5 {\n    constructor(height){\n        super();\n        this.height = height;\n    }\n    toDOM() {\n        let elt = document.createElement(\"div\");\n        this.updateDOM(elt);\n        return elt;\n    }\n    eq(other) {\n        return other.height == this.height;\n    }\n    updateDOM(elt) {\n        elt.style.height = this.height + \"px\";\n        return true;\n    }\n    get estimatedHeight() {\n        return this.height;\n    }\n}\nfunction $071334078f8d3f8a$var$findCompositionNode(view) {\n    let sel = view.observer.selectionRange;\n    let textNode = sel.focusNode && $071334078f8d3f8a$var$nearbyTextNode(sel.focusNode, sel.focusOffset, 0);\n    if (!textNode) return null;\n    let cView = $071334078f8d3f8a$var$ContentView.get(textNode);\n    let from, to;\n    if (cView instanceof $071334078f8d3f8a$var$TextView) {\n        from = cView.posAtStart;\n        to = from + cView.length;\n    } else up: for(let offset = 0, node = textNode;;){\n        for(let sibling = node.previousSibling, cView; sibling; sibling = sibling.previousSibling){\n            if (cView = $071334078f8d3f8a$var$ContentView.get(sibling)) {\n                from = to = cView.posAtEnd + offset;\n                break up;\n            }\n            let reader = new $071334078f8d3f8a$var$DOMReader([], view.state);\n            reader.readNode(sibling);\n            if (reader.text.indexOf($071334078f8d3f8a$var$LineBreakPlaceholder) > -1) return null;\n            offset += reader.text.length;\n        }\n        node = node.parentNode;\n        if (!node) return null;\n        let parentView = $071334078f8d3f8a$var$ContentView.get(node);\n        if (parentView) {\n            from = to = parentView.posAtStart + offset;\n            break;\n        }\n    }\n    return {\n        from: from,\n        to: to,\n        node: textNode\n    };\n}\nfunction $071334078f8d3f8a$var$findCompositionRange(view, changes) {\n    let found = $071334078f8d3f8a$var$findCompositionNode(view);\n    if (!found) return null;\n    let { from: fromA, to: toA, node: textNode } = found;\n    let fromB = changes.mapPos(fromA, -1), toB = changes.mapPos(toA, 1);\n    let text = textNode.nodeValue;\n    // Don't try to preserve multi-line compositions\n    if (/[\\n\\r]/.test(text)) return null;\n    if (toB - fromB != text.length) {\n        // If there is a length mismatch, see if mapping non-inclusively helps\n        let fromB2 = changes.mapPos(fromA, 1), toB2 = changes.mapPos(toA, -1);\n        if (toB2 - fromB2 == text.length) fromB = fromB2, toB = toB2;\n        else if (view.state.doc.sliceString(toB - text.length, toB) == text) fromB = toB - text.length;\n        else if (view.state.doc.sliceString(fromB, fromB + text.length) == text) toB = fromB + text.length;\n        else return null;\n    }\n    let { main: main } = view.state.selection;\n    if (view.state.doc.sliceString(fromB, toB) != text || fromB > main.head || toB < main.head) return null;\n    let marks = [];\n    let range = new $071334078f8d3f8a$var$ChangedRange(fromA, toA, fromB, toB);\n    for(let parent = textNode.parentNode;; parent = parent.parentNode){\n        let parentView = $071334078f8d3f8a$var$ContentView.get(parent);\n        if (parentView instanceof $071334078f8d3f8a$var$MarkView) marks.push({\n            node: parent,\n            deco: parentView.mark\n        });\n        else if (parentView instanceof $071334078f8d3f8a$var$LineView || parent.nodeName == \"DIV\" && parent.parentNode == view.contentDOM) return {\n            range: range,\n            text: textNode,\n            marks: marks,\n            line: parent\n        };\n        else if (parent != view.contentDOM) marks.push({\n            node: parent,\n            deco: new $071334078f8d3f8a$var$MarkDecoration({\n                inclusive: true,\n                attributes: $071334078f8d3f8a$var$getAttrs(parent),\n                tagName: parent.tagName.toLowerCase()\n            })\n        });\n        else return null;\n    }\n}\nfunction $071334078f8d3f8a$var$nearbyTextNode(startNode, startOffset, side) {\n    if (side <= 0) for(let node = startNode, offset = startOffset;;){\n        if (node.nodeType == 3) return node;\n        if (node.nodeType == 1 && offset > 0) {\n            node = node.childNodes[offset - 1];\n            offset = $071334078f8d3f8a$var$maxOffset(node);\n        } else break;\n    }\n    if (side >= 0) for(let node = startNode, offset = startOffset;;){\n        if (node.nodeType == 3) return node;\n        if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {\n            node = node.childNodes[offset];\n            offset = 0;\n        } else break;\n    }\n    return null;\n}\nfunction $071334078f8d3f8a$var$nextToUneditable(node, offset) {\n    if (node.nodeType != 1) return 0;\n    return (offset && node.childNodes[offset - 1].contentEditable == \"false\" ? 1 /* Before */  : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == \"false\" ? 2 /* After */  : 0);\n}\nclass $071334078f8d3f8a$var$DecorationComparator$1 {\n    constructor(){\n        this.changes = [];\n    }\n    compareRange(from, to) {\n        $071334078f8d3f8a$var$addRange(from, to, this.changes);\n    }\n    comparePoint(from, to) {\n        $071334078f8d3f8a$var$addRange(from, to, this.changes);\n    }\n}\nfunction $071334078f8d3f8a$var$findChangedDeco(a, b, diff) {\n    let comp = new $071334078f8d3f8a$var$DecorationComparator$1;\n    (0, $ccfb9497d8ef598f$export$34cb5241245008dd).compare(a, b, diff, comp);\n    return comp.changes;\n}\nfunction $071334078f8d3f8a$var$inUneditable(node, inside) {\n    for(let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode){\n        if (cur.nodeType == 1 && cur.contentEditable == \"false\") return true;\n    }\n    return false;\n}\nfunction $071334078f8d3f8a$var$groupAt(state, pos, bias = 1) {\n    let categorize = state.charCategorizer(pos);\n    let line = state.doc.lineAt(pos), linePos = pos - line.from;\n    if (line.length == 0) return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(pos);\n    if (linePos == 0) bias = 1;\n    else if (linePos == line.length) bias = -1;\n    let from = linePos, to = linePos;\n    if (bias < 0) from = (0, $ccfb9497d8ef598f$export$a0fa439fd515e1ed)(line.text, linePos, false);\n    else to = (0, $ccfb9497d8ef598f$export$a0fa439fd515e1ed)(line.text, linePos);\n    let cat = categorize(line.text.slice(from, to));\n    while(from > 0){\n        let prev = (0, $ccfb9497d8ef598f$export$a0fa439fd515e1ed)(line.text, from, false);\n        if (categorize(line.text.slice(prev, from)) != cat) break;\n        from = prev;\n    }\n    while(to < line.length){\n        let next = (0, $ccfb9497d8ef598f$export$a0fa439fd515e1ed)(line.text, to);\n        if (categorize(line.text.slice(to, next)) != cat) break;\n        to = next;\n    }\n    return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(from + line.from, to + line.from);\n}\n// Search the DOM for the {node, offset} position closest to the given\n// coordinates. Very inefficient and crude, but can usually be avoided\n// by calling caret(Position|Range)FromPoint instead.\nfunction $071334078f8d3f8a$var$getdx(x, rect) {\n    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);\n}\nfunction $071334078f8d3f8a$var$getdy(y, rect) {\n    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);\n}\nfunction $071334078f8d3f8a$var$yOverlap(a, b) {\n    return a.top < b.bottom - 1 && a.bottom > b.top + 1;\n}\nfunction $071334078f8d3f8a$var$upTop(rect, top) {\n    return top < rect.top ? {\n        top: top,\n        left: rect.left,\n        right: rect.right,\n        bottom: rect.bottom\n    } : rect;\n}\nfunction $071334078f8d3f8a$var$upBot(rect, bottom) {\n    return bottom > rect.bottom ? {\n        top: rect.top,\n        left: rect.left,\n        right: rect.right,\n        bottom: bottom\n    } : rect;\n}\nfunction $071334078f8d3f8a$var$domPosAtCoords(parent, x, y) {\n    let closest, closestRect, closestX, closestY, closestOverlap = false;\n    let above, below, aboveRect, belowRect;\n    for(let child = parent.firstChild; child; child = child.nextSibling){\n        let rects = $071334078f8d3f8a$var$clientRectsFor(child);\n        for(let i = 0; i < rects.length; i++){\n            let rect = rects[i];\n            if (closestRect && $071334078f8d3f8a$var$yOverlap(closestRect, rect)) rect = $071334078f8d3f8a$var$upTop($071334078f8d3f8a$var$upBot(rect, closestRect.bottom), closestRect.top);\n            let dx = $071334078f8d3f8a$var$getdx(x, rect), dy = $071334078f8d3f8a$var$getdy(y, rect);\n            if (dx == 0 && dy == 0) return child.nodeType == 3 ? $071334078f8d3f8a$var$domPosInText(child, x, y) : $071334078f8d3f8a$var$domPosAtCoords(child, x, y);\n            if (!closest || closestY > dy || closestY == dy && closestX > dx) {\n                closest = child;\n                closestRect = rect;\n                closestX = dx;\n                closestY = dy;\n                let side = dy ? y < rect.top ? -1 : 1 : dx ? x < rect.left ? -1 : 1 : 0;\n                closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);\n            }\n            if (dx == 0) {\n                if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {\n                    above = child;\n                    aboveRect = rect;\n                } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {\n                    below = child;\n                    belowRect = rect;\n                }\n            } else if (aboveRect && $071334078f8d3f8a$var$yOverlap(aboveRect, rect)) aboveRect = $071334078f8d3f8a$var$upBot(aboveRect, rect.bottom);\n            else if (belowRect && $071334078f8d3f8a$var$yOverlap(belowRect, rect)) belowRect = $071334078f8d3f8a$var$upTop(belowRect, rect.top);\n        }\n    }\n    if (aboveRect && aboveRect.bottom >= y) {\n        closest = above;\n        closestRect = aboveRect;\n    } else if (belowRect && belowRect.top <= y) {\n        closest = below;\n        closestRect = belowRect;\n    }\n    if (!closest) return {\n        node: parent,\n        offset: 0\n    };\n    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));\n    if (closest.nodeType == 3) return $071334078f8d3f8a$var$domPosInText(closest, clipX, y);\n    if (closestOverlap && closest.contentEditable != \"false\") return $071334078f8d3f8a$var$domPosAtCoords(closest, clipX, y);\n    let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);\n    return {\n        node: parent,\n        offset: offset\n    };\n}\nfunction $071334078f8d3f8a$var$domPosInText(node, x, y) {\n    let len = node.nodeValue.length;\n    let closestOffset = -1, closestDY = 1e9, generalSide = 0;\n    for(let i = 0; i < len; i++){\n        let rects = $071334078f8d3f8a$var$textRange(node, i, i + 1).getClientRects();\n        for(let j = 0; j < rects.length; j++){\n            let rect = rects[j];\n            if (rect.top == rect.bottom) continue;\n            if (!generalSide) generalSide = x - rect.left;\n            let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;\n            if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {\n                let right = x >= (rect.left + rect.right) / 2, after = right;\n                if ($071334078f8d3f8a$var$browser.chrome || $071334078f8d3f8a$var$browser.gecko) {\n                    // Check for RTL on browsers that support getting client\n                    // rects for empty ranges.\n                    let rectBefore = $071334078f8d3f8a$var$textRange(node, i).getBoundingClientRect();\n                    if (rectBefore.left == rect.right) after = !right;\n                }\n                if (dy <= 0) return {\n                    node: node,\n                    offset: i + (after ? 1 : 0)\n                };\n                closestOffset = i + (after ? 1 : 0);\n                closestDY = dy;\n            }\n        }\n    }\n    return {\n        node: node,\n        offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0\n    };\n}\nfunction $071334078f8d3f8a$var$posAtCoords(view, coords, precise, bias = -1) {\n    var _a, _b;\n    let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;\n    let block, { docHeight: docHeight } = view.viewState;\n    let { x: x, y: y } = coords, yOffset = y - docTop;\n    if (yOffset < 0) return 0;\n    if (yOffset > docHeight) return view.state.doc.length;\n    // Scan for a text block near the queried y position\n    for(let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;){\n        block = view.elementAtHeight(yOffset);\n        if (block.type == $071334078f8d3f8a$export$48808c686fe495c4.Text) break;\n        for(;;){\n            // Move the y position out of this block\n            yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;\n            if (yOffset >= 0 && yOffset <= docHeight) break;\n            // If the document consists entirely of replaced widgets, we\n            // won't find a text block, so return 0\n            if (bounced) return precise ? null : 0;\n            bounced = true;\n            bias = -bias;\n        }\n    }\n    y = docTop + yOffset;\n    let lineStart = block.from;\n    // If this is outside of the rendered viewport, we can't determine a position\n    if (lineStart < view.viewport.from) return view.viewport.from == 0 ? 0 : precise ? null : $071334078f8d3f8a$var$posAtCoordsImprecise(view, content, block, x, y);\n    if (lineStart > view.viewport.to) return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : $071334078f8d3f8a$var$posAtCoordsImprecise(view, content, block, x, y);\n    // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not\n    let doc = view.dom.ownerDocument;\n    let root = view.root.elementFromPoint ? view.root : doc;\n    let element = root.elementFromPoint(x, y);\n    if (element && !view.contentDOM.contains(element)) element = null;\n    // If the element is unexpected, clip x at the sides of the content area and try again\n    if (!element) {\n        x = Math.max(content.left + 1, Math.min(content.right - 1, x));\n        element = root.elementFromPoint(x, y);\n        if (element && !view.contentDOM.contains(element)) element = null;\n    }\n    // There's visible editor content under the point, so we can try\n    // using caret(Position|Range)FromPoint as a shortcut\n    let node, offset = -1;\n    if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {\n        if (doc.caretPositionFromPoint) {\n            let pos = doc.caretPositionFromPoint(x, y);\n            if (pos) ({ offsetNode: node, offset: offset } = pos);\n        } else if (doc.caretRangeFromPoint) {\n            let range = doc.caretRangeFromPoint(x, y);\n            if (range) {\n                ({ startContainer: node, startOffset: offset } = range);\n                if (!view.contentDOM.contains(node) || $071334078f8d3f8a$var$browser.safari && $071334078f8d3f8a$var$isSuspiciousSafariCaretResult(node, offset, x) || $071334078f8d3f8a$var$browser.chrome && $071334078f8d3f8a$var$isSuspiciousChromeCaretResult(node, offset, x)) node = undefined;\n            }\n        }\n    }\n    // No luck, do our own (potentially expensive) search\n    if (!node || !view.docView.dom.contains(node)) {\n        let line = $071334078f8d3f8a$var$LineView.find(view.docView, lineStart);\n        if (!line) return yOffset > block.top + block.height / 2 ? block.to : block.from;\n        ({ node: node, offset: offset } = $071334078f8d3f8a$var$domPosAtCoords(line.dom, x, y));\n    }\n    let nearest = view.docView.nearest(node);\n    if (!nearest) return null;\n    if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {\n        let rect = nearest.dom.getBoundingClientRect();\n        return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;\n    } else return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;\n}\nfunction $071334078f8d3f8a$var$posAtCoordsImprecise(view, contentRect, block, x, y) {\n    let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);\n    if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {\n        let textHeight = view.viewState.heightOracle.textHeight;\n        let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);\n        into += line * view.viewState.heightOracle.lineLength;\n    }\n    let content = view.state.sliceDoc(block.from, block.to);\n    return block.from + (0, $ccfb9497d8ef598f$export$718b3d71c384ca05)(content, into, view.state.tabSize);\n}\n// In case of a high line height, Safari's caretRangeFromPoint treats\n// the space between lines as belonging to the last character of the\n// line before. This is used to detect such a result so that it can be\n// ignored (issue #401).\nfunction $071334078f8d3f8a$var$isSuspiciousSafariCaretResult(node, offset, x) {\n    let len;\n    if (node.nodeType != 3 || offset != (len = node.nodeValue.length)) return false;\n    for(let next = node.nextSibling; next; next = next.nextSibling)if (next.nodeType != 1 || next.nodeName != \"BR\") return false;\n    return $071334078f8d3f8a$var$textRange(node, len - 1, len).getBoundingClientRect().left > x;\n}\n// Chrome will move positions between lines to the start of the next line\nfunction $071334078f8d3f8a$var$isSuspiciousChromeCaretResult(node, offset, x) {\n    if (offset != 0) return false;\n    for(let cur = node;;){\n        let parent = cur.parentNode;\n        if (!parent || parent.nodeType != 1 || parent.firstChild != cur) return false;\n        if (parent.classList.contains(\"cm-line\")) break;\n        cur = parent;\n    }\n    let rect = node.nodeType == 1 ? node.getBoundingClientRect() : $071334078f8d3f8a$var$textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();\n    return x - rect.left > 5;\n}\nfunction $071334078f8d3f8a$var$blockAt(view, pos) {\n    let line = view.lineBlockAt(pos);\n    if (Array.isArray(line.type)) for (let l of line.type){\n        if (l.to > pos || l.to == pos && (l.to == line.to || l.type == $071334078f8d3f8a$export$48808c686fe495c4.Text)) return l;\n    }\n    return line;\n}\nfunction $071334078f8d3f8a$var$moveToLineBoundary(view, start, forward, includeWrap) {\n    let line = $071334078f8d3f8a$var$blockAt(view, start.head);\n    let coords = !includeWrap || line.type != $071334078f8d3f8a$export$48808c686fe495c4.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);\n    if (coords) {\n        let editorRect = view.dom.getBoundingClientRect();\n        let direction = view.textDirectionAt(line.from);\n        let pos = view.posAtCoords({\n            x: forward == (direction == $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR) ? editorRect.right - 1 : editorRect.left + 1,\n            y: (coords.top + coords.bottom) / 2\n        });\n        if (pos != null) return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(pos, forward ? -1 : 1);\n    }\n    return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(forward ? line.to : line.from, forward ? -1 : 1);\n}\nfunction $071334078f8d3f8a$var$moveByChar(view, start, forward, by) {\n    let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);\n    let direction = view.textDirectionAt(line.from);\n    for(let cur = start, check = null;;){\n        let next = $071334078f8d3f8a$var$moveVisually(line, spans, direction, cur, forward), char = $071334078f8d3f8a$var$movedOver;\n        if (!next) {\n            if (line.number == (forward ? view.state.doc.lines : 1)) return cur;\n            char = \"\\n\";\n            line = view.state.doc.line(line.number + (forward ? 1 : -1));\n            spans = view.bidiSpans(line);\n            next = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(forward ? line.from : line.to);\n        }\n        if (!check) {\n            if (!by) return next;\n            check = by(char);\n        } else if (!check(char)) return cur;\n        cur = next;\n    }\n}\nfunction $071334078f8d3f8a$var$byGroup(view, pos, start) {\n    let categorize = view.state.charCategorizer(pos);\n    let cat = categorize(start);\n    return (next)=>{\n        let nextCat = categorize(next);\n        if (cat == (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Space) cat = nextCat;\n        return cat == nextCat;\n    };\n}\nfunction $071334078f8d3f8a$var$moveVertically(view, start, forward, distance) {\n    let startPos = start.head, dir = forward ? 1 : -1;\n    if (startPos == (forward ? view.state.doc.length : 0)) return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(startPos, start.assoc);\n    let goal = start.goalColumn, startY;\n    let rect = view.contentDOM.getBoundingClientRect();\n    let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;\n    if (startCoords) {\n        if (goal == null) goal = startCoords.left - rect.left;\n        startY = dir < 0 ? startCoords.top : startCoords.bottom;\n    } else {\n        let line = view.viewState.lineBlockAt(startPos);\n        if (goal == null) goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));\n        startY = (dir < 0 ? line.top : line.bottom) + docTop;\n    }\n    let resolvedGoal = rect.left + goal;\n    let dist = distance !== null && distance !== void 0 ? distance : view.viewState.heightOracle.textHeight >> 1;\n    for(let extra = 0;; extra += 10){\n        let curY = startY + (dist + extra) * dir;\n        let pos = $071334078f8d3f8a$var$posAtCoords(view, {\n            x: resolvedGoal,\n            y: curY\n        }, false, dir);\n        if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(pos, start.assoc, undefined, goal);\n    }\n}\nfunction $071334078f8d3f8a$var$skipAtomicRanges(atoms, pos, bias) {\n    for(;;){\n        let moved = 0;\n        for (let set of atoms)set.between(pos - 1, pos + 1, (from, to, value)=>{\n            if (pos > from && pos < to) {\n                let side = moved || bias || (pos - from < to - pos ? -1 : 1);\n                pos = side < 0 ? from : to;\n                moved = side;\n            }\n        });\n        if (!moved) return pos;\n    }\n}\nfunction $071334078f8d3f8a$var$skipAtoms(view, oldPos, pos) {\n    let newPos = $071334078f8d3f8a$var$skipAtomicRanges(view.state.facet($071334078f8d3f8a$var$atomicRanges).map((f)=>f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);\n    return newPos == pos.from ? pos : (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(newPos, newPos < pos.from ? 1 : -1);\n}\n// This will also be where dragging info and such goes\nclass $071334078f8d3f8a$var$InputState {\n    constructor(view){\n        this.lastKeyCode = 0;\n        this.lastKeyTime = 0;\n        this.lastTouchTime = 0;\n        this.lastFocusTime = 0;\n        this.lastScrollTop = 0;\n        this.lastScrollLeft = 0;\n        this.chromeScrollHack = -1;\n        // On iOS, some keys need to have their default behavior happen\n        // (after which we retroactively handle them and reset the DOM) to\n        // avoid messing up the virtual keyboard state.\n        this.pendingIOSKey = undefined;\n        this.lastSelectionOrigin = null;\n        this.lastSelectionTime = 0;\n        this.lastEscPress = 0;\n        this.lastContextMenu = 0;\n        this.scrollHandlers = [];\n        this.registeredEvents = [];\n        this.customHandlers = [];\n        // -1 means not in a composition. Otherwise, this counts the number\n        // of changes made during the composition. The count is used to\n        // avoid treating the start state of the composition, before any\n        // changes have been made, as part of the composition.\n        this.composing = -1;\n        // Tracks whether the next change should be marked as starting the\n        // composition (null means no composition, true means next is the\n        // first, false means first has already been marked for this\n        // composition)\n        this.compositionFirstChange = null;\n        // End time of the previous composition\n        this.compositionEndedAt = 0;\n        // Used in a kludge to detect when an Enter keypress should be\n        // considered part of the composition on Safari, which fires events\n        // in the wrong order\n        this.compositionPendingKey = false;\n        // Used to categorize changes as part of a composition, even when\n        // the mutation events fire shortly after the compositionend event\n        this.compositionPendingChange = false;\n        this.mouseSelection = null;\n        let handleEvent = (handler, event)=>{\n            if (this.ignoreDuringComposition(event)) return;\n            if (event.type == \"keydown\" && this.keydown(view, event)) return;\n            if (this.mustFlushObserver(event)) view.observer.forceFlush();\n            if (this.runCustomHandlers(event.type, view, event)) event.preventDefault();\n            else handler(view, event);\n        };\n        for(let type in $071334078f8d3f8a$var$handlers){\n            let handler = $071334078f8d3f8a$var$handlers[type];\n            view.contentDOM.addEventListener(type, (event)=>{\n                if ($071334078f8d3f8a$var$eventBelongsToEditor(view, event)) handleEvent(handler, event);\n            }, $071334078f8d3f8a$var$handlerOptions[type]);\n            this.registeredEvents.push(type);\n        }\n        view.scrollDOM.addEventListener(\"mousedown\", (event)=>{\n            if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom) {\n                handleEvent($071334078f8d3f8a$var$handlers.mousedown, event);\n                if (!event.defaultPrevented && event.button == 2) {\n                    // Make sure the content covers the entire scroller height, in order\n                    // to catch a native context menu click below it\n                    let start = view.contentDOM.style.minHeight;\n                    view.contentDOM.style.minHeight = \"100%\";\n                    setTimeout(()=>view.contentDOM.style.minHeight = start, 200);\n                }\n            }\n        });\n        view.scrollDOM.addEventListener(\"drop\", (event)=>{\n            if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom) handleEvent($071334078f8d3f8a$var$handlers.drop, event);\n        });\n        if ($071334078f8d3f8a$var$browser.chrome && $071334078f8d3f8a$var$browser.chrome_version == 102) // On Chrome 102, viewport updates somehow stop wheel-based\n        // scrolling. Turning off pointer events during the scroll seems\n        // to avoid the issue.\n        view.scrollDOM.addEventListener(\"wheel\", ()=>{\n            if (this.chromeScrollHack < 0) view.contentDOM.style.pointerEvents = \"none\";\n            else window.clearTimeout(this.chromeScrollHack);\n            this.chromeScrollHack = setTimeout(()=>{\n                this.chromeScrollHack = -1;\n                view.contentDOM.style.pointerEvents = \"\";\n            }, 100);\n        }, {\n            passive: true\n        });\n        this.notifiedFocused = view.hasFocus;\n        // On Safari adding an input event handler somehow prevents an\n        // issue where the composition vanishes when you press enter.\n        if ($071334078f8d3f8a$var$browser.safari) view.contentDOM.addEventListener(\"input\", ()=>null);\n    }\n    setSelectionOrigin(origin) {\n        this.lastSelectionOrigin = origin;\n        this.lastSelectionTime = Date.now();\n    }\n    ensureHandlers(view, plugins) {\n        var _a;\n        let handlers;\n        this.customHandlers = [];\n        for (let plugin of plugins)if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {\n            this.customHandlers.push({\n                plugin: plugin.value,\n                handlers: handlers\n            });\n            for(let type in handlers)if (this.registeredEvents.indexOf(type) < 0 && type != \"scroll\") {\n                this.registeredEvents.push(type);\n                view.contentDOM.addEventListener(type, (event)=>{\n                    if (!$071334078f8d3f8a$var$eventBelongsToEditor(view, event)) return;\n                    if (this.runCustomHandlers(type, view, event)) event.preventDefault();\n                });\n            }\n        }\n    }\n    runCustomHandlers(type, view, event) {\n        for (let set of this.customHandlers){\n            let handler = set.handlers[type];\n            if (handler) try {\n                if (handler.call(set.plugin, event, view) || event.defaultPrevented) return true;\n            } catch (e) {\n                $071334078f8d3f8a$export$f86b2a1a2ce291b3(view.state, e);\n            }\n        }\n        return false;\n    }\n    runScrollHandlers(view, event) {\n        this.lastScrollTop = view.scrollDOM.scrollTop;\n        this.lastScrollLeft = view.scrollDOM.scrollLeft;\n        for (let set of this.customHandlers){\n            let handler = set.handlers.scroll;\n            if (handler) try {\n                handler.call(set.plugin, event, view);\n            } catch (e) {\n                $071334078f8d3f8a$export$f86b2a1a2ce291b3(view.state, e);\n            }\n        }\n    }\n    keydown(view, event) {\n        // Must always run, even if a custom handler handled the event\n        this.lastKeyCode = event.keyCode;\n        this.lastKeyTime = Date.now();\n        if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000) return true;\n        if (event.keyCode != 27 && $071334078f8d3f8a$var$modifierCodes.indexOf(event.keyCode) < 0) view.inputState.lastEscPress = 0;\n        // Chrome for Android usually doesn't fire proper key events, but\n        // occasionally does, usually surrounded by a bunch of complicated\n        // composition changes. When an enter or backspace key event is\n        // seen, hold off on handling DOM events for a bit, and then\n        // dispatch it.\n        if ($071334078f8d3f8a$var$browser.android && $071334078f8d3f8a$var$browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {\n            view.observer.delayAndroidKey(event.key, event.keyCode);\n            return true;\n        }\n        // Prevent the default behavior of Enter on iOS makes the\n        // virtual keyboard get stuck in the wrong (lowercase)\n        // state. So we let it go through, and then, in\n        // applyDOMChange, notify key handlers of it and reset to\n        // the state they produce.\n        let pending;\n        if ($071334078f8d3f8a$var$browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = $071334078f8d3f8a$var$PendingKeys.find((key)=>key.keyCode == event.keyCode)) && !event.ctrlKey || $071334078f8d3f8a$var$EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {\n            this.pendingIOSKey = pending || event;\n            setTimeout(()=>this.flushIOSKey(view), 250);\n            return true;\n        }\n        return false;\n    }\n    flushIOSKey(view) {\n        let key = this.pendingIOSKey;\n        if (!key) return false;\n        this.pendingIOSKey = undefined;\n        return $071334078f8d3f8a$var$dispatchKey(view.contentDOM, key.key, key.keyCode);\n    }\n    ignoreDuringComposition(event) {\n        if (!/^key/.test(event.type)) return false;\n        if (this.composing > 0) return true;\n        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.\n        // On some input method editors (IMEs), the Enter key is used to\n        // confirm character selection. On Safari, when Enter is pressed,\n        // compositionend and keydown events are sometimes emitted in the\n        // wrong order. The key event should still be ignored, even when\n        // it happens after the compositionend event.\n        if ($071334078f8d3f8a$var$browser.safari && !$071334078f8d3f8a$var$browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {\n            this.compositionPendingKey = false;\n            return true;\n        }\n        return false;\n    }\n    mustFlushObserver(event) {\n        return event.type == \"keydown\" && event.keyCode != 229;\n    }\n    startMouseSelection(mouseSelection) {\n        if (this.mouseSelection) this.mouseSelection.destroy();\n        this.mouseSelection = mouseSelection;\n    }\n    update(update) {\n        if (this.mouseSelection) this.mouseSelection.update(update);\n        if (update.transactions.length) this.lastKeyCode = this.lastSelectionTime = 0;\n    }\n    destroy() {\n        if (this.mouseSelection) this.mouseSelection.destroy();\n    }\n}\nconst $071334078f8d3f8a$var$PendingKeys = [\n    {\n        key: \"Backspace\",\n        keyCode: 8,\n        inputType: \"deleteContentBackward\"\n    },\n    {\n        key: \"Enter\",\n        keyCode: 13,\n        inputType: \"insertParagraph\"\n    },\n    {\n        key: \"Enter\",\n        keyCode: 13,\n        inputType: \"insertLineBreak\"\n    },\n    {\n        key: \"Delete\",\n        keyCode: 46,\n        inputType: \"deleteContentForward\"\n    }\n];\nconst $071334078f8d3f8a$var$EmacsyPendingKeys = \"dthko\";\n// Key codes for modifier keys\nconst $071334078f8d3f8a$var$modifierCodes = [\n    16,\n    17,\n    18,\n    20,\n    91,\n    92,\n    224,\n    225\n];\nconst $071334078f8d3f8a$var$dragScrollMargin = 6;\nfunction $071334078f8d3f8a$var$dragScrollSpeed(dist) {\n    return Math.max(0, dist) * 0.7 + 8;\n}\nfunction $071334078f8d3f8a$var$dist(a, b) {\n    return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));\n}\nclass $071334078f8d3f8a$var$MouseSelection {\n    constructor(view, startEvent, style, mustSelect){\n        this.view = view;\n        this.startEvent = startEvent;\n        this.style = style;\n        this.mustSelect = mustSelect;\n        this.scrollSpeed = {\n            x: 0,\n            y: 0\n        };\n        this.scrolling = -1;\n        this.lastEvent = startEvent;\n        this.scrollParent = $071334078f8d3f8a$var$scrollableParent(view.contentDOM);\n        this.atoms = view.state.facet($071334078f8d3f8a$var$atomicRanges).map((f)=>f(view));\n        let doc = view.contentDOM.ownerDocument;\n        doc.addEventListener(\"mousemove\", this.move = this.move.bind(this));\n        doc.addEventListener(\"mouseup\", this.up = this.up.bind(this));\n        this.extend = startEvent.shiftKey;\n        this.multiple = view.state.facet((0, $ccfb9497d8ef598f$export$afa855cbfaff27f2).allowMultipleSelections) && $071334078f8d3f8a$var$addsSelectionRange(view, startEvent);\n        this.dragging = $071334078f8d3f8a$var$isInPrimarySelection(view, startEvent) && $071334078f8d3f8a$var$getClickType(startEvent) == 1 ? null : false;\n    }\n    start(event) {\n        // When clicking outside of the selection, immediately apply the\n        // effect of starting the selection\n        if (this.dragging === false) {\n            event.preventDefault();\n            this.select(event);\n        }\n    }\n    move(event) {\n        var _a;\n        if (event.buttons == 0) return this.destroy();\n        if (this.dragging || this.dragging == null && $071334078f8d3f8a$var$dist(this.startEvent, event) < 10) return;\n        this.select(this.lastEvent = event);\n        let sx = 0, sy = 0;\n        let rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {\n            left: 0,\n            top: 0,\n            right: this.view.win.innerWidth,\n            bottom: this.view.win.innerHeight\n        };\n        let margins = $071334078f8d3f8a$var$getScrollMargins(this.view);\n        if (event.clientX - margins.left <= rect.left + $071334078f8d3f8a$var$dragScrollMargin) sx = -$071334078f8d3f8a$var$dragScrollSpeed(rect.left - event.clientX);\n        else if (event.clientX + margins.right >= rect.right - $071334078f8d3f8a$var$dragScrollMargin) sx = $071334078f8d3f8a$var$dragScrollSpeed(event.clientX - rect.right);\n        if (event.clientY - margins.top <= rect.top + $071334078f8d3f8a$var$dragScrollMargin) sy = -$071334078f8d3f8a$var$dragScrollSpeed(rect.top - event.clientY);\n        else if (event.clientY + margins.bottom >= rect.bottom - $071334078f8d3f8a$var$dragScrollMargin) sy = $071334078f8d3f8a$var$dragScrollSpeed(event.clientY - rect.bottom);\n        this.setScrollSpeed(sx, sy);\n    }\n    up(event) {\n        if (this.dragging == null) this.select(this.lastEvent);\n        if (!this.dragging) event.preventDefault();\n        this.destroy();\n    }\n    destroy() {\n        this.setScrollSpeed(0, 0);\n        let doc = this.view.contentDOM.ownerDocument;\n        doc.removeEventListener(\"mousemove\", this.move);\n        doc.removeEventListener(\"mouseup\", this.up);\n        this.view.inputState.mouseSelection = null;\n    }\n    setScrollSpeed(sx, sy) {\n        this.scrollSpeed = {\n            x: sx,\n            y: sy\n        };\n        if (sx || sy) {\n            if (this.scrolling < 0) this.scrolling = setInterval(()=>this.scroll(), 50);\n        } else if (this.scrolling > -1) {\n            clearInterval(this.scrolling);\n            this.scrolling = -1;\n        }\n    }\n    scroll() {\n        if (this.scrollParent) {\n            this.scrollParent.scrollLeft += this.scrollSpeed.x;\n            this.scrollParent.scrollTop += this.scrollSpeed.y;\n        } else this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);\n        if (this.dragging === false) this.select(this.lastEvent);\n    }\n    skipAtoms(sel) {\n        let ranges = null;\n        for(let i = 0; i < sel.ranges.length; i++){\n            let range = sel.ranges[i], updated = null;\n            if (range.empty) {\n                let pos = $071334078f8d3f8a$var$skipAtomicRanges(this.atoms, range.from, 0);\n                if (pos != range.from) updated = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(pos, -1);\n            } else {\n                let from = $071334078f8d3f8a$var$skipAtomicRanges(this.atoms, range.from, -1);\n                let to = $071334078f8d3f8a$var$skipAtomicRanges(this.atoms, range.to, 1);\n                if (from != range.from || to != range.to) updated = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);\n            }\n            if (updated) {\n                if (!ranges) ranges = sel.ranges.slice();\n                ranges[i] = updated;\n            }\n        }\n        return ranges ? (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create(ranges, sel.mainIndex) : sel;\n    }\n    select(event) {\n        let { view: view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));\n        if (this.mustSelect || !selection.eq(view.state.selection) || selection.main.assoc != view.state.selection.main.assoc && this.dragging === false) this.view.dispatch({\n            selection: selection,\n            userEvent: \"select.pointer\"\n        });\n        this.mustSelect = false;\n    }\n    update(update) {\n        if (update.docChanged && this.dragging) this.dragging = this.dragging.map(update.changes);\n        if (this.style.update(update)) setTimeout(()=>this.select(this.lastEvent), 20);\n    }\n}\nfunction $071334078f8d3f8a$var$addsSelectionRange(view, event) {\n    let facet = view.state.facet($071334078f8d3f8a$var$clickAddsSelectionRange);\n    return facet.length ? facet[0](event) : $071334078f8d3f8a$var$browser.mac ? event.metaKey : event.ctrlKey;\n}\nfunction $071334078f8d3f8a$var$dragMovesSelection(view, event) {\n    let facet = view.state.facet($071334078f8d3f8a$var$dragMovesSelection$1);\n    return facet.length ? facet[0](event) : $071334078f8d3f8a$var$browser.mac ? !event.altKey : !event.ctrlKey;\n}\nfunction $071334078f8d3f8a$var$isInPrimarySelection(view, event) {\n    let { main: main } = view.state.selection;\n    if (main.empty) return false;\n    // On boundary clicks, check whether the coordinates are inside the\n    // selection's client rectangles\n    let sel = $071334078f8d3f8a$var$getSelection(view.root);\n    if (!sel || sel.rangeCount == 0) return true;\n    let rects = sel.getRangeAt(0).getClientRects();\n    for(let i = 0; i < rects.length; i++){\n        let rect = rects[i];\n        if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY) return true;\n    }\n    return false;\n}\nfunction $071334078f8d3f8a$var$eventBelongsToEditor(view, event) {\n    if (!event.bubbles) return true;\n    if (event.defaultPrevented) return false;\n    for(let node = event.target, cView; node != view.contentDOM; node = node.parentNode)if (!node || node.nodeType == 11 || (cView = $071334078f8d3f8a$var$ContentView.get(node)) && cView.ignoreEvent(event)) return false;\n    return true;\n}\nconst $071334078f8d3f8a$var$handlers = /*@__PURE__*/ Object.create(null);\nconst $071334078f8d3f8a$var$handlerOptions = /*@__PURE__*/ Object.create(null);\n// This is very crude, but unfortunately both these browsers _pretend_\n// that they have a clipboard API—all the objects and methods are\n// there, they just don't work, and they are hard to test.\nconst $071334078f8d3f8a$var$brokenClipboardAPI = $071334078f8d3f8a$var$browser.ie && $071334078f8d3f8a$var$browser.ie_version < 15 || $071334078f8d3f8a$var$browser.ios && $071334078f8d3f8a$var$browser.webkit_version < 604;\nfunction $071334078f8d3f8a$var$capturePaste(view) {\n    let parent = view.dom.parentNode;\n    if (!parent) return;\n    let target = parent.appendChild(document.createElement(\"textarea\"));\n    target.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\n    target.focus();\n    setTimeout(()=>{\n        view.focus();\n        target.remove();\n        $071334078f8d3f8a$var$doPaste(view, target.value);\n    }, 50);\n}\nfunction $071334078f8d3f8a$var$doPaste(view, input) {\n    let { state: state } = view, changes, i = 1, text = state.toText(input);\n    let byLine = text.lines == state.selection.ranges.length;\n    let linewise = $071334078f8d3f8a$var$lastLinewiseCopy != null && state.selection.ranges.every((r)=>r.empty) && $071334078f8d3f8a$var$lastLinewiseCopy == text.toString();\n    if (linewise) {\n        let lastLine = -1;\n        changes = state.changeByRange((range)=>{\n            let line = state.doc.lineAt(range.from);\n            if (line.from == lastLine) return {\n                range: range\n            };\n            lastLine = line.from;\n            let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);\n            return {\n                changes: {\n                    from: line.from,\n                    insert: insert\n                },\n                range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(range.from + insert.length)\n            };\n        });\n    } else if (byLine) changes = state.changeByRange((range)=>{\n        let line = text.line(i++);\n        return {\n            changes: {\n                from: range.from,\n                to: range.to,\n                insert: line.text\n            },\n            range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(range.from + line.length)\n        };\n    });\n    else changes = state.replaceSelection(text);\n    view.dispatch(changes, {\n        userEvent: \"input.paste\",\n        scrollIntoView: true\n    });\n}\n$071334078f8d3f8a$var$handlers.keydown = (view, event)=>{\n    view.inputState.setSelectionOrigin(\"select\");\n    if (event.keyCode == 27) view.inputState.lastEscPress = Date.now();\n};\n$071334078f8d3f8a$var$handlers.touchstart = (view, e)=>{\n    view.inputState.lastTouchTime = Date.now();\n    view.inputState.setSelectionOrigin(\"select.pointer\");\n};\n$071334078f8d3f8a$var$handlers.touchmove = (view)=>{\n    view.inputState.setSelectionOrigin(\"select.pointer\");\n};\n$071334078f8d3f8a$var$handlerOptions.touchstart = $071334078f8d3f8a$var$handlerOptions.touchmove = {\n    passive: true\n};\n$071334078f8d3f8a$var$handlers.mousedown = (view, event)=>{\n    view.observer.flush();\n    if (view.inputState.lastTouchTime > Date.now() - 2000) return; // Ignore touch interaction\n    let style = null;\n    for (let makeStyle of view.state.facet($071334078f8d3f8a$var$mouseSelectionStyle)){\n        style = makeStyle(view, event);\n        if (style) break;\n    }\n    if (!style && event.button == 0) style = $071334078f8d3f8a$var$basicMouseSelection(view, event);\n    if (style) {\n        let mustFocus = !view.hasFocus;\n        view.inputState.startMouseSelection(new $071334078f8d3f8a$var$MouseSelection(view, event, style, mustFocus));\n        if (mustFocus) view.observer.ignore(()=>$071334078f8d3f8a$var$focusPreventScroll(view.contentDOM));\n        if (view.inputState.mouseSelection) view.inputState.mouseSelection.start(event);\n    }\n};\nfunction $071334078f8d3f8a$var$rangeForClick(view, pos, bias, type) {\n    if (type == 1) return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(pos, bias);\n    else if (type == 2) return $071334078f8d3f8a$var$groupAt(view.state, pos, bias);\n    else {\n        let visual = $071334078f8d3f8a$var$LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);\n        let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;\n        if (to < view.state.doc.length && to == line.to) to++;\n        return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(from, to);\n    }\n}\nlet $071334078f8d3f8a$var$insideY = (y, rect)=>y >= rect.top && y <= rect.bottom;\nlet $071334078f8d3f8a$var$inside = (x, y, rect)=>$071334078f8d3f8a$var$insideY(y, rect) && x >= rect.left && x <= rect.right;\n// Try to determine, for the given coordinates, associated with the\n// given position, whether they are related to the element before or\n// the element after the position.\nfunction $071334078f8d3f8a$var$findPositionSide(view, pos, x, y) {\n    let line = $071334078f8d3f8a$var$LineView.find(view.docView, pos);\n    if (!line) return 1;\n    let off = pos - line.posAtStart;\n    // Line boundaries point into the line\n    if (off == 0) return 1;\n    if (off == line.length) return -1;\n    // Positions on top of an element point at that element\n    let before = line.coordsAt(off, -1);\n    if (before && $071334078f8d3f8a$var$inside(x, y, before)) return -1;\n    let after = line.coordsAt(off, 1);\n    if (after && $071334078f8d3f8a$var$inside(x, y, after)) return 1;\n    // This is probably a line wrap point. Pick before if the point is\n    // beside it.\n    return before && $071334078f8d3f8a$var$insideY(y, before) ? -1 : 1;\n}\nfunction $071334078f8d3f8a$var$queryPos(view, event) {\n    let pos = view.posAtCoords({\n        x: event.clientX,\n        y: event.clientY\n    }, false);\n    return {\n        pos: pos,\n        bias: $071334078f8d3f8a$var$findPositionSide(view, pos, event.clientX, event.clientY)\n    };\n}\nconst $071334078f8d3f8a$var$BadMouseDetail = $071334078f8d3f8a$var$browser.ie && $071334078f8d3f8a$var$browser.ie_version <= 11;\nlet $071334078f8d3f8a$var$lastMouseDown = null, $071334078f8d3f8a$var$lastMouseDownCount = 0, $071334078f8d3f8a$var$lastMouseDownTime = 0;\nfunction $071334078f8d3f8a$var$getClickType(event) {\n    if (!$071334078f8d3f8a$var$BadMouseDetail) return event.detail;\n    let last = $071334078f8d3f8a$var$lastMouseDown, lastTime = $071334078f8d3f8a$var$lastMouseDownTime;\n    $071334078f8d3f8a$var$lastMouseDown = event;\n    $071334078f8d3f8a$var$lastMouseDownTime = Date.now();\n    return $071334078f8d3f8a$var$lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? ($071334078f8d3f8a$var$lastMouseDownCount + 1) % 3 : 1;\n}\nfunction $071334078f8d3f8a$var$basicMouseSelection(view, event) {\n    let start = $071334078f8d3f8a$var$queryPos(view, event), type = $071334078f8d3f8a$var$getClickType(event);\n    let startSel = view.state.selection;\n    return {\n        update (update) {\n            if (update.docChanged) {\n                start.pos = update.changes.mapPos(start.pos);\n                startSel = startSel.map(update.changes);\n            }\n        },\n        get (event, extend, multiple) {\n            let cur = $071334078f8d3f8a$var$queryPos(view, event), removed;\n            let range = $071334078f8d3f8a$var$rangeForClick(view, cur.pos, cur.bias, type);\n            if (start.pos != cur.pos && !extend) {\n                let startRange = $071334078f8d3f8a$var$rangeForClick(view, start.pos, start.bias, type);\n                let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);\n                range = from < range.from ? (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(from, to) : (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(to, from);\n            }\n            if (extend) return startSel.replaceRange(startSel.main.extend(range.from, range.to));\n            else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = $071334078f8d3f8a$var$removeRangeAround(startSel, cur.pos))) return removed;\n            else if (multiple) return startSel.addRange(range);\n            else return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create([\n                range\n            ]);\n        }\n    };\n}\nfunction $071334078f8d3f8a$var$removeRangeAround(sel, pos) {\n    for(let i = 0; i < sel.ranges.length; i++){\n        let { from: from, to: to } = sel.ranges[i];\n        if (from <= pos && to >= pos) return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));\n    }\n    return null;\n}\n$071334078f8d3f8a$var$handlers.dragstart = (view, event)=>{\n    let { selection: { main: main } } = view.state;\n    let { mouseSelection: mouseSelection } = view.inputState;\n    if (mouseSelection) mouseSelection.dragging = main;\n    if (event.dataTransfer) {\n        event.dataTransfer.setData(\"Text\", view.state.sliceDoc(main.from, main.to));\n        event.dataTransfer.effectAllowed = \"copyMove\";\n    }\n};\nfunction $071334078f8d3f8a$var$dropText(view, event, text, direct) {\n    if (!text) return;\n    let dropPos = view.posAtCoords({\n        x: event.clientX,\n        y: event.clientY\n    }, false);\n    event.preventDefault();\n    let { mouseSelection: mouseSelection } = view.inputState;\n    let del = direct && mouseSelection && mouseSelection.dragging && $071334078f8d3f8a$var$dragMovesSelection(view, event) ? {\n        from: mouseSelection.dragging.from,\n        to: mouseSelection.dragging.to\n    } : null;\n    let ins = {\n        from: dropPos,\n        insert: text\n    };\n    let changes = view.state.changes(del ? [\n        del,\n        ins\n    ] : ins);\n    view.focus();\n    view.dispatch({\n        changes: changes,\n        selection: {\n            anchor: changes.mapPos(dropPos, -1),\n            head: changes.mapPos(dropPos, 1)\n        },\n        userEvent: del ? \"move.drop\" : \"input.drop\"\n    });\n}\n$071334078f8d3f8a$var$handlers.drop = (view, event)=>{\n    if (!event.dataTransfer) return;\n    if (view.state.readOnly) return event.preventDefault();\n    let files = event.dataTransfer.files;\n    if (files && files.length) {\n        event.preventDefault();\n        let text = Array(files.length), read = 0;\n        let finishFile = ()=>{\n            if (++read == files.length) $071334078f8d3f8a$var$dropText(view, event, text.filter((s)=>s != null).join(view.state.lineBreak), false);\n        };\n        for(let i = 0; i < files.length; i++){\n            let reader = new FileReader;\n            reader.onerror = finishFile;\n            reader.onload = ()=>{\n                if (!/[\\x00-\\x08\\x0e-\\x1f]{2}/.test(reader.result)) text[i] = reader.result;\n                finishFile();\n            };\n            reader.readAsText(files[i]);\n        }\n    } else $071334078f8d3f8a$var$dropText(view, event, event.dataTransfer.getData(\"Text\"), true);\n};\n$071334078f8d3f8a$var$handlers.paste = (view, event)=>{\n    if (view.state.readOnly) return event.preventDefault();\n    view.observer.flush();\n    let data = $071334078f8d3f8a$var$brokenClipboardAPI ? null : event.clipboardData;\n    if (data) {\n        $071334078f8d3f8a$var$doPaste(view, data.getData(\"text/plain\") || data.getData(\"text/uri-text\"));\n        event.preventDefault();\n    } else $071334078f8d3f8a$var$capturePaste(view);\n};\nfunction $071334078f8d3f8a$var$captureCopy(view, text) {\n    // The extra wrapper is somehow necessary on IE/Edge to prevent the\n    // content from being mangled when it is put onto the clipboard\n    let parent = view.dom.parentNode;\n    if (!parent) return;\n    let target = parent.appendChild(document.createElement(\"textarea\"));\n    target.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\n    target.value = text;\n    target.focus();\n    target.selectionEnd = text.length;\n    target.selectionStart = 0;\n    setTimeout(()=>{\n        target.remove();\n        view.focus();\n    }, 50);\n}\nfunction $071334078f8d3f8a$var$copiedRange(state) {\n    let content = [], ranges = [], linewise = false;\n    for (let range of state.selection.ranges)if (!range.empty) {\n        content.push(state.sliceDoc(range.from, range.to));\n        ranges.push(range);\n    }\n    if (!content.length) {\n        // Nothing selected, do a line-wise copy\n        let upto = -1;\n        for (let { from: from } of state.selection.ranges){\n            let line = state.doc.lineAt(from);\n            if (line.number > upto) {\n                content.push(line.text);\n                ranges.push({\n                    from: line.from,\n                    to: Math.min(state.doc.length, line.to + 1)\n                });\n            }\n            upto = line.number;\n        }\n        linewise = true;\n    }\n    return {\n        text: content.join(state.lineBreak),\n        ranges: ranges,\n        linewise: linewise\n    };\n}\nlet $071334078f8d3f8a$var$lastLinewiseCopy = null;\n$071334078f8d3f8a$var$handlers.copy = $071334078f8d3f8a$var$handlers.cut = (view, event)=>{\n    let { text: text, ranges: ranges, linewise: linewise } = $071334078f8d3f8a$var$copiedRange(view.state);\n    if (!text && !linewise) return;\n    $071334078f8d3f8a$var$lastLinewiseCopy = linewise ? text : null;\n    let data = $071334078f8d3f8a$var$brokenClipboardAPI ? null : event.clipboardData;\n    if (data) {\n        event.preventDefault();\n        data.clearData();\n        data.setData(\"text/plain\", text);\n    } else $071334078f8d3f8a$var$captureCopy(view, text);\n    if (event.type == \"cut\" && !view.state.readOnly) view.dispatch({\n        changes: ranges,\n        scrollIntoView: true,\n        userEvent: \"delete.cut\"\n    });\n};\nconst $071334078f8d3f8a$var$isFocusChange = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$9279461326b8700a).define();\nfunction $071334078f8d3f8a$var$focusChangeTransaction(state, focus) {\n    let effects = [];\n    for (let getEffect of state.facet($071334078f8d3f8a$var$focusChangeEffect)){\n        let effect = getEffect(state, focus);\n        if (effect) effects.push(effect);\n    }\n    return effects ? state.update({\n        effects: effects,\n        annotations: $071334078f8d3f8a$var$isFocusChange.of(true)\n    }) : null;\n}\nfunction $071334078f8d3f8a$var$updateForFocusChange(view) {\n    setTimeout(()=>{\n        let focus = view.hasFocus;\n        if (focus != view.inputState.notifiedFocused) {\n            let tr = $071334078f8d3f8a$var$focusChangeTransaction(view.state, focus);\n            if (tr) view.dispatch(tr);\n            else view.update([]);\n        }\n    }, 10);\n}\n$071334078f8d3f8a$var$handlers.focus = (view)=>{\n    view.inputState.lastFocusTime = Date.now();\n    // When focusing reset the scroll position, move it back to where it was\n    if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {\n        view.scrollDOM.scrollTop = view.inputState.lastScrollTop;\n        view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;\n    }\n    $071334078f8d3f8a$var$updateForFocusChange(view);\n};\n$071334078f8d3f8a$var$handlers.blur = (view)=>{\n    view.observer.clearSelectionRange();\n    $071334078f8d3f8a$var$updateForFocusChange(view);\n};\n$071334078f8d3f8a$var$handlers.compositionstart = $071334078f8d3f8a$var$handlers.compositionupdate = (view)=>{\n    if (view.inputState.compositionFirstChange == null) view.inputState.compositionFirstChange = true;\n    if (view.inputState.composing < 0) // FIXME possibly set a timeout to clear it again on Android\n    view.inputState.composing = 0;\n};\n$071334078f8d3f8a$var$handlers.compositionend = (view)=>{\n    view.inputState.composing = -1;\n    view.inputState.compositionEndedAt = Date.now();\n    view.inputState.compositionPendingKey = true;\n    view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;\n    view.inputState.compositionFirstChange = null;\n    if ($071334078f8d3f8a$var$browser.chrome && $071334078f8d3f8a$var$browser.android) // Delay flushing for a bit on Android because it'll often fire a\n    // bunch of contradictory changes in a row at end of compositon\n    view.observer.flushSoon();\n    else if (view.inputState.compositionPendingChange) // If we found pending records, schedule a flush.\n    Promise.resolve().then(()=>view.observer.flush());\n    else // Otherwise, make sure that, if no changes come in soon, the\n    // composition view is cleared.\n    setTimeout(()=>{\n        if (view.inputState.composing < 0 && view.docView.hasComposition) view.update([]);\n    }, 50);\n};\n$071334078f8d3f8a$var$handlers.contextmenu = (view)=>{\n    view.inputState.lastContextMenu = Date.now();\n};\n$071334078f8d3f8a$var$handlers.beforeinput = (view, event)=>{\n    var _a;\n    // Because Chrome Android doesn't fire useful key events, use\n    // beforeinput to detect backspace (and possibly enter and delete,\n    // but those usually don't even seem to fire beforeinput events at\n    // the moment) and fake a key event for it.\n    //\n    // (preventDefault on beforeinput, though supported in the spec,\n    // seems to do nothing at all on Chrome).\n    let pending;\n    if ($071334078f8d3f8a$var$browser.chrome && $071334078f8d3f8a$var$browser.android && (pending = $071334078f8d3f8a$var$PendingKeys.find((key)=>key.inputType == event.inputType))) {\n        view.observer.delayAndroidKey(pending.key, pending.keyCode);\n        if (pending.key == \"Backspace\" || pending.key == \"Delete\") {\n            let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;\n            setTimeout(()=>{\n                var _a;\n                // Backspacing near uneditable nodes on Chrome Android sometimes\n                // closes the virtual keyboard. This tries to crudely detect\n                // that and refocus to get it back.\n                if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {\n                    view.contentDOM.blur();\n                    view.focus();\n                }\n            }, 100);\n        }\n    }\n};\nconst $071334078f8d3f8a$var$wrappingWhiteSpace = [\n    \"pre-wrap\",\n    \"normal\",\n    \"pre-line\",\n    \"break-spaces\"\n];\nclass $071334078f8d3f8a$var$HeightOracle {\n    constructor(lineWrapping){\n        this.lineWrapping = lineWrapping;\n        this.doc = (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).empty;\n        this.heightSamples = {};\n        this.lineHeight = 14; // The height of an entire line (line-height)\n        this.charWidth = 7;\n        this.textHeight = 14; // The height of the actual font (font-size)\n        this.lineLength = 30;\n        // Used to track, during updateHeight, if any actual heights changed\n        this.heightChanged = false;\n    }\n    heightForGap(from, to) {\n        let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;\n        if (this.lineWrapping) lines += Math.max(0, Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength));\n        return this.lineHeight * lines;\n    }\n    heightForLine(length) {\n        if (!this.lineWrapping) return this.lineHeight;\n        let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));\n        return lines * this.lineHeight;\n    }\n    setDoc(doc) {\n        this.doc = doc;\n        return this;\n    }\n    mustRefreshForWrapping(whiteSpace) {\n        return $071334078f8d3f8a$var$wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;\n    }\n    mustRefreshForHeights(lineHeights) {\n        let newHeight = false;\n        for(let i = 0; i < lineHeights.length; i++){\n            let h = lineHeights[i];\n            if (h < 0) i++;\n            else if (!this.heightSamples[Math.floor(h * 10)]) {\n                newHeight = true;\n                this.heightSamples[Math.floor(h * 10)] = true;\n            }\n        }\n        return newHeight;\n    }\n    refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {\n        let lineWrapping = $071334078f8d3f8a$var$wrappingWhiteSpace.indexOf(whiteSpace) > -1;\n        let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;\n        this.lineWrapping = lineWrapping;\n        this.lineHeight = lineHeight;\n        this.charWidth = charWidth;\n        this.textHeight = textHeight;\n        this.lineLength = lineLength;\n        if (changed) {\n            this.heightSamples = {};\n            for(let i = 0; i < knownHeights.length; i++){\n                let h = knownHeights[i];\n                if (h < 0) i++;\n                else this.heightSamples[Math.floor(h * 10)] = true;\n            }\n        }\n        return changed;\n    }\n}\n// This object is used by `updateHeight` to make DOM measurements\n// arrive at the right nides. The `heights` array is a sequence of\n// block heights, starting from position `from`.\nclass $071334078f8d3f8a$var$MeasuredHeights {\n    constructor(from, heights){\n        this.from = from;\n        this.heights = heights;\n        this.index = 0;\n    }\n    get more() {\n        return this.index < this.heights.length;\n    }\n}\n/**\nRecord used to represent information about a block-level element\nin the editor view.\n*/ class $071334078f8d3f8a$export$ddfdc4ccfe9512bd {\n    /**\n    @internal\n    */ constructor(/**\n    The start of the element in the document.\n    */ from, /**\n    The length of the element.\n    */ length, /**\n    The top position of the element (relative to the top of the\n    document).\n    */ top, /**\n    Its height.\n    */ height, /**\n    @internal Weird packed field that holds an array of children\n    for composite blocks, a decoration for block widgets, and a\n    number indicating the amount of widget-create line breaks for\n    text blocks.\n    */ _content){\n        this.from = from;\n        this.length = length;\n        this.top = top;\n        this.height = height;\n        this._content = _content;\n    }\n    /**\n    The type of element this is. When querying lines, this may be\n    an array of all the blocks that make up the line.\n    */ get type() {\n        return typeof this._content == \"number\" ? $071334078f8d3f8a$export$48808c686fe495c4.Text : Array.isArray(this._content) ? this._content : this._content.type;\n    }\n    /**\n    The end of the element as a document position.\n    */ get to() {\n        return this.from + this.length;\n    }\n    /**\n    The bottom position of the element.\n    */ get bottom() {\n        return this.top + this.height;\n    }\n    /**\n    If this is a widget block, this will return the widget\n    associated with it.\n    */ get widget() {\n        return this._content instanceof $071334078f8d3f8a$var$PointDecoration ? this._content.widget : null;\n    }\n    /**\n    If this is a textblock, this holds the number of line breaks\n    that appear in widgets inside the block.\n    */ get widgetLineBreaks() {\n        return typeof this._content == \"number\" ? this._content : 0;\n    }\n    /**\n    @internal\n    */ join(other) {\n        let content = (Array.isArray(this._content) ? this._content : [\n            this\n        ]).concat(Array.isArray(other._content) ? other._content : [\n            other\n        ]);\n        return new $071334078f8d3f8a$export$ddfdc4ccfe9512bd(this.from, this.length + other.length, this.top, this.height + other.height, content);\n    }\n}\nvar $071334078f8d3f8a$var$QueryType = /*@__PURE__*/ function(QueryType) {\n    QueryType[QueryType[\"ByPos\"] = 0] = \"ByPos\";\n    QueryType[QueryType[\"ByHeight\"] = 1] = \"ByHeight\";\n    QueryType[QueryType[\"ByPosNoHeight\"] = 2] = \"ByPosNoHeight\";\n    return QueryType;\n}($071334078f8d3f8a$var$QueryType || ($071334078f8d3f8a$var$QueryType = {}));\nconst $071334078f8d3f8a$var$Epsilon = 1e-3;\nclass $071334078f8d3f8a$var$HeightMap {\n    constructor(length, height, flags = 2 /* Outdated */ ){\n        this.length = length;\n        this.height = height;\n        this.flags = flags;\n    }\n    get outdated() {\n        return (this.flags & 2 /* Outdated */ ) > 0;\n    }\n    set outdated(value) {\n        this.flags = (value ? 2 /* Outdated */  : 0) | this.flags & -3 /* Outdated */ ;\n    }\n    setHeight(oracle, height) {\n        if (this.height != height) {\n            if (Math.abs(this.height - height) > $071334078f8d3f8a$var$Epsilon) oracle.heightChanged = true;\n            this.height = height;\n        }\n    }\n    // Base case is to replace a leaf node, which simply builds a tree\n    // from the new nodes and returns that (HeightMapBranch and\n    // HeightMapGap override this to actually use from/to)\n    replace(_from, _to, nodes) {\n        return $071334078f8d3f8a$var$HeightMap.of(nodes);\n    }\n    // Again, these are base cases, and are overridden for branch and gap nodes.\n    decomposeLeft(_to, result) {\n        result.push(this);\n    }\n    decomposeRight(_from, result) {\n        result.push(this);\n    }\n    applyChanges(decorations, oldDoc, oracle, changes) {\n        let me = this, doc = oracle.doc;\n        for(let i = changes.length - 1; i >= 0; i--){\n            let { fromA: fromA, toA: toA, fromB: fromB, toB: toB } = changes[i];\n            let start = me.lineAt(fromA, $071334078f8d3f8a$var$QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);\n            let end = start.to >= toA ? start : me.lineAt(toA, $071334078f8d3f8a$var$QueryType.ByPosNoHeight, oracle, 0, 0);\n            toB += end.to - toA;\n            toA = end.to;\n            while(i > 0 && start.from <= changes[i - 1].toA){\n                fromA = changes[i - 1].fromA;\n                fromB = changes[i - 1].fromB;\n                i--;\n                if (fromA < start.from) start = me.lineAt(fromA, $071334078f8d3f8a$var$QueryType.ByPosNoHeight, oracle, 0, 0);\n            }\n            fromB += start.from - fromA;\n            fromA = start.from;\n            let nodes = $071334078f8d3f8a$var$NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);\n            me = me.replace(fromA, toA, nodes);\n        }\n        return me.updateHeight(oracle, 0);\n    }\n    static empty() {\n        return new $071334078f8d3f8a$var$HeightMapText(0, 0);\n    }\n    // nodes uses null values to indicate the position of line breaks.\n    // There are never line breaks at the start or end of the array, or\n    // two line breaks next to each other, and the array isn't allowed\n    // to be empty (same restrictions as return value from the builder).\n    static of(nodes) {\n        if (nodes.length == 1) return nodes[0];\n        let i = 0, j = nodes.length, before = 0, after = 0;\n        for(;;){\n            if (i == j) {\n                if (before > after * 2) {\n                    let split = nodes[i - 1];\n                    if (split.break) nodes.splice(--i, 1, split.left, null, split.right);\n                    else nodes.splice(--i, 1, split.left, split.right);\n                    j += 1 + split.break;\n                    before -= split.size;\n                } else if (after > before * 2) {\n                    let split = nodes[j];\n                    if (split.break) nodes.splice(j, 1, split.left, null, split.right);\n                    else nodes.splice(j, 1, split.left, split.right);\n                    j += 2 + split.break;\n                    after -= split.size;\n                } else break;\n            } else if (before < after) {\n                let next = nodes[i++];\n                if (next) before += next.size;\n            } else {\n                let next = nodes[--j];\n                if (next) after += next.size;\n            }\n        }\n        let brk = 0;\n        if (nodes[i - 1] == null) {\n            brk = 1;\n            i--;\n        } else if (nodes[i] == null) {\n            brk = 1;\n            j++;\n        }\n        return new $071334078f8d3f8a$var$HeightMapBranch($071334078f8d3f8a$var$HeightMap.of(nodes.slice(0, i)), brk, $071334078f8d3f8a$var$HeightMap.of(nodes.slice(j)));\n    }\n}\n$071334078f8d3f8a$var$HeightMap.prototype.size = 1;\nclass $071334078f8d3f8a$var$HeightMapBlock extends $071334078f8d3f8a$var$HeightMap {\n    constructor(length, height, deco){\n        super(length, height);\n        this.deco = deco;\n    }\n    blockAt(_height, _oracle, top, offset) {\n        return new $071334078f8d3f8a$export$ddfdc4ccfe9512bd(offset, this.length, top, this.height, this.deco || 0);\n    }\n    lineAt(_value, _type, oracle, top, offset) {\n        return this.blockAt(0, oracle, top, offset);\n    }\n    forEachLine(from, to, oracle, top, offset, f) {\n        if (from <= offset + this.length && to >= offset) f(this.blockAt(0, oracle, top, offset));\n    }\n    updateHeight(oracle, offset = 0, _force = false, measured) {\n        if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);\n        this.outdated = false;\n        return this;\n    }\n    toString() {\n        return `block(${this.length})`;\n    }\n}\nclass $071334078f8d3f8a$var$HeightMapText extends $071334078f8d3f8a$var$HeightMapBlock {\n    constructor(length, height){\n        super(length, height, null);\n        this.collapsed = 0; // Amount of collapsed content in the line\n        this.widgetHeight = 0; // Maximum inline widget height\n        this.breaks = 0; // Number of widget-introduced line breaks on the line\n    }\n    blockAt(_height, _oracle, top, offset) {\n        return new $071334078f8d3f8a$export$ddfdc4ccfe9512bd(offset, this.length, top, this.height, this.breaks);\n    }\n    replace(_from, _to, nodes) {\n        let node = nodes[0];\n        if (nodes.length == 1 && (node instanceof $071334078f8d3f8a$var$HeightMapText || node instanceof $071334078f8d3f8a$var$HeightMapGap && node.flags & 4 /* SingleLine */ ) && Math.abs(this.length - node.length) < 10) {\n            if (node instanceof $071334078f8d3f8a$var$HeightMapGap) node = new $071334078f8d3f8a$var$HeightMapText(node.length, this.height);\n            else node.height = this.height;\n            if (!this.outdated) node.outdated = false;\n            return node;\n        } else return $071334078f8d3f8a$var$HeightMap.of(nodes);\n    }\n    updateHeight(oracle, offset = 0, force = false, measured) {\n        if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);\n        else if (force || this.outdated) this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);\n        this.outdated = false;\n        return this;\n    }\n    toString() {\n        return `line(${this.length}${this.collapsed ? -this.collapsed : \"\"}${this.widgetHeight ? \":\" + this.widgetHeight : \"\"})`;\n    }\n}\nclass $071334078f8d3f8a$var$HeightMapGap extends $071334078f8d3f8a$var$HeightMap {\n    constructor(length){\n        super(length, 0);\n    }\n    heightMetrics(oracle, offset) {\n        let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;\n        let lines = lastLine - firstLine + 1;\n        let perLine, perChar = 0;\n        if (oracle.lineWrapping) {\n            let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);\n            perLine = totalPerLine / lines;\n            if (this.length > lines + 1) perChar = (this.height - totalPerLine) / (this.length - lines - 1);\n        } else perLine = this.height / lines;\n        return {\n            firstLine: firstLine,\n            lastLine: lastLine,\n            perLine: perLine,\n            perChar: perChar\n        };\n    }\n    blockAt(height, oracle, top, offset) {\n        let { firstLine: firstLine, lastLine: lastLine, perLine: perLine, perChar: perChar } = this.heightMetrics(oracle, offset);\n        if (oracle.lineWrapping) {\n            let guess = offset + Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length);\n            let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;\n            let lineTop = Math.max(top, height - lineHeight / 2);\n            return new $071334078f8d3f8a$export$ddfdc4ccfe9512bd(line.from, line.length, lineTop, lineHeight, 0);\n        } else {\n            let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));\n            let { from: from, length: length } = oracle.doc.line(firstLine + line);\n            return new $071334078f8d3f8a$export$ddfdc4ccfe9512bd(from, length, top + perLine * line, perLine, 0);\n        }\n    }\n    lineAt(value, type, oracle, top, offset) {\n        if (type == $071334078f8d3f8a$var$QueryType.ByHeight) return this.blockAt(value, oracle, top, offset);\n        if (type == $071334078f8d3f8a$var$QueryType.ByPosNoHeight) {\n            let { from: from, to: to } = oracle.doc.lineAt(value);\n            return new $071334078f8d3f8a$export$ddfdc4ccfe9512bd(from, to - from, 0, 0, 0);\n        }\n        let { firstLine: firstLine, perLine: perLine, perChar: perChar } = this.heightMetrics(oracle, offset);\n        let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;\n        let linesAbove = line.number - firstLine;\n        let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);\n        return new $071334078f8d3f8a$export$ddfdc4ccfe9512bd(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);\n    }\n    forEachLine(from, to, oracle, top, offset, f) {\n        from = Math.max(from, offset);\n        to = Math.min(to, offset + this.length);\n        let { firstLine: firstLine, perLine: perLine, perChar: perChar } = this.heightMetrics(oracle, offset);\n        for(let pos = from, lineTop = top; pos <= to;){\n            let line = oracle.doc.lineAt(pos);\n            if (pos == from) {\n                let linesAbove = line.number - firstLine;\n                lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);\n            }\n            let lineHeight = perLine + perChar * line.length;\n            f(new $071334078f8d3f8a$export$ddfdc4ccfe9512bd(line.from, line.length, lineTop, lineHeight, 0));\n            lineTop += lineHeight;\n            pos = line.to + 1;\n        }\n    }\n    replace(from, to, nodes) {\n        let after = this.length - to;\n        if (after > 0) {\n            let last = nodes[nodes.length - 1];\n            if (last instanceof $071334078f8d3f8a$var$HeightMapGap) nodes[nodes.length - 1] = new $071334078f8d3f8a$var$HeightMapGap(last.length + after);\n            else nodes.push(null, new $071334078f8d3f8a$var$HeightMapGap(after - 1));\n        }\n        if (from > 0) {\n            let first = nodes[0];\n            if (first instanceof $071334078f8d3f8a$var$HeightMapGap) nodes[0] = new $071334078f8d3f8a$var$HeightMapGap(from + first.length);\n            else nodes.unshift(new $071334078f8d3f8a$var$HeightMapGap(from - 1), null);\n        }\n        return $071334078f8d3f8a$var$HeightMap.of(nodes);\n    }\n    decomposeLeft(to, result) {\n        result.push(new $071334078f8d3f8a$var$HeightMapGap(to - 1), null);\n    }\n    decomposeRight(from, result) {\n        result.push(null, new $071334078f8d3f8a$var$HeightMapGap(this.length - from - 1));\n    }\n    updateHeight(oracle, offset = 0, force = false, measured) {\n        let end = offset + this.length;\n        if (measured && measured.from <= offset + this.length && measured.more) {\n            // Fill in part of this gap with measured lines. We know there\n            // can't be widgets or collapsed ranges in those lines, because\n            // they would already have been added to the heightmap (gaps\n            // only contain plain text).\n            let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;\n            if (measured.from > offset) nodes.push(new $071334078f8d3f8a$var$HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));\n            while(pos <= end && measured.more){\n                let len = oracle.doc.lineAt(pos).length;\n                if (nodes.length) nodes.push(null);\n                let height = measured.heights[measured.index++];\n                if (singleHeight == -1) singleHeight = height;\n                else if (Math.abs(height - singleHeight) >= $071334078f8d3f8a$var$Epsilon) singleHeight = -2;\n                let line = new $071334078f8d3f8a$var$HeightMapText(len, height);\n                line.outdated = false;\n                nodes.push(line);\n                pos += len + 1;\n            }\n            if (pos <= end) nodes.push(null, new $071334078f8d3f8a$var$HeightMapGap(end - pos).updateHeight(oracle, pos));\n            let result = $071334078f8d3f8a$var$HeightMap.of(nodes);\n            if (singleHeight < 0 || Math.abs(result.height - this.height) >= $071334078f8d3f8a$var$Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= $071334078f8d3f8a$var$Epsilon) oracle.heightChanged = true;\n            return result;\n        } else if (force || this.outdated) {\n            this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));\n            this.outdated = false;\n        }\n        return this;\n    }\n    toString() {\n        return `gap(${this.length})`;\n    }\n}\nclass $071334078f8d3f8a$var$HeightMapBranch extends $071334078f8d3f8a$var$HeightMap {\n    constructor(left, brk, right){\n        super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */  : 0));\n        this.left = left;\n        this.right = right;\n        this.size = left.size + right.size;\n    }\n    get break() {\n        return this.flags & 1 /* Break */ ;\n    }\n    blockAt(height, oracle, top, offset) {\n        let mid = top + this.left.height;\n        return height < mid ? this.left.blockAt(height, oracle, top, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);\n    }\n    lineAt(value, type, oracle, top, offset) {\n        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;\n        let left = type == $071334078f8d3f8a$var$QueryType.ByHeight ? value < rightTop : value < rightOffset;\n        let base = left ? this.left.lineAt(value, type, oracle, top, offset) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);\n        if (this.break || (left ? base.to < rightOffset : base.from > rightOffset)) return base;\n        let subQuery = type == $071334078f8d3f8a$var$QueryType.ByPosNoHeight ? $071334078f8d3f8a$var$QueryType.ByPosNoHeight : $071334078f8d3f8a$var$QueryType.ByPos;\n        if (left) return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));\n        else return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);\n    }\n    forEachLine(from, to, oracle, top, offset, f) {\n        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;\n        if (this.break) {\n            if (from < rightOffset) this.left.forEachLine(from, to, oracle, top, offset, f);\n            if (to >= rightOffset) this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);\n        } else {\n            let mid = this.lineAt(rightOffset, $071334078f8d3f8a$var$QueryType.ByPos, oracle, top, offset);\n            if (from < mid.from) this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);\n            if (mid.to >= from && mid.from <= to) f(mid);\n            if (to > mid.to) this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);\n        }\n    }\n    replace(from, to, nodes) {\n        let rightStart = this.left.length + this.break;\n        if (to < rightStart) return this.balanced(this.left.replace(from, to, nodes), this.right);\n        if (from > this.left.length) return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));\n        let result = [];\n        if (from > 0) this.decomposeLeft(from, result);\n        let left = result.length;\n        for (let node of nodes)result.push(node);\n        if (from > 0) $071334078f8d3f8a$var$mergeGaps(result, left - 1);\n        if (to < this.length) {\n            let right = result.length;\n            this.decomposeRight(to, result);\n            $071334078f8d3f8a$var$mergeGaps(result, right);\n        }\n        return $071334078f8d3f8a$var$HeightMap.of(result);\n    }\n    decomposeLeft(to, result) {\n        let left = this.left.length;\n        if (to <= left) return this.left.decomposeLeft(to, result);\n        result.push(this.left);\n        if (this.break) {\n            left++;\n            if (to >= left) result.push(null);\n        }\n        if (to > left) this.right.decomposeLeft(to - left, result);\n    }\n    decomposeRight(from, result) {\n        let left = this.left.length, right = left + this.break;\n        if (from >= right) return this.right.decomposeRight(from - right, result);\n        if (from < left) this.left.decomposeRight(from, result);\n        if (this.break && from < right) result.push(null);\n        result.push(this.right);\n    }\n    balanced(left, right) {\n        if (left.size > 2 * right.size || right.size > 2 * left.size) return $071334078f8d3f8a$var$HeightMap.of(this.break ? [\n            left,\n            null,\n            right\n        ] : [\n            left,\n            right\n        ]);\n        this.left = left;\n        this.right = right;\n        this.height = left.height + right.height;\n        this.outdated = left.outdated || right.outdated;\n        this.size = left.size + right.size;\n        this.length = left.length + this.break + right.length;\n        return this;\n    }\n    updateHeight(oracle, offset = 0, force = false, measured) {\n        let { left: left, right: right } = this, rightStart = offset + left.length + this.break, rebalance = null;\n        if (measured && measured.from <= offset + left.length && measured.more) rebalance = left = left.updateHeight(oracle, offset, force, measured);\n        else left.updateHeight(oracle, offset, force);\n        if (measured && measured.from <= rightStart + right.length && measured.more) rebalance = right = right.updateHeight(oracle, rightStart, force, measured);\n        else right.updateHeight(oracle, rightStart, force);\n        if (rebalance) return this.balanced(left, right);\n        this.height = this.left.height + this.right.height;\n        this.outdated = false;\n        return this;\n    }\n    toString() {\n        return this.left + (this.break ? \" \" : \"-\") + this.right;\n    }\n}\nfunction $071334078f8d3f8a$var$mergeGaps(nodes, around) {\n    let before, after;\n    if (nodes[around] == null && (before = nodes[around - 1]) instanceof $071334078f8d3f8a$var$HeightMapGap && (after = nodes[around + 1]) instanceof $071334078f8d3f8a$var$HeightMapGap) nodes.splice(around - 1, 3, new $071334078f8d3f8a$var$HeightMapGap(before.length + 1 + after.length));\n}\nconst $071334078f8d3f8a$var$relevantWidgetHeight = 5;\nclass $071334078f8d3f8a$var$NodeBuilder {\n    constructor(pos, oracle){\n        this.pos = pos;\n        this.oracle = oracle;\n        this.nodes = [];\n        this.lineStart = -1;\n        this.lineEnd = -1;\n        this.covering = null;\n        this.writtenTo = pos;\n    }\n    get isCovered() {\n        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;\n    }\n    span(_from, to) {\n        if (this.lineStart > -1) {\n            let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];\n            if (last instanceof $071334078f8d3f8a$var$HeightMapText) last.length += end - this.pos;\n            else if (end > this.pos || !this.isCovered) this.nodes.push(new $071334078f8d3f8a$var$HeightMapText(end - this.pos, -1));\n            this.writtenTo = end;\n            if (to > end) {\n                this.nodes.push(null);\n                this.writtenTo++;\n                this.lineStart = -1;\n            }\n        }\n        this.pos = to;\n    }\n    point(from, to, deco) {\n        if (from < to || deco.heightRelevant) {\n            let height = deco.widget ? deco.widget.estimatedHeight : 0;\n            let breaks = deco.widget ? deco.widget.lineBreaks : 0;\n            if (height < 0) height = this.oracle.lineHeight;\n            let len = to - from;\n            if (deco.block) this.addBlock(new $071334078f8d3f8a$var$HeightMapBlock(len, height, deco));\n            else if (len || breaks || height >= $071334078f8d3f8a$var$relevantWidgetHeight) this.addLineDeco(height, breaks, len);\n        } else if (to > from) this.span(from, to);\n        if (this.lineEnd > -1 && this.lineEnd < this.pos) this.lineEnd = this.oracle.doc.lineAt(this.pos).to;\n    }\n    enterLine() {\n        if (this.lineStart > -1) return;\n        let { from: from, to: to } = this.oracle.doc.lineAt(this.pos);\n        this.lineStart = from;\n        this.lineEnd = to;\n        if (this.writtenTo < from) {\n            if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null) this.nodes.push(this.blankContent(this.writtenTo, from - 1));\n            this.nodes.push(null);\n        }\n        if (this.pos > from) this.nodes.push(new $071334078f8d3f8a$var$HeightMapText(this.pos - from, -1));\n        this.writtenTo = this.pos;\n    }\n    blankContent(from, to) {\n        let gap = new $071334078f8d3f8a$var$HeightMapGap(to - from);\n        if (this.oracle.doc.lineAt(from).to == to) gap.flags |= 4 /* SingleLine */ ;\n        return gap;\n    }\n    ensureLine() {\n        this.enterLine();\n        let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;\n        if (last instanceof $071334078f8d3f8a$var$HeightMapText) return last;\n        let line = new $071334078f8d3f8a$var$HeightMapText(0, -1);\n        this.nodes.push(line);\n        return line;\n    }\n    addBlock(block) {\n        var _a;\n        this.enterLine();\n        let type = (_a = block.deco) === null || _a === void 0 ? void 0 : _a.type;\n        if (type == $071334078f8d3f8a$export$48808c686fe495c4.WidgetAfter && !this.isCovered) this.ensureLine();\n        this.nodes.push(block);\n        this.writtenTo = this.pos = this.pos + block.length;\n        if (type != $071334078f8d3f8a$export$48808c686fe495c4.WidgetBefore) this.covering = block;\n    }\n    addLineDeco(height, breaks, length) {\n        let line = this.ensureLine();\n        line.length += length;\n        line.collapsed += length;\n        line.widgetHeight = Math.max(line.widgetHeight, height);\n        line.breaks += breaks;\n        this.writtenTo = this.pos = this.pos + length;\n    }\n    finish(from) {\n        let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];\n        if (this.lineStart > -1 && !(last instanceof $071334078f8d3f8a$var$HeightMapText) && !this.isCovered) this.nodes.push(new $071334078f8d3f8a$var$HeightMapText(0, -1));\n        else if (this.writtenTo < this.pos || last == null) this.nodes.push(this.blankContent(this.writtenTo, this.pos));\n        let pos = from;\n        for (let node of this.nodes){\n            if (node instanceof $071334078f8d3f8a$var$HeightMapText) node.updateHeight(this.oracle, pos);\n            pos += node ? node.length : 1;\n        }\n        return this.nodes;\n    }\n    // Always called with a region that on both sides either stretches\n    // to a line break or the end of the document.\n    // The returned array uses null to indicate line breaks, but never\n    // starts or ends in a line break, or has multiple line breaks next\n    // to each other.\n    static build(oracle, decorations, from, to) {\n        let builder = new $071334078f8d3f8a$var$NodeBuilder(from, oracle);\n        (0, $ccfb9497d8ef598f$export$34cb5241245008dd).spans(decorations, from, to, builder, 0);\n        return builder.finish(from);\n    }\n}\nfunction $071334078f8d3f8a$var$heightRelevantDecoChanges(a, b, diff) {\n    let comp = new $071334078f8d3f8a$var$DecorationComparator;\n    (0, $ccfb9497d8ef598f$export$34cb5241245008dd).compare(a, b, diff, comp, 0);\n    return comp.changes;\n}\nclass $071334078f8d3f8a$var$DecorationComparator {\n    constructor(){\n        this.changes = [];\n    }\n    compareRange() {}\n    comparePoint(from, to, a, b) {\n        if (from < to || a && a.heightRelevant || b && b.heightRelevant) $071334078f8d3f8a$var$addRange(from, to, this.changes, 5);\n    }\n}\nfunction $071334078f8d3f8a$var$visiblePixelRange(dom, paddingTop) {\n    let rect = dom.getBoundingClientRect();\n    let doc = dom.ownerDocument, win = doc.defaultView || window;\n    let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);\n    let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);\n    for(let parent = dom.parentNode; parent && parent != doc.body;){\n        if (parent.nodeType == 1) {\n            let elt = parent;\n            let style = window.getComputedStyle(elt);\n            if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != \"visible\") {\n                let parentRect = elt.getBoundingClientRect();\n                left = Math.max(left, parentRect.left);\n                right = Math.min(right, parentRect.right);\n                top = Math.max(top, parentRect.top);\n                bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);\n            }\n            parent = style.position == \"absolute\" || style.position == \"fixed\" ? elt.offsetParent : elt.parentNode;\n        } else if (parent.nodeType == 11) parent = parent.host;\n        else break;\n    }\n    return {\n        left: left - rect.left,\n        right: Math.max(left, right) - rect.left,\n        top: top - (rect.top + paddingTop),\n        bottom: Math.max(top, bottom) - (rect.top + paddingTop)\n    };\n}\nfunction $071334078f8d3f8a$var$fullPixelRange(dom, paddingTop) {\n    let rect = dom.getBoundingClientRect();\n    return {\n        left: 0,\n        right: rect.right - rect.left,\n        top: paddingTop,\n        bottom: rect.bottom - (rect.top + paddingTop)\n    };\n}\n// Line gaps are placeholder widgets used to hide pieces of overlong\n// lines within the viewport, as a kludge to keep the editor\n// responsive when a ridiculously long line is loaded into it.\nclass $071334078f8d3f8a$var$LineGap {\n    constructor(from, to, size){\n        this.from = from;\n        this.to = to;\n        this.size = size;\n    }\n    static same(a, b) {\n        if (a.length != b.length) return false;\n        for(let i = 0; i < a.length; i++){\n            let gA = a[i], gB = b[i];\n            if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size) return false;\n        }\n        return true;\n    }\n    draw(wrapping) {\n        return $071334078f8d3f8a$export$10e30b733df217ea.replace({\n            widget: new $071334078f8d3f8a$var$LineGapWidget(this.size, wrapping)\n        }).range(this.from, this.to);\n    }\n}\nclass $071334078f8d3f8a$var$LineGapWidget extends $071334078f8d3f8a$export$95cdd842edb044c5 {\n    constructor(size, vertical){\n        super();\n        this.size = size;\n        this.vertical = vertical;\n    }\n    eq(other) {\n        return other.size == this.size && other.vertical == this.vertical;\n    }\n    toDOM() {\n        let elt = document.createElement(\"div\");\n        if (this.vertical) elt.style.height = this.size + \"px\";\n        else {\n            elt.style.width = this.size + \"px\";\n            elt.style.height = \"2px\";\n            elt.style.display = \"inline-block\";\n        }\n        return elt;\n    }\n    get estimatedHeight() {\n        return this.vertical ? this.size : -1;\n    }\n}\nclass $071334078f8d3f8a$var$ViewState {\n    constructor(state){\n        this.state = state;\n        // These are contentDOM-local coordinates\n        this.pixelViewport = {\n            left: 0,\n            right: window.innerWidth,\n            top: 0,\n            bottom: 0\n        };\n        this.inView = true;\n        this.paddingTop = 0;\n        this.paddingBottom = 0;\n        this.contentDOMWidth = 0;\n        this.contentDOMHeight = 0;\n        this.editorHeight = 0;\n        this.editorWidth = 0;\n        this.scrollTop = 0;\n        this.scrolledToBottom = true;\n        // The vertical position (document-relative) to which to anchor the\n        // scroll position. -1 means anchor to the end of the document.\n        this.scrollAnchorPos = 0;\n        // The height at the anchor position. Set by the DOM update phase.\n        // -1 means no height available.\n        this.scrollAnchorHeight = -1;\n        // See VP.MaxDOMHeight\n        this.scaler = $071334078f8d3f8a$var$IdScaler;\n        this.scrollTarget = null;\n        // Briefly set to true when printing, to disable viewport limiting\n        this.printing = false;\n        // Flag set when editor content was redrawn, so that the next\n        // measure stage knows it must read DOM layout\n        this.mustMeasureContent = true;\n        this.defaultTextDirection = $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR;\n        this.visibleRanges = [];\n        // Cursor 'assoc' is only significant when the cursor is on a line\n        // wrap point, where it must stick to the character that it is\n        // associated with. Since browsers don't provide a reasonable\n        // interface to set or query this, when a selection is set that\n        // might cause this to be significant, this flag is set. The next\n        // measure phase will check whether the cursor is on a line-wrapping\n        // boundary and, if so, reset it to make sure it is positioned in\n        // the right place.\n        this.mustEnforceCursorAssoc = false;\n        let guessWrapping = state.facet($071334078f8d3f8a$var$contentAttributes).some((v)=>typeof v != \"function\" && v.class == \"cm-lineWrapping\");\n        this.heightOracle = new $071334078f8d3f8a$var$HeightOracle(guessWrapping);\n        this.stateDeco = state.facet($071334078f8d3f8a$var$decorations).filter((d)=>typeof d != \"function\");\n        this.heightMap = $071334078f8d3f8a$var$HeightMap.empty().applyChanges(this.stateDeco, (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).empty, this.heightOracle.setDoc(state.doc), [\n            new $071334078f8d3f8a$var$ChangedRange(0, 0, 0, state.doc.length)\n        ]);\n        this.viewport = this.getViewport(0, null);\n        this.updateViewportLines();\n        this.updateForViewport();\n        this.lineGaps = this.ensureLineGaps([]);\n        this.lineGapDeco = $071334078f8d3f8a$export$10e30b733df217ea.set(this.lineGaps.map((gap)=>gap.draw(false)));\n        this.computeVisibleRanges();\n    }\n    updateForViewport() {\n        let viewports = [\n            this.viewport\n        ], { main: main } = this.state.selection;\n        for(let i = 0; i <= 1; i++){\n            let pos = i ? main.head : main.anchor;\n            if (!viewports.some(({ from: from, to: to })=>pos >= from && pos <= to)) {\n                let { from: from, to: to } = this.lineBlockAt(pos);\n                viewports.push(new $071334078f8d3f8a$var$Viewport(from, to));\n            }\n        }\n        this.viewports = viewports.sort((a, b)=>a.from - b.from);\n        this.scaler = this.heightMap.height <= 7000000 /* MaxDOMHeight */  ? $071334078f8d3f8a$var$IdScaler : new $071334078f8d3f8a$var$BigScaler(this.heightOracle, this.heightMap, this.viewports);\n    }\n    updateViewportLines() {\n        this.viewportLines = [];\n        this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (block)=>{\n            this.viewportLines.push(this.scaler.scale == 1 ? block : $071334078f8d3f8a$var$scaleBlock(block, this.scaler));\n        });\n    }\n    update(update, scrollTarget = null) {\n        this.state = update.state;\n        let prevDeco = this.stateDeco;\n        this.stateDeco = this.state.facet($071334078f8d3f8a$var$decorations).filter((d)=>typeof d != \"function\");\n        let contentChanges = update.changedRanges;\n        let heightChanges = $071334078f8d3f8a$var$ChangedRange.extendWithRanges(contentChanges, $071334078f8d3f8a$var$heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : (0, $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c).empty(this.state.doc.length)));\n        let prevHeight = this.heightMap.height;\n        let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);\n        this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);\n        if (this.heightMap.height != prevHeight) update.flags |= 2 /* Height */ ;\n        if (scrollAnchor) {\n            this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);\n            this.scrollAnchorHeight = scrollAnchor.top;\n        } else {\n            this.scrollAnchorPos = -1;\n            this.scrollAnchorHeight = this.heightMap.height;\n        }\n        let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;\n        if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport)) viewport = this.getViewport(0, scrollTarget);\n        let updateLines = !update.changes.empty || update.flags & 2 /* Height */  || viewport.from != this.viewport.from || viewport.to != this.viewport.to;\n        this.viewport = viewport;\n        this.updateForViewport();\n        if (updateLines) this.updateViewportLines();\n        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000) this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));\n        update.flags |= this.computeVisibleRanges();\n        if (scrollTarget) this.scrollTarget = scrollTarget;\n        if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc && !update.state.facet($071334078f8d3f8a$var$nativeSelectionHidden)) this.mustEnforceCursorAssoc = true;\n    }\n    measure(view) {\n        let dom = view.contentDOM, style = window.getComputedStyle(dom);\n        let oracle = this.heightOracle;\n        let whiteSpace = style.whiteSpace;\n        this.defaultTextDirection = style.direction == \"rtl\" ? $071334078f8d3f8a$export$cacd6541cfeeb6c1.RTL : $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR;\n        let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);\n        let domRect = dom.getBoundingClientRect();\n        let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;\n        this.contentDOMHeight = domRect.height;\n        this.mustMeasureContent = false;\n        let result = 0, bias = 0;\n        // Vertical padding\n        let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;\n        if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {\n            this.paddingTop = paddingTop;\n            this.paddingBottom = paddingBottom;\n            result |= 10 /* Height */ ;\n        }\n        if (this.editorWidth != view.scrollDOM.clientWidth) {\n            if (oracle.lineWrapping) measureContent = true;\n            this.editorWidth = view.scrollDOM.clientWidth;\n            result |= 8 /* Geometry */ ;\n        }\n        if (this.scrollTop != view.scrollDOM.scrollTop) {\n            this.scrollAnchorHeight = -1;\n            this.scrollTop = view.scrollDOM.scrollTop;\n        }\n        this.scrolledToBottom = $071334078f8d3f8a$var$isScrolledToBottom(view.scrollDOM);\n        // Pixel viewport\n        let pixelViewport = (this.printing ? $071334078f8d3f8a$var$fullPixelRange : $071334078f8d3f8a$var$visiblePixelRange)(dom, this.paddingTop);\n        let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;\n        this.pixelViewport = pixelViewport;\n        let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;\n        if (inView != this.inView) {\n            this.inView = inView;\n            if (inView) measureContent = true;\n        }\n        if (!this.inView && !this.scrollTarget) return 0;\n        let contentWidth = domRect.width;\n        if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {\n            this.contentDOMWidth = domRect.width;\n            this.editorHeight = view.scrollDOM.clientHeight;\n            result |= 8 /* Geometry */ ;\n        }\n        if (measureContent) {\n            let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);\n            if (oracle.mustRefreshForHeights(lineHeights)) refresh = true;\n            if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {\n                let { lineHeight: lineHeight, charWidth: charWidth, textHeight: textHeight } = view.docView.measureTextSize();\n                refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);\n                if (refresh) {\n                    view.docView.minWidth = 0;\n                    result |= 8 /* Geometry */ ;\n                }\n            }\n            if (dTop > 0 && dBottom > 0) bias = Math.max(dTop, dBottom);\n            else if (dTop < 0 && dBottom < 0) bias = Math.min(dTop, dBottom);\n            oracle.heightChanged = false;\n            for (let vp of this.viewports){\n                let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);\n                this.heightMap = (refresh ? $071334078f8d3f8a$var$HeightMap.empty().applyChanges(this.stateDeco, (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).empty, this.heightOracle, [\n                    new $071334078f8d3f8a$var$ChangedRange(0, 0, 0, view.state.doc.length)\n                ]) : this.heightMap).updateHeight(oracle, 0, refresh, new $071334078f8d3f8a$var$MeasuredHeights(vp.from, heights));\n            }\n            if (oracle.heightChanged) result |= 2 /* Height */ ;\n        }\n        let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);\n        if (viewportChange) this.viewport = this.getViewport(bias, this.scrollTarget);\n        this.updateForViewport();\n        if (result & 2 /* Height */  || viewportChange) this.updateViewportLines();\n        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000) this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));\n        result |= this.computeVisibleRanges();\n        if (this.mustEnforceCursorAssoc) {\n            this.mustEnforceCursorAssoc = false;\n            // This is done in the read stage, because moving the selection\n            // to a line end is going to trigger a layout anyway, so it\n            // can't be a pure write. It should be rare that it does any\n            // writing.\n            view.docView.enforceCursorAssoc();\n        }\n        return result;\n    }\n    get visibleTop() {\n        return this.scaler.fromDOM(this.pixelViewport.top);\n    }\n    get visibleBottom() {\n        return this.scaler.fromDOM(this.pixelViewport.bottom);\n    }\n    getViewport(bias, scrollTarget) {\n        // This will divide VP.Margin between the top and the\n        // bottom, depending on the bias (the change in viewport position\n        // since the last update). It'll hold a number between 0 and 1\n        let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */  / 2));\n        let map = this.heightMap, oracle = this.heightOracle;\n        let { visibleTop: visibleTop, visibleBottom: visibleBottom } = this;\n        let viewport = new $071334078f8d3f8a$var$Viewport(map.lineAt(visibleTop - marginTop * 1000 /* Margin */ , $071334078f8d3f8a$var$QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* Margin */ , $071334078f8d3f8a$var$QueryType.ByHeight, oracle, 0, 0).to);\n        // If scrollTarget is given, make sure the viewport includes that position\n        if (scrollTarget) {\n            let { head: head } = scrollTarget.range;\n            if (head < viewport.from || head > viewport.to) {\n                let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);\n                let block = map.lineAt(head, $071334078f8d3f8a$var$QueryType.ByPos, oracle, 0, 0), topPos;\n                if (scrollTarget.y == \"center\") topPos = (block.top + block.bottom) / 2 - viewHeight / 2;\n                else if (scrollTarget.y == \"start\" || scrollTarget.y == \"nearest\" && head < viewport.from) topPos = block.top;\n                else topPos = block.bottom - viewHeight;\n                viewport = new $071334078f8d3f8a$var$Viewport(map.lineAt(topPos - 500, $071334078f8d3f8a$var$QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 500, $071334078f8d3f8a$var$QueryType.ByHeight, oracle, 0, 0).to);\n            }\n        }\n        return viewport;\n    }\n    mapViewport(viewport, changes) {\n        let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);\n        return new $071334078f8d3f8a$var$Viewport(this.heightMap.lineAt(from, $071334078f8d3f8a$var$QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, $071334078f8d3f8a$var$QueryType.ByPos, this.heightOracle, 0, 0).to);\n    }\n    // Checks if a given viewport covers the visible part of the\n    // document and not too much beyond that.\n    viewportIsAppropriate({ from: from, to: to }, bias = 0) {\n        if (!this.inView) return true;\n        let { top: top } = this.heightMap.lineAt(from, $071334078f8d3f8a$var$QueryType.ByPos, this.heightOracle, 0, 0);\n        let { bottom: bottom } = this.heightMap.lineAt(to, $071334078f8d3f8a$var$QueryType.ByPos, this.heightOracle, 0, 0);\n        let { visibleTop: visibleTop, visibleBottom: visibleBottom } = this;\n        return (from == 0 || top <= visibleTop - Math.max(10 /* MinCoverMargin */ , Math.min(-bias, 250 /* MaxCoverMargin */ ))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10 /* MinCoverMargin */ , Math.min(bias, 250 /* MaxCoverMargin */ ))) && top > visibleTop - 2000 /* Margin */  && bottom < visibleBottom + 2000 /* Margin */ ;\n    }\n    mapLineGaps(gaps, changes) {\n        if (!gaps.length || changes.empty) return gaps;\n        let mapped = [];\n        for (let gap of gaps)if (!changes.touchesRange(gap.from, gap.to)) mapped.push(new $071334078f8d3f8a$var$LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));\n        return mapped;\n    }\n    // Computes positions in the viewport where the start or end of a\n    // line should be hidden, trying to reuse existing line gaps when\n    // appropriate to avoid unneccesary redraws.\n    // Uses crude character-counting for the positioning and sizing,\n    // since actual DOM coordinates aren't always available and\n    // predictable. Relies on generous margins (see LG.Margin) to hide\n    // the artifacts this might produce from the user.\n    ensureLineGaps(current, mayMeasure) {\n        let wrapping = this.heightOracle.lineWrapping;\n        let margin = wrapping ? 10000 /* MarginWrap */  : 2000 /* Margin */ , halfMargin = margin >> 1, doubleMargin = margin << 1;\n        // The non-wrapping logic won't work at all in predominantly right-to-left text.\n        if (this.defaultTextDirection != $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR && !wrapping) return [];\n        let gaps = [];\n        let addGap = (from, to, line, structure)=>{\n            if (to - from < halfMargin) return;\n            let sel = this.state.selection.main, avoid = [\n                sel.from\n            ];\n            if (!sel.empty) avoid.push(sel.to);\n            for (let pos of avoid)if (pos > from && pos < to) {\n                addGap(from, pos - 10 /* SelectionMargin */ , line, structure);\n                addGap(pos + 10 /* SelectionMargin */ , to, line, structure);\n                return;\n            }\n            let gap = $071334078f8d3f8a$var$find(current, (gap)=>gap.from >= line.from && gap.to <= line.to && Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin && !avoid.some((pos)=>gap.from < pos && gap.to > pos));\n            if (!gap) {\n                // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping\n                if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some((r)=>r.from <= to && r.to >= to)) {\n                    let lineStart = mayMeasure.moveToLineBoundary((0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(to), false, true).head;\n                    if (lineStart > from) to = lineStart;\n                }\n                gap = new $071334078f8d3f8a$var$LineGap(from, to, this.gapSize(line, from, to, structure));\n            }\n            gaps.push(gap);\n        };\n        for (let line of this.viewportLines){\n            if (line.length < doubleMargin) continue;\n            let structure = $071334078f8d3f8a$var$lineStructure(line.from, line.to, this.stateDeco);\n            if (structure.total < doubleMargin) continue;\n            let target = this.scrollTarget ? this.scrollTarget.range.head : null;\n            let viewFrom, viewTo;\n            if (wrapping) {\n                let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;\n                let top, bot;\n                if (target != null) {\n                    let targetFrac = $071334078f8d3f8a$var$findFraction(structure, target);\n                    let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;\n                    top = targetFrac - spaceFrac;\n                    bot = targetFrac + spaceFrac;\n                } else {\n                    top = (this.visibleTop - line.top - marginHeight) / line.height;\n                    bot = (this.visibleBottom - line.top + marginHeight) / line.height;\n                }\n                viewFrom = $071334078f8d3f8a$var$findPosition(structure, top);\n                viewTo = $071334078f8d3f8a$var$findPosition(structure, bot);\n            } else {\n                let totalWidth = structure.total * this.heightOracle.charWidth;\n                let marginWidth = margin * this.heightOracle.charWidth;\n                let left, right;\n                if (target != null) {\n                    let targetFrac = $071334078f8d3f8a$var$findFraction(structure, target);\n                    let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;\n                    left = targetFrac - spaceFrac;\n                    right = targetFrac + spaceFrac;\n                } else {\n                    left = (this.pixelViewport.left - marginWidth) / totalWidth;\n                    right = (this.pixelViewport.right + marginWidth) / totalWidth;\n                }\n                viewFrom = $071334078f8d3f8a$var$findPosition(structure, left);\n                viewTo = $071334078f8d3f8a$var$findPosition(structure, right);\n            }\n            if (viewFrom > line.from) addGap(line.from, viewFrom, line, structure);\n            if (viewTo < line.to) addGap(viewTo, line.to, line, structure);\n        }\n        return gaps;\n    }\n    gapSize(line, from, to, structure) {\n        let fraction = $071334078f8d3f8a$var$findFraction(structure, to) - $071334078f8d3f8a$var$findFraction(structure, from);\n        if (this.heightOracle.lineWrapping) return line.height * fraction;\n        else return structure.total * this.heightOracle.charWidth * fraction;\n    }\n    updateLineGaps(gaps) {\n        if (!$071334078f8d3f8a$var$LineGap.same(gaps, this.lineGaps)) {\n            this.lineGaps = gaps;\n            this.lineGapDeco = $071334078f8d3f8a$export$10e30b733df217ea.set(gaps.map((gap)=>gap.draw(this.heightOracle.lineWrapping)));\n        }\n    }\n    computeVisibleRanges() {\n        let deco = this.stateDeco;\n        if (this.lineGaps.length) deco = deco.concat(this.lineGapDeco);\n        let ranges = [];\n        (0, $ccfb9497d8ef598f$export$34cb5241245008dd).spans(deco, this.viewport.from, this.viewport.to, {\n            span (from, to) {\n                ranges.push({\n                    from: from,\n                    to: to\n                });\n            },\n            point () {}\n        }, 20);\n        let changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some((r, i)=>r.from != ranges[i].from || r.to != ranges[i].to);\n        this.visibleRanges = ranges;\n        return changed ? 4 /* Viewport */  : 0;\n    }\n    lineBlockAt(pos) {\n        return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find((b)=>b.from <= pos && b.to >= pos) || $071334078f8d3f8a$var$scaleBlock(this.heightMap.lineAt(pos, $071334078f8d3f8a$var$QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);\n    }\n    lineBlockAtHeight(height) {\n        return $071334078f8d3f8a$var$scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), $071334078f8d3f8a$var$QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);\n    }\n    scrollAnchorAt(scrollTop) {\n        let block = this.lineBlockAtHeight(scrollTop + 8);\n        return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];\n    }\n    elementAtHeight(height) {\n        return $071334078f8d3f8a$var$scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);\n    }\n    get docHeight() {\n        return this.scaler.toDOM(this.heightMap.height);\n    }\n    get contentHeight() {\n        return this.docHeight + this.paddingTop + this.paddingBottom;\n    }\n}\nclass $071334078f8d3f8a$var$Viewport {\n    constructor(from, to){\n        this.from = from;\n        this.to = to;\n    }\n}\nfunction $071334078f8d3f8a$var$lineStructure(from, to, stateDeco) {\n    let ranges = [], pos = from, total = 0;\n    (0, $ccfb9497d8ef598f$export$34cb5241245008dd).spans(stateDeco, from, to, {\n        span () {},\n        point (from, to) {\n            if (from > pos) {\n                ranges.push({\n                    from: pos,\n                    to: from\n                });\n                total += from - pos;\n            }\n            pos = to;\n        }\n    }, 20); // We're only interested in collapsed ranges of a significant size\n    if (pos < to) {\n        ranges.push({\n            from: pos,\n            to: to\n        });\n        total += to - pos;\n    }\n    return {\n        total: total,\n        ranges: ranges\n    };\n}\nfunction $071334078f8d3f8a$var$findPosition({ total: total, ranges: ranges }, ratio) {\n    if (ratio <= 0) return ranges[0].from;\n    if (ratio >= 1) return ranges[ranges.length - 1].to;\n    let dist = Math.floor(total * ratio);\n    for(let i = 0;; i++){\n        let { from: from, to: to } = ranges[i], size = to - from;\n        if (dist <= size) return from + dist;\n        dist -= size;\n    }\n}\nfunction $071334078f8d3f8a$var$findFraction(structure, pos) {\n    let counted = 0;\n    for (let { from: from, to: to } of structure.ranges){\n        if (pos <= to) {\n            counted += pos - from;\n            break;\n        }\n        counted += to - from;\n    }\n    return counted / structure.total;\n}\nfunction $071334078f8d3f8a$var$find(array, f) {\n    for (let val of array)if (f(val)) return val;\n    return undefined;\n}\n// Don't scale when the document height is within the range of what\n// the DOM can handle.\nconst $071334078f8d3f8a$var$IdScaler = {\n    toDOM (n) {\n        return n;\n    },\n    fromDOM (n) {\n        return n;\n    },\n    scale: 1\n};\n// When the height is too big (> VP.MaxDOMHeight), scale down the\n// regions outside the viewports so that the total height is\n// VP.MaxDOMHeight.\nclass $071334078f8d3f8a$var$BigScaler {\n    constructor(oracle, heightMap, viewports){\n        let vpHeight = 0, base = 0, domBase = 0;\n        this.viewports = viewports.map(({ from: from, to: to })=>{\n            let top = heightMap.lineAt(from, $071334078f8d3f8a$var$QueryType.ByPos, oracle, 0, 0).top;\n            let bottom = heightMap.lineAt(to, $071334078f8d3f8a$var$QueryType.ByPos, oracle, 0, 0).bottom;\n            vpHeight += bottom - top;\n            return {\n                from: from,\n                to: to,\n                top: top,\n                bottom: bottom,\n                domTop: 0,\n                domBottom: 0\n            };\n        });\n        this.scale = (7000000 /* MaxDOMHeight */  - vpHeight) / (heightMap.height - vpHeight);\n        for (let obj of this.viewports){\n            obj.domTop = domBase + (obj.top - base) * this.scale;\n            domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);\n            base = obj.bottom;\n        }\n    }\n    toDOM(n) {\n        for(let i = 0, base = 0, domBase = 0;; i++){\n            let vp = i < this.viewports.length ? this.viewports[i] : null;\n            if (!vp || n < vp.top) return domBase + (n - base) * this.scale;\n            if (n <= vp.bottom) return vp.domTop + (n - vp.top);\n            base = vp.bottom;\n            domBase = vp.domBottom;\n        }\n    }\n    fromDOM(n) {\n        for(let i = 0, base = 0, domBase = 0;; i++){\n            let vp = i < this.viewports.length ? this.viewports[i] : null;\n            if (!vp || n < vp.domTop) return base + (n - domBase) / this.scale;\n            if (n <= vp.domBottom) return vp.top + (n - vp.domTop);\n            base = vp.bottom;\n            domBase = vp.domBottom;\n        }\n    }\n}\nfunction $071334078f8d3f8a$var$scaleBlock(block, scaler) {\n    if (scaler.scale == 1) return block;\n    let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);\n    return new $071334078f8d3f8a$export$ddfdc4ccfe9512bd(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map((b)=>$071334078f8d3f8a$var$scaleBlock(b, scaler)) : block._content);\n}\nconst $071334078f8d3f8a$var$theme = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine: (strs)=>strs.join(\" \")\n});\nconst $071334078f8d3f8a$var$darkTheme = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine: (values)=>values.indexOf(true) > -1\n});\nconst $071334078f8d3f8a$var$baseThemeID = /*@__PURE__*/ (0, $fa62f485c41d169a$export$b920c662d2efee20).newName(), $071334078f8d3f8a$var$baseLightID = /*@__PURE__*/ (0, $fa62f485c41d169a$export$b920c662d2efee20).newName(), $071334078f8d3f8a$var$baseDarkID = /*@__PURE__*/ (0, $fa62f485c41d169a$export$b920c662d2efee20).newName();\nconst $071334078f8d3f8a$var$lightDarkIDs = {\n    \"&light\": \".\" + $071334078f8d3f8a$var$baseLightID,\n    \"&dark\": \".\" + $071334078f8d3f8a$var$baseDarkID\n};\nfunction $071334078f8d3f8a$var$buildTheme(main, spec, scopes) {\n    return new (0, $fa62f485c41d169a$export$b920c662d2efee20)(spec, {\n        finish (sel) {\n            return /&/.test(sel) ? sel.replace(/&\\w*/, (m)=>{\n                if (m == \"&\") return main;\n                if (!scopes || !scopes[m]) throw new RangeError(`Unsupported selector: ${m}`);\n                return scopes[m];\n            }) : main + \" \" + sel;\n        }\n    });\n}\nconst $071334078f8d3f8a$var$baseTheme$1 = /*@__PURE__*/ $071334078f8d3f8a$var$buildTheme(\".\" + $071334078f8d3f8a$var$baseThemeID, {\n    \"&\": {\n        position: \"relative !important\",\n        boxSizing: \"border-box\",\n        \"&.cm-focused\": {\n            // Provide a simple default outline to make sure a focused\n            // editor is visually distinct. Can't leave the default behavior\n            // because that will apply to the content element, which is\n            // inside the scrollable container and doesn't include the\n            // gutters. We also can't use an 'auto' outline, since those\n            // are, for some reason, drawn behind the element content, which\n            // will cause things like the active line background to cover\n            // the outline (#297).\n            outline: \"1px dotted #212121\"\n        },\n        display: \"flex !important\",\n        flexDirection: \"column\"\n    },\n    \".cm-scroller\": {\n        display: \"flex !important\",\n        alignItems: \"flex-start !important\",\n        fontFamily: \"monospace\",\n        lineHeight: 1.4,\n        height: \"100%\",\n        overflowX: \"auto\",\n        position: \"relative\",\n        zIndex: 0\n    },\n    \".cm-content\": {\n        margin: 0,\n        flexGrow: 2,\n        flexShrink: 0,\n        display: \"block\",\n        whiteSpace: \"pre\",\n        wordWrap: \"normal\",\n        boxSizing: \"border-box\",\n        padding: \"4px 0\",\n        outline: \"none\",\n        \"&[contenteditable=true]\": {\n            WebkitUserModify: \"read-write-plaintext-only\"\n        }\n    },\n    \".cm-lineWrapping\": {\n        whiteSpace_fallback: \"pre-wrap\",\n        whiteSpace: \"break-spaces\",\n        wordBreak: \"break-word\",\n        overflowWrap: \"anywhere\",\n        flexShrink: 1\n    },\n    \"&light .cm-content\": {\n        caretColor: \"black\"\n    },\n    \"&dark .cm-content\": {\n        caretColor: \"white\"\n    },\n    \".cm-line\": {\n        display: \"block\",\n        padding: \"0 2px 0 6px\"\n    },\n    \".cm-layer\": {\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        contain: \"size style\",\n        \"& > *\": {\n            position: \"absolute\"\n        }\n    },\n    \"&light .cm-selectionBackground\": {\n        background: \"#d9d9d9\"\n    },\n    \"&dark .cm-selectionBackground\": {\n        background: \"#222\"\n    },\n    \"&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground\": {\n        background: \"#d7d4f0\"\n    },\n    \"&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground\": {\n        background: \"#233\"\n    },\n    \".cm-cursorLayer\": {\n        pointerEvents: \"none\"\n    },\n    \"&.cm-focused > .cm-scroller > .cm-cursorLayer\": {\n        animation: \"steps(1) cm-blink 1.2s infinite\"\n    },\n    // Two animations defined so that we can switch between them to\n    // restart the animation without forcing another style\n    // recomputation.\n    \"@keyframes cm-blink\": {\n        \"0%\": {},\n        \"50%\": {\n            opacity: 0\n        },\n        \"100%\": {}\n    },\n    \"@keyframes cm-blink2\": {\n        \"0%\": {},\n        \"50%\": {\n            opacity: 0\n        },\n        \"100%\": {}\n    },\n    \".cm-cursor, .cm-dropCursor\": {\n        borderLeft: \"1.2px solid black\",\n        marginLeft: \"-0.6px\",\n        pointerEvents: \"none\"\n    },\n    \".cm-cursor\": {\n        display: \"none\"\n    },\n    \"&dark .cm-cursor\": {\n        borderLeftColor: \"#444\"\n    },\n    \".cm-dropCursor\": {\n        position: \"absolute\"\n    },\n    \"&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor\": {\n        display: \"block\"\n    },\n    \"&light .cm-activeLine\": {\n        backgroundColor: \"#cceeff44\"\n    },\n    \"&dark .cm-activeLine\": {\n        backgroundColor: \"#99eeff33\"\n    },\n    \"&light .cm-specialChar\": {\n        color: \"red\"\n    },\n    \"&dark .cm-specialChar\": {\n        color: \"#f78\"\n    },\n    \".cm-gutters\": {\n        flexShrink: 0,\n        display: \"flex\",\n        height: \"100%\",\n        boxSizing: \"border-box\",\n        insetInlineStart: 0,\n        zIndex: 200\n    },\n    \"&light .cm-gutters\": {\n        backgroundColor: \"#f5f5f5\",\n        color: \"#6c6c6c\",\n        borderRight: \"1px solid #ddd\"\n    },\n    \"&dark .cm-gutters\": {\n        backgroundColor: \"#333338\",\n        color: \"#ccc\"\n    },\n    \".cm-gutter\": {\n        display: \"flex !important\",\n        flexDirection: \"column\",\n        flexShrink: 0,\n        boxSizing: \"border-box\",\n        minHeight: \"100%\",\n        overflow: \"hidden\"\n    },\n    \".cm-gutterElement\": {\n        boxSizing: \"border-box\"\n    },\n    \".cm-lineNumbers .cm-gutterElement\": {\n        padding: \"0 3px 0 5px\",\n        minWidth: \"20px\",\n        textAlign: \"right\",\n        whiteSpace: \"nowrap\"\n    },\n    \"&light .cm-activeLineGutter\": {\n        backgroundColor: \"#e2f2ff\"\n    },\n    \"&dark .cm-activeLineGutter\": {\n        backgroundColor: \"#222227\"\n    },\n    \".cm-panels\": {\n        boxSizing: \"border-box\",\n        position: \"sticky\",\n        left: 0,\n        right: 0\n    },\n    \"&light .cm-panels\": {\n        backgroundColor: \"#f5f5f5\",\n        color: \"black\"\n    },\n    \"&light .cm-panels-top\": {\n        borderBottom: \"1px solid #ddd\"\n    },\n    \"&light .cm-panels-bottom\": {\n        borderTop: \"1px solid #ddd\"\n    },\n    \"&dark .cm-panels\": {\n        backgroundColor: \"#333338\",\n        color: \"white\"\n    },\n    \".cm-tab\": {\n        display: \"inline-block\",\n        overflow: \"hidden\",\n        verticalAlign: \"bottom\"\n    },\n    \".cm-widgetBuffer\": {\n        verticalAlign: \"text-top\",\n        height: \"1em\",\n        width: 0,\n        display: \"inline\"\n    },\n    \".cm-placeholder\": {\n        color: \"#888\",\n        display: \"inline-block\",\n        verticalAlign: \"top\"\n    },\n    \".cm-highlightSpace:before\": {\n        content: \"attr(data-display)\",\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        color: \"#888\"\n    },\n    \".cm-highlightTab\": {\n        backgroundImage: `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"20\"><path stroke=\"%23888\" stroke-width=\"1\" fill=\"none\" d=\"M1 10H196L190 5M190 15L196 10M197 4L197 16\"/></svg>')`,\n        backgroundSize: \"auto 100%\",\n        backgroundPosition: \"right 90%\",\n        backgroundRepeat: \"no-repeat\"\n    },\n    \".cm-trailingSpace\": {\n        backgroundColor: \"#ff332255\"\n    },\n    \".cm-button\": {\n        verticalAlign: \"middle\",\n        color: \"inherit\",\n        fontSize: \"70%\",\n        padding: \".2em 1em\",\n        borderRadius: \"1px\"\n    },\n    \"&light .cm-button\": {\n        backgroundImage: \"linear-gradient(#eff1f5, #d9d9df)\",\n        border: \"1px solid #888\",\n        \"&:active\": {\n            backgroundImage: \"linear-gradient(#b4b4b4, #d0d3d6)\"\n        }\n    },\n    \"&dark .cm-button\": {\n        backgroundImage: \"linear-gradient(#393939, #111)\",\n        border: \"1px solid #888\",\n        \"&:active\": {\n            backgroundImage: \"linear-gradient(#111, #333)\"\n        }\n    },\n    \".cm-textfield\": {\n        verticalAlign: \"middle\",\n        color: \"inherit\",\n        fontSize: \"70%\",\n        border: \"1px solid silver\",\n        padding: \".2em .5em\"\n    },\n    \"&light .cm-textfield\": {\n        backgroundColor: \"white\"\n    },\n    \"&dark .cm-textfield\": {\n        border: \"1px solid #555\",\n        backgroundColor: \"inherit\"\n    }\n}, $071334078f8d3f8a$var$lightDarkIDs);\nclass $071334078f8d3f8a$var$DOMChange {\n    constructor(view, start, end, typeOver){\n        this.typeOver = typeOver;\n        this.bounds = null;\n        this.text = \"\";\n        let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;\n        if (view.state.readOnly && start > -1) // Ignore changes when the editor is read-only\n        this.newSel = null;\n        else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {\n            let selPoints = iHead || iAnchor ? [] : $071334078f8d3f8a$var$selectionPoints(view);\n            let reader = new $071334078f8d3f8a$var$DOMReader(selPoints, view.state);\n            reader.readRange(this.bounds.startDOM, this.bounds.endDOM);\n            this.text = reader.text;\n            this.newSel = $071334078f8d3f8a$var$selectionFromPoints(selPoints, this.bounds.from);\n        } else {\n            let domSel = view.observer.selectionRange;\n            let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !$071334078f8d3f8a$var$contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);\n            let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !$071334078f8d3f8a$var$contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);\n            this.newSel = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).single(anchor, head);\n        }\n    }\n}\nfunction $071334078f8d3f8a$var$applyDOMChange(view, domChange) {\n    let change;\n    let { newSel: newSel } = domChange, sel = view.state.selection.main;\n    let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;\n    if (domChange.bounds) {\n        let { from: from, to: to } = domChange.bounds;\n        let preferredPos = sel.from, preferredSide = null;\n        // Prefer anchoring to end when Backspace is pressed (or, on\n        // Android, when something was deleted)\n        if (lastKey === 8 || $071334078f8d3f8a$var$browser.android && domChange.text.length < to - from) {\n            preferredPos = sel.to;\n            preferredSide = \"end\";\n        }\n        let diff = $071334078f8d3f8a$var$findDiff(view.state.doc.sliceString(from, to, $071334078f8d3f8a$var$LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);\n        if (diff) {\n            // Chrome inserts two newlines when pressing shift-enter at the\n            // end of a line. DomChange drops one of those.\n            if ($071334078f8d3f8a$var$browser.chrome && lastKey == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == $071334078f8d3f8a$var$LineBreakPlaceholder + $071334078f8d3f8a$var$LineBreakPlaceholder) diff.toB--;\n            change = {\n                from: from + diff.from,\n                to: from + diff.toA,\n                insert: (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).of(domChange.text.slice(diff.from, diff.toB).split($071334078f8d3f8a$var$LineBreakPlaceholder))\n            };\n        }\n    } else if (newSel && (!view.hasFocus && view.state.facet($071334078f8d3f8a$var$editable) || newSel.main.eq(sel))) newSel = null;\n    if (!change && !newSel) return false;\n    if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) // Heuristic to notice typing over a selected character\n    change = {\n        from: sel.from,\n        to: sel.to,\n        insert: view.state.doc.slice(sel.from, sel.to)\n    };\n    else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) // If the change is inside the selection and covers most of it,\n    // assume it is a selection replace (with identical characters at\n    // the start/end not included in the diff)\n    change = {\n        from: sel.from,\n        to: sel.to,\n        insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))\n    };\n    else if (($071334078f8d3f8a$var$browser.mac || $071334078f8d3f8a$var$browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute(\"autocorrect\") == \"off\") {\n        // Detect insert-period-on-double-space Mac and Android behavior,\n        // and transform it into a regular space insert.\n        if (newSel && change.insert.length == 2) newSel = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).single(newSel.main.anchor - 1, newSel.main.head - 1);\n        change = {\n            from: sel.from,\n            to: sel.to,\n            insert: (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).of([\n                \" \"\n            ])\n        };\n    } else if ($071334078f8d3f8a$var$browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == \"\\n \" && view.lineWrapping) {\n        // In Chrome, if you insert a space at the start of a wrapped\n        // line, it will actually insert a newline and a space, causing a\n        // bogus new line to be created in CodeMirror (#968)\n        if (newSel) newSel = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).single(newSel.main.anchor - 1, newSel.main.head - 1);\n        change = {\n            from: sel.from,\n            to: sel.to,\n            insert: (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).of([\n                \" \"\n            ])\n        };\n    }\n    if (change) {\n        let startState = view.state;\n        if ($071334078f8d3f8a$var$browser.ios && view.inputState.flushIOSKey(view)) return true;\n        // Android browsers don't fire reasonable key events for enter,\n        // backspace, or delete. So this detects changes that look like\n        // they're caused by those keys, and reinterprets them as key\n        // events. (Some of these keys are also handled by beforeinput\n        // events and the pendingAndroidKey mechanism, but that's not\n        // reliable in all situations.)\n        if ($071334078f8d3f8a$var$browser.android && (change.from == sel.from && change.to == sel.to && change.insert.length == 1 && change.insert.lines == 2 && $071334078f8d3f8a$var$dispatchKey(view.contentDOM, \"Enter\", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from) && $071334078f8d3f8a$var$dispatchKey(view.contentDOM, \"Backspace\", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && $071334078f8d3f8a$var$dispatchKey(view.contentDOM, \"Delete\", 46))) return true;\n        let text = change.insert.toString();\n        if (view.state.facet($071334078f8d3f8a$var$inputHandler).some((h)=>h(view, change.from, change.to, text))) return true;\n        if (view.inputState.composing >= 0) view.inputState.composing++;\n        let tr;\n        if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {\n            let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : \"\";\n            let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : \"\";\n            tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));\n        } else {\n            let changes = startState.changes(change);\n            let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;\n            // Try to apply a composition change to all cursors\n            if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {\n                let replaced = view.state.sliceDoc(change.from, change.to);\n                let composition = $071334078f8d3f8a$var$findCompositionNode(view) || view.state.doc.lineAt(sel.head);\n                let offset = sel.to - change.to, size = sel.to - sel.from;\n                tr = startState.changeByRange((range)=>{\n                    if (range.from == sel.from && range.to == sel.to) return {\n                        changes: changes,\n                        range: mainSel || range.map(changes)\n                    };\n                    let to = range.to - offset, from = to - replaced.length;\n                    if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced || // Unfortunately, there's no way to make multiple\n                    // changes in the same node work without aborting\n                    // composition, so cursors in the composition range are\n                    // ignored.\n                    composition && range.to >= composition.from && range.from <= composition.to) return {\n                        range: range\n                    };\n                    let rangeChanges = startState.changes({\n                        from: from,\n                        to: to,\n                        insert: change.insert\n                    }), selOff = range.to - sel.to;\n                    return {\n                        changes: rangeChanges,\n                        range: !mainSel ? range.map(rangeChanges) : (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))\n                    };\n                });\n            } else tr = {\n                changes: changes,\n                selection: mainSel && startState.selection.replaceRange(mainSel)\n            };\n        }\n        let userEvent = \"input.type\";\n        if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {\n            view.inputState.compositionPendingChange = false;\n            userEvent += \".compose\";\n            if (view.inputState.compositionFirstChange) {\n                userEvent += \".start\";\n                view.inputState.compositionFirstChange = false;\n            }\n        }\n        view.dispatch(tr, {\n            scrollIntoView: true,\n            userEvent: userEvent\n        });\n        return true;\n    } else if (newSel && !newSel.main.eq(sel)) {\n        let scrollIntoView = false, userEvent = \"select\";\n        if (view.inputState.lastSelectionTime > Date.now() - 50) {\n            if (view.inputState.lastSelectionOrigin == \"select\") scrollIntoView = true;\n            userEvent = view.inputState.lastSelectionOrigin;\n        }\n        view.dispatch({\n            selection: newSel,\n            scrollIntoView: scrollIntoView,\n            userEvent: userEvent\n        });\n        return true;\n    } else return false;\n}\nfunction $071334078f8d3f8a$var$findDiff(a, b, preferredPos, preferredSide) {\n    let minLen = Math.min(a.length, b.length);\n    let from = 0;\n    while(from < minLen && a.charCodeAt(from) == b.charCodeAt(from))from++;\n    if (from == minLen && a.length == b.length) return null;\n    let toA = a.length, toB = b.length;\n    while(toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)){\n        toA--;\n        toB--;\n    }\n    if (preferredSide == \"end\") {\n        let adjust = Math.max(0, from - Math.min(toA, toB));\n        preferredPos -= toA + adjust - from;\n    }\n    if (toA < from && a.length < b.length) {\n        let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;\n        from -= move;\n        toB = from + (toB - toA);\n        toA = from;\n    } else if (toB < from) {\n        let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;\n        from -= move;\n        toA = from + (toA - toB);\n        toB = from;\n    }\n    return {\n        from: from,\n        toA: toA,\n        toB: toB\n    };\n}\nfunction $071334078f8d3f8a$var$selectionPoints(view) {\n    let result = [];\n    if (view.root.activeElement != view.contentDOM) return result;\n    let { anchorNode: anchorNode, anchorOffset: anchorOffset, focusNode: focusNode, focusOffset: focusOffset } = view.observer.selectionRange;\n    if (anchorNode) {\n        result.push(new $071334078f8d3f8a$var$DOMPoint(anchorNode, anchorOffset));\n        if (focusNode != anchorNode || focusOffset != anchorOffset) result.push(new $071334078f8d3f8a$var$DOMPoint(focusNode, focusOffset));\n    }\n    return result;\n}\nfunction $071334078f8d3f8a$var$selectionFromPoints(points, base) {\n    if (points.length == 0) return null;\n    let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;\n    return anchor > -1 && head > -1 ? (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).single(anchor + base, head + base) : null;\n}\nconst $071334078f8d3f8a$var$observeOptions = {\n    childList: true,\n    characterData: true,\n    subtree: true,\n    attributes: true,\n    characterDataOldValue: true\n};\n// IE11 has very broken mutation observers, so we also listen to\n// DOMCharacterDataModified there\nconst $071334078f8d3f8a$var$useCharData = $071334078f8d3f8a$var$browser.ie && $071334078f8d3f8a$var$browser.ie_version <= 11;\nclass $071334078f8d3f8a$var$DOMObserver {\n    constructor(view){\n        this.view = view;\n        this.active = false;\n        // The known selection. Kept in our own object, as opposed to just\n        // directly accessing the selection because:\n        //  - Safari doesn't report the right selection in shadow DOM\n        //  - Reading from the selection forces a DOM layout\n        //  - This way, we can ignore selectionchange events if we have\n        //    already seen the 'new' selection\n        this.selectionRange = new $071334078f8d3f8a$var$DOMSelectionState;\n        // Set when a selection change is detected, cleared on flush\n        this.selectionChanged = false;\n        this.delayedFlush = -1;\n        this.resizeTimeout = -1;\n        this.queue = [];\n        this.delayedAndroidKey = null;\n        this.flushingAndroidKey = -1;\n        this.lastChange = 0;\n        this.scrollTargets = [];\n        this.intersection = null;\n        this.resizeScroll = null;\n        this.resizeContent = null;\n        this.intersecting = false;\n        this.gapIntersection = null;\n        this.gaps = [];\n        // Timeout for scheduling check of the parents that need scroll handlers\n        this.parentCheck = -1;\n        this.dom = view.contentDOM;\n        this.observer = new MutationObserver((mutations)=>{\n            for (let mut of mutations)this.queue.push(mut);\n            // IE11 will sometimes (on typing over a selection or\n            // backspacing out a single character text node) call the\n            // observer callback before actually updating the DOM.\n            //\n            // Unrelatedly, iOS Safari will, when ending a composition,\n            // sometimes first clear it, deliver the mutations, and then\n            // reinsert the finished text. CodeMirror's handling of the\n            // deletion will prevent the reinsertion from happening,\n            // breaking composition.\n            if (($071334078f8d3f8a$var$browser.ie && $071334078f8d3f8a$var$browser.ie_version <= 11 || $071334078f8d3f8a$var$browser.ios && view.composing) && mutations.some((m)=>m.type == \"childList\" && m.removedNodes.length || m.type == \"characterData\" && m.oldValue.length > m.target.nodeValue.length)) this.flushSoon();\n            else this.flush();\n        });\n        if ($071334078f8d3f8a$var$useCharData) this.onCharData = (event)=>{\n            this.queue.push({\n                target: event.target,\n                type: \"characterData\",\n                oldValue: event.prevValue\n            });\n            this.flushSoon();\n        };\n        this.onSelectionChange = this.onSelectionChange.bind(this);\n        this.onResize = this.onResize.bind(this);\n        this.onPrint = this.onPrint.bind(this);\n        this.onScroll = this.onScroll.bind(this);\n        if (typeof ResizeObserver == \"function\") {\n            this.resizeScroll = new ResizeObserver(()=>{\n                var _a;\n                if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75) this.onResize();\n            });\n            this.resizeScroll.observe(view.scrollDOM);\n            this.resizeContent = new ResizeObserver(()=>this.view.requestMeasure());\n            this.resizeContent.observe(view.contentDOM);\n        }\n        this.addWindowListeners(this.win = view.win);\n        this.start();\n        if (typeof IntersectionObserver == \"function\") {\n            this.intersection = new IntersectionObserver((entries)=>{\n                if (this.parentCheck < 0) this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);\n                if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {\n                    this.intersecting = !this.intersecting;\n                    if (this.intersecting != this.view.inView) this.onScrollChanged(document.createEvent(\"Event\"));\n                }\n            }, {\n                threshold: [\n                    0,\n                    .001\n                ]\n            });\n            this.intersection.observe(this.dom);\n            this.gapIntersection = new IntersectionObserver((entries)=>{\n                if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0) this.onScrollChanged(document.createEvent(\"Event\"));\n            }, {});\n        }\n        this.listenForScroll();\n        this.readSelectionRange();\n    }\n    onScrollChanged(e) {\n        this.view.inputState.runScrollHandlers(this.view, e);\n        if (this.intersecting) this.view.measure();\n    }\n    onScroll(e) {\n        if (this.intersecting) this.flush(false);\n        this.onScrollChanged(e);\n    }\n    onResize() {\n        if (this.resizeTimeout < 0) this.resizeTimeout = setTimeout(()=>{\n            this.resizeTimeout = -1;\n            this.view.requestMeasure();\n        }, 50);\n    }\n    onPrint() {\n        this.view.viewState.printing = true;\n        this.view.measure();\n        setTimeout(()=>{\n            this.view.viewState.printing = false;\n            this.view.requestMeasure();\n        }, 500);\n    }\n    updateGaps(gaps) {\n        if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i)=>g != gaps[i]))) {\n            this.gapIntersection.disconnect();\n            for (let gap of gaps)this.gapIntersection.observe(gap);\n            this.gaps = gaps;\n        }\n    }\n    onSelectionChange(event) {\n        let wasChanged = this.selectionChanged;\n        if (!this.readSelectionRange() || this.delayedAndroidKey) return;\n        let { view: view } = this, sel = this.selectionRange;\n        if (view.state.facet($071334078f8d3f8a$var$editable) ? view.root.activeElement != this.dom : !$071334078f8d3f8a$var$hasSelection(view.dom, sel)) return;\n        let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);\n        if (context && context.ignoreEvent(event)) {\n            if (!wasChanged) this.selectionChanged = false;\n            return;\n        }\n        // Deletions on IE11 fire their events in the wrong order, giving\n        // us a selection change event before the DOM changes are\n        // reported.\n        // Chrome Android has a similar issue when backspacing out a\n        // selection (#645).\n        if (($071334078f8d3f8a$var$browser.ie && $071334078f8d3f8a$var$browser.ie_version <= 11 || $071334078f8d3f8a$var$browser.android && $071334078f8d3f8a$var$browser.chrome) && !view.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)\n        sel.focusNode && $071334078f8d3f8a$var$isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset)) this.flushSoon();\n        else this.flush(false);\n    }\n    readSelectionRange() {\n        let { view: view } = this;\n        // The Selection object is broken in shadow roots in Safari. See\n        // https://github.com/codemirror/dev/issues/414\n        let range = $071334078f8d3f8a$var$browser.safari && view.root.nodeType == 11 && $071334078f8d3f8a$var$deepActiveElement(this.dom.ownerDocument) == this.dom && $071334078f8d3f8a$var$safariSelectionRangeHack(this.view) || $071334078f8d3f8a$var$getSelection(view.root);\n        if (!range || this.selectionRange.eq(range)) return false;\n        let local = $071334078f8d3f8a$var$hasSelection(this.dom, range);\n        // Detect the situation where the browser has, on focus, moved the\n        // selection to the start of the content element. Reset it to the\n        // position from the editor state.\n        if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && $071334078f8d3f8a$var$atElementStart(this.dom, range)) {\n            this.view.inputState.lastFocusTime = 0;\n            view.docView.updateSelection();\n            return false;\n        }\n        this.selectionRange.setRange(range);\n        if (local) this.selectionChanged = true;\n        return true;\n    }\n    setSelectionRange(anchor, head) {\n        this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);\n        this.selectionChanged = false;\n    }\n    clearSelectionRange() {\n        this.selectionRange.set(null, 0, null, 0);\n    }\n    listenForScroll() {\n        this.parentCheck = -1;\n        let i = 0, changed = null;\n        for(let dom = this.dom; dom;){\n            if (dom.nodeType == 1) {\n                if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom) i++;\n                else if (!changed) changed = this.scrollTargets.slice(0, i);\n                if (changed) changed.push(dom);\n                dom = dom.assignedSlot || dom.parentNode;\n            } else if (dom.nodeType == 11) dom = dom.host;\n            else break;\n        }\n        if (i < this.scrollTargets.length && !changed) changed = this.scrollTargets.slice(0, i);\n        if (changed) {\n            for (let dom of this.scrollTargets)dom.removeEventListener(\"scroll\", this.onScroll);\n            for (let dom of this.scrollTargets = changed)dom.addEventListener(\"scroll\", this.onScroll);\n        }\n    }\n    ignore(f) {\n        if (!this.active) return f();\n        try {\n            this.stop();\n            return f();\n        } finally{\n            this.start();\n            this.clear();\n        }\n    }\n    start() {\n        if (this.active) return;\n        this.observer.observe(this.dom, $071334078f8d3f8a$var$observeOptions);\n        if ($071334078f8d3f8a$var$useCharData) this.dom.addEventListener(\"DOMCharacterDataModified\", this.onCharData);\n        this.active = true;\n    }\n    stop() {\n        if (!this.active) return;\n        this.active = false;\n        this.observer.disconnect();\n        if ($071334078f8d3f8a$var$useCharData) this.dom.removeEventListener(\"DOMCharacterDataModified\", this.onCharData);\n    }\n    // Throw away any pending changes\n    clear() {\n        this.processRecords();\n        this.queue.length = 0;\n        this.selectionChanged = false;\n    }\n    // Chrome Android, especially in combination with GBoard, not only\n    // doesn't reliably fire regular key events, but also often\n    // surrounds the effect of enter or backspace with a bunch of\n    // composition events that, when interrupted, cause text duplication\n    // or other kinds of corruption. This hack makes the editor back off\n    // from handling DOM changes for a moment when such a key is\n    // detected (via beforeinput or keydown), and then tries to flush\n    // them or, if that has no effect, dispatches the given key.\n    delayAndroidKey(key, keyCode) {\n        var _a;\n        if (!this.delayedAndroidKey) {\n            let flush = ()=>{\n                let key = this.delayedAndroidKey;\n                if (key) {\n                    this.clearDelayedAndroidKey();\n                    this.view.inputState.lastKeyCode = key.keyCode;\n                    this.view.inputState.lastKeyTime = Date.now();\n                    let flushed = this.flush();\n                    if (!flushed && key.force) $071334078f8d3f8a$var$dispatchKey(this.dom, key.key, key.keyCode);\n                }\n            };\n            this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);\n        }\n        // Since backspace beforeinput is sometimes signalled spuriously,\n        // Enter always takes precedence.\n        if (!this.delayedAndroidKey || key == \"Enter\") this.delayedAndroidKey = {\n            key: key,\n            keyCode: keyCode,\n            // Only run the key handler when no changes are detected if\n            // this isn't coming right after another change, in which case\n            // it is probably part of a weird chain of updates, and should\n            // be ignored if it returns the DOM to its previous state.\n            force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)\n        };\n    }\n    clearDelayedAndroidKey() {\n        this.win.cancelAnimationFrame(this.flushingAndroidKey);\n        this.delayedAndroidKey = null;\n        this.flushingAndroidKey = -1;\n    }\n    flushSoon() {\n        if (this.delayedFlush < 0) this.delayedFlush = this.view.win.requestAnimationFrame(()=>{\n            this.delayedFlush = -1;\n            this.flush();\n        });\n    }\n    forceFlush() {\n        if (this.delayedFlush >= 0) {\n            this.view.win.cancelAnimationFrame(this.delayedFlush);\n            this.delayedFlush = -1;\n        }\n        this.flush();\n    }\n    pendingRecords() {\n        for (let mut of this.observer.takeRecords())this.queue.push(mut);\n        return this.queue;\n    }\n    processRecords() {\n        let records = this.pendingRecords();\n        if (records.length) this.queue = [];\n        let from = -1, to = -1, typeOver = false;\n        for (let record of records){\n            let range = this.readMutation(record);\n            if (!range) continue;\n            if (range.typeOver) typeOver = true;\n            if (from == -1) ({ from: from, to: to } = range);\n            else {\n                from = Math.min(range.from, from);\n                to = Math.max(range.to, to);\n            }\n        }\n        return {\n            from: from,\n            to: to,\n            typeOver: typeOver\n        };\n    }\n    readChange() {\n        let { from: from, to: to, typeOver: typeOver } = this.processRecords();\n        let newSel = this.selectionChanged && $071334078f8d3f8a$var$hasSelection(this.dom, this.selectionRange);\n        if (from < 0 && !newSel) return null;\n        if (from > -1) this.lastChange = Date.now();\n        this.view.inputState.lastFocusTime = 0;\n        this.selectionChanged = false;\n        return new $071334078f8d3f8a$var$DOMChange(this.view, from, to, typeOver);\n    }\n    // Apply pending changes, if any\n    flush(readSelection = true) {\n        // Completely hold off flushing when pending keys are set—the code\n        // managing those will make sure processRecords is called and the\n        // view is resynchronized after\n        if (this.delayedFlush >= 0 || this.delayedAndroidKey) return false;\n        if (readSelection) this.readSelectionRange();\n        let domChange = this.readChange();\n        if (!domChange) return false;\n        let startState = this.view.state;\n        let handled = $071334078f8d3f8a$var$applyDOMChange(this.view, domChange);\n        // The view wasn't updated\n        if (this.view.state == startState) this.view.update([]);\n        return handled;\n    }\n    readMutation(rec) {\n        let cView = this.view.docView.nearest(rec.target);\n        if (!cView || cView.ignoreMutation(rec)) return null;\n        cView.markDirty(rec.type == \"attributes\");\n        if (rec.type == \"attributes\") cView.flags |= 4 /* AttrsDirty */ ;\n        if (rec.type == \"childList\") {\n            let childBefore = $071334078f8d3f8a$var$findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);\n            let childAfter = $071334078f8d3f8a$var$findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);\n            return {\n                from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,\n                to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,\n                typeOver: false\n            };\n        } else if (rec.type == \"characterData\") return {\n            from: cView.posAtStart,\n            to: cView.posAtEnd,\n            typeOver: rec.target.nodeValue == rec.oldValue\n        };\n        else return null;\n    }\n    setWindow(win) {\n        if (win != this.win) {\n            this.removeWindowListeners(this.win);\n            this.win = win;\n            this.addWindowListeners(this.win);\n        }\n    }\n    addWindowListeners(win) {\n        win.addEventListener(\"resize\", this.onResize);\n        win.addEventListener(\"beforeprint\", this.onPrint);\n        win.addEventListener(\"scroll\", this.onScroll);\n        win.document.addEventListener(\"selectionchange\", this.onSelectionChange);\n    }\n    removeWindowListeners(win) {\n        win.removeEventListener(\"scroll\", this.onScroll);\n        win.removeEventListener(\"resize\", this.onResize);\n        win.removeEventListener(\"beforeprint\", this.onPrint);\n        win.document.removeEventListener(\"selectionchange\", this.onSelectionChange);\n    }\n    destroy() {\n        var _a, _b, _c, _d;\n        this.stop();\n        (_a = this.intersection) === null || _a === void 0 || _a.disconnect();\n        (_b = this.gapIntersection) === null || _b === void 0 || _b.disconnect();\n        (_c = this.resizeScroll) === null || _c === void 0 || _c.disconnect();\n        (_d = this.resizeContent) === null || _d === void 0 || _d.disconnect();\n        for (let dom of this.scrollTargets)dom.removeEventListener(\"scroll\", this.onScroll);\n        this.removeWindowListeners(this.win);\n        clearTimeout(this.parentCheck);\n        clearTimeout(this.resizeTimeout);\n        this.win.cancelAnimationFrame(this.delayedFlush);\n        this.win.cancelAnimationFrame(this.flushingAndroidKey);\n    }\n}\nfunction $071334078f8d3f8a$var$findChild(cView, dom, dir) {\n    while(dom){\n        let curView = $071334078f8d3f8a$var$ContentView.get(dom);\n        if (curView && curView.parent == cView) return curView;\n        let parent = dom.parentNode;\n        dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;\n    }\n    return null;\n}\n// Used to work around a Safari Selection/shadow DOM bug (#414)\nfunction $071334078f8d3f8a$var$safariSelectionRangeHack(view) {\n    let found = null;\n    // Because Safari (at least in 2018-2021) doesn't provide regular\n    // access to the selection inside a shadowroot, we have to perform a\n    // ridiculous hack to get at it—using `execCommand` to trigger a\n    // `beforeInput` event so that we can read the target range from the\n    // event.\n    function read(event) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        found = event.getTargetRanges()[0];\n    }\n    view.contentDOM.addEventListener(\"beforeinput\", read, true);\n    view.dom.ownerDocument.execCommand(\"indent\");\n    view.contentDOM.removeEventListener(\"beforeinput\", read, true);\n    if (!found) return null;\n    let anchorNode = found.startContainer, anchorOffset = found.startOffset;\n    let focusNode = found.endContainer, focusOffset = found.endOffset;\n    let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);\n    // Since such a range doesn't distinguish between anchor and head,\n    // use a heuristic that flips it around if its end matches the\n    // current anchor.\n    if ($071334078f8d3f8a$var$isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset)) [anchorNode, anchorOffset, focusNode, focusOffset] = [\n        focusNode,\n        focusOffset,\n        anchorNode,\n        anchorOffset\n    ];\n    return {\n        anchorNode: anchorNode,\n        anchorOffset: anchorOffset,\n        focusNode: focusNode,\n        focusOffset: focusOffset\n    };\n}\n// The editor's update state machine looks something like this:\n//\n//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle\n//                                         ↑      ↓\n//                                         Updating (measure)\n//\n// The difference between 'Idle' and 'Idle (unchecked)' lies in\n// whether a layout check has been scheduled. A regular update through\n// the `update` method updates the DOM in a write-only fashion, and\n// relies on a check (scheduled with `requestAnimationFrame`) to make\n// sure everything is where it should be and the viewport covers the\n// visible code. That check continues to measure and then optionally\n// update until it reaches a coherent state.\n/**\nAn editor view represents the editor's user interface. It holds\nthe editable DOM surface, and possibly other elements such as the\nline number gutter. It handles events and dispatches state\ntransactions for editing actions.\n*/ class $071334078f8d3f8a$export$eece2fccabbb77c5 {\n    /**\n    Construct a new view. You'll want to either provide a `parent`\n    option, or put `view.dom` into your document after creating a\n    view, so that the user can see the editor.\n    */ constructor(config = {}){\n        this.plugins = [];\n        this.pluginMap = new Map;\n        this.editorAttrs = {};\n        this.contentAttrs = {};\n        this.bidiCache = [];\n        this.destroyed = false;\n        /**\n        @internal\n        */ this.updateState = 2 /* Updating */ ;\n        /**\n        @internal\n        */ this.measureScheduled = -1;\n        /**\n        @internal\n        */ this.measureRequests = [];\n        this.contentDOM = document.createElement(\"div\");\n        this.scrollDOM = document.createElement(\"div\");\n        this.scrollDOM.tabIndex = -1;\n        this.scrollDOM.className = \"cm-scroller\";\n        this.scrollDOM.appendChild(this.contentDOM);\n        this.announceDOM = document.createElement(\"div\");\n        this.announceDOM.style.cssText = \"position: fixed; top: -10000px\";\n        this.announceDOM.setAttribute(\"aria-live\", \"polite\");\n        this.dom = document.createElement(\"div\");\n        this.dom.appendChild(this.announceDOM);\n        this.dom.appendChild(this.scrollDOM);\n        this._dispatch = config.dispatch || ((tr)=>this.update([\n                tr\n            ]));\n        this.dispatch = this.dispatch.bind(this);\n        this._root = config.root || $071334078f8d3f8a$var$getRoot(config.parent) || document;\n        this.viewState = new $071334078f8d3f8a$var$ViewState(config.state || (0, $ccfb9497d8ef598f$export$afa855cbfaff27f2).create(config));\n        this.plugins = this.state.facet($071334078f8d3f8a$var$viewPlugin).map((spec)=>new $071334078f8d3f8a$var$PluginInstance(spec));\n        for (let plugin of this.plugins)plugin.update(this);\n        this.observer = new $071334078f8d3f8a$var$DOMObserver(this);\n        this.inputState = new $071334078f8d3f8a$var$InputState(this);\n        this.inputState.ensureHandlers(this, this.plugins);\n        this.docView = new $071334078f8d3f8a$var$DocView(this);\n        this.mountStyles();\n        this.updateAttrs();\n        this.updateState = 0 /* Idle */ ;\n        this.requestMeasure();\n        if (config.parent) config.parent.appendChild(this.dom);\n    }\n    /**\n    The current editor state.\n    */ get state() {\n        return this.viewState.state;\n    }\n    /**\n    To be able to display large documents without consuming too much\n    memory or overloading the browser, CodeMirror only draws the\n    code that is visible (plus a margin around it) to the DOM. This\n    property tells you the extent of the current drawn viewport, in\n    document positions.\n    */ get viewport() {\n        return this.viewState.viewport;\n    }\n    /**\n    When there are, for example, large collapsed ranges in the\n    viewport, its size can be a lot bigger than the actual visible\n    content. Thus, if you are doing something like styling the\n    content in the viewport, it is preferable to only do so for\n    these ranges, which are the subset of the viewport that is\n    actually drawn.\n    */ get visibleRanges() {\n        return this.viewState.visibleRanges;\n    }\n    /**\n    Returns false when the editor is entirely scrolled out of view\n    or otherwise hidden.\n    */ get inView() {\n        return this.viewState.inView;\n    }\n    /**\n    Indicates whether the user is currently composing text via\n    [IME](https://en.wikipedia.org/wiki/Input_method), and at least\n    one change has been made in the current composition.\n    */ get composing() {\n        return this.inputState.composing > 0;\n    }\n    /**\n    Indicates whether the user is currently in composing state. Note\n    that on some platforms, like Android, this will be the case a\n    lot, since just putting the cursor on a word starts a\n    composition there.\n    */ get compositionStarted() {\n        return this.inputState.composing >= 0;\n    }\n    /**\n    The document or shadow root that the view lives in.\n    */ get root() {\n        return this._root;\n    }\n    /**\n    @internal\n    */ get win() {\n        return this.dom.ownerDocument.defaultView || window;\n    }\n    dispatch(...input) {\n        let tr = input.length == 1 && input[0] instanceof (0, $ccfb9497d8ef598f$export$febc5573c75cefb0) ? input[0] : this.state.update(...input);\n        this._dispatch(tr, this);\n    }\n    /**\n    Update the view for the given array of transactions. This will\n    update the visible document and selection to match the state\n    produced by the transactions, and notify view plugins of the\n    change. You should usually call\n    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this\n    as a primitive.\n    */ update(transactions) {\n        if (this.updateState != 0 /* Idle */ ) throw new Error(\"Calls to EditorView.update are not allowed while an update is in progress\");\n        let redrawn = false, attrsChanged = false, update;\n        let state = this.state;\n        for (let tr of transactions){\n            if (tr.startState != state) throw new RangeError(\"Trying to update state with a transaction that doesn't start from the previous state.\");\n            state = tr.state;\n        }\n        if (this.destroyed) {\n            this.viewState.state = state;\n            return;\n        }\n        let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;\n        if (transactions.some((tr)=>tr.annotation($071334078f8d3f8a$var$isFocusChange))) {\n            this.inputState.notifiedFocused = focus;\n            // If a focus-change transaction is being dispatched, set this update flag.\n            focusFlag = 1 /* Focus */ ;\n        } else if (focus != this.inputState.notifiedFocused) {\n            this.inputState.notifiedFocused = focus;\n            // Schedule a separate focus transaction if necessary, otherwise\n            // add a flag to this update\n            dispatchFocus = $071334078f8d3f8a$var$focusChangeTransaction(state, focus);\n            if (!dispatchFocus) focusFlag = 1 /* Focus */ ;\n        }\n        // If there was a pending DOM change, eagerly read it and try to\n        // apply it after the given transactions.\n        let pendingKey = this.observer.delayedAndroidKey, domChange = null;\n        if (pendingKey) {\n            this.observer.clearDelayedAndroidKey();\n            domChange = this.observer.readChange();\n            // Only try to apply DOM changes if the transactions didn't\n            // change the doc or selection.\n            if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection)) domChange = null;\n        } else this.observer.clear();\n        // When the phrases change, redraw the editor\n        if (state.facet((0, $ccfb9497d8ef598f$export$afa855cbfaff27f2).phrases) != this.state.facet((0, $ccfb9497d8ef598f$export$afa855cbfaff27f2).phrases)) return this.setState(state);\n        update = $071334078f8d3f8a$export$b5b084f95c87edf7.create(this, state, transactions);\n        update.flags |= focusFlag;\n        let scrollTarget = this.viewState.scrollTarget;\n        try {\n            this.updateState = 2 /* Updating */ ;\n            for (let tr of transactions){\n                if (scrollTarget) scrollTarget = scrollTarget.map(tr.changes);\n                if (tr.scrollIntoView) {\n                    let { main: main } = tr.state.selection;\n                    scrollTarget = new $071334078f8d3f8a$var$ScrollTarget(main.empty ? main : (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(main.head, main.head > main.anchor ? -1 : 1));\n                }\n                for (let e of tr.effects)if (e.is($071334078f8d3f8a$var$scrollIntoView)) scrollTarget = e.value;\n            }\n            this.viewState.update(update, scrollTarget);\n            this.bidiCache = $071334078f8d3f8a$var$CachedOrder.update(this.bidiCache, update.changes);\n            if (!update.empty) {\n                this.updatePlugins(update);\n                this.inputState.update(update);\n            }\n            redrawn = this.docView.update(update);\n            if (this.state.facet($071334078f8d3f8a$var$styleModule) != this.styleModules) this.mountStyles();\n            attrsChanged = this.updateAttrs();\n            this.showAnnouncements(transactions);\n            this.docView.updateSelection(redrawn, transactions.some((tr)=>tr.isUserEvent(\"select.pointer\")));\n        } finally{\n            this.updateState = 0 /* Idle */ ;\n        }\n        if (update.startState.facet($071334078f8d3f8a$var$theme) != update.state.facet($071334078f8d3f8a$var$theme)) this.viewState.mustMeasureContent = true;\n        if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) this.requestMeasure();\n        if (!update.empty) for (let listener of this.state.facet($071334078f8d3f8a$var$updateListener))listener(update);\n        if (dispatchFocus || domChange) Promise.resolve().then(()=>{\n            if (dispatchFocus && this.state == dispatchFocus.startState) this.dispatch(dispatchFocus);\n            if (domChange) {\n                if (!$071334078f8d3f8a$var$applyDOMChange(this, domChange) && pendingKey.force) $071334078f8d3f8a$var$dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);\n            }\n        });\n    }\n    /**\n    Reset the view to the given state. (This will cause the entire\n    document to be redrawn and all view plugins to be reinitialized,\n    so you should probably only use it when the new state isn't\n    derived from the old state. Otherwise, use\n    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)\n    */ setState(newState) {\n        if (this.updateState != 0 /* Idle */ ) throw new Error(\"Calls to EditorView.setState are not allowed while an update is in progress\");\n        if (this.destroyed) {\n            this.viewState.state = newState;\n            return;\n        }\n        this.updateState = 2 /* Updating */ ;\n        let hadFocus = this.hasFocus;\n        try {\n            for (let plugin of this.plugins)plugin.destroy(this);\n            this.viewState = new $071334078f8d3f8a$var$ViewState(newState);\n            this.plugins = newState.facet($071334078f8d3f8a$var$viewPlugin).map((spec)=>new $071334078f8d3f8a$var$PluginInstance(spec));\n            this.pluginMap.clear();\n            for (let plugin of this.plugins)plugin.update(this);\n            this.docView = new $071334078f8d3f8a$var$DocView(this);\n            this.inputState.ensureHandlers(this, this.plugins);\n            this.mountStyles();\n            this.updateAttrs();\n            this.bidiCache = [];\n        } finally{\n            this.updateState = 0 /* Idle */ ;\n        }\n        if (hadFocus) this.focus();\n        this.requestMeasure();\n    }\n    updatePlugins(update) {\n        let prevSpecs = update.startState.facet($071334078f8d3f8a$var$viewPlugin), specs = update.state.facet($071334078f8d3f8a$var$viewPlugin);\n        if (prevSpecs != specs) {\n            let newPlugins = [];\n            for (let spec of specs){\n                let found = prevSpecs.indexOf(spec);\n                if (found < 0) newPlugins.push(new $071334078f8d3f8a$var$PluginInstance(spec));\n                else {\n                    let plugin = this.plugins[found];\n                    plugin.mustUpdate = update;\n                    newPlugins.push(plugin);\n                }\n            }\n            for (let plugin of this.plugins)if (plugin.mustUpdate != update) plugin.destroy(this);\n            this.plugins = newPlugins;\n            this.pluginMap.clear();\n            this.inputState.ensureHandlers(this, this.plugins);\n        } else for (let p of this.plugins)p.mustUpdate = update;\n        for(let i = 0; i < this.plugins.length; i++)this.plugins[i].update(this);\n    }\n    /**\n    @internal\n    */ measure(flush = true) {\n        if (this.destroyed) return;\n        if (this.measureScheduled > -1) this.win.cancelAnimationFrame(this.measureScheduled);\n        this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame\n        if (flush) this.observer.forceFlush();\n        let updated = null;\n        let sDOM = this.scrollDOM, { scrollTop: scrollTop } = sDOM;\n        let { scrollAnchorPos: scrollAnchorPos, scrollAnchorHeight: scrollAnchorHeight } = this.viewState;\n        if (scrollTop != this.viewState.scrollTop) scrollAnchorHeight = -1;\n        this.viewState.scrollAnchorHeight = -1;\n        try {\n            for(let i = 0;; i++){\n                if (scrollAnchorHeight < 0) {\n                    if ($071334078f8d3f8a$var$isScrolledToBottom(sDOM)) {\n                        scrollAnchorPos = -1;\n                        scrollAnchorHeight = this.viewState.heightMap.height;\n                    } else {\n                        let block = this.viewState.scrollAnchorAt(scrollTop);\n                        scrollAnchorPos = block.from;\n                        scrollAnchorHeight = block.top;\n                    }\n                }\n                this.updateState = 1 /* Measuring */ ;\n                let changed = this.viewState.measure(this);\n                if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null) break;\n                if (i > 5) {\n                    console.warn(this.measureRequests.length ? \"Measure loop restarted more than 5 times\" : \"Viewport failed to stabilize\");\n                    break;\n                }\n                let measuring = [];\n                // Only run measure requests in this cycle when the viewport didn't change\n                if (!(changed & 4 /* Viewport */ )) [this.measureRequests, measuring] = [\n                    measuring,\n                    this.measureRequests\n                ];\n                let measured = measuring.map((m)=>{\n                    try {\n                        return m.read(this);\n                    } catch (e) {\n                        $071334078f8d3f8a$export$f86b2a1a2ce291b3(this.state, e);\n                        return $071334078f8d3f8a$var$BadMeasure;\n                    }\n                });\n                let update = $071334078f8d3f8a$export$b5b084f95c87edf7.create(this, this.state, []), redrawn = false;\n                update.flags |= changed;\n                if (!updated) updated = update;\n                else updated.flags |= changed;\n                this.updateState = 2 /* Updating */ ;\n                if (!update.empty) {\n                    this.updatePlugins(update);\n                    this.inputState.update(update);\n                    this.updateAttrs();\n                    redrawn = this.docView.update(update);\n                }\n                for(let i = 0; i < measuring.length; i++)if (measured[i] != $071334078f8d3f8a$var$BadMeasure) try {\n                    let m = measuring[i];\n                    if (m.write) m.write(measured[i], this);\n                } catch (e) {\n                    $071334078f8d3f8a$export$f86b2a1a2ce291b3(this.state, e);\n                }\n                if (redrawn) this.docView.updateSelection(true);\n                if (!update.viewportChanged && this.measureRequests.length == 0) {\n                    if (this.viewState.editorHeight) {\n                        if (this.viewState.scrollTarget) {\n                            this.docView.scrollIntoView(this.viewState.scrollTarget);\n                            this.viewState.scrollTarget = null;\n                            continue;\n                        } else {\n                            let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;\n                            let diff = newAnchorHeight - scrollAnchorHeight;\n                            if (diff > 1 || diff < -1) {\n                                scrollTop = sDOM.scrollTop = scrollTop + diff;\n                                scrollAnchorHeight = -1;\n                                continue;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n        } finally{\n            this.updateState = 0 /* Idle */ ;\n            this.measureScheduled = -1;\n        }\n        if (updated && !updated.empty) for (let listener of this.state.facet($071334078f8d3f8a$var$updateListener))listener(updated);\n    }\n    /**\n    Get the CSS classes for the currently active editor themes.\n    */ get themeClasses() {\n        return $071334078f8d3f8a$var$baseThemeID + \" \" + (this.state.facet($071334078f8d3f8a$var$darkTheme) ? $071334078f8d3f8a$var$baseDarkID : $071334078f8d3f8a$var$baseLightID) + \" \" + this.state.facet($071334078f8d3f8a$var$theme);\n    }\n    updateAttrs() {\n        let editorAttrs = $071334078f8d3f8a$var$attrsFromFacet(this, $071334078f8d3f8a$var$editorAttributes, {\n            class: \"cm-editor\" + (this.hasFocus ? \" cm-focused \" : \" \") + this.themeClasses\n        });\n        let contentAttrs = {\n            spellcheck: \"false\",\n            autocorrect: \"off\",\n            autocapitalize: \"off\",\n            translate: \"no\",\n            contenteditable: !this.state.facet($071334078f8d3f8a$var$editable) ? \"false\" : \"true\",\n            class: \"cm-content\",\n            style: `${$071334078f8d3f8a$var$browser.tabSize}: ${this.state.tabSize}`,\n            role: \"textbox\",\n            \"aria-multiline\": \"true\"\n        };\n        if (this.state.readOnly) contentAttrs[\"aria-readonly\"] = \"true\";\n        $071334078f8d3f8a$var$attrsFromFacet(this, $071334078f8d3f8a$var$contentAttributes, contentAttrs);\n        let changed = this.observer.ignore(()=>{\n            let changedContent = $071334078f8d3f8a$var$updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);\n            let changedEditor = $071334078f8d3f8a$var$updateAttrs(this.dom, this.editorAttrs, editorAttrs);\n            return changedContent || changedEditor;\n        });\n        this.editorAttrs = editorAttrs;\n        this.contentAttrs = contentAttrs;\n        return changed;\n    }\n    showAnnouncements(trs) {\n        let first = true;\n        for (let tr of trs)for (let effect of tr.effects)if (effect.is($071334078f8d3f8a$export$eece2fccabbb77c5.announce)) {\n            if (first) this.announceDOM.textContent = \"\";\n            first = false;\n            let div = this.announceDOM.appendChild(document.createElement(\"div\"));\n            div.textContent = effect.value;\n        }\n    }\n    mountStyles() {\n        this.styleModules = this.state.facet($071334078f8d3f8a$var$styleModule);\n        (0, $fa62f485c41d169a$export$b920c662d2efee20).mount(this.root, this.styleModules.concat($071334078f8d3f8a$var$baseTheme$1).reverse());\n    }\n    readMeasured() {\n        if (this.updateState == 2 /* Updating */ ) throw new Error(\"Reading the editor layout isn't allowed during an update\");\n        if (this.updateState == 0 /* Idle */  && this.measureScheduled > -1) this.measure(false);\n    }\n    /**\n    Schedule a layout measurement, optionally providing callbacks to\n    do custom DOM measuring followed by a DOM write phase. Using\n    this is preferable reading DOM layout directly from, for\n    example, an event handler, because it'll make sure measuring and\n    drawing done by other components is synchronized, avoiding\n    unnecessary DOM layout computations.\n    */ requestMeasure(request) {\n        if (this.measureScheduled < 0) this.measureScheduled = this.win.requestAnimationFrame(()=>this.measure());\n        if (request) {\n            if (this.measureRequests.indexOf(request) > -1) return;\n            if (request.key != null) {\n                for(let i = 0; i < this.measureRequests.length; i++)if (this.measureRequests[i].key === request.key) {\n                    this.measureRequests[i] = request;\n                    return;\n                }\n            }\n            this.measureRequests.push(request);\n        }\n    }\n    /**\n    Get the value of a specific plugin, if present. Note that\n    plugins that crash can be dropped from a view, so even when you\n    know you registered a given plugin, it is recommended to check\n    the return value of this method.\n    */ plugin(plugin) {\n        let known = this.pluginMap.get(plugin);\n        if (known === undefined || known && known.spec != plugin) this.pluginMap.set(plugin, known = this.plugins.find((p)=>p.spec == plugin) || null);\n        return known && known.update(this).value;\n    }\n    /**\n    The top position of the document, in screen coordinates. This\n    may be negative when the editor is scrolled down. Points\n    directly to the top of the first line, not above the padding.\n    */ get documentTop() {\n        return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;\n    }\n    /**\n    Reports the padding above and below the document.\n    */ get documentPadding() {\n        return {\n            top: this.viewState.paddingTop,\n            bottom: this.viewState.paddingBottom\n        };\n    }\n    /**\n    Find the text line or block widget at the given vertical\n    position (which is interpreted as relative to the [top of the\n    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).\n    */ elementAtHeight(height) {\n        this.readMeasured();\n        return this.viewState.elementAtHeight(height);\n    }\n    /**\n    Find the line block (see\n    [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given\n    height, again interpreted relative to the [top of the\n    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).\n    */ lineBlockAtHeight(height) {\n        this.readMeasured();\n        return this.viewState.lineBlockAtHeight(height);\n    }\n    /**\n    Get the extent and vertical position of all [line\n    blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions\n    are relative to the [top of the\n    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);\n    */ get viewportLineBlocks() {\n        return this.viewState.viewportLines;\n    }\n    /**\n    Find the line block around the given document position. A line\n    block is a range delimited on both sides by either a\n    non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the\n    start/end of the document. It will usually just hold a line of\n    text, but may be broken into multiple textblocks by block\n    widgets.\n    */ lineBlockAt(pos) {\n        return this.viewState.lineBlockAt(pos);\n    }\n    /**\n    The editor's total content height.\n    */ get contentHeight() {\n        return this.viewState.contentHeight;\n    }\n    /**\n    Move a cursor position by [grapheme\n    cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether\n    the motion is away from the line start, or towards it. In\n    bidirectional text, the line is traversed in visual order, using\n    the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).\n    When the start position was the last one on the line, the\n    returned position will be across the line break. If there is no\n    further line, the original position is returned.\n    \n    By default, this method moves over a single cluster. The\n    optional `by` argument can be used to move across more. It will\n    be called with the first cluster as argument, and should return\n    a predicate that determines, for each subsequent cluster,\n    whether it should also be moved over.\n    */ moveByChar(start, forward, by) {\n        return $071334078f8d3f8a$var$skipAtoms(this, start, $071334078f8d3f8a$var$moveByChar(this, start, forward, by));\n    }\n    /**\n    Move a cursor position across the next group of either\n    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter\n    non-whitespace characters.\n    */ moveByGroup(start, forward) {\n        return $071334078f8d3f8a$var$skipAtoms(this, start, $071334078f8d3f8a$var$moveByChar(this, start, forward, (initial)=>$071334078f8d3f8a$var$byGroup(this, start.head, initial)));\n    }\n    /**\n    Move to the next line boundary in the given direction. If\n    `includeWrap` is true, line wrapping is on, and there is a\n    further wrap point on the current line, the wrap point will be\n    returned. Otherwise this function will return the start or end\n    of the line.\n    */ moveToLineBoundary(start, forward, includeWrap = true) {\n        return $071334078f8d3f8a$var$moveToLineBoundary(this, start, forward, includeWrap);\n    }\n    /**\n    Move a cursor position vertically. When `distance` isn't given,\n    it defaults to moving to the next line (including wrapped\n    lines). Otherwise, `distance` should provide a positive distance\n    in pixels.\n    \n    When `start` has a\n    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical\n    motion will use that as a target horizontal position. Otherwise,\n    the cursor's own horizontal position is used. The returned\n    cursor will have its goal column set to whichever column was\n    used.\n    */ moveVertically(start, forward, distance) {\n        return $071334078f8d3f8a$var$skipAtoms(this, start, $071334078f8d3f8a$var$moveVertically(this, start, forward, distance));\n    }\n    /**\n    Find the DOM parent node and offset (child offset if `node` is\n    an element, character offset when it is a text node) at the\n    given document position.\n    \n    Note that for positions that aren't currently in\n    `visibleRanges`, the resulting DOM position isn't necessarily\n    meaningful (it may just point before or after a placeholder\n    element).\n    */ domAtPos(pos) {\n        return this.docView.domAtPos(pos);\n    }\n    /**\n    Find the document position at the given DOM node. Can be useful\n    for associating positions with DOM events. Will raise an error\n    when `node` isn't part of the editor content.\n    */ posAtDOM(node, offset = 0) {\n        return this.docView.posFromDOM(node, offset);\n    }\n    posAtCoords(coords, precise = true) {\n        this.readMeasured();\n        return $071334078f8d3f8a$var$posAtCoords(this, coords, precise);\n    }\n    /**\n    Get the screen coordinates at the given document position.\n    `side` determines whether the coordinates are based on the\n    element before (-1) or after (1) the position (if no element is\n    available on the given side, the method will transparently use\n    another strategy to get reasonable coordinates).\n    */ coordsAtPos(pos, side = 1) {\n        this.readMeasured();\n        let rect = this.docView.coordsAt(pos, side);\n        if (!rect || rect.left == rect.right) return rect;\n        let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);\n        let span = order[$071334078f8d3f8a$export$e1ed96b746bb516a.find(order, pos - line.from, -1, side)];\n        return $071334078f8d3f8a$var$flattenRect(rect, span.dir == $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR == side > 0);\n    }\n    /**\n    Return the rectangle around a given character. If `pos` does not\n    point in front of a character that is in the viewport and\n    rendered (i.e. not replaced, not a line break), this will return\n    null. For space characters that are a line wrap point, this will\n    return the position before the line break.\n    */ coordsForChar(pos) {\n        this.readMeasured();\n        return this.docView.coordsForChar(pos);\n    }\n    /**\n    The default width of a character in the editor. May not\n    accurately reflect the width of all characters (given variable\n    width fonts or styling of invididual ranges).\n    */ get defaultCharacterWidth() {\n        return this.viewState.heightOracle.charWidth;\n    }\n    /**\n    The default height of a line in the editor. May not be accurate\n    for all lines.\n    */ get defaultLineHeight() {\n        return this.viewState.heightOracle.lineHeight;\n    }\n    /**\n    The text direction\n    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)\n    CSS property) of the editor's content element.\n    */ get textDirection() {\n        return this.viewState.defaultTextDirection;\n    }\n    /**\n    Find the text direction of the block at the given position, as\n    assigned by CSS. If\n    [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)\n    isn't enabled, or the given position is outside of the viewport,\n    this will always return the same as\n    [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that\n    this may trigger a DOM layout.\n    */ textDirectionAt(pos) {\n        let perLine = this.state.facet($071334078f8d3f8a$var$perLineTextDirection);\n        if (!perLine || pos < this.viewport.from || pos > this.viewport.to) return this.textDirection;\n        this.readMeasured();\n        return this.docView.textDirectionAt(pos);\n    }\n    /**\n    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)\n    (as determined by the\n    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)\n    CSS property of its content element).\n    */ get lineWrapping() {\n        return this.viewState.heightOracle.lineWrapping;\n    }\n    /**\n    Returns the bidirectional text structure of the given line\n    (which should be in the current document) as an array of span\n    objects. The order of these spans matches the [text\n    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is\n    left-to-right, the leftmost spans come first, otherwise the\n    rightmost spans come first.\n    */ bidiSpans(line) {\n        if (line.length > $071334078f8d3f8a$var$MaxBidiLine) return $071334078f8d3f8a$var$trivialOrder(line.length);\n        let dir = this.textDirectionAt(line.from);\n        for (let entry of this.bidiCache)if (entry.from == line.from && entry.dir == dir) return entry.order;\n        let order = $071334078f8d3f8a$var$computeOrder(line.text, dir);\n        this.bidiCache.push(new $071334078f8d3f8a$var$CachedOrder(line.from, line.to, dir, order));\n        return order;\n    }\n    /**\n    Check whether the editor has focus.\n    */ get hasFocus() {\n        var _a;\n        // Safari return false for hasFocus when the context menu is open\n        // or closing, which leads us to ignore selection changes from the\n        // context menu because it looks like the editor isn't focused.\n        // This kludges around that.\n        return (this.dom.ownerDocument.hasFocus() || $071334078f8d3f8a$var$browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;\n    }\n    /**\n    Put focus on the editor.\n    */ focus() {\n        this.observer.ignore(()=>{\n            $071334078f8d3f8a$var$focusPreventScroll(this.contentDOM);\n            this.docView.updateSelection();\n        });\n    }\n    /**\n    Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only\n    necessary when moving the editor's existing DOM to a new window or shadow root.\n    */ setRoot(root) {\n        if (this._root != root) {\n            this._root = root;\n            this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);\n            this.mountStyles();\n        }\n    }\n    /**\n    Clean up this editor view, removing its element from the\n    document, unregistering event handlers, and notifying\n    plugins. The view instance can no longer be used after\n    calling this.\n    */ destroy() {\n        for (let plugin of this.plugins)plugin.destroy(this);\n        this.plugins = [];\n        this.inputState.destroy();\n        this.dom.remove();\n        this.observer.destroy();\n        if (this.measureScheduled > -1) this.win.cancelAnimationFrame(this.measureScheduled);\n        this.destroyed = true;\n    }\n    /**\n    Returns an effect that can be\n    [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to\n    cause it to scroll the given position or range into view.\n    */ static scrollIntoView(pos, options = {}) {\n        return $071334078f8d3f8a$var$scrollIntoView.of(new $071334078f8d3f8a$var$ScrollTarget(typeof pos == \"number\" ? (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));\n    }\n    /**\n    Returns an extension that can be used to add DOM event handlers.\n    The value should be an object mapping event names to handler\n    functions. For any given event, such functions are ordered by\n    extension precedence, and the first handler to return true will\n    be assumed to have handled that event, and no other handlers or\n    built-in behavior will be activated for it. These are registered\n    on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except\n    for `scroll` handlers, which will be called any time the\n    editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of\n    its parent nodes is scrolled.\n    */ static domEventHandlers(handlers) {\n        return $071334078f8d3f8a$export$44d5eccfd62adda7.define(()=>({}), {\n            eventHandlers: handlers\n        });\n    }\n    /**\n    Create a theme extension. The first argument can be a\n    [`style-mod`](https://github.com/marijnh/style-mod#documentation)\n    style spec providing the styles for the theme. These will be\n    prefixed with a generated class for the style.\n    \n    Because the selectors will be prefixed with a scope class, rule\n    that directly match the editor's [wrapper\n    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be\n    added—need to be explicitly differentiated by adding an `&` to\n    the selector for that element—for example\n    `&.cm-focused`.\n    \n    When `dark` is set to true, the theme will be marked as dark,\n    which will cause the `&dark` rules from [base\n    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to\n    `&light` when a light theme is active).\n    */ static theme(spec, options) {\n        let prefix = (0, $fa62f485c41d169a$export$b920c662d2efee20).newName();\n        let result = [\n            $071334078f8d3f8a$var$theme.of(prefix),\n            $071334078f8d3f8a$var$styleModule.of($071334078f8d3f8a$var$buildTheme(`.${prefix}`, spec))\n        ];\n        if (options && options.dark) result.push($071334078f8d3f8a$var$darkTheme.of(true));\n        return result;\n    }\n    /**\n    Create an extension that adds styles to the base theme. Like\n    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the\n    place of the editor wrapper element when directly targeting\n    that. You can also use `&dark` or `&light` instead to only\n    target editors with a dark or light theme.\n    */ static baseTheme(spec) {\n        return (0, $ccfb9497d8ef598f$export$b92464a736444411).lowest($071334078f8d3f8a$var$styleModule.of($071334078f8d3f8a$var$buildTheme(\".\" + $071334078f8d3f8a$var$baseThemeID, spec, $071334078f8d3f8a$var$lightDarkIDs)));\n    }\n    /**\n    Retrieve an editor view instance from the view's DOM\n    representation.\n    */ static findFromDOM(dom) {\n        var _a;\n        let content = dom.querySelector(\".cm-content\");\n        let cView = content && $071334078f8d3f8a$var$ContentView.get(content) || $071334078f8d3f8a$var$ContentView.get(dom);\n        return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;\n    }\n}\n/**\nFacet to add a [style\nmodule](https://github.com/marijnh/style-mod#documentation) to\nan editor view. The view will ensure that the module is\nmounted in its [document\nroot](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.styleModule = $071334078f8d3f8a$var$styleModule;\n/**\nAn input handler can override the way changes to the editable\nDOM content are handled. Handlers are passed the document\npositions between which the change was found, and the new\ncontent. When one returns true, no further input handlers are\ncalled and the default behavior is prevented.\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.inputHandler = $071334078f8d3f8a$var$inputHandler;\n/**\nThis facet can be used to provide functions that create effects\nto be dispatched when the editor's focus state changes.\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.focusChangeEffect = $071334078f8d3f8a$var$focusChangeEffect;\n/**\nBy default, the editor assumes all its content has the same\n[text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`\nvalue to make it read the text direction of every (rendered)\nline separately.\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.perLineTextDirection = $071334078f8d3f8a$var$perLineTextDirection;\n/**\nAllows you to provide a function that should be called when the\nlibrary catches an exception from an extension (mostly from view\nplugins, but may be used by other extensions to route exceptions\nfrom user-code-provided callbacks). This is mostly useful for\ndebugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.exceptionSink = $071334078f8d3f8a$var$exceptionSink;\n/**\nA facet that can be used to register a function to be called\nevery time the view updates.\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.updateListener = $071334078f8d3f8a$var$updateListener;\n/**\nFacet that controls whether the editor content DOM is editable.\nWhen its highest-precedence value is `false`, the element will\nnot have its `contenteditable` attribute set. (Note that this\ndoesn't affect API calls that change the editor content, even\nwhen those are bound to keys or buttons. See the\n[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.editable = $071334078f8d3f8a$var$editable;\n/**\nAllows you to influence the way mouse selection happens. The\nfunctions in this facet will be called for a `mousedown` event\non the editor, and can return an object that overrides the way a\nselection is computed from that mouse click or drag.\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.mouseSelectionStyle = $071334078f8d3f8a$var$mouseSelectionStyle;\n/**\nFacet used to configure whether a given selection drag event\nshould move or copy the selection. The given predicate will be\ncalled with the `mousedown` event, and can return `true` when\nthe drag should move the content.\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.dragMovesSelection = $071334078f8d3f8a$var$dragMovesSelection$1;\n/**\nFacet used to configure whether a given selecting click adds a\nnew range to the existing selection or replaces it entirely. The\ndefault behavior is to check `event.metaKey` on macOS, and\n`event.ctrlKey` elsewhere.\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.clickAddsSelectionRange = $071334078f8d3f8a$var$clickAddsSelectionRange;\n/**\nA facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)\nare shown in the view. Decorations can be provided in two\nways—directly, or via a function that takes an editor view.\n\nOnly decoration sets provided directly are allowed to influence\nthe editor's vertical layout structure. The ones provided as\nfunctions are called _after_ the new viewport has been computed,\nand thus **must not** introduce block widgets or replacing\ndecorations that cover line breaks.\n\nIf you want decorated ranges to behave like atomic units for\ncursor motion and deletion purposes, also provide the range set\ncontaining the decorations to\n[`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.decorations = $071334078f8d3f8a$var$decorations;\n/**\nUsed to provide ranges that should be treated as atoms as far as\ncursor motion is concerned. This causes methods like\n[`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and\n[`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the\ncommands built on top of them) to skip across such regions when\na selection endpoint would enter them. This does _not_ prevent\ndirect programmatic [selection\nupdates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such\nregions.\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.atomicRanges = $071334078f8d3f8a$var$atomicRanges;\n/**\nFacet that allows extensions to provide additional scroll\nmargins (space around the sides of the scrolling element that\nshould be considered invisible). This can be useful when the\nplugin introduces elements that cover part of that element (for\nexample a horizontally fixed gutter).\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.scrollMargins = $071334078f8d3f8a$var$scrollMargins;\n/**\nThis facet records whether a dark theme is active. The extension\nreturned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically\nincludes an instance of this when the `dark` option is set to\ntrue.\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.darkTheme = $071334078f8d3f8a$var$darkTheme;\n/**\nFacet that provides additional DOM attributes for the editor's\neditable DOM element.\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.contentAttributes = $071334078f8d3f8a$var$contentAttributes;\n/**\nFacet that provides DOM attributes for the editor's outer\nelement.\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.editorAttributes = $071334078f8d3f8a$var$editorAttributes;\n/**\nAn extension that enables line wrapping in the editor (by\nsetting CSS `white-space` to `pre-wrap` in the content).\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.lineWrapping = /*@__PURE__*/ $071334078f8d3f8a$export$eece2fccabbb77c5.contentAttributes.of({\n    \"class\": \"cm-lineWrapping\"\n});\n/**\nState effect used to include screen reader announcements in a\ntransaction. These will be added to the DOM in a visually hidden\nelement with `aria-live=\"polite\"` set, and should be used to\ndescribe effects that are visually obvious but may not be\nnoticed by screen reader users (such as moving to the next\nsearch match).\n*/ $071334078f8d3f8a$export$eece2fccabbb77c5.announce = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\n// Maximum line length for which we compute accurate bidi info\nconst $071334078f8d3f8a$var$MaxBidiLine = 4096;\nconst $071334078f8d3f8a$var$BadMeasure = {};\nclass $071334078f8d3f8a$var$CachedOrder {\n    constructor(from, to, dir, order){\n        this.from = from;\n        this.to = to;\n        this.dir = dir;\n        this.order = order;\n    }\n    static update(cache, changes) {\n        if (changes.empty) return cache;\n        let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR;\n        for(let i = Math.max(0, cache.length - 10); i < cache.length; i++){\n            let entry = cache[i];\n            if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to)) result.push(new $071334078f8d3f8a$var$CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));\n        }\n        return result;\n    }\n}\nfunction $071334078f8d3f8a$var$attrsFromFacet(view, facet, base) {\n    for(let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--){\n        let source = sources[i], value = typeof source == \"function\" ? source(view) : source;\n        if (value) $071334078f8d3f8a$var$combineAttrs(value, base);\n    }\n    return base;\n}\nconst $071334078f8d3f8a$var$currentPlatform = $071334078f8d3f8a$var$browser.mac ? \"mac\" : $071334078f8d3f8a$var$browser.windows ? \"win\" : $071334078f8d3f8a$var$browser.linux ? \"linux\" : \"key\";\nfunction $071334078f8d3f8a$var$normalizeKeyName(name, platform) {\n    const parts = name.split(/-(?!$)/);\n    let result = parts[parts.length - 1];\n    if (result == \"Space\") result = \" \";\n    let alt, ctrl, shift, meta;\n    for(let i = 0; i < parts.length - 1; ++i){\n        const mod = parts[i];\n        if (/^(cmd|meta|m)$/i.test(mod)) meta = true;\n        else if (/^a(lt)?$/i.test(mod)) alt = true;\n        else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;\n        else if (/^s(hift)?$/i.test(mod)) shift = true;\n        else if (/^mod$/i.test(mod)) {\n            if (platform == \"mac\") meta = true;\n            else ctrl = true;\n        } else throw new Error(\"Unrecognized modifier name: \" + mod);\n    }\n    if (alt) result = \"Alt-\" + result;\n    if (ctrl) result = \"Ctrl-\" + result;\n    if (meta) result = \"Meta-\" + result;\n    if (shift) result = \"Shift-\" + result;\n    return result;\n}\nfunction $071334078f8d3f8a$var$modifiers(name, event, shift) {\n    if (event.altKey) name = \"Alt-\" + name;\n    if (event.ctrlKey) name = \"Ctrl-\" + name;\n    if (event.metaKey) name = \"Meta-\" + name;\n    if (shift !== false && event.shiftKey) name = \"Shift-\" + name;\n    return name;\n}\nconst $071334078f8d3f8a$var$handleKeyEvents = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$b92464a736444411).default(/*@__PURE__*/ $071334078f8d3f8a$export$eece2fccabbb77c5.domEventHandlers({\n    keydown (event, view) {\n        return $071334078f8d3f8a$var$runHandlers($071334078f8d3f8a$var$getKeymap(view.state), event, view, \"editor\");\n    }\n}));\n/**\nFacet used for registering keymaps.\n\nYou can add multiple keymaps to an editor. Their priorities\ndetermine their precedence (the ones specified early or with high\npriority get checked first). When a handler has returned `true`\nfor a given key, no further handlers are called.\n*/ const $071334078f8d3f8a$export$5043418e2ef368d5 = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    enables: $071334078f8d3f8a$var$handleKeyEvents\n});\nconst $071334078f8d3f8a$var$Keymaps = /*@__PURE__*/ new WeakMap();\n// This is hidden behind an indirection, rather than directly computed\n// by the facet, to keep internal types out of the facet's type.\nfunction $071334078f8d3f8a$var$getKeymap(state) {\n    let bindings = state.facet($071334078f8d3f8a$export$5043418e2ef368d5);\n    let map = $071334078f8d3f8a$var$Keymaps.get(bindings);\n    if (!map) $071334078f8d3f8a$var$Keymaps.set(bindings, map = $071334078f8d3f8a$var$buildKeymap(bindings.reduce((a, b)=>a.concat(b), [])));\n    return map;\n}\n/**\nRun the key handlers registered for a given scope. The event\nobject should be a `\"keydown\"` event. Returns true if any of the\nhandlers handled it.\n*/ function $071334078f8d3f8a$export$bce154f45536286e(view, event, scope) {\n    return $071334078f8d3f8a$var$runHandlers($071334078f8d3f8a$var$getKeymap(view.state), event, view, scope);\n}\nlet $071334078f8d3f8a$var$storedPrefix = null;\nconst $071334078f8d3f8a$var$PrefixTimeout = 4000;\nfunction $071334078f8d3f8a$var$buildKeymap(bindings, platform = $071334078f8d3f8a$var$currentPlatform) {\n    let bound = Object.create(null);\n    let isPrefix = Object.create(null);\n    let checkPrefix = (name, is)=>{\n        let current = isPrefix[name];\n        if (current == null) isPrefix[name] = is;\n        else if (current != is) throw new Error(\"Key binding \" + name + \" is used both as a regular binding and as a multi-stroke prefix\");\n    };\n    let add = (scope, key, command, preventDefault, stopPropagation)=>{\n        var _a, _b;\n        let scopeObj = bound[scope] || (bound[scope] = Object.create(null));\n        let parts = key.split(/ (?!$)/).map((k)=>$071334078f8d3f8a$var$normalizeKeyName(k, platform));\n        for(let i = 1; i < parts.length; i++){\n            let prefix = parts.slice(0, i).join(\" \");\n            checkPrefix(prefix, true);\n            if (!scopeObj[prefix]) scopeObj[prefix] = {\n                preventDefault: true,\n                stopPropagation: false,\n                run: [\n                    (view)=>{\n                        let ourObj = $071334078f8d3f8a$var$storedPrefix = {\n                            view: view,\n                            prefix: prefix,\n                            scope: scope\n                        };\n                        setTimeout(()=>{\n                            if ($071334078f8d3f8a$var$storedPrefix == ourObj) $071334078f8d3f8a$var$storedPrefix = null;\n                        }, $071334078f8d3f8a$var$PrefixTimeout);\n                        return true;\n                    }\n                ]\n            };\n        }\n        let full = parts.join(\" \");\n        checkPrefix(full, false);\n        let binding = scopeObj[full] || (scopeObj[full] = {\n            preventDefault: false,\n            stopPropagation: false,\n            run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []\n        });\n        if (command) binding.run.push(command);\n        if (preventDefault) binding.preventDefault = true;\n        if (stopPropagation) binding.stopPropagation = true;\n    };\n    for (let b of bindings){\n        let scopes = b.scope ? b.scope.split(\" \") : [\n            \"editor\"\n        ];\n        if (b.any) for (let scope of scopes){\n            let scopeObj = bound[scope] || (bound[scope] = Object.create(null));\n            if (!scopeObj._any) scopeObj._any = {\n                preventDefault: false,\n                stopPropagation: false,\n                run: []\n            };\n            for(let key in scopeObj)scopeObj[key].run.push(b.any);\n        }\n        let name = b[platform] || b.key;\n        if (!name) continue;\n        for (let scope of scopes){\n            add(scope, name, b.run, b.preventDefault, b.stopPropagation);\n            if (b.shift) add(scope, \"Shift-\" + name, b.shift, b.preventDefault, b.stopPropagation);\n        }\n    }\n    return bound;\n}\nfunction $071334078f8d3f8a$var$runHandlers(map, event, view, scope) {\n    let name = (0, $fdefb3038aa23227$export$fb33aafd75404f4c)(event);\n    let charCode = (0, $ccfb9497d8ef598f$export$42977f40461e1360)(name, 0), isChar = (0, $ccfb9497d8ef598f$export$a870abf234f6353c)(charCode) == name.length && name != \" \";\n    let prefix = \"\", handled = false, prevented = false, stopPropagation = false;\n    if ($071334078f8d3f8a$var$storedPrefix && $071334078f8d3f8a$var$storedPrefix.view == view && $071334078f8d3f8a$var$storedPrefix.scope == scope) {\n        prefix = $071334078f8d3f8a$var$storedPrefix.prefix + \" \";\n        if ($071334078f8d3f8a$var$modifierCodes.indexOf(event.keyCode) < 0) {\n            prevented = true;\n            $071334078f8d3f8a$var$storedPrefix = null;\n        }\n    }\n    let ran = new Set;\n    let runFor = (binding)=>{\n        if (binding) {\n            for (let cmd of binding.run)if (!ran.has(cmd)) {\n                ran.add(cmd);\n                if (cmd(view, event)) {\n                    if (binding.stopPropagation) stopPropagation = true;\n                    return true;\n                }\n            }\n            if (binding.preventDefault) {\n                if (binding.stopPropagation) stopPropagation = true;\n                prevented = true;\n            }\n        }\n        return false;\n    };\n    let scopeObj = map[scope], baseName, shiftName;\n    if (scopeObj) {\n        if (runFor(scopeObj[prefix + $071334078f8d3f8a$var$modifiers(name, event, !isChar)])) handled = true;\n        else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows\n        !($071334078f8d3f8a$var$browser.windows && event.ctrlKey && event.altKey) && (baseName = (0, $fdefb3038aa23227$export$e2253033e6e1df16)[event.keyCode]) && baseName != name) {\n            if (runFor(scopeObj[prefix + $071334078f8d3f8a$var$modifiers(baseName, event, true)])) handled = true;\n            else if (event.shiftKey && (shiftName = (0, $fdefb3038aa23227$export$fba63a578e423eb)[event.keyCode]) != name && shiftName != baseName && runFor(scopeObj[prefix + $071334078f8d3f8a$var$modifiers(shiftName, event, false)])) handled = true;\n        } else if (isChar && event.shiftKey && runFor(scopeObj[prefix + $071334078f8d3f8a$var$modifiers(name, event, true)])) handled = true;\n        if (!handled && runFor(scopeObj._any)) handled = true;\n    }\n    if (prevented) handled = true;\n    if (handled && stopPropagation) event.stopPropagation();\n    return handled;\n}\n/**\nImplementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates\na rectangle at a given set of coordinates.\n*/ class $071334078f8d3f8a$export$9ddce7bd14f42a78 {\n    /**\n    Create a marker with the given class and dimensions. If `width`\n    is null, the DOM element will get no width style.\n    */ constructor(className, left, top, width, height){\n        this.className = className;\n        this.left = left;\n        this.top = top;\n        this.width = width;\n        this.height = height;\n    }\n    draw() {\n        let elt = document.createElement(\"div\");\n        elt.className = this.className;\n        this.adjust(elt);\n        return elt;\n    }\n    update(elt, prev) {\n        if (prev.className != this.className) return false;\n        this.adjust(elt);\n        return true;\n    }\n    adjust(elt) {\n        elt.style.left = this.left + \"px\";\n        elt.style.top = this.top + \"px\";\n        if (this.width != null) elt.style.width = this.width + \"px\";\n        elt.style.height = this.height + \"px\";\n    }\n    eq(p) {\n        return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;\n    }\n    /**\n    Create a set of rectangles for the given selection range,\n    assigning them theclass`className`. Will create a single\n    rectangle for empty ranges, and a set of selection-style\n    rectangles covering the range's content (in a bidi-aware\n    way) for non-empty ones.\n    */ static forRange(view, className, range) {\n        if (range.empty) {\n            let pos = view.coordsAtPos(range.head, range.assoc || 1);\n            if (!pos) return [];\n            let base = $071334078f8d3f8a$var$getBase(view);\n            return [\n                new $071334078f8d3f8a$export$9ddce7bd14f42a78(className, pos.left - base.left, pos.top - base.top, null, pos.bottom - pos.top)\n            ];\n        } else return $071334078f8d3f8a$var$rectanglesForRange(view, className, range);\n    }\n}\nfunction $071334078f8d3f8a$var$getBase(view) {\n    let rect = view.scrollDOM.getBoundingClientRect();\n    let left = view.textDirection == $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;\n    return {\n        left: left - view.scrollDOM.scrollLeft,\n        top: rect.top - view.scrollDOM.scrollTop\n    };\n}\nfunction $071334078f8d3f8a$var$wrappedLine(view, pos, inside) {\n    let range = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(pos);\n    return {\n        from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),\n        to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),\n        type: $071334078f8d3f8a$export$48808c686fe495c4.Text\n    };\n}\nfunction $071334078f8d3f8a$var$rectanglesForRange(view, className, range) {\n    if (range.to <= view.viewport.from || range.from >= view.viewport.to) return [];\n    let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);\n    let ltr = view.textDirection == $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR;\n    let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = $071334078f8d3f8a$var$getBase(view);\n    let lineElt = content.querySelector(\".cm-line\"), lineStyle = lineElt && window.getComputedStyle(lineElt);\n    let leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);\n    let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);\n    let startBlock = $071334078f8d3f8a$var$blockAt(view, from), endBlock = $071334078f8d3f8a$var$blockAt(view, to);\n    let visualStart = startBlock.type == $071334078f8d3f8a$export$48808c686fe495c4.Text ? startBlock : null;\n    let visualEnd = endBlock.type == $071334078f8d3f8a$export$48808c686fe495c4.Text ? endBlock : null;\n    if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks)) visualStart = $071334078f8d3f8a$var$wrappedLine(view, from, visualStart);\n    if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks)) visualEnd = $071334078f8d3f8a$var$wrappedLine(view, to, visualEnd);\n    if (visualStart && visualEnd && visualStart.from == visualEnd.from) return pieces(drawForLine(range.from, range.to, visualStart));\n    else {\n        let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);\n        let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);\n        let between = [];\n        if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) || startBlock.widgetLineBreaks > 1 && top.bottom + view.defaultLineHeight / 2 < bottom.top) between.push(piece(leftSide, top.bottom, rightSide, bottom.top));\n        else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == $071334078f8d3f8a$export$48808c686fe495c4.Text) top.bottom = bottom.top = (top.bottom + bottom.top) / 2;\n        return pieces(top).concat(between).concat(pieces(bottom));\n    }\n    function piece(left, top, right, bottom) {\n        return new $071334078f8d3f8a$export$9ddce7bd14f42a78(className, left - base.left, top - base.top - 0.01 /* Epsilon */ , right - left, bottom - top + 0.01 /* Epsilon */ );\n    }\n    function pieces({ top: top, bottom: bottom, horizontal: horizontal }) {\n        let pieces = [];\n        for(let i = 0; i < horizontal.length; i += 2)pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));\n        return pieces;\n    }\n    // Gets passed from/to in line-local positions\n    function drawForLine(from, to, line) {\n        let top = 1e9, bottom = -1000000000, horizontal = [];\n        function addSpan(from, fromOpen, to, toOpen, dir) {\n            // Passing 2/-2 is a kludge to force the view to return\n            // coordinates on the proper side of block widgets, since\n            // normalizing the side there, though appropriate for most\n            // coordsAtPos queries, would break selection drawing.\n            let fromCoords = view.coordsAtPos(from, from == line.to ? -2 : 2);\n            let toCoords = view.coordsAtPos(to, to == line.from ? 2 : -2);\n            if (!fromCoords || !toCoords) return;\n            top = Math.min(fromCoords.top, toCoords.top, top);\n            bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);\n            if (dir == $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR) horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);\n            else horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);\n        }\n        let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;\n        // Split the range by visible range and document line\n        for (let r of view.visibleRanges)if (r.to > start && r.from < end) for(let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;){\n            let docLine = view.state.doc.lineAt(pos);\n            for (let span of view.bidiSpans(docLine)){\n                let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;\n                if (spanFrom >= endPos) break;\n                if (spanTo > pos) addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);\n            }\n            pos = docLine.to + 1;\n            if (pos >= endPos) break;\n        }\n        if (horizontal.length == 0) addSpan(start, from == null, end, to == null, view.textDirection);\n        return {\n            top: top,\n            bottom: bottom,\n            horizontal: horizontal\n        };\n    }\n    function drawForWidget(block, top) {\n        let y = contentRect.top + (top ? block.top : block.bottom);\n        return {\n            top: y,\n            bottom: y,\n            horizontal: []\n        };\n    }\n}\nfunction $071334078f8d3f8a$var$sameMarker(a, b) {\n    return a.constructor == b.constructor && a.eq(b);\n}\nclass $071334078f8d3f8a$var$LayerView {\n    constructor(view, layer){\n        this.view = view;\n        this.layer = layer;\n        this.drawn = [];\n        this.measureReq = {\n            read: this.measure.bind(this),\n            write: this.draw.bind(this)\n        };\n        this.dom = view.scrollDOM.appendChild(document.createElement(\"div\"));\n        this.dom.classList.add(\"cm-layer\");\n        if (layer.above) this.dom.classList.add(\"cm-layer-above\");\n        if (layer.class) this.dom.classList.add(layer.class);\n        this.dom.setAttribute(\"aria-hidden\", \"true\");\n        this.setOrder(view.state);\n        view.requestMeasure(this.measureReq);\n        if (layer.mount) layer.mount(this.dom, view);\n    }\n    update(update) {\n        if (update.startState.facet($071334078f8d3f8a$var$layerOrder) != update.state.facet($071334078f8d3f8a$var$layerOrder)) this.setOrder(update.state);\n        if (this.layer.update(update, this.dom) || update.geometryChanged) update.view.requestMeasure(this.measureReq);\n    }\n    setOrder(state) {\n        let pos = 0, order = state.facet($071334078f8d3f8a$var$layerOrder);\n        while(pos < order.length && order[pos] != this.layer)pos++;\n        this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);\n    }\n    measure() {\n        return this.layer.markers(this.view);\n    }\n    draw(markers) {\n        if (markers.length != this.drawn.length || markers.some((p, i)=>!$071334078f8d3f8a$var$sameMarker(p, this.drawn[i]))) {\n            let old = this.dom.firstChild, oldI = 0;\n            for (let marker of markers)if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {\n                old = old.nextSibling;\n                oldI++;\n            } else this.dom.insertBefore(marker.draw(), old);\n            while(old){\n                let next = old.nextSibling;\n                old.remove();\n                old = next;\n            }\n            this.drawn = markers;\n        }\n    }\n    destroy() {\n        if (this.layer.destroy) this.layer.destroy(this.dom, this.view);\n        this.dom.remove();\n    }\n}\nconst $071334078f8d3f8a$var$layerOrder = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\n/**\nDefine a layer.\n*/ function $071334078f8d3f8a$export$50a222d9023da98b(config) {\n    return [\n        $071334078f8d3f8a$export$44d5eccfd62adda7.define((v)=>new $071334078f8d3f8a$var$LayerView(v, config)),\n        $071334078f8d3f8a$var$layerOrder.of(config)\n    ];\n}\nconst $071334078f8d3f8a$var$CanHidePrimary = !$071334078f8d3f8a$var$browser.ios; // FIXME test IE\nconst $071334078f8d3f8a$var$selectionConfig = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (configs) {\n        return (0, $ccfb9497d8ef598f$export$4e19c0b693794a7e)(configs, {\n            cursorBlinkRate: 1200,\n            drawRangeCursor: true\n        }, {\n            cursorBlinkRate: (a, b)=>Math.min(a, b),\n            drawRangeCursor: (a, b)=>a || b\n        });\n    }\n});\n/**\nReturns an extension that hides the browser's native selection and\ncursor, replacing the selection with a background behind the text\n(with the `cm-selectionBackground` class), and the\ncursors with elements overlaid over the code (using\n`cm-cursor-primary` and `cm-cursor-secondary`).\n\nThis allows the editor to display secondary selection ranges, and\ntends to produce a type of selection more in line with that users\nexpect in a text editor (the native selection styling will often\nleave gaps between lines and won't fill the horizontal space after\na line when the selection continues past it).\n\nIt does have a performance cost, in that it requires an extra DOM\nlayout cycle for many updates (the selection is drawn based on DOM\nlayout information that's only available after laying out the\ncontent).\n*/ function $071334078f8d3f8a$export$17a3d0ab3687347d(config = {}) {\n    return [\n        $071334078f8d3f8a$var$selectionConfig.of(config),\n        $071334078f8d3f8a$var$cursorLayer,\n        $071334078f8d3f8a$var$selectionLayer,\n        $071334078f8d3f8a$var$hideNativeSelection,\n        $071334078f8d3f8a$var$nativeSelectionHidden.of(true)\n    ];\n}\nfunction $071334078f8d3f8a$var$configChanged(update) {\n    return update.startState.facet($071334078f8d3f8a$var$selectionConfig) != update.state.facet($071334078f8d3f8a$var$selectionConfig);\n}\nconst $071334078f8d3f8a$var$cursorLayer = /*@__PURE__*/ $071334078f8d3f8a$export$50a222d9023da98b({\n    above: true,\n    markers (view) {\n        let { state: state } = view, conf = state.facet($071334078f8d3f8a$var$selectionConfig);\n        let cursors = [];\n        for (let r of state.selection.ranges){\n            let prim = r == state.selection.main;\n            if (r.empty ? !prim || $071334078f8d3f8a$var$CanHidePrimary : conf.drawRangeCursor) {\n                let className = prim ? \"cm-cursor cm-cursor-primary\" : \"cm-cursor cm-cursor-secondary\";\n                let cursor = r.empty ? r : (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(r.head, r.head > r.anchor ? -1 : 1);\n                for (let piece of $071334078f8d3f8a$export$9ddce7bd14f42a78.forRange(view, className, cursor))cursors.push(piece);\n            }\n        }\n        return cursors;\n    },\n    update (update, dom) {\n        if (update.transactions.some((tr)=>tr.selection)) dom.style.animationName = dom.style.animationName == \"cm-blink\" ? \"cm-blink2\" : \"cm-blink\";\n        let confChange = $071334078f8d3f8a$var$configChanged(update);\n        if (confChange) $071334078f8d3f8a$var$setBlinkRate(update.state, dom);\n        return update.docChanged || update.selectionSet || confChange;\n    },\n    mount (dom, view) {\n        $071334078f8d3f8a$var$setBlinkRate(view.state, dom);\n    },\n    class: \"cm-cursorLayer\"\n});\nfunction $071334078f8d3f8a$var$setBlinkRate(state, dom) {\n    dom.style.animationDuration = state.facet($071334078f8d3f8a$var$selectionConfig).cursorBlinkRate + \"ms\";\n}\nconst $071334078f8d3f8a$var$selectionLayer = /*@__PURE__*/ $071334078f8d3f8a$export$50a222d9023da98b({\n    above: false,\n    markers (view) {\n        return view.state.selection.ranges.map((r)=>r.empty ? [] : $071334078f8d3f8a$export$9ddce7bd14f42a78.forRange(view, \"cm-selectionBackground\", r)).reduce((a, b)=>a.concat(b));\n    },\n    update (update, dom) {\n        return update.docChanged || update.selectionSet || update.viewportChanged || $071334078f8d3f8a$var$configChanged(update);\n    },\n    class: \"cm-selectionLayer\"\n});\nconst $071334078f8d3f8a$var$themeSpec = {\n    \".cm-line\": {\n        \"& ::selection\": {\n            backgroundColor: \"transparent !important\"\n        },\n        \"&::selection\": {\n            backgroundColor: \"transparent !important\"\n        }\n    }\n};\nif ($071334078f8d3f8a$var$CanHidePrimary) $071334078f8d3f8a$var$themeSpec[\".cm-line\"].caretColor = \"transparent !important\";\nconst $071334078f8d3f8a$var$hideNativeSelection = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$b92464a736444411).highest(/*@__PURE__*/ $071334078f8d3f8a$export$eece2fccabbb77c5.theme($071334078f8d3f8a$var$themeSpec));\nconst $071334078f8d3f8a$var$setDropCursorPos = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define({\n    map (pos, mapping) {\n        return pos == null ? null : mapping.mapPos(pos);\n    }\n});\nconst $071334078f8d3f8a$var$dropCursorPos = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create () {\n        return null;\n    },\n    update (pos, tr) {\n        if (pos != null) pos = tr.changes.mapPos(pos);\n        return tr.effects.reduce((pos, e)=>e.is($071334078f8d3f8a$var$setDropCursorPos) ? e.value : pos, pos);\n    }\n});\nconst $071334078f8d3f8a$var$drawDropCursor = /*@__PURE__*/ $071334078f8d3f8a$export$44d5eccfd62adda7.fromClass(class {\n    constructor(view){\n        this.view = view;\n        this.cursor = null;\n        this.measureReq = {\n            read: this.readPos.bind(this),\n            write: this.drawCursor.bind(this)\n        };\n    }\n    update(update) {\n        var _a;\n        let cursorPos = update.state.field($071334078f8d3f8a$var$dropCursorPos);\n        if (cursorPos == null) {\n            if (this.cursor != null) {\n                (_a = this.cursor) === null || _a === void 0 || _a.remove();\n                this.cursor = null;\n            }\n        } else {\n            if (!this.cursor) {\n                this.cursor = this.view.scrollDOM.appendChild(document.createElement(\"div\"));\n                this.cursor.className = \"cm-dropCursor\";\n            }\n            if (update.startState.field($071334078f8d3f8a$var$dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged) this.view.requestMeasure(this.measureReq);\n        }\n    }\n    readPos() {\n        let pos = this.view.state.field($071334078f8d3f8a$var$dropCursorPos);\n        let rect = pos != null && this.view.coordsAtPos(pos);\n        if (!rect) return null;\n        let outer = this.view.scrollDOM.getBoundingClientRect();\n        return {\n            left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,\n            top: rect.top - outer.top + this.view.scrollDOM.scrollTop,\n            height: rect.bottom - rect.top\n        };\n    }\n    drawCursor(pos) {\n        if (this.cursor) {\n            if (pos) {\n                this.cursor.style.left = pos.left + \"px\";\n                this.cursor.style.top = pos.top + \"px\";\n                this.cursor.style.height = pos.height + \"px\";\n            } else this.cursor.style.left = \"-100000px\";\n        }\n    }\n    destroy() {\n        if (this.cursor) this.cursor.remove();\n    }\n    setDropPos(pos) {\n        if (this.view.state.field($071334078f8d3f8a$var$dropCursorPos) != pos) this.view.dispatch({\n            effects: $071334078f8d3f8a$var$setDropCursorPos.of(pos)\n        });\n    }\n}, {\n    eventHandlers: {\n        dragover (event) {\n            this.setDropPos(this.view.posAtCoords({\n                x: event.clientX,\n                y: event.clientY\n            }));\n        },\n        dragleave (event) {\n            if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget)) this.setDropPos(null);\n        },\n        dragend () {\n            this.setDropPos(null);\n        },\n        drop () {\n            this.setDropPos(null);\n        }\n    }\n});\n/**\nDraws a cursor at the current drop position when something is\ndragged over the editor.\n*/ function $071334078f8d3f8a$export$b8e3092a3bfa2062() {\n    return [\n        $071334078f8d3f8a$var$dropCursorPos,\n        $071334078f8d3f8a$var$drawDropCursor\n    ];\n}\nfunction $071334078f8d3f8a$var$iterMatches(doc, re, from, to, f) {\n    re.lastIndex = 0;\n    for(let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length){\n        if (!cursor.lineBreak) while(m = re.exec(cursor.value))f(pos + m.index, m);\n    }\n}\nfunction $071334078f8d3f8a$var$matchRanges(view, maxLength) {\n    let visible = view.visibleRanges;\n    if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to) return visible;\n    let result = [];\n    for (let { from: from, to: to } of visible){\n        from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);\n        to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);\n        if (result.length && result[result.length - 1].to >= from) result[result.length - 1].to = to;\n        else result.push({\n            from: from,\n            to: to\n        });\n    }\n    return result;\n}\n/**\nHelper class used to make it easier to maintain decorations on\nvisible code that matches a given regular expression. To be used\nin a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object\nrepresent a matching configuration.\n*/ class $071334078f8d3f8a$export$9b928b0ca20b25cb {\n    /**\n    Create a decorator.\n    */ constructor(config){\n        const { regexp: regexp, decoration: decoration, decorate: decorate, boundary: boundary, maxLength: maxLength = 1000 } = config;\n        if (!regexp.global) throw new RangeError(\"The regular expression given to MatchDecorator should have its 'g' flag set\");\n        this.regexp = regexp;\n        if (decorate) this.addMatch = (match, view, from, add)=>decorate(add, from, from + match[0].length, match, view);\n        else if (typeof decoration == \"function\") this.addMatch = (match, view, from, add)=>{\n            let deco = decoration(match, view, from);\n            if (deco) add(from, from + match[0].length, deco);\n        };\n        else if (decoration) this.addMatch = (match, _view, from, add)=>add(from, from + match[0].length, decoration);\n        else throw new RangeError(\"Either 'decorate' or 'decoration' should be provided to MatchDecorator\");\n        this.boundary = boundary;\n        this.maxLength = maxLength;\n    }\n    /**\n    Compute the full set of decorations for matches in the given\n    view's viewport. You'll want to call this when initializing your\n    plugin.\n    */ createDeco(view) {\n        let build = new (0, $ccfb9497d8ef598f$export$89e09ce03c7e8594)(), add = build.add.bind(build);\n        for (let { from: from, to: to } of $071334078f8d3f8a$var$matchRanges(view, this.maxLength))$071334078f8d3f8a$var$iterMatches(view.state.doc, this.regexp, from, to, (from, m)=>this.addMatch(m, view, from, add));\n        return build.finish();\n    }\n    /**\n    Update a set of decorations for a view update. `deco` _must_ be\n    the set of decorations produced by _this_ `MatchDecorator` for\n    the view state before the update.\n    */ updateDeco(update, deco) {\n        let changeFrom = 1e9, changeTo = -1;\n        if (update.docChanged) update.changes.iterChanges((_f, _t, from, to)=>{\n            if (to > update.view.viewport.from && from < update.view.viewport.to) {\n                changeFrom = Math.min(from, changeFrom);\n                changeTo = Math.max(to, changeTo);\n            }\n        });\n        if (update.viewportChanged || changeTo - changeFrom > 1000) return this.createDeco(update.view);\n        if (changeTo > -1) return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);\n        return deco;\n    }\n    updateRange(view, deco, updateFrom, updateTo) {\n        for (let r of view.visibleRanges){\n            let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);\n            if (to > from) {\n                let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;\n                let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);\n                if (this.boundary) {\n                    for(; from > fromLine.from; from--)if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {\n                        start = from;\n                        break;\n                    }\n                    for(; to < toLine.to; to++)if (this.boundary.test(toLine.text[to - toLine.from])) {\n                        end = to;\n                        break;\n                    }\n                }\n                let ranges = [], m;\n                let add = (from, to, deco)=>ranges.push(deco.range(from, to));\n                if (fromLine == toLine) {\n                    this.regexp.lastIndex = start - fromLine.from;\n                    while((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)this.addMatch(m, view, m.index + fromLine.from, add);\n                } else $071334078f8d3f8a$var$iterMatches(view.state.doc, this.regexp, start, end, (from, m)=>this.addMatch(m, view, from, add));\n                deco = deco.update({\n                    filterFrom: start,\n                    filterTo: end,\n                    filter: (from, to)=>from < start || to > end,\n                    add: ranges\n                });\n            }\n        }\n        return deco;\n    }\n}\nconst $071334078f8d3f8a$var$UnicodeRegexpSupport = /x/.unicode != null ? \"gu\" : \"g\";\nconst $071334078f8d3f8a$var$Specials = /*@__PURE__*/ new RegExp(\"[\\x00-\\b\\n-\\x1f\\x7f-\\x9f\\xad؜​‎‏\\u2028\\u2029‭‮⁦⁧⁩\\uFEFF￹-￼]\", $071334078f8d3f8a$var$UnicodeRegexpSupport);\nconst $071334078f8d3f8a$var$Names = {\n    0: \"null\",\n    7: \"bell\",\n    8: \"backspace\",\n    10: \"newline\",\n    11: \"vertical tab\",\n    13: \"carriage return\",\n    27: \"escape\",\n    8203: \"zero width space\",\n    8204: \"zero width non-joiner\",\n    8205: \"zero width joiner\",\n    8206: \"left-to-right mark\",\n    8207: \"right-to-left mark\",\n    8232: \"line separator\",\n    8237: \"left-to-right override\",\n    8238: \"right-to-left override\",\n    8294: \"left-to-right isolate\",\n    8295: \"right-to-left isolate\",\n    8297: \"pop directional isolate\",\n    8233: \"paragraph separator\",\n    65279: \"zero width no-break space\",\n    65532: \"object replacement\"\n};\nlet $071334078f8d3f8a$var$_supportsTabSize = null;\nfunction $071334078f8d3f8a$var$supportsTabSize() {\n    var _a;\n    if ($071334078f8d3f8a$var$_supportsTabSize == null && typeof document != \"undefined\" && document.body) {\n        let styles = document.body.style;\n        $071334078f8d3f8a$var$_supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;\n    }\n    return $071334078f8d3f8a$var$_supportsTabSize || false;\n}\nconst $071334078f8d3f8a$var$specialCharConfig = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (configs) {\n        let config = (0, $ccfb9497d8ef598f$export$4e19c0b693794a7e)(configs, {\n            render: null,\n            specialChars: $071334078f8d3f8a$var$Specials,\n            addSpecialChars: null\n        });\n        if (config.replaceTabs = !$071334078f8d3f8a$var$supportsTabSize()) config.specialChars = new RegExp(\"\t|\" + config.specialChars.source, $071334078f8d3f8a$var$UnicodeRegexpSupport);\n        if (config.addSpecialChars) config.specialChars = new RegExp(config.specialChars.source + \"|\" + config.addSpecialChars.source, $071334078f8d3f8a$var$UnicodeRegexpSupport);\n        return config;\n    }\n});\n/**\nReturns an extension that installs highlighting of special\ncharacters.\n*/ function $071334078f8d3f8a$export$76dc0899547f659c(/**\nConfiguration options.\n*/ config = {}) {\n    return [\n        $071334078f8d3f8a$var$specialCharConfig.of(config),\n        $071334078f8d3f8a$var$specialCharPlugin()\n    ];\n}\nlet $071334078f8d3f8a$var$_plugin = null;\nfunction $071334078f8d3f8a$var$specialCharPlugin() {\n    return $071334078f8d3f8a$var$_plugin || ($071334078f8d3f8a$var$_plugin = $071334078f8d3f8a$export$44d5eccfd62adda7.fromClass(class {\n        constructor(view){\n            this.view = view;\n            this.decorations = $071334078f8d3f8a$export$10e30b733df217ea.none;\n            this.decorationCache = Object.create(null);\n            this.decorator = this.makeDecorator(view.state.facet($071334078f8d3f8a$var$specialCharConfig));\n            this.decorations = this.decorator.createDeco(view);\n        }\n        makeDecorator(conf) {\n            return new $071334078f8d3f8a$export$9b928b0ca20b25cb({\n                regexp: conf.specialChars,\n                decoration: (m, view, pos)=>{\n                    let { doc: doc } = view.state;\n                    let code = (0, $ccfb9497d8ef598f$export$42977f40461e1360)(m[0], 0);\n                    if (code == 9) {\n                        let line = doc.lineAt(pos);\n                        let size = view.state.tabSize, col = (0, $ccfb9497d8ef598f$export$20b4ab289374d0ac)(line.text, size, pos - line.from);\n                        return $071334078f8d3f8a$export$10e30b733df217ea.replace({\n                            widget: new $071334078f8d3f8a$var$TabWidget((size - col % size) * this.view.defaultCharacterWidth)\n                        });\n                    }\n                    return this.decorationCache[code] || (this.decorationCache[code] = $071334078f8d3f8a$export$10e30b733df217ea.replace({\n                        widget: new $071334078f8d3f8a$var$SpecialCharWidget(conf, code)\n                    }));\n                },\n                boundary: conf.replaceTabs ? undefined : /[^]/\n            });\n        }\n        update(update) {\n            let conf = update.state.facet($071334078f8d3f8a$var$specialCharConfig);\n            if (update.startState.facet($071334078f8d3f8a$var$specialCharConfig) != conf) {\n                this.decorator = this.makeDecorator(conf);\n                this.decorations = this.decorator.createDeco(update.view);\n            } else this.decorations = this.decorator.updateDeco(update, this.decorations);\n        }\n    }, {\n        decorations: (v)=>v.decorations\n    }));\n}\nconst $071334078f8d3f8a$var$DefaultPlaceholder = \"•\";\n// Assigns placeholder characters from the Control Pictures block to\n// ASCII control characters\nfunction $071334078f8d3f8a$var$placeholder$1(code) {\n    if (code >= 32) return $071334078f8d3f8a$var$DefaultPlaceholder;\n    if (code == 10) return \"␤\";\n    return String.fromCharCode(9216 + code);\n}\nclass $071334078f8d3f8a$var$SpecialCharWidget extends $071334078f8d3f8a$export$95cdd842edb044c5 {\n    constructor(options, code){\n        super();\n        this.options = options;\n        this.code = code;\n    }\n    eq(other) {\n        return other.code == this.code;\n    }\n    toDOM(view) {\n        let ph = $071334078f8d3f8a$var$placeholder$1(this.code);\n        let desc = view.state.phrase(\"Control character\") + \" \" + ($071334078f8d3f8a$var$Names[this.code] || \"0x\" + this.code.toString(16));\n        let custom = this.options.render && this.options.render(this.code, desc, ph);\n        if (custom) return custom;\n        let span = document.createElement(\"span\");\n        span.textContent = ph;\n        span.title = desc;\n        span.setAttribute(\"aria-label\", desc);\n        span.className = \"cm-specialChar\";\n        return span;\n    }\n    ignoreEvent() {\n        return false;\n    }\n}\nclass $071334078f8d3f8a$var$TabWidget extends $071334078f8d3f8a$export$95cdd842edb044c5 {\n    constructor(width){\n        super();\n        this.width = width;\n    }\n    eq(other) {\n        return other.width == this.width;\n    }\n    toDOM() {\n        let span = document.createElement(\"span\");\n        span.textContent = \"\t\";\n        span.className = \"cm-tab\";\n        span.style.width = this.width + \"px\";\n        return span;\n    }\n    ignoreEvent() {\n        return false;\n    }\n}\nconst $071334078f8d3f8a$var$plugin = /*@__PURE__*/ $071334078f8d3f8a$export$44d5eccfd62adda7.fromClass(class {\n    constructor(){\n        this.height = 1000;\n        this.attrs = {\n            style: \"padding-bottom: 1000px\"\n        };\n    }\n    update(update) {\n        let { view: view } = update;\n        let height = view.viewState.editorHeight - view.defaultLineHeight - view.documentPadding.top - 0.5;\n        if (height >= 0 && height != this.height) {\n            this.height = height;\n            this.attrs = {\n                style: `padding-bottom: ${height}px`\n            };\n        }\n    }\n});\n/**\nReturns an extension that makes sure the content has a bottom\nmargin equivalent to the height of the editor, minus one line\nheight, so that every line in the document can be scrolled to the\ntop of the editor.\n\nThis is only meaningful when the editor is scrollable, and should\nnot be enabled in editors that take the size of their content.\n*/ function $071334078f8d3f8a$export$1f905ef5d6deb4f() {\n    return [\n        $071334078f8d3f8a$var$plugin,\n        $071334078f8d3f8a$var$contentAttributes.of((view)=>{\n            var _a;\n            return ((_a = view.plugin($071334078f8d3f8a$var$plugin)) === null || _a === void 0 ? void 0 : _a.attrs) || null;\n        })\n    ];\n}\n/**\nMark lines that have a cursor on them with the `\"cm-activeLine\"`\nDOM class.\n*/ function $071334078f8d3f8a$export$1a7e096bee9035c() {\n    return $071334078f8d3f8a$var$activeLineHighlighter;\n}\nconst $071334078f8d3f8a$var$lineDeco = /*@__PURE__*/ $071334078f8d3f8a$export$10e30b733df217ea.line({\n    class: \"cm-activeLine\"\n});\nconst $071334078f8d3f8a$var$activeLineHighlighter = /*@__PURE__*/ $071334078f8d3f8a$export$44d5eccfd62adda7.fromClass(class {\n    constructor(view){\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.docChanged || update.selectionSet) this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let lastLineStart = -1, deco = [];\n        for (let r of view.state.selection.ranges){\n            let line = view.lineBlockAt(r.head);\n            if (line.from > lastLineStart) {\n                deco.push($071334078f8d3f8a$var$lineDeco.range(line.from));\n                lastLineStart = line.from;\n            }\n        }\n        return $071334078f8d3f8a$export$10e30b733df217ea.set(deco);\n    }\n}, {\n    decorations: (v)=>v.decorations\n});\nclass $071334078f8d3f8a$var$Placeholder extends $071334078f8d3f8a$export$95cdd842edb044c5 {\n    constructor(content){\n        super();\n        this.content = content;\n    }\n    toDOM() {\n        let wrap = document.createElement(\"span\");\n        wrap.className = \"cm-placeholder\";\n        wrap.style.pointerEvents = \"none\";\n        wrap.appendChild(typeof this.content == \"string\" ? document.createTextNode(this.content) : this.content);\n        if (typeof this.content == \"string\") wrap.setAttribute(\"aria-label\", \"placeholder \" + this.content);\n        else wrap.setAttribute(\"aria-hidden\", \"true\");\n        return wrap;\n    }\n    coordsAt(dom) {\n        let rects = dom.firstChild ? $071334078f8d3f8a$var$clientRectsFor(dom.firstChild) : [];\n        if (!rects.length) return null;\n        let style = window.getComputedStyle(dom.parentNode);\n        let rect = $071334078f8d3f8a$var$flattenRect(rects[0], style.direction != \"rtl\");\n        let lineHeight = parseInt(style.lineHeight);\n        if (rect.bottom - rect.top > lineHeight * 1.5) return {\n            left: rect.left,\n            right: rect.right,\n            top: rect.top,\n            bottom: rect.top + lineHeight\n        };\n        return rect;\n    }\n    ignoreEvent() {\n        return false;\n    }\n}\n/**\nExtension that enables a placeholder—a piece of example content\nto show when the editor is empty.\n*/ function $071334078f8d3f8a$export$c7187bbd1a7a9244(content) {\n    return $071334078f8d3f8a$export$44d5eccfd62adda7.fromClass(class {\n        constructor(view){\n            this.view = view;\n            this.placeholder = content ? $071334078f8d3f8a$export$10e30b733df217ea.set([\n                $071334078f8d3f8a$export$10e30b733df217ea.widget({\n                    widget: new $071334078f8d3f8a$var$Placeholder(content),\n                    side: 1\n                }).range(0)\n            ]) : $071334078f8d3f8a$export$10e30b733df217ea.none;\n        }\n        get decorations() {\n            return this.view.state.doc.length ? $071334078f8d3f8a$export$10e30b733df217ea.none : this.placeholder;\n        }\n    }, {\n        decorations: (v)=>v.decorations\n    });\n}\n// Don't compute precise column positions for line offsets above this\n// (since it could get expensive). Assume offset==column for them.\nconst $071334078f8d3f8a$var$MaxOff = 2000;\nfunction $071334078f8d3f8a$var$rectangleFor(state, a, b) {\n    let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);\n    let ranges = [];\n    if (a.off > $071334078f8d3f8a$var$MaxOff || b.off > $071334078f8d3f8a$var$MaxOff || a.col < 0 || b.col < 0) {\n        let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);\n        for(let i = startLine; i <= endLine; i++){\n            let line = state.doc.line(i);\n            if (line.length <= endOff) ranges.push((0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(line.from + startOff, line.to + endOff));\n        }\n    } else {\n        let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);\n        for(let i = startLine; i <= endLine; i++){\n            let line = state.doc.line(i);\n            let start = (0, $ccfb9497d8ef598f$export$718b3d71c384ca05)(line.text, startCol, state.tabSize, true);\n            if (start < 0) ranges.push((0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(line.to));\n            else {\n                let end = (0, $ccfb9497d8ef598f$export$718b3d71c384ca05)(line.text, endCol, state.tabSize);\n                ranges.push((0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(line.from + start, line.from + end));\n            }\n        }\n    }\n    return ranges;\n}\nfunction $071334078f8d3f8a$var$absoluteColumn(view, x) {\n    let ref = view.coordsAtPos(view.viewport.from);\n    return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;\n}\nfunction $071334078f8d3f8a$var$getPos(view, event) {\n    let offset = view.posAtCoords({\n        x: event.clientX,\n        y: event.clientY\n    }, false);\n    let line = view.state.doc.lineAt(offset), off = offset - line.from;\n    let col = off > $071334078f8d3f8a$var$MaxOff ? -1 : off == line.length ? $071334078f8d3f8a$var$absoluteColumn(view, event.clientX) : (0, $ccfb9497d8ef598f$export$20b4ab289374d0ac)(line.text, view.state.tabSize, offset - line.from);\n    return {\n        line: line.number,\n        col: col,\n        off: off\n    };\n}\nfunction $071334078f8d3f8a$var$rectangleSelectionStyle(view, event) {\n    let start = $071334078f8d3f8a$var$getPos(view, event), startSel = view.state.selection;\n    if (!start) return null;\n    return {\n        update (update) {\n            if (update.docChanged) {\n                let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);\n                let newLine = update.state.doc.lineAt(newStart);\n                start = {\n                    line: newLine.number,\n                    col: start.col,\n                    off: Math.min(start.off, newLine.length)\n                };\n                startSel = startSel.map(update.changes);\n            }\n        },\n        get (event, _extend, multiple) {\n            let cur = $071334078f8d3f8a$var$getPos(view, event);\n            if (!cur) return startSel;\n            let ranges = $071334078f8d3f8a$var$rectangleFor(view.state, start, cur);\n            if (!ranges.length) return startSel;\n            if (multiple) return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create(ranges.concat(startSel.ranges));\n            else return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create(ranges);\n        }\n    };\n}\n/**\nCreate an extension that enables rectangular selections. By\ndefault, it will react to left mouse drag with the Alt key held\ndown. When such a selection occurs, the text within the rectangle\nthat was dragged over will be selected, as one selection\n[range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.\n*/ function $071334078f8d3f8a$export$dd482925db1aabd3(options) {\n    let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || ((e)=>e.altKey && e.button == 0);\n    return $071334078f8d3f8a$export$eece2fccabbb77c5.mouseSelectionStyle.of((view, event)=>filter(event) ? $071334078f8d3f8a$var$rectangleSelectionStyle(view, event) : null);\n}\nconst $071334078f8d3f8a$var$keys = {\n    Alt: [\n        18,\n        (e)=>!!e.altKey\n    ],\n    Control: [\n        17,\n        (e)=>!!e.ctrlKey\n    ],\n    Shift: [\n        16,\n        (e)=>!!e.shiftKey\n    ],\n    Meta: [\n        91,\n        (e)=>!!e.metaKey\n    ]\n};\nconst $071334078f8d3f8a$var$showCrosshair = {\n    style: \"cursor: crosshair\"\n};\n/**\nReturns an extension that turns the pointer cursor into a\ncrosshair when a given modifier key, defaulting to Alt, is held\ndown. Can serve as a visual hint that rectangular selection is\ngoing to happen when paired with\n[`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).\n*/ function $071334078f8d3f8a$export$9b6525222ac3b7fb(options = {}) {\n    let [code, getter] = $071334078f8d3f8a$var$keys[options.key || \"Alt\"];\n    let plugin = $071334078f8d3f8a$export$44d5eccfd62adda7.fromClass(class {\n        constructor(view){\n            this.view = view;\n            this.isDown = false;\n        }\n        set(isDown) {\n            if (this.isDown != isDown) {\n                this.isDown = isDown;\n                this.view.update([]);\n            }\n        }\n    }, {\n        eventHandlers: {\n            keydown (e) {\n                this.set(e.keyCode == code || getter(e));\n            },\n            keyup (e) {\n                if (e.keyCode == code || !getter(e)) this.set(false);\n            },\n            mousemove (e) {\n                this.set(getter(e));\n            }\n        }\n    });\n    return [\n        plugin,\n        $071334078f8d3f8a$export$eece2fccabbb77c5.contentAttributes.of((view)=>{\n            var _a;\n            return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? $071334078f8d3f8a$var$showCrosshair : null;\n        })\n    ];\n}\nconst $071334078f8d3f8a$var$Outside = \"-10000px\";\nclass $071334078f8d3f8a$var$TooltipViewManager {\n    constructor(view, facet, createTooltipView){\n        this.facet = facet;\n        this.createTooltipView = createTooltipView;\n        this.input = view.state.facet(facet);\n        this.tooltips = this.input.filter((t)=>t);\n        this.tooltipViews = this.tooltips.map(createTooltipView);\n    }\n    update(update) {\n        var _a;\n        let input = update.state.facet(this.facet);\n        let tooltips = input.filter((x)=>x);\n        if (input === this.input) {\n            for (let t of this.tooltipViews)if (t.update) t.update(update);\n            return false;\n        }\n        let tooltipViews = [];\n        for(let i = 0; i < tooltips.length; i++){\n            let tip = tooltips[i], known = -1;\n            if (!tip) continue;\n            for(let i = 0; i < this.tooltips.length; i++){\n                let other = this.tooltips[i];\n                if (other && other.create == tip.create) known = i;\n            }\n            if (known < 0) tooltipViews[i] = this.createTooltipView(tip);\n            else {\n                let tooltipView = tooltipViews[i] = this.tooltipViews[known];\n                if (tooltipView.update) tooltipView.update(update);\n            }\n        }\n        for (let t of this.tooltipViews)if (tooltipViews.indexOf(t) < 0) {\n            t.dom.remove();\n            (_a = t.destroy) === null || _a === void 0 || _a.call(t);\n        }\n        this.input = input;\n        this.tooltips = tooltips;\n        this.tooltipViews = tooltipViews;\n        return true;\n    }\n}\n/**\nCreates an extension that configures tooltip behavior.\n*/ function $071334078f8d3f8a$export$1fc29293196e3bc(config = {}) {\n    return $071334078f8d3f8a$var$tooltipConfig.of(config);\n}\nfunction $071334078f8d3f8a$var$windowSpace(view) {\n    let { win: win } = view;\n    return {\n        top: 0,\n        left: 0,\n        bottom: win.innerHeight,\n        right: win.innerWidth\n    };\n}\nconst $071334078f8d3f8a$var$tooltipConfig = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine: (values)=>{\n        var _a, _b, _c;\n        return {\n            position: $071334078f8d3f8a$var$browser.ios ? \"absolute\" : ((_a = values.find((conf)=>conf.position)) === null || _a === void 0 ? void 0 : _a.position) || \"fixed\",\n            parent: ((_b = values.find((conf)=>conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,\n            tooltipSpace: ((_c = values.find((conf)=>conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || $071334078f8d3f8a$var$windowSpace\n        };\n    }\n});\nconst $071334078f8d3f8a$var$knownHeight = /*@__PURE__*/ new WeakMap();\nconst $071334078f8d3f8a$var$tooltipPlugin = /*@__PURE__*/ $071334078f8d3f8a$export$44d5eccfd62adda7.fromClass(class {\n    constructor(view){\n        this.view = view;\n        this.inView = true;\n        this.lastTransaction = 0;\n        this.measureTimeout = -1;\n        let config = view.state.facet($071334078f8d3f8a$var$tooltipConfig);\n        this.position = config.position;\n        this.parent = config.parent;\n        this.classes = view.themeClasses;\n        this.createContainer();\n        this.measureReq = {\n            read: this.readMeasure.bind(this),\n            write: this.writeMeasure.bind(this),\n            key: this\n        };\n        this.manager = new $071334078f8d3f8a$var$TooltipViewManager(view, $071334078f8d3f8a$export$dba11b50e1aa3c12, (t)=>this.createTooltip(t));\n        this.intersectionObserver = typeof IntersectionObserver == \"function\" ? new IntersectionObserver((entries)=>{\n            if (Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1) this.measureSoon();\n        }, {\n            threshold: [\n                1\n            ]\n        }) : null;\n        this.observeIntersection();\n        view.win.addEventListener(\"resize\", this.measureSoon = this.measureSoon.bind(this));\n        this.maybeMeasure();\n    }\n    createContainer() {\n        if (this.parent) {\n            this.container = document.createElement(\"div\");\n            this.container.style.position = \"relative\";\n            this.container.className = this.view.themeClasses;\n            this.parent.appendChild(this.container);\n        } else this.container = this.view.dom;\n    }\n    observeIntersection() {\n        if (this.intersectionObserver) {\n            this.intersectionObserver.disconnect();\n            for (let tooltip of this.manager.tooltipViews)this.intersectionObserver.observe(tooltip.dom);\n        }\n    }\n    measureSoon() {\n        if (this.measureTimeout < 0) this.measureTimeout = setTimeout(()=>{\n            this.measureTimeout = -1;\n            this.maybeMeasure();\n        }, 50);\n    }\n    update(update) {\n        if (update.transactions.length) this.lastTransaction = Date.now();\n        let updated = this.manager.update(update);\n        if (updated) this.observeIntersection();\n        let shouldMeasure = updated || update.geometryChanged;\n        let newConfig = update.state.facet($071334078f8d3f8a$var$tooltipConfig);\n        if (newConfig.position != this.position) {\n            this.position = newConfig.position;\n            for (let t of this.manager.tooltipViews)t.dom.style.position = this.position;\n            shouldMeasure = true;\n        }\n        if (newConfig.parent != this.parent) {\n            if (this.parent) this.container.remove();\n            this.parent = newConfig.parent;\n            this.createContainer();\n            for (let t of this.manager.tooltipViews)this.container.appendChild(t.dom);\n            shouldMeasure = true;\n        } else if (this.parent && this.view.themeClasses != this.classes) this.classes = this.container.className = this.view.themeClasses;\n        if (shouldMeasure) this.maybeMeasure();\n    }\n    createTooltip(tooltip) {\n        let tooltipView = tooltip.create(this.view);\n        tooltipView.dom.classList.add(\"cm-tooltip\");\n        if (tooltip.arrow && !tooltipView.dom.querySelector(\".cm-tooltip > .cm-tooltip-arrow\")) {\n            let arrow = document.createElement(\"div\");\n            arrow.className = \"cm-tooltip-arrow\";\n            tooltipView.dom.appendChild(arrow);\n        }\n        tooltipView.dom.style.position = this.position;\n        tooltipView.dom.style.top = $071334078f8d3f8a$var$Outside;\n        this.container.appendChild(tooltipView.dom);\n        if (tooltipView.mount) tooltipView.mount(this.view);\n        return tooltipView;\n    }\n    destroy() {\n        var _a, _b;\n        this.view.win.removeEventListener(\"resize\", this.measureSoon);\n        for (let tooltipView of this.manager.tooltipViews){\n            tooltipView.dom.remove();\n            (_a = tooltipView.destroy) === null || _a === void 0 || _a.call(tooltipView);\n        }\n        (_b = this.intersectionObserver) === null || _b === void 0 || _b.disconnect();\n        clearTimeout(this.measureTimeout);\n    }\n    readMeasure() {\n        let editor = this.view.dom.getBoundingClientRect();\n        return {\n            editor: editor,\n            parent: this.parent ? this.container.getBoundingClientRect() : editor,\n            pos: this.manager.tooltips.map((t, i)=>{\n                let tv = this.manager.tooltipViews[i];\n                return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);\n            }),\n            size: this.manager.tooltipViews.map(({ dom: dom })=>dom.getBoundingClientRect()),\n            space: this.view.state.facet($071334078f8d3f8a$var$tooltipConfig).tooltipSpace(this.view)\n        };\n    }\n    writeMeasure(measured) {\n        var _a;\n        let { editor: editor, space: space } = measured;\n        let others = [];\n        for(let i = 0; i < this.manager.tooltips.length; i++){\n            let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom: dom } = tView;\n            let pos = measured.pos[i], size = measured.size[i];\n            // Hide tooltips that are outside of the editor.\n            if (!pos || pos.bottom <= Math.max(editor.top, space.top) || pos.top >= Math.min(editor.bottom, space.bottom) || pos.right < Math.max(editor.left, space.left) - .1 || pos.left > Math.min(editor.right, space.right) + .1) {\n                dom.style.top = $071334078f8d3f8a$var$Outside;\n                continue;\n            }\n            let arrow = tooltip.arrow ? tView.dom.querySelector(\".cm-tooltip-arrow\") : null;\n            let arrowHeight = arrow ? 7 /* Size */  : 0;\n            let width = size.right - size.left, height = (_a = $071334078f8d3f8a$var$knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;\n            let offset = tView.offset || $071334078f8d3f8a$var$noOffset, ltr = this.view.textDirection == $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR;\n            let left = size.width > space.right - space.left ? ltr ? space.left : space.right - size.width : ltr ? Math.min(pos.left - (arrow ? 14 /* Offset */  : 0) + offset.x, space.right - width) : Math.max(space.left, pos.left - width + (arrow ? 14 /* Offset */  : 0) - offset.x);\n            let above = !!tooltip.above;\n            if (!tooltip.strictSide && (above ? pos.top - (size.bottom - size.top) - offset.y < space.top : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) && above == space.bottom - pos.bottom > pos.top - space.top) above = !above;\n            let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;\n            if (spaceVert < height && tView.resize !== false) {\n                if (spaceVert < this.view.defaultLineHeight) {\n                    dom.style.top = $071334078f8d3f8a$var$Outside;\n                    continue;\n                }\n                $071334078f8d3f8a$var$knownHeight.set(tView, height);\n                dom.style.height = (height = spaceVert) + \"px\";\n            } else if (dom.style.height) dom.style.height = \"\";\n            let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;\n            let right = left + width;\n            if (tView.overlap !== true) {\n                for (let r of others)if (r.left < right && r.right > left && r.top < top + height && r.bottom > top) top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;\n            }\n            if (this.position == \"absolute\") {\n                dom.style.top = top - measured.parent.top + \"px\";\n                dom.style.left = left - measured.parent.left + \"px\";\n            } else {\n                dom.style.top = top + \"px\";\n                dom.style.left = left + \"px\";\n            }\n            if (arrow) arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Offset */  - 7 /* Size */ )}px`;\n            if (tView.overlap !== true) others.push({\n                left: left,\n                top: top,\n                right: right,\n                bottom: top + height\n            });\n            dom.classList.toggle(\"cm-tooltip-above\", above);\n            dom.classList.toggle(\"cm-tooltip-below\", !above);\n            if (tView.positioned) tView.positioned(measured.space);\n        }\n    }\n    maybeMeasure() {\n        if (this.manager.tooltips.length) {\n            if (this.view.inView) this.view.requestMeasure(this.measureReq);\n            if (this.inView != this.view.inView) {\n                this.inView = this.view.inView;\n                if (!this.inView) for (let tv of this.manager.tooltipViews)tv.dom.style.top = $071334078f8d3f8a$var$Outside;\n            }\n        }\n    }\n}, {\n    eventHandlers: {\n        scroll () {\n            this.maybeMeasure();\n        }\n    }\n});\nconst $071334078f8d3f8a$var$baseTheme = /*@__PURE__*/ $071334078f8d3f8a$export$eece2fccabbb77c5.baseTheme({\n    \".cm-tooltip\": {\n        zIndex: 100,\n        boxSizing: \"border-box\"\n    },\n    \"&light .cm-tooltip\": {\n        border: \"1px solid #bbb\",\n        backgroundColor: \"#f5f5f5\"\n    },\n    \"&light .cm-tooltip-section:not(:first-child)\": {\n        borderTop: \"1px solid #bbb\"\n    },\n    \"&dark .cm-tooltip\": {\n        backgroundColor: \"#333338\",\n        color: \"white\"\n    },\n    \".cm-tooltip-arrow\": {\n        height: `${7 /* Size */ }px`,\n        width: `${14}px`,\n        position: \"absolute\",\n        zIndex: -1,\n        overflow: \"hidden\",\n        \"&:before, &:after\": {\n            content: \"''\",\n            position: \"absolute\",\n            width: 0,\n            height: 0,\n            borderLeft: `${7 /* Size */ }px solid transparent`,\n            borderRight: `${7 /* Size */ }px solid transparent`\n        },\n        \".cm-tooltip-above &\": {\n            bottom: `-${7 /* Size */ }px`,\n            \"&:before\": {\n                borderTop: `${7 /* Size */ }px solid #bbb`\n            },\n            \"&:after\": {\n                borderTop: `${7 /* Size */ }px solid #f5f5f5`,\n                bottom: \"1px\"\n            }\n        },\n        \".cm-tooltip-below &\": {\n            top: `-${7 /* Size */ }px`,\n            \"&:before\": {\n                borderBottom: `${7 /* Size */ }px solid #bbb`\n            },\n            \"&:after\": {\n                borderBottom: `${7 /* Size */ }px solid #f5f5f5`,\n                top: \"1px\"\n            }\n        }\n    },\n    \"&dark .cm-tooltip .cm-tooltip-arrow\": {\n        \"&:before\": {\n            borderTopColor: \"#333338\",\n            borderBottomColor: \"#333338\"\n        },\n        \"&:after\": {\n            borderTopColor: \"transparent\",\n            borderBottomColor: \"transparent\"\n        }\n    }\n});\nconst $071334078f8d3f8a$var$noOffset = {\n    x: 0,\n    y: 0\n};\n/**\nFacet to which an extension can add a value to show a tooltip.\n*/ const $071334078f8d3f8a$export$dba11b50e1aa3c12 = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    enables: [\n        $071334078f8d3f8a$var$tooltipPlugin,\n        $071334078f8d3f8a$var$baseTheme\n    ]\n});\nconst $071334078f8d3f8a$var$showHoverTooltip = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nclass $071334078f8d3f8a$var$HoverTooltipHost {\n    constructor(view){\n        this.view = view;\n        this.mounted = false;\n        this.dom = document.createElement(\"div\");\n        this.dom.classList.add(\"cm-tooltip-hover\");\n        this.manager = new $071334078f8d3f8a$var$TooltipViewManager(view, $071334078f8d3f8a$var$showHoverTooltip, (t)=>this.createHostedView(t));\n    }\n    // Needs to be static so that host tooltip instances always match\n    static create(view) {\n        return new $071334078f8d3f8a$var$HoverTooltipHost(view);\n    }\n    createHostedView(tooltip) {\n        let hostedView = tooltip.create(this.view);\n        hostedView.dom.classList.add(\"cm-tooltip-section\");\n        this.dom.appendChild(hostedView.dom);\n        if (this.mounted && hostedView.mount) hostedView.mount(this.view);\n        return hostedView;\n    }\n    mount(view) {\n        for (let hostedView of this.manager.tooltipViews)if (hostedView.mount) hostedView.mount(view);\n        this.mounted = true;\n    }\n    positioned(space) {\n        for (let hostedView of this.manager.tooltipViews)if (hostedView.positioned) hostedView.positioned(space);\n    }\n    update(update) {\n        this.manager.update(update);\n    }\n    destroy() {\n        var _a;\n        for (let t of this.manager.tooltipViews)(_a = t.destroy) === null || _a === void 0 || _a.call(t);\n    }\n}\nconst $071334078f8d3f8a$var$showHoverTooltipHost = /*@__PURE__*/ $071334078f8d3f8a$export$dba11b50e1aa3c12.compute([\n    $071334078f8d3f8a$var$showHoverTooltip\n], (state)=>{\n    let tooltips = state.facet($071334078f8d3f8a$var$showHoverTooltip).filter((t)=>t);\n    if (tooltips.length === 0) return null;\n    return {\n        pos: Math.min(...tooltips.map((t)=>t.pos)),\n        end: Math.max(...tooltips.filter((t)=>t.end != null).map((t)=>t.end)),\n        create: $071334078f8d3f8a$var$HoverTooltipHost.create,\n        above: tooltips[0].above,\n        arrow: tooltips.some((t)=>t.arrow)\n    };\n});\nclass $071334078f8d3f8a$var$HoverPlugin {\n    constructor(view, source, field, setHover, hoverTime){\n        this.view = view;\n        this.source = source;\n        this.field = field;\n        this.setHover = setHover;\n        this.hoverTime = hoverTime;\n        this.hoverTimeout = -1;\n        this.restartTimeout = -1;\n        this.pending = null;\n        this.lastMove = {\n            x: 0,\n            y: 0,\n            target: view.dom,\n            time: 0\n        };\n        this.checkHover = this.checkHover.bind(this);\n        view.dom.addEventListener(\"mouseleave\", this.mouseleave = this.mouseleave.bind(this));\n        view.dom.addEventListener(\"mousemove\", this.mousemove = this.mousemove.bind(this));\n    }\n    update() {\n        if (this.pending) {\n            this.pending = null;\n            clearTimeout(this.restartTimeout);\n            this.restartTimeout = setTimeout(()=>this.startHover(), 20);\n        }\n    }\n    get active() {\n        return this.view.state.field(this.field);\n    }\n    checkHover() {\n        this.hoverTimeout = -1;\n        if (this.active) return;\n        let hovered = Date.now() - this.lastMove.time;\n        if (hovered < this.hoverTime) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);\n        else this.startHover();\n    }\n    startHover() {\n        clearTimeout(this.restartTimeout);\n        let { lastMove: lastMove } = this;\n        let pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;\n        if (pos == null) return;\n        let posCoords = this.view.coordsAtPos(pos);\n        if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - this.view.defaultCharacterWidth || lastMove.x > posCoords.right + this.view.defaultCharacterWidth) return;\n        let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find((s)=>s.from <= pos && s.to >= pos);\n        let rtl = bidi && bidi.dir == $071334078f8d3f8a$export$cacd6541cfeeb6c1.RTL ? -1 : 1;\n        let open = this.source(this.view, pos, lastMove.x < posCoords.left ? -rtl : rtl);\n        if (open === null || open === void 0 ? void 0 : open.then) {\n            let pending = this.pending = {\n                pos: pos\n            };\n            open.then((result)=>{\n                if (this.pending == pending) {\n                    this.pending = null;\n                    if (result) this.view.dispatch({\n                        effects: this.setHover.of(result)\n                    });\n                }\n            }, (e)=>$071334078f8d3f8a$export$f86b2a1a2ce291b3(this.view.state, e, \"hover tooltip\"));\n        } else if (open) this.view.dispatch({\n            effects: this.setHover.of(open)\n        });\n    }\n    mousemove(event) {\n        var _a;\n        this.lastMove = {\n            x: event.clientX,\n            y: event.clientY,\n            target: event.target,\n            time: Date.now()\n        };\n        if (this.hoverTimeout < 0) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);\n        let tooltip = this.active;\n        if (tooltip && !$071334078f8d3f8a$var$isInTooltip(this.lastMove.target) || this.pending) {\n            let { pos: pos } = tooltip || this.pending, end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;\n            if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !$071334078f8d3f8a$var$isOverRange(this.view, pos, end, event.clientX, event.clientY, 6 /* MaxDist */ )) {\n                this.view.dispatch({\n                    effects: this.setHover.of(null)\n                });\n                this.pending = null;\n            }\n        }\n    }\n    mouseleave(e) {\n        clearTimeout(this.hoverTimeout);\n        this.hoverTimeout = -1;\n        if (this.active && !$071334078f8d3f8a$var$isInTooltip(e.relatedTarget)) this.view.dispatch({\n            effects: this.setHover.of(null)\n        });\n    }\n    destroy() {\n        clearTimeout(this.hoverTimeout);\n        this.view.dom.removeEventListener(\"mouseleave\", this.mouseleave);\n        this.view.dom.removeEventListener(\"mousemove\", this.mousemove);\n    }\n}\nfunction $071334078f8d3f8a$var$isInTooltip(elt) {\n    for(let cur = elt; cur; cur = cur.parentNode)if (cur.nodeType == 1 && cur.classList.contains(\"cm-tooltip\")) return true;\n    return false;\n}\nfunction $071334078f8d3f8a$var$isOverRange(view, from, to, x, y, margin) {\n    let range = document.createRange();\n    let fromDOM = view.domAtPos(from), toDOM = view.domAtPos(to);\n    range.setEnd(toDOM.node, toDOM.offset);\n    range.setStart(fromDOM.node, fromDOM.offset);\n    let rects = range.getClientRects();\n    range.detach();\n    for(let i = 0; i < rects.length; i++){\n        let rect = rects[i];\n        let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);\n        if (dist <= margin) return true;\n    }\n    return false;\n}\n/**\nSet up a hover tooltip, which shows up when the pointer hovers\nover ranges of text. The callback is called when the mouse hovers\nover the document text. It should, if there is a tooltip\nassociated with position `pos`, return the tooltip description\n(either directly or in a promise). The `side` argument indicates\non which side of the position the pointer is—it will be -1 if the\npointer is before the position, 1 if after the position.\n\nNote that all hover tooltips are hosted within a single tooltip\ncontainer element. This allows multiple tooltips over the same\nrange to be \"merged\" together without overlapping.\n*/ function $071334078f8d3f8a$export$69f8d9e63c4aa884(source, options = {}) {\n    let setHover = (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\n    let hoverState = (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n        create () {\n            return null;\n        },\n        update (value, tr) {\n            if (value && (options.hideOnChange && (tr.docChanged || tr.selection) || options.hideOn && options.hideOn(tr, value))) return null;\n            if (value && tr.docChanged) {\n                let newPos = tr.changes.mapPos(value.pos, -1, (0, $ccfb9497d8ef598f$export$39cf3280165f92aa).TrackDel);\n                if (newPos == null) return null;\n                let copy = Object.assign(Object.create(null), value);\n                copy.pos = newPos;\n                if (value.end != null) copy.end = tr.changes.mapPos(value.end);\n                value = copy;\n            }\n            for (let effect of tr.effects){\n                if (effect.is(setHover)) value = effect.value;\n                if (effect.is($071334078f8d3f8a$var$closeHoverTooltipEffect)) value = null;\n            }\n            return value;\n        },\n        provide: (f)=>$071334078f8d3f8a$var$showHoverTooltip.from(f)\n    });\n    return [\n        hoverState,\n        $071334078f8d3f8a$export$44d5eccfd62adda7.define((view)=>new $071334078f8d3f8a$var$HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Time */ )),\n        $071334078f8d3f8a$var$showHoverTooltipHost\n    ];\n}\n/**\nGet the active tooltip view for a given tooltip, if available.\n*/ function $071334078f8d3f8a$export$46455b4476d4b8e1(view, tooltip) {\n    let plugin = view.plugin($071334078f8d3f8a$var$tooltipPlugin);\n    if (!plugin) return null;\n    let found = plugin.manager.tooltips.indexOf(tooltip);\n    return found < 0 ? null : plugin.manager.tooltipViews[found];\n}\n/**\nReturns true if any hover tooltips are currently active.\n*/ function $071334078f8d3f8a$export$7864d875805bc1b0(state) {\n    return state.facet($071334078f8d3f8a$var$showHoverTooltip).some((x)=>x);\n}\nconst $071334078f8d3f8a$var$closeHoverTooltipEffect = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\n/**\nTransaction effect that closes all hover tooltips.\n*/ const $071334078f8d3f8a$export$f6974094db6525a = /*@__PURE__*/ $071334078f8d3f8a$var$closeHoverTooltipEffect.of(null);\n/**\nTell the tooltip extension to recompute the position of the active\ntooltips. This can be useful when something happens (such as a\nre-positioning or CSS change affecting the editor) that could\ninvalidate the existing tooltip positions.\n*/ function $071334078f8d3f8a$export$912859096d593b90(view) {\n    var _a;\n    (_a = view.plugin($071334078f8d3f8a$var$tooltipPlugin)) === null || _a === void 0 || _a.maybeMeasure();\n}\nconst $071334078f8d3f8a$var$panelConfig = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (configs) {\n        let topContainer, bottomContainer;\n        for (let c of configs){\n            topContainer = topContainer || c.topContainer;\n            bottomContainer = bottomContainer || c.bottomContainer;\n        }\n        return {\n            topContainer: topContainer,\n            bottomContainer: bottomContainer\n        };\n    }\n});\n/**\nConfigures the panel-managing extension.\n*/ function $071334078f8d3f8a$export$8128819a2322681a(config) {\n    return config ? [\n        $071334078f8d3f8a$var$panelConfig.of(config)\n    ] : [];\n}\n/**\nGet the active panel created by the given constructor, if any.\nThis can be useful when you need access to your panels' DOM\nstructure.\n*/ function $071334078f8d3f8a$export$7361ed18ff57179e(view, panel) {\n    let plugin = view.plugin($071334078f8d3f8a$var$panelPlugin);\n    let index = plugin ? plugin.specs.indexOf(panel) : -1;\n    return index > -1 ? plugin.panels[index] : null;\n}\nconst $071334078f8d3f8a$var$panelPlugin = /*@__PURE__*/ $071334078f8d3f8a$export$44d5eccfd62adda7.fromClass(class {\n    constructor(view){\n        this.input = view.state.facet($071334078f8d3f8a$export$e89c3c9af31c1e3b);\n        this.specs = this.input.filter((s)=>s);\n        this.panels = this.specs.map((spec)=>spec(view));\n        let conf = view.state.facet($071334078f8d3f8a$var$panelConfig);\n        this.top = new $071334078f8d3f8a$var$PanelGroup(view, true, conf.topContainer);\n        this.bottom = new $071334078f8d3f8a$var$PanelGroup(view, false, conf.bottomContainer);\n        this.top.sync(this.panels.filter((p)=>p.top));\n        this.bottom.sync(this.panels.filter((p)=>!p.top));\n        for (let p of this.panels){\n            p.dom.classList.add(\"cm-panel\");\n            if (p.mount) p.mount();\n        }\n    }\n    update(update) {\n        let conf = update.state.facet($071334078f8d3f8a$var$panelConfig);\n        if (this.top.container != conf.topContainer) {\n            this.top.sync([]);\n            this.top = new $071334078f8d3f8a$var$PanelGroup(update.view, true, conf.topContainer);\n        }\n        if (this.bottom.container != conf.bottomContainer) {\n            this.bottom.sync([]);\n            this.bottom = new $071334078f8d3f8a$var$PanelGroup(update.view, false, conf.bottomContainer);\n        }\n        this.top.syncClasses();\n        this.bottom.syncClasses();\n        let input = update.state.facet($071334078f8d3f8a$export$e89c3c9af31c1e3b);\n        if (input != this.input) {\n            let specs = input.filter((x)=>x);\n            let panels = [], top = [], bottom = [], mount = [];\n            for (let spec of specs){\n                let known = this.specs.indexOf(spec), panel;\n                if (known < 0) {\n                    panel = spec(update.view);\n                    mount.push(panel);\n                } else {\n                    panel = this.panels[known];\n                    if (panel.update) panel.update(update);\n                }\n                panels.push(panel);\n                (panel.top ? top : bottom).push(panel);\n            }\n            this.specs = specs;\n            this.panels = panels;\n            this.top.sync(top);\n            this.bottom.sync(bottom);\n            for (let p of mount){\n                p.dom.classList.add(\"cm-panel\");\n                if (p.mount) p.mount();\n            }\n        } else {\n            for (let p of this.panels)if (p.update) p.update(update);\n        }\n    }\n    destroy() {\n        this.top.sync([]);\n        this.bottom.sync([]);\n    }\n}, {\n    provide: (plugin)=>$071334078f8d3f8a$export$eece2fccabbb77c5.scrollMargins.of((view)=>{\n            let value = view.plugin(plugin);\n            return value && {\n                top: value.top.scrollMargin(),\n                bottom: value.bottom.scrollMargin()\n            };\n        })\n});\nclass $071334078f8d3f8a$var$PanelGroup {\n    constructor(view, top, container){\n        this.view = view;\n        this.top = top;\n        this.container = container;\n        this.dom = undefined;\n        this.classes = \"\";\n        this.panels = [];\n        this.syncClasses();\n    }\n    sync(panels) {\n        for (let p of this.panels)if (p.destroy && panels.indexOf(p) < 0) p.destroy();\n        this.panels = panels;\n        this.syncDOM();\n    }\n    syncDOM() {\n        if (this.panels.length == 0) {\n            if (this.dom) {\n                this.dom.remove();\n                this.dom = undefined;\n            }\n            return;\n        }\n        if (!this.dom) {\n            this.dom = document.createElement(\"div\");\n            this.dom.className = this.top ? \"cm-panels cm-panels-top\" : \"cm-panels cm-panels-bottom\";\n            this.dom.style[this.top ? \"top\" : \"bottom\"] = \"0\";\n            let parent = this.container || this.view.dom;\n            parent.insertBefore(this.dom, this.top ? parent.firstChild : null);\n        }\n        let curDOM = this.dom.firstChild;\n        for (let panel of this.panels)if (panel.dom.parentNode == this.dom) {\n            while(curDOM != panel.dom)curDOM = $071334078f8d3f8a$var$rm(curDOM);\n            curDOM = curDOM.nextSibling;\n        } else this.dom.insertBefore(panel.dom, curDOM);\n        while(curDOM)curDOM = $071334078f8d3f8a$var$rm(curDOM);\n    }\n    scrollMargin() {\n        return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);\n    }\n    syncClasses() {\n        if (!this.container || this.classes == this.view.themeClasses) return;\n        for (let cls of this.classes.split(\" \"))if (cls) this.container.classList.remove(cls);\n        for (let cls of (this.classes = this.view.themeClasses).split(\" \"))if (cls) this.container.classList.add(cls);\n    }\n}\nfunction $071334078f8d3f8a$var$rm(node) {\n    let next = node.nextSibling;\n    node.remove();\n    return next;\n}\n/**\nOpening a panel is done by providing a constructor function for\nthe panel through this facet. (The panel is closed again when its\nconstructor is no longer provided.) Values of `null` are ignored.\n*/ const $071334078f8d3f8a$export$e89c3c9af31c1e3b = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    enables: $071334078f8d3f8a$var$panelPlugin\n});\n/**\nA gutter marker represents a bit of information attached to a line\nin a specific gutter. Your own custom markers have to extend this\nclass.\n*/ class $071334078f8d3f8a$export$591ab4c909549043 extends (0, $ccfb9497d8ef598f$export$d60f08ed93a48611) {\n    /**\n    @internal\n    */ compare(other) {\n        return this == other || this.constructor == other.constructor && this.eq(other);\n    }\n    /**\n    Compare this marker to another marker of the same type.\n    */ eq(other) {\n        return false;\n    }\n    /**\n    Called if the marker has a `toDOM` method and its representation\n    was removed from a gutter.\n    */ destroy(dom) {}\n}\n$071334078f8d3f8a$export$591ab4c909549043.prototype.elementClass = \"\";\n$071334078f8d3f8a$export$591ab4c909549043.prototype.toDOM = undefined;\n$071334078f8d3f8a$export$591ab4c909549043.prototype.mapMode = (0, $ccfb9497d8ef598f$export$39cf3280165f92aa).TrackBefore;\n$071334078f8d3f8a$export$591ab4c909549043.prototype.startSide = $071334078f8d3f8a$export$591ab4c909549043.prototype.endSide = -1;\n$071334078f8d3f8a$export$591ab4c909549043.prototype.point = true;\n/**\nFacet used to add a class to all gutter elements for a given line.\nMarkers given to this facet should _only_ define an\n[`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a\n[`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear\nin all gutters for the line).\n*/ const $071334078f8d3f8a$export$113bd64f27ac1172 = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $071334078f8d3f8a$var$defaults = {\n    class: \"\",\n    renderEmptyElements: false,\n    elementStyle: \"\",\n    markers: ()=>(0, $ccfb9497d8ef598f$export$34cb5241245008dd).empty,\n    lineMarker: ()=>null,\n    widgetMarker: ()=>null,\n    lineMarkerChange: null,\n    initialSpacer: null,\n    updateSpacer: null,\n    domEventHandlers: {}\n};\nconst $071334078f8d3f8a$var$activeGutters = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\n/**\nDefine an editor gutter. The order in which the gutters appear is\ndetermined by their extension priority.\n*/ function $071334078f8d3f8a$export$f2b922cb4a245974(config) {\n    return [\n        $071334078f8d3f8a$export$ec15ef01b8fbae61(),\n        $071334078f8d3f8a$var$activeGutters.of(Object.assign(Object.assign({}, $071334078f8d3f8a$var$defaults), config))\n    ];\n}\nconst $071334078f8d3f8a$var$unfixGutters = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine: (values)=>values.some((x)=>x)\n});\n/**\nThe gutter-drawing plugin is automatically enabled when you add a\ngutter, but you can use this function to explicitly configure it.\n\nUnless `fixed` is explicitly set to `false`, the gutters are\nfixed, meaning they don't scroll along with the content\nhorizontally (except on Internet Explorer, which doesn't support\nCSS [`position:\nsticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).\n*/ function $071334078f8d3f8a$export$ec15ef01b8fbae61(config) {\n    let result = [\n        $071334078f8d3f8a$var$gutterView\n    ];\n    if (config && config.fixed === false) result.push($071334078f8d3f8a$var$unfixGutters.of(true));\n    return result;\n}\nconst $071334078f8d3f8a$var$gutterView = /*@__PURE__*/ $071334078f8d3f8a$export$44d5eccfd62adda7.fromClass(class {\n    constructor(view){\n        this.view = view;\n        this.prevViewport = view.viewport;\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-gutters\";\n        this.dom.setAttribute(\"aria-hidden\", \"true\");\n        this.dom.style.minHeight = this.view.contentHeight + \"px\";\n        this.gutters = view.state.facet($071334078f8d3f8a$var$activeGutters).map((conf)=>new $071334078f8d3f8a$var$SingleGutterView(view, conf));\n        for (let gutter of this.gutters)this.dom.appendChild(gutter.dom);\n        this.fixed = !view.state.facet($071334078f8d3f8a$var$unfixGutters);\n        if (this.fixed) // FIXME IE11 fallback, which doesn't support position: sticky,\n        // by using position: relative + event handlers that realign the\n        // gutter (or just force fixed=false on IE11?)\n        this.dom.style.position = \"sticky\";\n        this.syncGutters(false);\n        view.scrollDOM.insertBefore(this.dom, view.contentDOM);\n    }\n    update(update) {\n        if (this.updateGutters(update)) {\n            // Detach during sync when the viewport changed significantly\n            // (such as during scrolling), since for large updates that is\n            // faster.\n            let vpA = this.prevViewport, vpB = update.view.viewport;\n            let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);\n            this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);\n        }\n        if (update.geometryChanged) this.dom.style.minHeight = this.view.contentHeight + \"px\";\n        if (this.view.state.facet($071334078f8d3f8a$var$unfixGutters) != !this.fixed) {\n            this.fixed = !this.fixed;\n            this.dom.style.position = this.fixed ? \"sticky\" : \"\";\n        }\n        this.prevViewport = update.view.viewport;\n    }\n    syncGutters(detach) {\n        let after = this.dom.nextSibling;\n        if (detach) this.dom.remove();\n        let lineClasses = (0, $ccfb9497d8ef598f$export$34cb5241245008dd).iter(this.view.state.facet($071334078f8d3f8a$export$113bd64f27ac1172), this.view.viewport.from);\n        let classSet = [];\n        let contexts = this.gutters.map((gutter)=>new $071334078f8d3f8a$var$UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));\n        for (let line of this.view.viewportLineBlocks){\n            if (classSet.length) classSet = [];\n            if (Array.isArray(line.type)) {\n                let first = true;\n                for (let b of line.type){\n                    if (b.type == $071334078f8d3f8a$export$48808c686fe495c4.Text && first) {\n                        $071334078f8d3f8a$var$advanceCursor(lineClasses, classSet, b.from);\n                        for (let cx of contexts)cx.line(this.view, b, classSet);\n                        first = false;\n                    } else if (b.widget) for (let cx of contexts)cx.widget(this.view, b);\n                }\n            } else if (line.type == $071334078f8d3f8a$export$48808c686fe495c4.Text) {\n                $071334078f8d3f8a$var$advanceCursor(lineClasses, classSet, line.from);\n                for (let cx of contexts)cx.line(this.view, line, classSet);\n            }\n        }\n        for (let cx of contexts)cx.finish();\n        if (detach) this.view.scrollDOM.insertBefore(this.dom, after);\n    }\n    updateGutters(update) {\n        let prev = update.startState.facet($071334078f8d3f8a$var$activeGutters), cur = update.state.facet($071334078f8d3f8a$var$activeGutters);\n        let change = update.docChanged || update.heightChanged || update.viewportChanged || !(0, $ccfb9497d8ef598f$export$34cb5241245008dd).eq(update.startState.facet($071334078f8d3f8a$export$113bd64f27ac1172), update.state.facet($071334078f8d3f8a$export$113bd64f27ac1172), update.view.viewport.from, update.view.viewport.to);\n        if (prev == cur) {\n            for (let gutter of this.gutters)if (gutter.update(update)) change = true;\n        } else {\n            change = true;\n            let gutters = [];\n            for (let conf of cur){\n                let known = prev.indexOf(conf);\n                if (known < 0) gutters.push(new $071334078f8d3f8a$var$SingleGutterView(this.view, conf));\n                else {\n                    this.gutters[known].update(update);\n                    gutters.push(this.gutters[known]);\n                }\n            }\n            for (let g of this.gutters){\n                g.dom.remove();\n                if (gutters.indexOf(g) < 0) g.destroy();\n            }\n            for (let g of gutters)this.dom.appendChild(g.dom);\n            this.gutters = gutters;\n        }\n        return change;\n    }\n    destroy() {\n        for (let view of this.gutters)view.destroy();\n        this.dom.remove();\n    }\n}, {\n    provide: (plugin)=>$071334078f8d3f8a$export$eece2fccabbb77c5.scrollMargins.of((view)=>{\n            let value = view.plugin(plugin);\n            if (!value || value.gutters.length == 0 || !value.fixed) return null;\n            return view.textDirection == $071334078f8d3f8a$export$cacd6541cfeeb6c1.LTR ? {\n                left: value.dom.offsetWidth\n            } : {\n                right: value.dom.offsetWidth\n            };\n        })\n});\nfunction $071334078f8d3f8a$var$asArray(val) {\n    return Array.isArray(val) ? val : [\n        val\n    ];\n}\nfunction $071334078f8d3f8a$var$advanceCursor(cursor, collect, pos) {\n    while(cursor.value && cursor.from <= pos){\n        if (cursor.from == pos) collect.push(cursor.value);\n        cursor.next();\n    }\n}\nclass $071334078f8d3f8a$var$UpdateContext {\n    constructor(gutter, viewport, height){\n        this.gutter = gutter;\n        this.height = height;\n        this.i = 0;\n        this.cursor = (0, $ccfb9497d8ef598f$export$34cb5241245008dd).iter(gutter.markers, viewport.from);\n    }\n    addElement(view, block, markers) {\n        let { gutter: gutter } = this, above = block.top - this.height;\n        if (this.i == gutter.elements.length) {\n            let newElt = new $071334078f8d3f8a$var$GutterElement(view, block.height, above, markers);\n            gutter.elements.push(newElt);\n            gutter.dom.appendChild(newElt.dom);\n        } else gutter.elements[this.i].update(view, block.height, above, markers);\n        this.height = block.bottom;\n        this.i++;\n    }\n    line(view, line, extraMarkers) {\n        let localMarkers = [];\n        $071334078f8d3f8a$var$advanceCursor(this.cursor, localMarkers, line.from);\n        if (extraMarkers.length) localMarkers = localMarkers.concat(extraMarkers);\n        let forLine = this.gutter.config.lineMarker(view, line, localMarkers);\n        if (forLine) localMarkers.unshift(forLine);\n        let gutter = this.gutter;\n        if (localMarkers.length == 0 && !gutter.config.renderEmptyElements) return;\n        this.addElement(view, line, localMarkers);\n    }\n    widget(view, block) {\n        let marker = this.gutter.config.widgetMarker(view, block.widget, block);\n        if (marker) this.addElement(view, block, [\n            marker\n        ]);\n    }\n    finish() {\n        let gutter = this.gutter;\n        while(gutter.elements.length > this.i){\n            let last = gutter.elements.pop();\n            gutter.dom.removeChild(last.dom);\n            last.destroy();\n        }\n    }\n}\nclass $071334078f8d3f8a$var$SingleGutterView {\n    constructor(view, config){\n        this.view = view;\n        this.config = config;\n        this.elements = [];\n        this.spacer = null;\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-gutter\" + (this.config.class ? \" \" + this.config.class : \"\");\n        for(let prop in config.domEventHandlers)this.dom.addEventListener(prop, (event)=>{\n            let target = event.target, y;\n            if (target != this.dom && this.dom.contains(target)) {\n                while(target.parentNode != this.dom)target = target.parentNode;\n                let rect = target.getBoundingClientRect();\n                y = (rect.top + rect.bottom) / 2;\n            } else y = event.clientY;\n            let line = view.lineBlockAtHeight(y - view.documentTop);\n            if (config.domEventHandlers[prop](view, line, event)) event.preventDefault();\n        });\n        this.markers = $071334078f8d3f8a$var$asArray(config.markers(view));\n        if (config.initialSpacer) {\n            this.spacer = new $071334078f8d3f8a$var$GutterElement(view, 0, 0, [\n                config.initialSpacer(view)\n            ]);\n            this.dom.appendChild(this.spacer.dom);\n            this.spacer.dom.style.cssText += \"visibility: hidden; pointer-events: none\";\n        }\n    }\n    update(update) {\n        let prevMarkers = this.markers;\n        this.markers = $071334078f8d3f8a$var$asArray(this.config.markers(update.view));\n        if (this.spacer && this.config.updateSpacer) {\n            let updated = this.config.updateSpacer(this.spacer.markers[0], update);\n            if (updated != this.spacer.markers[0]) this.spacer.update(update.view, 0, 0, [\n                updated\n            ]);\n        }\n        let vp = update.view.viewport;\n        return !(0, $ccfb9497d8ef598f$export$34cb5241245008dd).eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);\n    }\n    destroy() {\n        for (let elt of this.elements)elt.destroy();\n    }\n}\nclass $071334078f8d3f8a$var$GutterElement {\n    constructor(view, height, above, markers){\n        this.height = -1;\n        this.above = 0;\n        this.markers = [];\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-gutterElement\";\n        this.update(view, height, above, markers);\n    }\n    update(view, height, above, markers) {\n        if (this.height != height) this.dom.style.height = (this.height = height) + \"px\";\n        if (this.above != above) this.dom.style.marginTop = (this.above = above) ? above + \"px\" : \"\";\n        if (!$071334078f8d3f8a$var$sameMarkers(this.markers, markers)) this.setMarkers(view, markers);\n    }\n    setMarkers(view, markers) {\n        let cls = \"cm-gutterElement\", domPos = this.dom.firstChild;\n        for(let iNew = 0, iOld = 0;;){\n            let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;\n            if (marker) {\n                let c = marker.elementClass;\n                if (c) cls += \" \" + c;\n                for(let i = iOld; i < this.markers.length; i++)if (this.markers[i].compare(marker)) {\n                    skipTo = i;\n                    matched = true;\n                    break;\n                }\n            } else skipTo = this.markers.length;\n            while(iOld < skipTo){\n                let next = this.markers[iOld++];\n                if (next.toDOM) {\n                    next.destroy(domPos);\n                    let after = domPos.nextSibling;\n                    domPos.remove();\n                    domPos = after;\n                }\n            }\n            if (!marker) break;\n            if (marker.toDOM) {\n                if (matched) domPos = domPos.nextSibling;\n                else this.dom.insertBefore(marker.toDOM(view), domPos);\n            }\n            if (matched) iOld++;\n        }\n        this.dom.className = cls;\n        this.markers = markers;\n    }\n    destroy() {\n        this.setMarkers(null, []); // First argument not used unless creating markers\n    }\n}\nfunction $071334078f8d3f8a$var$sameMarkers(a, b) {\n    if (a.length != b.length) return false;\n    for(let i = 0; i < a.length; i++)if (!a[i].compare(b[i])) return false;\n    return true;\n}\n/**\nFacet used to provide markers to the line number gutter.\n*/ const $071334078f8d3f8a$export$dd0c91e0a7121f5f = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $071334078f8d3f8a$var$lineNumberConfig = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (values) {\n        return (0, $ccfb9497d8ef598f$export$4e19c0b693794a7e)(values, {\n            formatNumber: String,\n            domEventHandlers: {}\n        }, {\n            domEventHandlers (a, b) {\n                let result = Object.assign({}, a);\n                for(let event in b){\n                    let exists = result[event], add = b[event];\n                    result[event] = exists ? (view, line, event)=>exists(view, line, event) || add(view, line, event) : add;\n                }\n                return result;\n            }\n        });\n    }\n});\nclass $071334078f8d3f8a$var$NumberMarker extends $071334078f8d3f8a$export$591ab4c909549043 {\n    constructor(number){\n        super();\n        this.number = number;\n    }\n    eq(other) {\n        return this.number == other.number;\n    }\n    toDOM() {\n        return document.createTextNode(this.number);\n    }\n}\nfunction $071334078f8d3f8a$var$formatNumber(view, number) {\n    return view.state.facet($071334078f8d3f8a$var$lineNumberConfig).formatNumber(number, view.state);\n}\nconst $071334078f8d3f8a$var$lineNumberGutter = /*@__PURE__*/ $071334078f8d3f8a$var$activeGutters.compute([\n    $071334078f8d3f8a$var$lineNumberConfig\n], (state)=>({\n        class: \"cm-lineNumbers\",\n        renderEmptyElements: false,\n        markers (view) {\n            return view.state.facet($071334078f8d3f8a$export$dd0c91e0a7121f5f);\n        },\n        lineMarker (view, line, others) {\n            if (others.some((m)=>m.toDOM)) return null;\n            return new $071334078f8d3f8a$var$NumberMarker($071334078f8d3f8a$var$formatNumber(view, view.state.doc.lineAt(line.from).number));\n        },\n        widgetMarker: ()=>null,\n        lineMarkerChange: (update)=>update.startState.facet($071334078f8d3f8a$var$lineNumberConfig) != update.state.facet($071334078f8d3f8a$var$lineNumberConfig),\n        initialSpacer (view) {\n            return new $071334078f8d3f8a$var$NumberMarker($071334078f8d3f8a$var$formatNumber(view, $071334078f8d3f8a$var$maxLineNumber(view.state.doc.lines)));\n        },\n        updateSpacer (spacer, update) {\n            let max = $071334078f8d3f8a$var$formatNumber(update.view, $071334078f8d3f8a$var$maxLineNumber(update.view.state.doc.lines));\n            return max == spacer.number ? spacer : new $071334078f8d3f8a$var$NumberMarker(max);\n        },\n        domEventHandlers: state.facet($071334078f8d3f8a$var$lineNumberConfig).domEventHandlers\n    }));\n/**\nCreate a line number gutter extension.\n*/ function $071334078f8d3f8a$export$1a8cf111682eaa7d(config = {}) {\n    return [\n        $071334078f8d3f8a$var$lineNumberConfig.of(config),\n        $071334078f8d3f8a$export$ec15ef01b8fbae61(),\n        $071334078f8d3f8a$var$lineNumberGutter\n    ];\n}\nfunction $071334078f8d3f8a$var$maxLineNumber(lines) {\n    let last = 9;\n    while(last < lines)last = last * 10 + 9;\n    return last;\n}\nconst $071334078f8d3f8a$var$activeLineGutterMarker = /*@__PURE__*/ new class extends $071334078f8d3f8a$export$591ab4c909549043 {\n    constructor(){\n        super(...arguments);\n        this.elementClass = \"cm-activeLineGutter\";\n    }\n};\nconst $071334078f8d3f8a$var$activeLineGutterHighlighter = /*@__PURE__*/ $071334078f8d3f8a$export$113bd64f27ac1172.compute([\n    \"selection\"\n], (state)=>{\n    let marks = [], last = -1;\n    for (let range of state.selection.ranges){\n        let linePos = state.doc.lineAt(range.head).from;\n        if (linePos > last) {\n            last = linePos;\n            marks.push($071334078f8d3f8a$var$activeLineGutterMarker.range(linePos));\n        }\n    }\n    return (0, $ccfb9497d8ef598f$export$34cb5241245008dd).of(marks);\n});\n/**\nReturns an extension that adds a `cm-activeLineGutter` class to\nall gutter elements on the [active\nline](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).\n*/ function $071334078f8d3f8a$export$93b52f08bb2c759c() {\n    return $071334078f8d3f8a$var$activeLineGutterHighlighter;\n}\nconst $071334078f8d3f8a$var$WhitespaceDeco = /*@__PURE__*/ new Map();\nfunction $071334078f8d3f8a$var$getWhitespaceDeco(space) {\n    let deco = $071334078f8d3f8a$var$WhitespaceDeco.get(space);\n    if (!deco) $071334078f8d3f8a$var$WhitespaceDeco.set(space, deco = $071334078f8d3f8a$export$10e30b733df217ea.mark({\n        attributes: space === \"\t\" ? {\n            class: \"cm-highlightTab\"\n        } : {\n            class: \"cm-highlightSpace\",\n            \"data-display\": space.replace(/ /g, \"\\xb7\")\n        }\n    }));\n    return deco;\n}\nfunction $071334078f8d3f8a$var$matcher(decorator) {\n    return $071334078f8d3f8a$export$44d5eccfd62adda7.define((view)=>({\n            decorations: decorator.createDeco(view),\n            update (u) {\n                this.decorations = decorator.updateDeco(u, this.decorations);\n            }\n        }), {\n        decorations: (v)=>v.decorations\n    });\n}\nconst $071334078f8d3f8a$var$whitespaceHighlighter = /*@__PURE__*/ $071334078f8d3f8a$var$matcher(/*@__PURE__*/ new $071334078f8d3f8a$export$9b928b0ca20b25cb({\n    regexp: /\\t| +/g,\n    decoration: (match)=>$071334078f8d3f8a$var$getWhitespaceDeco(match[0]),\n    boundary: /\\S/\n}));\n/**\nReturns an extension that highlights whitespace, adding a\n`cm-highlightSpace` class to stretches of spaces, and a\n`cm-highlightTab` class to individual tab characters. By default,\nthe former are shown as faint dots, and the latter as arrows.\n*/ function $071334078f8d3f8a$export$beeff585f23bdb79() {\n    return $071334078f8d3f8a$var$whitespaceHighlighter;\n}\nconst $071334078f8d3f8a$var$trailingHighlighter = /*@__PURE__*/ $071334078f8d3f8a$var$matcher(/*@__PURE__*/ new $071334078f8d3f8a$export$9b928b0ca20b25cb({\n    regexp: /\\s+$/g,\n    decoration: /*@__PURE__*/ $071334078f8d3f8a$export$10e30b733df217ea.mark({\n        class: \"cm-trailingSpace\"\n    }),\n    boundary: /\\S/\n}));\n/**\nReturns an extension that adds a `cm-trailingSpace` class to all\ntrailing whitespace.\n*/ function $071334078f8d3f8a$export$6e66b0e142f44c26() {\n    return $071334078f8d3f8a$var$trailingHighlighter;\n}\n/**\n@internal\n*/ const $071334078f8d3f8a$export$91afc2cf83e15b44 = {\n    HeightMap: $071334078f8d3f8a$var$HeightMap,\n    HeightOracle: $071334078f8d3f8a$var$HeightOracle,\n    MeasuredHeights: $071334078f8d3f8a$var$MeasuredHeights,\n    QueryType: $071334078f8d3f8a$var$QueryType,\n    ChangedRange: $071334078f8d3f8a$var$ChangedRange,\n    computeOrder: $071334078f8d3f8a$var$computeOrder,\n    moveVisually: $071334078f8d3f8a$var$moveVisually\n};\n\n\n\n// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node.\nconst $4d476c57e17b24ca$export$de305a849879ffa = 1024;\nlet $4d476c57e17b24ca$var$nextPropID = 0;\nclass $4d476c57e17b24ca$var$Range {\n    constructor(from, to){\n        this.from = from;\n        this.to = to;\n    }\n}\n/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\nclass $4d476c57e17b24ca$export$b8034b9bc18acd90 {\n    /// Create a new node prop type.\n    constructor(config = {}){\n        this.id = $4d476c57e17b24ca$var$nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (()=>{\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /// This is meant to be used with\n    /// [`NodeSet.extend`](#common.NodeSet.extend) or\n    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    /// prop values for each node type in the set. Takes a [match\n    /// object](#common.NodeType^match) or function that returns undefined\n    /// if the node type doesn't get this prop, and the prop's value if\n    /// it does.\n    add(match) {\n        if (this.perNode) throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\") match = $4d476c57e17b24ca$export$f06e977173f1857c.match(match);\n        return (type)=>{\n            let result = match(type);\n            return result === undefined ? null : [\n                this,\n                result\n            ];\n        };\n    }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\n$4d476c57e17b24ca$export$b8034b9bc18acd90.closedBy = new $4d476c57e17b24ca$export$b8034b9bc18acd90({\n    deserialize: (str)=>str.split(\" \")\n});\n/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\n$4d476c57e17b24ca$export$b8034b9bc18acd90.openedBy = new $4d476c57e17b24ca$export$b8034b9bc18acd90({\n    deserialize: (str)=>str.split(\" \")\n});\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\n$4d476c57e17b24ca$export$b8034b9bc18acd90.group = new $4d476c57e17b24ca$export$b8034b9bc18acd90({\n    deserialize: (str)=>str.split(\" \")\n});\n/// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\n$4d476c57e17b24ca$export$b8034b9bc18acd90.contextHash = new $4d476c57e17b24ca$export$b8034b9bc18acd90({\n    perNode: true\n});\n/// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\n$4d476c57e17b24ca$export$b8034b9bc18acd90.lookAhead = new $4d476c57e17b24ca$export$b8034b9bc18acd90({\n    perNode: true\n});\n/// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages in mixed-language parsers.\n$4d476c57e17b24ca$export$b8034b9bc18acd90.mounted = new $4d476c57e17b24ca$export$b8034b9bc18acd90({\n    perNode: true\n});\n/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\nclass $4d476c57e17b24ca$export$358cdd8bd77577cc {\n    constructor(/// The inner tree.\n    tree, /// If this is null, this tree replaces the entire node (it will\n    /// be included in the regular iteration instead of its host\n    /// node). If not, only the given ranges are considered to be\n    /// covered by this tree. This is used for trees that are mixed in\n    /// a way that isn't strictly hierarchical. Such mounted trees are\n    /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n    /// and [`enter`](#common.SyntaxNode.enter).\n    overlay, /// The parser used to create this subtree.\n    parser){\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n}\nconst $4d476c57e17b24ca$var$noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass $4d476c57e17b24ca$export$f06e977173f1857c {\n    /// @internal\n    constructor(/// The name of the node type. Not necessarily unique, but if the\n    /// grammar was written properly, different node types with the\n    /// same name within a node set should play the same semantic\n    /// role.\n    name, /// @internal\n    props, /// The id of this node in its set. Corresponds to the term ids\n    /// used in the parser.\n    id, /// @internal\n    flags = 0){\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    /// Define a node type.\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : $4d476c57e17b24ca$var$noProps;\n        let flags = (spec.top ? 1 /* NodeFlag.Top */  : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */  : 0) | (spec.error ? 4 /* NodeFlag.Error */  : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */  : 0);\n        let type = new $4d476c57e17b24ca$export$f06e977173f1857c(spec.name || \"\", props, spec.id, flags);\n        if (spec.props) for (let src of spec.props){\n            if (!Array.isArray(src)) src = src(type);\n            if (src) {\n                if (src[0].perNode) throw new RangeError(\"Can't store a per-node prop on a node type\");\n                props[src[0].id] = src[1];\n            }\n        }\n        return type;\n    }\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    prop(prop) {\n        return this.props[prop.id];\n    }\n    /// True when this is the top node of a grammar.\n    get isTop() {\n        return (this.flags & 1 /* NodeFlag.Top */ ) > 0;\n    }\n    /// True when this node is produced by a skip rule.\n    get isSkipped() {\n        return (this.flags & 2 /* NodeFlag.Skipped */ ) > 0;\n    }\n    /// Indicates whether this is an error node.\n    get isError() {\n        return (this.flags & 4 /* NodeFlag.Error */ ) > 0;\n    }\n    /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n    get isAnonymous() {\n        return (this.flags & 8 /* NodeFlag.Anonymous */ ) > 0;\n    }\n    /// Returns true when this node's name or one of its\n    /// [groups](#common.NodeProp^group) matches the given string.\n    is(name) {\n        if (typeof name == \"string\") {\n            if (this.name == name) return true;\n            let group = this.prop($4d476c57e17b24ca$export$b8034b9bc18acd90.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#common.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n    static match(map) {\n        let direct = Object.create(null);\n        for(let prop in map)for (let name of prop.split(\" \"))direct[name] = map[prop];\n        return (node)=>{\n            for(let groups = node.prop($4d476c57e17b24ca$export$b8034b9bc18acd90.group), i = -1; i < (groups ? groups.length : 0); i++){\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found) return found;\n            }\n        };\n    }\n}\n/// An empty dummy node type to use when no actual type is available.\n$4d476c57e17b24ca$export$f06e977173f1857c.none = new $4d476c57e17b24ca$export$f06e977173f1857c(\"\", Object.create(null), 0, 8 /* NodeFlag.Anonymous */ );\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\nclass $4d476c57e17b24ca$export$7fad5fb00d8de02c {\n    /// Create a set with the given types. The `id` property of each\n    /// type should correspond to its position within the array.\n    constructor(/// The node types in this set, by id.\n    types){\n        this.types = types;\n        for(let i = 0; i < types.length; i++)if (types[i].id != i) throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /// Create a copy of this set with some node properties added. The\n    /// arguments to this method can be created with\n    /// [`NodeProp.add`](#common.NodeProp.add).\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types){\n            let newProps = null;\n            for (let source of props){\n                let add = source(type);\n                if (add) {\n                    if (!newProps) newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new $4d476c57e17b24ca$export$f06e977173f1857c(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new $4d476c57e17b24ca$export$7fad5fb00d8de02c(newTypes);\n    }\n}\nconst $4d476c57e17b24ca$var$CachedNode = new WeakMap(), $4d476c57e17b24ca$var$CachedInnerNode = new WeakMap();\n/// Options that control iteration. Can be combined with the `|`\n/// operator to enable multiple ones.\nvar $4d476c57e17b24ca$export$b0e28367f55837aa;\n(function(IterMode) {\n    /// When enabled, iteration will only visit [`Tree`](#common.Tree)\n    /// objects, not nodes packed into\n    /// [`TreeBuffer`](#common.TreeBuffer)s.\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n    /// Enable this to make iteration include anonymous nodes (such as\n    /// the nodes that wrap repeated grammar constructs into a balanced\n    /// tree).\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n    /// By default, regular [mounted](#common.NodeProp^mounted) nodes\n    /// replace their base node in iteration. Enable this to ignore them\n    /// instead.\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n    /// This option only applies in\n    /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n    /// library to not enter mounted overlays if one covers the given\n    /// position.\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})($4d476c57e17b24ca$export$b0e28367f55837aa || ($4d476c57e17b24ca$export$b0e28367f55837aa = {}));\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\nclass $4d476c57e17b24ca$export$7fbedc92909ed28e {\n    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    constructor(/// The type of the top node.\n    type, /// This node's child nodes.\n    children, /// The positions (offsets relative to the start of this tree) of\n    /// the children.\n    positions, /// The total length of this tree\n    length, /// Per-node [node props](#common.NodeProp) to associate with this node.\n    props){\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /// @internal\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /// @internal\n    toString() {\n        let mounted = this.prop($4d476c57e17b24ca$export$b8034b9bc18acd90.mounted);\n        if (mounted && !mounted.overlay) return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children){\n            let str = ch.toString();\n            if (str) {\n                if (children) children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children : (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /// Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    /// the tree. Mode can be used to [control](#common.IterMode) which\n    /// nodes the cursor visits.\n    cursor(mode = 0) {\n        return new $4d476c57e17b24ca$export$3ae4554f36e54a34(this.topNode, mode);\n    }\n    /// Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    /// at the given position and side (see\n    /// [`moveTo`](#common.TreeCursor.moveTo).\n    cursorAt(pos, side = 0, mode = 0) {\n        let scope = $4d476c57e17b24ca$var$CachedNode.get(this) || this.topNode;\n        let cursor = new $4d476c57e17b24ca$export$3ae4554f36e54a34(scope);\n        cursor.moveTo(pos, side);\n        $4d476c57e17b24ca$var$CachedNode.set(this, cursor._tree);\n        return cursor;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n    /// tree.\n    get topNode() {\n        return new $4d476c57e17b24ca$var$TreeNode(this, 0, 0, null);\n    }\n    /// Get the [syntax node](#common.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    ///\n    /// Note that this will not enter\n    /// [overlays](#common.MountedTree.overlay), and you often want\n    /// [`resolveInner`](#common.Tree.resolveInner) instead.\n    resolve(pos, side = 0) {\n        let node = $4d476c57e17b24ca$var$resolveNode($4d476c57e17b24ca$var$CachedNode.get(this) || this.topNode, pos, side, false);\n        $4d476c57e17b24ca$var$CachedNode.set(this, node);\n        return node;\n    }\n    /// Like [`resolve`](#common.Tree.resolve), but will enter\n    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    /// pointing into the innermost overlaid tree at the given position\n    /// (with parent links going through all parent structure, including\n    /// the host trees).\n    resolveInner(pos, side = 0) {\n        let node = $4d476c57e17b24ca$var$resolveNode($4d476c57e17b24ca$var$CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        $4d476c57e17b24ca$var$CachedInnerNode.set(this, node);\n        return node;\n    }\n    /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, that node will\n    /// not have its children iterated over (or `leave` called).\n    iterate(spec) {\n        let { enter: enter, leave: leave, from: from = 0, to: to = this.length } = spec;\n        let mode = spec.mode || 0, anon = (mode & $4d476c57e17b24ca$export$b0e28367f55837aa.IncludeAnonymous) > 0;\n        for(let c = this.cursor(mode | $4d476c57e17b24ca$export$b0e28367f55837aa.IncludeAnonymous);;){\n            let entered = false;\n            if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {\n                if (c.firstChild()) continue;\n                entered = true;\n            }\n            for(;;){\n                if (entered && leave && (anon || !c.type.isAnonymous)) leave(c);\n                if (c.nextSibling()) break;\n                if (!c.parent()) return;\n                entered = true;\n            }\n        }\n    }\n    /// Get the value of the given [node prop](#common.NodeProp) for this\n    /// node. Works with both per-node and per-type props.\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    /// format that can be passed to the [`Tree`](#common.Tree)\n    /// constructor.\n    get propValues() {\n        let result = [];\n        if (this.props) for(let id in this.props)result.push([\n            +id,\n            this.props[id]\n        ]);\n        return result;\n    }\n    /// Balance the direct children of this tree, producing a copy of\n    /// which may have children grouped into subtrees with type\n    /// [`NodeType.none`](#common.NodeType^none).\n    balance(config = {}) {\n        return this.children.length <= 8 /* Balance.BranchFactor */  ? this : $4d476c57e17b24ca$var$balanceRange($4d476c57e17b24ca$export$f06e977173f1857c.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length)=>new $4d476c57e17b24ca$export$7fbedc92909ed28e(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length)=>new $4d476c57e17b24ca$export$7fbedc92909ed28e($4d476c57e17b24ca$export$f06e977173f1857c.none, children, positions, length)));\n    }\n    /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n    static build(data) {\n        return $4d476c57e17b24ca$var$buildTree(data);\n    }\n}\n/// The empty tree\n$4d476c57e17b24ca$export$7fbedc92909ed28e.empty = new $4d476c57e17b24ca$export$7fbedc92909ed28e($4d476c57e17b24ca$export$f06e977173f1857c.none, [], [], 0);\nclass $4d476c57e17b24ca$var$FlatBufferCursor {\n    constructor(buffer, index){\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() {\n        return this.buffer[this.index - 4];\n    }\n    get start() {\n        return this.buffer[this.index - 3];\n    }\n    get end() {\n        return this.buffer[this.index - 2];\n    }\n    get size() {\n        return this.buffer[this.index - 1];\n    }\n    get pos() {\n        return this.index;\n    }\n    next() {\n        this.index -= 4;\n    }\n    fork() {\n        return new $4d476c57e17b24ca$var$FlatBufferCursor(this.buffer, this.index);\n    }\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it).\nclass $4d476c57e17b24ca$export$33300581b70be371 {\n    /// Create a tree buffer.\n    constructor(/// The buffer's content.\n    buffer, /// The total length of the group of nodes in the buffer.\n    length, /// The node set used in this buffer.\n    set){\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /// @internal\n    get type() {\n        return $4d476c57e17b24ca$export$f06e977173f1857c.none;\n    }\n    /// @internal\n    toString() {\n        let result = [];\n        for(let index = 0; index < this.buffer.length;){\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /// @internal\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError) result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index) return result;\n        let children = [];\n        while(index < endIndex){\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /// @internal\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer: buffer } = this, pick = -1;\n        for(let i = startIndex; i != endIndex; i = buffer[i + 3])if ($4d476c57e17b24ca$var$checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n            pick = i;\n            if (dir > 0) break;\n        }\n        return pick;\n    }\n    /// @internal\n    slice(startI, endI, from) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI), len = 0;\n        for(let i = startI, j = 0; i < endI;){\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            let to = copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n            len = Math.max(len, to);\n        }\n        return new $4d476c57e17b24ca$export$33300581b70be371(copy, len, this.set);\n    }\n}\nfunction $4d476c57e17b24ca$var$checkSide(side, pos, from, to) {\n    switch(side){\n        case -2 /* Side.Before */ :\n            return from < pos;\n        case -1 /* Side.AtOrBefore */ :\n            return to >= pos && from < pos;\n        case 0 /* Side.Around */ :\n            return from < pos && to > pos;\n        case 1 /* Side.AtOrAfter */ :\n            return from <= pos && to > pos;\n        case 2 /* Side.After */ :\n            return to > pos;\n        case 4 /* Side.DontCare */ :\n            return true;\n    }\n}\nfunction $4d476c57e17b24ca$var$enterUnfinishedNodesBefore(node, pos) {\n    let scan = node.childBefore(pos);\n    while(scan){\n        let last = scan.lastChild;\n        if (!last || last.to != scan.to) break;\n        if (last.type.isError && last.from == last.to) {\n            node = scan;\n            scan = last.prevSibling;\n        } else scan = last;\n    }\n    return node;\n}\nfunction $4d476c57e17b24ca$var$resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while(node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)){\n        let parent = !overlays && node instanceof $4d476c57e17b24ca$var$TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent) return node;\n        node = parent;\n    }\n    let mode = overlays ? 0 : $4d476c57e17b24ca$export$b0e28367f55837aa.IgnoreOverlays;\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays) {\n        for(let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent)if (scan instanceof $4d476c57e17b24ca$var$TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from) node = parent;\n    }\n    for(;;){\n        let inner = node.enter(pos, side, mode);\n        if (!inner) return node;\n        node = inner;\n    }\n}\nclass $4d476c57e17b24ca$var$TreeNode {\n    constructor(_tree, from, // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent){\n        this._tree = _tree;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() {\n        return this._tree.type;\n    }\n    get name() {\n        return this._tree.type.name;\n    }\n    get to() {\n        return this.from + this._tree.length;\n    }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for(let parent = this;;){\n            for(let { children: children, positions: positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir){\n                let next = children[i], start = positions[i] + parent.from;\n                if (!$4d476c57e17b24ca$var$checkSide(side, pos, start, start + next.length)) continue;\n                if (next instanceof $4d476c57e17b24ca$export$33300581b70be371) {\n                    if (mode & $4d476c57e17b24ca$export$b0e28367f55837aa.ExcludeBuffers) continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1) return new $4d476c57e17b24ca$var$BufferNode(new $4d476c57e17b24ca$var$BufferContext(parent, next, i, start), null, index);\n                } else if (mode & $4d476c57e17b24ca$export$b0e28367f55837aa.IncludeAnonymous || !next.type.isAnonymous || $4d476c57e17b24ca$var$hasChild(next)) {\n                    let mounted;\n                    if (!(mode & $4d476c57e17b24ca$export$b0e28367f55837aa.IgnoreMounts) && next.props && (mounted = next.prop($4d476c57e17b24ca$export$b8034b9bc18acd90.mounted)) && !mounted.overlay) return new $4d476c57e17b24ca$var$TreeNode(mounted.tree, start, i, parent);\n                    let inner = new $4d476c57e17b24ca$var$TreeNode(next, start, i, parent);\n                    return mode & $4d476c57e17b24ca$export$b0e28367f55837aa.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if (mode & $4d476c57e17b24ca$export$b0e28367f55837aa.IncludeAnonymous || !parent.type.isAnonymous) return null;\n            if (parent.index >= 0) i = parent.index + dir;\n            else i = dir < 0 ? -1 : parent._parent._tree.children.length;\n            parent = parent._parent;\n            if (!parent) return null;\n        }\n    }\n    get firstChild() {\n        return this.nextChild(0, 1, 0, 4 /* Side.DontCare */ );\n    }\n    get lastChild() {\n        return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */ );\n    }\n    childAfter(pos) {\n        return this.nextChild(0, 1, pos, 2 /* Side.After */ );\n    }\n    childBefore(pos) {\n        return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */ );\n    }\n    enter(pos, side, mode = 0) {\n        let mounted;\n        if (!(mode & $4d476c57e17b24ca$export$b0e28367f55837aa.IgnoreOverlays) && (mounted = this._tree.prop($4d476c57e17b24ca$export$b8034b9bc18acd90.mounted)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from: from, to: to } of mounted.overlay){\n                if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos)) return new $4d476c57e17b24ca$var$TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, mode);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while(val.type.isAnonymous && val._parent)val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */ ) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */ ) : null;\n    }\n    cursor(mode = 0) {\n        return new $4d476c57e17b24ca$export$3ae4554f36e54a34(this, mode);\n    }\n    get tree() {\n        return this._tree;\n    }\n    toTree() {\n        return this._tree;\n    }\n    resolve(pos, side = 0) {\n        return $4d476c57e17b24ca$var$resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return $4d476c57e17b24ca$var$resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) {\n        return $4d476c57e17b24ca$var$enterUnfinishedNodesBefore(this, pos);\n    }\n    getChild(type, before = null, after = null) {\n        let r = $4d476c57e17b24ca$var$getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return $4d476c57e17b24ca$var$getChildren(this, type, before, after);\n    }\n    /// @internal\n    toString() {\n        return this._tree.toString();\n    }\n    get node() {\n        return this;\n    }\n    matchContext(context) {\n        return $4d476c57e17b24ca$var$matchNodeContext(this, context);\n    }\n}\nfunction $4d476c57e17b24ca$var$getChildren(node, type, before, after) {\n    let cur = node.cursor(), result = [];\n    if (!cur.firstChild()) return result;\n    if (before != null) {\n        while(!cur.type.is(before))if (!cur.nextSibling()) return result;\n    }\n    for(;;){\n        if (after != null && cur.type.is(after)) return result;\n        if (cur.type.is(type)) result.push(cur.node);\n        if (!cur.nextSibling()) return after == null ? result : [];\n    }\n}\nfunction $4d476c57e17b24ca$var$matchNodeContext(node, context, i = context.length - 1) {\n    for(let p = node.parent; i >= 0; p = p.parent){\n        if (!p) return false;\n        if (!p.type.isAnonymous) {\n            if (context[i] && context[i] != p.name) return false;\n            i--;\n        }\n    }\n    return true;\n}\nclass $4d476c57e17b24ca$var$BufferContext {\n    constructor(parent, buffer, index, start){\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass $4d476c57e17b24ca$var$BufferNode {\n    get name() {\n        return this.type.name;\n    }\n    get from() {\n        return this.context.start + this.context.buffer.buffer[this.index + 1];\n    }\n    get to() {\n        return this.context.start + this.context.buffer.buffer[this.index + 2];\n    }\n    constructor(context, _parent, index){\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    child(dir, pos, side) {\n        let { buffer: buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new $4d476c57e17b24ca$var$BufferNode(this.context, this, index);\n    }\n    get firstChild() {\n        return this.child(1, 0, 4 /* Side.DontCare */ );\n    }\n    get lastChild() {\n        return this.child(-1, 0, 4 /* Side.DontCare */ );\n    }\n    childAfter(pos) {\n        return this.child(1, pos, 2 /* Side.After */ );\n    }\n    childBefore(pos) {\n        return this.child(-1, pos, -2 /* Side.Before */ );\n    }\n    enter(pos, side, mode = 0) {\n        if (mode & $4d476c57e17b24ca$export$b0e28367f55837aa.ExcludeBuffers) return null;\n        let { buffer: buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new $4d476c57e17b24ca$var$BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */ );\n    }\n    get nextSibling() {\n        let { buffer: buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new $4d476c57e17b24ca$var$BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer: buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart) return this.externalSibling(-1);\n        return new $4d476c57e17b24ca$var$BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */ ));\n    }\n    cursor(mode = 0) {\n        return new $4d476c57e17b24ca$export$3ae4554f36e54a34(this, mode);\n    }\n    get tree() {\n        return null;\n    }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer: buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1];\n            children.push(buffer.slice(startI, endI, from));\n            positions.push(0);\n        }\n        return new $4d476c57e17b24ca$export$7fbedc92909ed28e(this.type, children, positions, this.to - this.from);\n    }\n    resolve(pos, side = 0) {\n        return $4d476c57e17b24ca$var$resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return $4d476c57e17b24ca$var$resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) {\n        return $4d476c57e17b24ca$var$enterUnfinishedNodesBefore(this, pos);\n    }\n    /// @internal\n    toString() {\n        return this.context.buffer.childString(this.index);\n    }\n    getChild(type, before = null, after = null) {\n        let r = $4d476c57e17b24ca$var$getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return $4d476c57e17b24ca$var$getChildren(this, type, before, after);\n    }\n    get node() {\n        return this;\n    }\n    matchContext(context) {\n        return $4d476c57e17b24ca$var$matchNodeContext(this, context);\n    }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass $4d476c57e17b24ca$export$3ae4554f36e54a34 {\n    /// Shorthand for `.type.name`.\n    get name() {\n        return this.type.name;\n    }\n    /// @internal\n    constructor(node, /// @internal\n    mode = 0){\n        this.mode = mode;\n        /// @internal\n        this.buffer = null;\n        this.stack = [];\n        /// @internal\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof $4d476c57e17b24ca$var$TreeNode) this.yieldNode(node);\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for(let n = node._parent; n; n = n._parent)this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    yieldNode(node) {\n        if (!node) return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start: start, buffer: buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    yield(node) {\n        if (!node) return false;\n        if (node instanceof $4d476c57e17b24ca$var$TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /// @internal\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /// @internal\n    enterChild(dir, pos, side) {\n        if (!this.buffer) return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer: buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0) return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n    firstChild() {\n        return this.enterChild(1, 0, 4 /* Side.DontCare */ );\n    }\n    /// Move the cursor to this node's last child.\n    lastChild() {\n        return this.enterChild(-1, 0, 4 /* Side.DontCare */ );\n    }\n    /// Move the cursor to the first child that ends after `pos`.\n    childAfter(pos) {\n        return this.enterChild(1, pos, 2 /* Side.After */ );\n    }\n    /// Move to the last child that starts before `pos`.\n    childBefore(pos) {\n        return this.enterChild(-1, pos, -2 /* Side.Before */ );\n    }\n    /// Move the cursor to the child around `pos`. If side is -1 the\n    /// child may end at that position, when 1 it may start there. This\n    /// will also enter [overlaid](#common.MountedTree.overlay)\n    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    /// set to false.\n    enter(pos, side, mode = this.mode) {\n        if (!this.buffer) return this.yield(this._tree.enter(pos, side, mode));\n        return mode & $4d476c57e17b24ca$export$b0e28367f55837aa.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    }\n    /// Move to the node's parent node, if this isn't the top node.\n    parent() {\n        if (!this.buffer) return this.yieldNode(this.mode & $4d476c57e17b24ca$export$b0e28367f55837aa.IncludeAnonymous ? this._tree._parent : this._tree.parent);\n        if (this.stack.length) return this.yieldBuf(this.stack.pop());\n        let parent = this.mode & $4d476c57e17b24ca$export$b0e28367f55837aa.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /// @internal\n    sibling(dir) {\n        if (!this.buffer) return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */ , this.mode));\n        let { buffer: buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */ ));\n        } else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */ , this.mode)) : false;\n    }\n    /// Move to this node's next sibling, if any.\n    nextSibling() {\n        return this.sibling(1);\n    }\n    /// Move to this node's previous sibling, if any.\n    prevSibling() {\n        return this.sibling(-1);\n    }\n    atLastNode(dir) {\n        let index, parent, { buffer: buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length) return false;\n            } else {\n                for(let i = 0; i < this.index; i++)if (buffer.buffer.buffer[i + 3] < this.index) return false;\n            }\n            ({ index: index, parent: parent } = buffer);\n        } else ({ index: index, _parent: parent } = this._tree);\n        for(; parent; { index: index, _parent: parent } = parent){\n            if (index > -1) for(let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir){\n                let child = parent._tree.children[i];\n                if (this.mode & $4d476c57e17b24ca$export$b0e28367f55837aa.IncludeAnonymous || child instanceof $4d476c57e17b24ca$export$33300581b70be371 || !child.type.isAnonymous || $4d476c57e17b24ca$var$hasChild(child)) return false;\n            }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */ )) return true;\n        for(;;){\n            if (this.sibling(dir)) return true;\n            if (this.atLastNode(dir) || !this.parent()) return false;\n        }\n    }\n    /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty or `enter` is false, its next sibling or\n    /// the next sibling of the first parent node that has one.\n    next(enter = true) {\n        return this.move(1, enter);\n    }\n    /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by its last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n    prev(enter = true) {\n        return this.move(-1, enter);\n    }\n    /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while(this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos))if (!this.parent()) break;\n        // Then scan down into child nodes as far as possible\n        while(this.enterChild(1, pos, side));\n        return this;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    /// position.\n    get node() {\n        if (!this.buffer) return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) scan: for(let index = this.index, d = this.stack.length; d >= 0;){\n            for(let c = cache; c; c = c._parent)if (c.index == index) {\n                if (index == this.index) return c;\n                result = c;\n                depth = d + 1;\n                break scan;\n            }\n            index = this.stack[--d];\n        }\n        for(let i = depth; i < this.stack.length; i++)result = new $4d476c57e17b24ca$var$BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new $4d476c57e17b24ca$var$BufferNode(this.buffer, result, this.index);\n    }\n    /// Get the [tree](#common.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#common.TreeBuffer).\n    get tree() {\n        return this.buffer ? null : this._tree._tree;\n    }\n    /// Iterate over the current node and all its descendants, calling\n    /// `enter` when entering a node and `leave`, if given, when leaving\n    /// one. When `enter` returns `false`, any children of that node are\n    /// skipped, and `leave` isn't called for it.\n    iterate(enter, leave) {\n        for(let depth = 0;;){\n            let mustLeave = false;\n            if (this.type.isAnonymous || enter(this) !== false) {\n                if (this.firstChild()) {\n                    depth++;\n                    continue;\n                }\n                if (!this.type.isAnonymous) mustLeave = true;\n            }\n            for(;;){\n                if (mustLeave && leave) leave(this);\n                mustLeave = this.type.isAnonymous;\n                if (this.nextSibling()) break;\n                if (!depth) return;\n                this.parent();\n                depth--;\n                mustLeave = true;\n            }\n        }\n    }\n    /// Test whether the current node matches a given context—a sequence\n    /// of direct parent node names. Empty strings in the context array\n    /// are treated as wildcards.\n    matchContext(context) {\n        if (!this.buffer) return $4d476c57e17b24ca$var$matchNodeContext(this.node, context);\n        let { buffer: buffer } = this.buffer, { types: types } = buffer.set;\n        for(let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--){\n            if (d < 0) return $4d476c57e17b24ca$var$matchNodeContext(this.node, context, i);\n            let type = types[buffer.buffer[this.stack[d]]];\n            if (!type.isAnonymous) {\n                if (context[i] && context[i] != type.name) return false;\n                i--;\n            }\n        }\n        return true;\n    }\n}\nfunction $4d476c57e17b24ca$var$hasChild(tree) {\n    return tree.children.some((ch)=>ch instanceof $4d476c57e17b24ca$export$33300581b70be371 || !ch.type.isAnonymous || $4d476c57e17b24ca$var$hasChild(ch));\n}\nfunction $4d476c57e17b24ca$var$buildTree(data) {\n    var _a;\n    let { buffer: buffer, nodeSet: nodeSet, maxBufferLength: maxBufferLength = $4d476c57e17b24ca$export$de305a849879ffa, reused: reused = [], minRepeatType: minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new $4d476c57e17b24ca$var$FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\n        let { id: id, start: start, end: end, size: size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while(size < 0){\n            cursor.next();\n            if (size == -1 /* SpecialRecord.Reuse */ ) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            } else if (size == -3 /* SpecialRecord.ContextChange */ ) {\n                contextHash = id;\n                return;\n            } else if (size == -4 /* SpecialRecord.LookAhead */ ) {\n                lookAhead = id;\n                return;\n            } else throw new RangeError(`Unrecognized record size: ${size}`);\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while(cursor.pos > endPos)index = copyToBuffer(buffer.start, data, index);\n            node = new $4d476c57e17b24ca$export$33300581b70be371(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        } else {\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while(cursor.pos > endPos)if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                if (cursor.end <= lastEnd - maxBufferLength) {\n                    makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                    lastGroup = localChildren.length;\n                    lastEnd = cursor.end;\n                }\n                cursor.next();\n            } else takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length) makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = $4d476c57e17b24ca$var$balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            } else node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function makeBalanced(type) {\n        return (children, positions, length)=>{\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof $4d476c57e17b24ca$export$7fbedc92909ed28e) {\n                if (!lastI && last.type == type && last.length == length) return last;\n                if (lookAheadProp = last.prop($4d476c57e17b24ca$export$b8034b9bc18acd90.lookAhead)) lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while(children.length > i){\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [\n                $4d476c57e17b24ca$export$b8034b9bc18acd90.contextHash,\n                contextHash\n            ];\n            props = props ? [\n                pair\n            ].concat(props) : [\n                pair\n            ];\n        }\n        if (lookAhead > 25) {\n            let pair = [\n                $4d476c57e17b24ca$export$b8034b9bc18acd90.lookAhead,\n                lookAhead\n            ];\n            props = props ? [\n                pair\n            ].concat(props) : [\n                pair\n            ];\n        }\n        return new $4d476c57e17b24ca$export$7fbedc92909ed28e(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = {\n            size: 0,\n            start: 0,\n            skip: 0\n        };\n        scan: for(let minPos = fork.pos - maxSize; fork.pos > minPos;){\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart) break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while(fork.pos > startPos){\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* SpecialRecord.ContextChange */ ) localSkipped += 4;\n                    else break scan;\n                } else if (fork.id >= minRepeatType) localSkipped += 4;\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id: id, start: start, end: end, size: size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while(cursor.pos > endPos)index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        } else if (size == -3 /* SpecialRecord.ContextChange */ ) contextHash = id;\n        else if (size == -4 /* SpecialRecord.LookAhead */ ) lookAhead = id;\n        return index;\n    }\n    let children = [], positions = [];\n    while(cursor.pos > 0)takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;\n    return new $4d476c57e17b24ca$export$7fbedc92909ed28e(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst $4d476c57e17b24ca$var$nodeSizeCache = new WeakMap;\nfunction $4d476c57e17b24ca$var$nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof $4d476c57e17b24ca$export$33300581b70be371 || node.type != balanceType) return 1;\n    let size = $4d476c57e17b24ca$var$nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children){\n            if (child.type != balanceType || !(child instanceof $4d476c57e17b24ca$export$7fbedc92909ed28e)) {\n                size = 1;\n                break;\n            }\n            size += $4d476c57e17b24ca$var$nodeSize(balanceType, child);\n        }\n        $4d476c57e17b24ca$var$nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction $4d476c57e17b24ca$var$balanceRange(// The type the balanced tree's inner nodes.\nbalanceType, // The direct children and their positions\nchildren, positions, // The index range in children/positions to use\nfrom, to, // The start position of the nodes, relative to their parent.\nstart, // Length of the outer node\nlength, // Function to build the top node of the balanced tree\nmkTop, // Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for(let i = from; i < to; i++)total += $4d476c57e17b24ca$var$nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil(total * 1.5 / 8 /* Balance.BranchFactor */ );\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for(let i = from; i < to;){\n            let groupFrom = i, groupStart = positions[i], groupSize = $4d476c57e17b24ca$var$nodeSize(balanceType, children[i]);\n            i++;\n            for(; i < to; i++){\n                let nextSize = $4d476c57e17b24ca$var$nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild) break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            } else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push($4d476c57e17b24ca$var$balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/// Provides a way to associate values with pieces of trees. As long\n/// as that part of the tree is reused, the associated values can be\n/// retrieved from an updated tree.\nclass $4d476c57e17b24ca$export$7f13b5dc44c541ae {\n    constructor(){\n        this.map = new WeakMap();\n    }\n    setBuffer(buffer, index, value) {\n        let inner = this.map.get(buffer);\n        if (!inner) this.map.set(buffer, inner = new Map);\n        inner.set(index, value);\n    }\n    getBuffer(buffer, index) {\n        let inner = this.map.get(buffer);\n        return inner && inner.get(index);\n    }\n    /// Set the value for this syntax node.\n    set(node, value) {\n        if (node instanceof $4d476c57e17b24ca$var$BufferNode) this.setBuffer(node.context.buffer, node.index, value);\n        else if (node instanceof $4d476c57e17b24ca$var$TreeNode) this.map.set(node.tree, value);\n    }\n    /// Retrieve value for this syntax node, if it exists in the map.\n    get(node) {\n        return node instanceof $4d476c57e17b24ca$var$BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof $4d476c57e17b24ca$var$TreeNode ? this.map.get(node.tree) : undefined;\n    }\n    /// Set the value for the node that a cursor currently points to.\n    cursorSet(cursor, value) {\n        if (cursor.buffer) this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n        else this.map.set(cursor.tree, value);\n    }\n    /// Retrieve the value for the node that a cursor currently points\n    /// to.\n    cursorGet(cursor) {\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n}\n/// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\nclass $4d476c57e17b24ca$export$3ae2ede6dca97077 {\n    /// Construct a tree fragment. You'll usually want to use\n    /// [`addTree`](#common.TreeFragment^addTree) and\n    /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n    /// calling this directly.\n    constructor(/// The start of the unchanged range pointed to by this fragment.\n    /// This refers to an offset in the _updated_ document (as opposed\n    /// to the original tree).\n    from, /// The end of the unchanged range.\n    to, /// The tree that this fragment is based on.\n    tree, /// The offset between the fragment's tree and the document that\n    /// this fragment can be used against. Add this when going from\n    /// document to tree positions, subtract it to go from tree to\n    /// document positions.\n    offset, openStart = false, openEnd = false){\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Open.Start */  : 0) | (openEnd ? 2 /* Open.End */  : 0);\n    }\n    /// Whether the start of the fragment represents the start of a\n    /// parse, or the end of a change. (In the second case, it may not\n    /// be safe to reuse some nodes at the start, depending on the\n    /// parsing algorithm.)\n    get openStart() {\n        return (this.open & 1 /* Open.Start */ ) > 0;\n    }\n    /// Whether the end of the fragment represents the end of a\n    /// full-document parse, or the start of a change.\n    get openEnd() {\n        return (this.open & 2 /* Open.End */ ) > 0;\n    }\n    /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the resulting\n    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    /// true.\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [\n            new $4d476c57e17b24ca$export$3ae2ede6dca97077(0, tree.length, tree, 0, false, partial)\n        ];\n        for (let f of fragments)if (f.to > tree.length) result.push(f);\n        return result;\n    }\n    /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length) return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for(let cI = 0, pos = 0, off = 0;; cI++){\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap) while(nextF && nextF.from < nextPos){\n                let cut = nextF;\n                if (pos >= cut.from || nextPos <= cut.to || off) {\n                    let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                    cut = fFrom >= fTo ? null : new $4d476c57e17b24ca$export$3ae2ede6dca97077(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                }\n                if (cut) result.push(cut);\n                if (nextF.to > nextPos) break;\n                nextF = fI < fragments.length ? fragments[fI++] : null;\n            }\n            if (!nextC) break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/// A superclass that parsers should extend.\nclass $4d476c57e17b24ca$export$7acfa6ed01010e37 {\n    /// Start a parse, returning a [partial parse](#common.PartialParse)\n    /// object. [`fragments`](#common.TreeFragment) can be passed in to\n    /// make the parse incremental.\n    ///\n    /// By default, the entire input is parsed. You can pass `ranges`,\n    /// which should be a sorted array of non-empty, non-overlapping\n    /// ranges, to parse only those ranges. The tree returned in that\n    /// case will start at `ranges[0].from`.\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\") input = new $4d476c57e17b24ca$var$StringInput(input);\n        ranges = !ranges ? [\n            new $4d476c57e17b24ca$var$Range(0, input.length)\n        ] : ranges.length ? ranges.map((r)=>new $4d476c57e17b24ca$var$Range(r.from, r.to)) : [\n            new $4d476c57e17b24ca$var$Range(0, 0)\n        ];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /// Run a full parse, returning the resulting tree.\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for(;;){\n            let done = parse.advance();\n            if (done) return done;\n        }\n    }\n}\nclass $4d476c57e17b24ca$var$StringInput {\n    constructor(string){\n        this.string = string;\n    }\n    get length() {\n        return this.string.length;\n    }\n    chunk(from) {\n        return this.string.slice(from);\n    }\n    get lineChunks() {\n        return false;\n    }\n    read(from, to) {\n        return this.string.slice(from, to);\n    }\n}\n/// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\nfunction $4d476c57e17b24ca$export$5dcc455959c76221(nest) {\n    return (parse, input, fragments, ranges)=>new $4d476c57e17b24ca$var$MixedParse(parse, nest, input, fragments, ranges);\n}\nclass $4d476c57e17b24ca$var$InnerParse {\n    constructor(parser, parse, overlay, target, ranges){\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.ranges = ranges;\n        if (!ranges.length || ranges.some((r)=>r.from >= r.to)) throw new RangeError(\"Invalid inner parse ranges given: \" + JSON.stringify(ranges));\n    }\n}\nclass $4d476c57e17b24ca$var$ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev){\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst $4d476c57e17b24ca$var$stoppedInner = new $4d476c57e17b24ca$export$b8034b9bc18acd90({\n    perNode: true\n});\nclass $4d476c57e17b24ca$var$MixedParse {\n    constructor(base, nest, input, fragments, ranges){\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done) return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null) for (let inner of this.inner)inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null) result = new $4d476c57e17b24ca$export$7fbedc92909ed28e(result.type, result.children, result.positions, result.length, result.propValues.concat([\n                [\n                    $4d476c57e17b24ca$var$stoppedInner,\n                    this.stoppedAt\n                ]\n            ]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[$4d476c57e17b24ca$export$b8034b9bc18acd90.mounted.id] = new $4d476c57e17b24ca$export$358cdd8bd77577cc(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse) return 0;\n        let pos = this.input.length;\n        for(let i = this.innerDone; i < this.inner.length; i++)if (this.inner[i].ranges[0].from < pos) pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse) this.baseParse.stopAt(pos);\n        else for(let i = this.innerDone; i < this.inner.length; i++)this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new $4d476c57e17b24ca$var$FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new $4d476c57e17b24ca$export$3ae4554f36e54a34(new $4d476c57e17b24ca$var$TreeNode(this.baseTree, this.ranges[0].from, 0, null), $4d476c57e17b24ca$export$b0e28367f55837aa.IncludeAnonymous | $4d476c57e17b24ca$export$b0e28367f55837aa.IgnoreMounts);\n        scan: for(let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;){\n            let enter = true, range;\n            if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find((m)=>m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match) for (let r of match.mount.overlay){\n                        let from = r.from + match.pos, to = r.to + match.pos;\n                        if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some((r)=>r.from < to && r.to > from)) overlay.ranges.push({\n                            from: from,\n                            to: to\n                        });\n                    }\n                }\n                enter = false;\n            } else if (covered && (isCovered = $4d476c57e17b24ca$var$checkCover(covered.ranges, cursor.from, cursor.to))) enter = isCovered != 2 /* Cover.Full */ ;\n            else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n                if (!cursor.tree) $4d476c57e17b24ca$var$materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") overlay = new $4d476c57e17b24ca$var$ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                else {\n                    let ranges = $4d476c57e17b24ca$var$punchRanges(this.ranges, nest.overlay || [\n                        new $4d476c57e17b24ca$var$Range(cursor.from, cursor.to)\n                    ]);\n                    if (ranges.length) this.inner.push(new $4d476c57e17b24ca$var$InnerParse(nest.parser, nest.parser.startParse(this.input, $4d476c57e17b24ca$var$enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map((r)=>new $4d476c57e17b24ca$var$Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n                    if (!nest.overlay) enter = false;\n                    else if (ranges.length) covered = {\n                        ranges: ranges,\n                        depth: 0,\n                        prev: covered\n                    };\n                }\n            } else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true) range = new $4d476c57e17b24ca$var$Range(cursor.from, cursor.to);\n                if (range.from < range.to) overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay) overlay.depth++;\n                if (covered) covered.depth++;\n            } else for(;;){\n                if (cursor.nextSibling()) break;\n                if (!cursor.parent()) break scan;\n                if (overlay && !--overlay.depth) {\n                    let ranges = $4d476c57e17b24ca$var$punchRanges(this.ranges, overlay.ranges);\n                    if (ranges.length) this.inner.splice(overlay.index, 0, new $4d476c57e17b24ca$var$InnerParse(overlay.parser, overlay.parser.startParse(this.input, $4d476c57e17b24ca$var$enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map((r)=>new $4d476c57e17b24ca$var$Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n                    overlay = overlay.prev;\n                }\n                if (covered && !--covered.depth) covered = covered.prev;\n            }\n        }\n    }\n}\nfunction $4d476c57e17b24ca$var$checkCover(covered, from, to) {\n    for (let range of covered){\n        if (range.from >= to) break;\n        if (range.to > from) return range.from <= from && range.to >= to ? 2 /* Cover.Full */  : 1 /* Cover.Partial */ ;\n    }\n    return 0 /* Cover.None */ ;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction $4d476c57e17b24ca$var$sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1];\n        nodes.push(buf.slice(startI, endI, from));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction $4d476c57e17b24ca$var$materialize(cursor) {\n    let { node: node } = cursor, depth = 0;\n    // Scan up to the nearest tree\n    do {\n        cursor.parent();\n        depth++;\n    }while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let i = 0, base = cursor.tree, off = 0;\n    for(;; i++){\n        off = base.positions[i] + cursor.from;\n        if (off <= node.from && off + base.children[i].length >= node.to) break;\n    }\n    let buf = base.children[i], b = buf.buffer;\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length) {\n        let i = startI;\n        while(b[i + 2] + off <= node.from)i = b[i + 3];\n        let children = [], positions = [];\n        $4d476c57e17b24ca$var$sliceBuf(buf, startI, i, children, positions, innerOffset);\n        let from = b[i + 1], to = b[i + 2];\n        let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n        children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n        positions.push(from - innerOffset);\n        $4d476c57e17b24ca$var$sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n        return new $4d476c57e17b24ca$export$7fbedc92909ed28e(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, $4d476c57e17b24ca$export$f06e977173f1857c.none, 0, buf.length);\n    // Move the cursor back to the target node\n    for(let d = 0; d <= depth; d++)cursor.childAfter(node.from);\n}\nclass $4d476c57e17b24ca$var$StructureCursor {\n    constructor(root, offset){\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.cursor($4d476c57e17b24ca$export$b0e28367f55837aa.IncludeAnonymous | $4d476c57e17b24ca$export$b0e28367f55837aa.IgnoreMounts);\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor: cursor } = this, p = pos - this.offset;\n        while(!this.done && cursor.from < p){\n            if (cursor.to >= pos && cursor.enter(p, 1, $4d476c57e17b24ca$export$b0e28367f55837aa.IgnoreOverlays | $4d476c57e17b24ca$export$b0e28367f55837aa.ExcludeBuffers)) ;\n            else if (!cursor.next(false)) this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) for(let tree = this.cursor.tree;;){\n            if (tree == cursor.tree) return true;\n            if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof $4d476c57e17b24ca$export$7fbedc92909ed28e) tree = tree.children[0];\n            else break;\n        }\n        return false;\n    }\n}\nclass $4d476c57e17b24ca$var$FragmentCursor {\n    constructor(fragments){\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop($4d476c57e17b24ca$var$stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new $4d476c57e17b24ca$var$StructureCursor(first.tree, -first.offset);\n        } else this.curFrag = this.inner = null;\n    }\n    hasNode(node) {\n        while(this.curFrag && node.from >= this.curTo)this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) this.curFrag = this.inner = null;\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop($4d476c57e17b24ca$var$stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new $4d476c57e17b24ca$var$StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for(let pos = this.inner.cursor.node; pos; pos = pos.parent){\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop($4d476c57e17b24ca$export$b8034b9bc18acd90.mounted);\n                if (mount && mount.parser == parser) for(let i = this.fragI; i < this.fragments.length; i++){\n                    let frag = this.fragments[i];\n                    if (frag.from >= pos.to) break;\n                    if (frag.tree == this.curFrag.tree) result.push({\n                        frag: frag,\n                        pos: pos.from - frag.offset,\n                        mount: mount\n                    });\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction $4d476c57e17b24ca$var$punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for(let i = 1, j = 0; i < outer.length; i++){\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for(; j < current.length; j++){\n            let r = current[j];\n            if (r.from >= gapTo) break;\n            if (r.to <= gapFrom) continue;\n            if (!copy) current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new $4d476c57e17b24ca$var$Range(r.from, gapFrom);\n                if (r.to > gapTo) copy.splice(j + 1, 0, new $4d476c57e17b24ca$var$Range(gapTo, r.to));\n            } else if (r.to > gapTo) copy[j--] = new $4d476c57e17b24ca$var$Range(gapTo, r.to);\n            else copy.splice(j--, 1);\n        }\n    }\n    return current;\n}\nfunction $4d476c57e17b24ca$var$findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1000000000;\n    let result = [];\n    for(;;){\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end) result.push(new $4d476c57e17b24ca$var$Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9) break;\n        if (nextA == pos) {\n            if (!inA) inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB) inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction $4d476c57e17b24ca$var$enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos: pos, mount: mount, frag: frag } of mounts){\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map((r)=>new $4d476c57e17b24ca$var$Range(r.from + pos, r.to + pos));\n            let changes = $4d476c57e17b24ca$var$findCoverChanges(ranges, overlay, from, to);\n            for(let i = 0, pos = from;; i++){\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos) result.push(new $4d476c57e17b24ca$export$3ae2ede6dca97077(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n                if (last) break;\n                pos = changes[i].to;\n            }\n        } else result.push(new $4d476c57e17b24ca$export$3ae2ede6dca97077(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n    }\n    return result;\n}\n\n\n\n\n\nlet $4c72ff8c9e8a407a$var$nextTagID = 0;\n/**\nHighlighting tags are markers that denote a highlighting category.\nThey are [associated](#highlight.styleTags) with parts of a syntax\ntree by a language mode, and then mapped to an actual CSS style by\na [highlighter](#highlight.Highlighter).\n\nBecause syntax tree node types and highlight styles have to be\nable to talk the same language, CodeMirror uses a mostly _closed_\n[vocabulary](#highlight.tags) of syntax tags (as opposed to\ntraditional open string-based systems, which make it hard for\nhighlighting themes to cover all the tokens produced by the\nvarious languages).\n\nIt _is_ possible to [define](#highlight.Tag^define) your own\nhighlighting tags for system-internal use (where you control both\nthe language package and the highlighter), but such tags will not\nbe picked up by regular highlighters (though you can derive them\nfrom standard tags to allow highlighters to fall back to those).\n*/ class $4c72ff8c9e8a407a$export$3288d34c523a1192 {\n    /**\n    @internal\n    */ constructor(/**\n    The set of this tag and all its parent tags, starting with\n    this one itself and sorted in order of decreasing specificity.\n    */ set, /**\n    The base unmodified tag that this one is based on, if it's\n    modified @internal\n    */ base, /**\n    The modifiers applied to this.base @internal\n    */ modified){\n        this.set = set;\n        this.base = base;\n        this.modified = modified;\n        /**\n        @internal\n        */ this.id = $4c72ff8c9e8a407a$var$nextTagID++;\n    }\n    /**\n    Define a new tag. If `parent` is given, the tag is treated as a\n    sub-tag of that parent, and\n    [highlighters](#highlight.tagHighlighter) that don't mention\n    this tag will try to fall back to the parent tag (or grandparent\n    tag, etc).\n    */ static define(parent) {\n        if (parent === null || parent === void 0 ? void 0 : parent.base) throw new Error(\"Can not derive from a modified tag\");\n        let tag = new $4c72ff8c9e8a407a$export$3288d34c523a1192([], null, []);\n        tag.set.push(tag);\n        if (parent) for (let t of parent.set)tag.set.push(t);\n        return tag;\n    }\n    /**\n    Define a tag _modifier_, which is a function that, given a tag,\n    will return a tag that is a subtag of the original. Applying the\n    same modifier to a twice tag will return the same value (`m1(t1)\n    == m1(t1)`) and applying multiple modifiers will, regardless or\n    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).\n    \n    When multiple modifiers are applied to a given base tag, each\n    smaller set of modifiers is registered as a parent, so that for\n    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,\n    `m1(m3(t1)`, and so on.\n    */ static defineModifier() {\n        let mod = new $4c72ff8c9e8a407a$var$Modifier;\n        return (tag)=>{\n            if (tag.modified.indexOf(mod) > -1) return tag;\n            return $4c72ff8c9e8a407a$var$Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b)=>a.id - b.id));\n        };\n    }\n}\nlet $4c72ff8c9e8a407a$var$nextModifierID = 0;\nclass $4c72ff8c9e8a407a$var$Modifier {\n    constructor(){\n        this.instances = [];\n        this.id = $4c72ff8c9e8a407a$var$nextModifierID++;\n    }\n    static get(base, mods) {\n        if (!mods.length) return base;\n        let exists = mods[0].instances.find((t)=>t.base == base && $4c72ff8c9e8a407a$var$sameArray(mods, t.modified));\n        if (exists) return exists;\n        let set = [], tag = new $4c72ff8c9e8a407a$export$3288d34c523a1192(set, base, mods);\n        for (let m of mods)m.instances.push(tag);\n        let configs = $4c72ff8c9e8a407a$var$powerSet(mods);\n        for (let parent of base.set)if (!parent.modified.length) for (let config of configs)set.push($4c72ff8c9e8a407a$var$Modifier.get(parent, config));\n        return tag;\n    }\n}\nfunction $4c72ff8c9e8a407a$var$sameArray(a, b) {\n    return a.length == b.length && a.every((x, i)=>x == b[i]);\n}\nfunction $4c72ff8c9e8a407a$var$powerSet(array) {\n    let sets = [\n        []\n    ];\n    for(let i = 0; i < array.length; i++)for(let j = 0, e = sets.length; j < e; j++)sets.push(sets[j].concat(array[i]));\n    return sets.sort((a, b)=>b.length - a.length);\n}\n/**\nThis function is used to add a set of tags to a language syntax\nvia [`NodeSet.extend`](#common.NodeSet.extend) or\n[`LRParser.configure`](#lr.LRParser.configure).\n\nThe argument object maps node selectors to [highlighting\ntags](#highlight.Tag) or arrays of tags.\n\nNode selectors may hold one or more (space-separated) node paths.\nSuch a path can be a [node name](#common.NodeType.name), or\nmultiple node names (or `*` wildcards) separated by slash\ncharacters, as in `\"Block/Declaration/VariableName\"`. Such a path\nmatches the final node but only if its direct parent nodes are the\nother nodes mentioned. A `*` in such a path matches any parent,\nbut only a single level—wildcards that match multiple parents\naren't supported, both for efficiency reasons and because Lezer\ntrees make it rather hard to reason about what they would match.)\n\nA path can be ended with `/...` to indicate that the tag assigned\nto the node should also apply to all child nodes, even if they\nmatch their own style (by default, only the innermost style is\nused).\n\nWhen a path ends in `!`, as in `Attribute!`, no further matching\nhappens for the node's child nodes, and the entire node gets the\ngiven style.\n\nIn this notation, node names that contain `/`, `!`, `*`, or `...`\nmust be quoted as JSON strings.\n\nFor example:\n\n```javascript\nparser.withProps(\n  styleTags({\n    // Style Number and BigNumber nodes\n    \"Number BigNumber\": tags.number,\n    // Style Escape nodes whose parent is String\n    \"String/Escape\": tags.escape,\n    // Style anything inside Attributes nodes\n    \"Attributes!\": tags.meta,\n    // Add a style to all content inside Italic nodes\n    \"Italic/...\": tags.emphasis,\n    // Style InvalidString nodes as both `string` and `invalid`\n    \"InvalidString\": [tags.string, tags.invalid],\n    // Style the node named \"/\" as punctuation\n    '\"/\"': tags.punctuation\n  })\n)\n```\n*/ function $4c72ff8c9e8a407a$export$c537e79bb7b94295(spec) {\n    let byName = Object.create(null);\n    for(let prop in spec){\n        let tags = spec[prop];\n        if (!Array.isArray(tags)) tags = [\n            tags\n        ];\n        for (let part of prop.split(\" \"))if (part) {\n            let pieces = [], mode = 2 /* Normal */ , rest = part;\n            for(let pos = 0;;){\n                if (rest == \"...\" && pos > 0 && pos + 3 == part.length) {\n                    mode = 1 /* Inherit */ ;\n                    break;\n                }\n                let m = /^\"(?:[^\"\\\\]|\\\\.)*?\"|[^\\/!]+/.exec(rest);\n                if (!m) throw new RangeError(\"Invalid path: \" + part);\n                pieces.push(m[0] == \"*\" ? \"\" : m[0][0] == '\"' ? JSON.parse(m[0]) : m[0]);\n                pos += m[0].length;\n                if (pos == part.length) break;\n                let next = part[pos++];\n                if (pos == part.length && next == \"!\") {\n                    mode = 0 /* Opaque */ ;\n                    break;\n                }\n                if (next != \"/\") throw new RangeError(\"Invalid path: \" + part);\n                rest = part.slice(pos);\n            }\n            let last = pieces.length - 1, inner = pieces[last];\n            if (!inner) throw new RangeError(\"Invalid path: \" + part);\n            let rule = new $4c72ff8c9e8a407a$var$Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);\n            byName[inner] = rule.sort(byName[inner]);\n        }\n    }\n    return $4c72ff8c9e8a407a$var$ruleNodeProp.add(byName);\n}\nconst $4c72ff8c9e8a407a$var$ruleNodeProp = new (0, $4d476c57e17b24ca$export$b8034b9bc18acd90)();\nclass $4c72ff8c9e8a407a$var$Rule {\n    constructor(tags, mode, context, next){\n        this.tags = tags;\n        this.mode = mode;\n        this.context = context;\n        this.next = next;\n    }\n    get opaque() {\n        return this.mode == 0 /* Opaque */ ;\n    }\n    get inherit() {\n        return this.mode == 1 /* Inherit */ ;\n    }\n    sort(other) {\n        if (!other || other.depth < this.depth) {\n            this.next = other;\n            return this;\n        }\n        other.next = this.sort(other.next);\n        return other;\n    }\n    get depth() {\n        return this.context ? this.context.length : 0;\n    }\n}\n$4c72ff8c9e8a407a$var$Rule.empty = new $4c72ff8c9e8a407a$var$Rule([], 2 /* Normal */ , null);\n/**\nDefine a [highlighter](#highlight.Highlighter) from an array of\ntag/class pairs. Classes associated with more specific tags will\ntake precedence.\n*/ function $4c72ff8c9e8a407a$export$b7f6332ce20f80fb(tags, options) {\n    let map = Object.create(null);\n    for (let style of tags){\n        if (!Array.isArray(style.tag)) map[style.tag.id] = style.class;\n        else for (let tag of style.tag)map[tag.id] = style.class;\n    }\n    let { scope: scope, all: all = null } = options || {};\n    return {\n        style: (tags)=>{\n            let cls = all;\n            for (let tag of tags)for (let sub of tag.set){\n                let tagClass = map[sub.id];\n                if (tagClass) {\n                    cls = cls ? cls + \" \" + tagClass : tagClass;\n                    break;\n                }\n            }\n            return cls;\n        },\n        scope: scope\n    };\n}\nfunction $4c72ff8c9e8a407a$var$highlightTags(highlighters, tags) {\n    let result = null;\n    for (let highlighter of highlighters){\n        let value = highlighter.style(tags);\n        if (value) result = result ? result + \" \" + value : value;\n    }\n    return result;\n}\n/**\nHighlight the given [tree](#common.Tree) with the given\n[highlighter](#highlight.Highlighter).\n*/ function $4c72ff8c9e8a407a$export$af82b3d076119fad(tree, highlighter, /**\nAssign styling to a region of the text. Will be called, in order\nof position, for any ranges where more than zero classes apply.\n`classes` is a space separated string of CSS classes.\n*/ putStyle, /**\nThe start of the range to highlight.\n*/ from = 0, /**\nThe end of the range.\n*/ to = tree.length) {\n    let builder = new $4c72ff8c9e8a407a$var$HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [\n        highlighter\n    ], putStyle);\n    builder.highlightRange(tree.cursor(), from, to, \"\", builder.highlighters);\n    builder.flush(to);\n}\nclass $4c72ff8c9e8a407a$var$HighlightBuilder {\n    constructor(at, highlighters, span){\n        this.at = at;\n        this.highlighters = highlighters;\n        this.span = span;\n        this.class = \"\";\n    }\n    startSpan(at, cls) {\n        if (cls != this.class) {\n            this.flush(at);\n            if (at > this.at) this.at = at;\n            this.class = cls;\n        }\n    }\n    flush(to) {\n        if (to > this.at && this.class) this.span(this.at, to, this.class);\n    }\n    highlightRange(cursor, from, to, inheritedClass, highlighters) {\n        let { type: type, from: start, to: end } = cursor;\n        if (start >= to || end <= from) return;\n        if (type.isTop) highlighters = this.highlighters.filter((h)=>!h.scope || h.scope(type));\n        let cls = inheritedClass;\n        let rule = $4c72ff8c9e8a407a$export$1519d79cc79711ec(cursor) || $4c72ff8c9e8a407a$var$Rule.empty;\n        let tagCls = $4c72ff8c9e8a407a$var$highlightTags(highlighters, rule.tags);\n        if (tagCls) {\n            if (cls) cls += \" \";\n            cls += tagCls;\n            if (rule.mode == 1 /* Inherit */ ) inheritedClass += (inheritedClass ? \" \" : \"\") + tagCls;\n        }\n        this.startSpan(Math.max(from, start), cls);\n        if (rule.opaque) return;\n        let mounted = cursor.tree && cursor.tree.prop((0, $4d476c57e17b24ca$export$b8034b9bc18acd90).mounted);\n        if (mounted && mounted.overlay) {\n            let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);\n            let innerHighlighters = this.highlighters.filter((h)=>!h.scope || h.scope(mounted.tree.type));\n            let hasChild = cursor.firstChild();\n            for(let i = 0, pos = start;; i++){\n                let next = i < mounted.overlay.length ? mounted.overlay[i] : null;\n                let nextPos = next ? next.from + start : end;\n                let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);\n                if (rangeFrom < rangeTo && hasChild) while(cursor.from < rangeTo){\n                    this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);\n                    this.startSpan(Math.min(rangeTo, cursor.to), cls);\n                    if (cursor.to >= nextPos || !cursor.nextSibling()) break;\n                }\n                if (!next || nextPos > to) break;\n                pos = next.to + start;\n                if (pos > from) {\n                    this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), \"\", innerHighlighters);\n                    this.startSpan(Math.min(to, pos), cls);\n                }\n            }\n            if (hasChild) cursor.parent();\n        } else if (cursor.firstChild()) {\n            if (mounted) inheritedClass = \"\";\n            do {\n                if (cursor.to <= from) continue;\n                if (cursor.from >= to) break;\n                this.highlightRange(cursor, from, to, inheritedClass, highlighters);\n                this.startSpan(Math.min(to, cursor.to), cls);\n            }while (cursor.nextSibling());\n            cursor.parent();\n        }\n    }\n}\n/**\nMatch a syntax node's [highlight rules](#highlight.styleTags). If\nthere's a match, return its set of tags, and whether it is\nopaque (uses a `!`) or applies to all child nodes (`/...`).\n*/ function $4c72ff8c9e8a407a$export$1519d79cc79711ec(node) {\n    let rule = node.type.prop($4c72ff8c9e8a407a$var$ruleNodeProp);\n    while(rule && rule.context && !node.matchContext(rule.context))rule = rule.next;\n    return rule || null;\n}\nconst $4c72ff8c9e8a407a$var$t = $4c72ff8c9e8a407a$export$3288d34c523a1192.define;\nconst $4c72ff8c9e8a407a$var$comment = $4c72ff8c9e8a407a$var$t(), $4c72ff8c9e8a407a$var$name = $4c72ff8c9e8a407a$var$t(), $4c72ff8c9e8a407a$var$typeName = $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$name), $4c72ff8c9e8a407a$var$propertyName = $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$name), $4c72ff8c9e8a407a$var$literal = $4c72ff8c9e8a407a$var$t(), $4c72ff8c9e8a407a$var$string = $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$literal), $4c72ff8c9e8a407a$var$number = $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$literal), $4c72ff8c9e8a407a$var$content = $4c72ff8c9e8a407a$var$t(), $4c72ff8c9e8a407a$var$heading = $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$content), $4c72ff8c9e8a407a$var$keyword = $4c72ff8c9e8a407a$var$t(), $4c72ff8c9e8a407a$var$operator = $4c72ff8c9e8a407a$var$t(), $4c72ff8c9e8a407a$var$punctuation = $4c72ff8c9e8a407a$var$t(), $4c72ff8c9e8a407a$var$bracket = $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$punctuation), $4c72ff8c9e8a407a$var$meta = $4c72ff8c9e8a407a$var$t();\n/**\nThe default set of highlighting [tags](#highlight.Tag).\n\nThis collection is heavily biased towards programming languages,\nand necessarily incomplete. A full ontology of syntactic\nconstructs would fill a stack of books, and be impractical to\nwrite themes for. So try to make do with this set. If all else\nfails, [open an\nissue](https://github.com/codemirror/codemirror.next) to propose a\nnew tag, or [define](#highlight.Tag^define) a local custom tag for\nyour use case.\n\nNote that it is not obligatory to always attach the most specific\ntag possible to an element—if your grammar can't easily\ndistinguish a certain type of element (such as a local variable),\nit is okay to style it as its more general variant (a variable).\n\nFor tags that extend some parent tag, the documentation links to\nthe parent.\n*/ const $4c72ff8c9e8a407a$export$8b7a896ae75accbf = {\n    comment: /**\n    A comment.\n    */ $4c72ff8c9e8a407a$var$comment,\n    /**\n    A line [comment](#highlight.tags.comment).\n    */ lineComment: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$comment),\n    /**\n    A block [comment](#highlight.tags.comment).\n    */ blockComment: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$comment),\n    /**\n    A documentation [comment](#highlight.tags.comment).\n    */ docComment: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$comment),\n    name: /**\n    Any kind of identifier.\n    */ $4c72ff8c9e8a407a$var$name,\n    /**\n    The [name](#highlight.tags.name) of a variable.\n    */ variableName: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$name),\n    /**\n    A type [name](#highlight.tags.name).\n    */ typeName: $4c72ff8c9e8a407a$var$typeName,\n    /**\n    A tag name (subtag of [`typeName`](#highlight.tags.typeName)).\n    */ tagName: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$typeName),\n    /**\n    A property or field [name](#highlight.tags.name).\n    */ propertyName: $4c72ff8c9e8a407a$var$propertyName,\n    /**\n    An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).\n    */ attributeName: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$propertyName),\n    /**\n    The [name](#highlight.tags.name) of a class.\n    */ className: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$name),\n    /**\n    A label [name](#highlight.tags.name).\n    */ labelName: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$name),\n    /**\n    A namespace [name](#highlight.tags.name).\n    */ namespace: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$name),\n    /**\n    The [name](#highlight.tags.name) of a macro.\n    */ macroName: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$name),\n    literal: /**\n    A literal value.\n    */ $4c72ff8c9e8a407a$var$literal,\n    string: /**\n    A string [literal](#highlight.tags.literal).\n    */ $4c72ff8c9e8a407a$var$string,\n    /**\n    A documentation [string](#highlight.tags.string).\n    */ docString: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$string),\n    /**\n    A character literal (subtag of [string](#highlight.tags.string)).\n    */ character: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$string),\n    /**\n    An attribute value (subtag of [string](#highlight.tags.string)).\n    */ attributeValue: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$string),\n    number: /**\n    A number [literal](#highlight.tags.literal).\n    */ $4c72ff8c9e8a407a$var$number,\n    /**\n    An integer [number](#highlight.tags.number) literal.\n    */ integer: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$number),\n    /**\n    A floating-point [number](#highlight.tags.number) literal.\n    */ float: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$number),\n    /**\n    A boolean [literal](#highlight.tags.literal).\n    */ bool: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$literal),\n    /**\n    Regular expression [literal](#highlight.tags.literal).\n    */ regexp: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$literal),\n    /**\n    An escape [literal](#highlight.tags.literal), for example a\n    backslash escape in a string.\n    */ escape: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$literal),\n    /**\n    A color [literal](#highlight.tags.literal).\n    */ color: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$literal),\n    /**\n    A URL [literal](#highlight.tags.literal).\n    */ url: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$literal),\n    keyword: /**\n    A language keyword.\n    */ $4c72ff8c9e8a407a$var$keyword,\n    /**\n    The [keyword](#highlight.tags.keyword) for the self or this\n    object.\n    */ self: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$keyword),\n    /**\n    The [keyword](#highlight.tags.keyword) for null.\n    */ null: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) denoting some atomic value.\n    */ atom: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that represents a unit.\n    */ unit: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$keyword),\n    /**\n    A modifier [keyword](#highlight.tags.keyword).\n    */ modifier: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that acts as an operator.\n    */ operatorKeyword: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$keyword),\n    /**\n    A control-flow related [keyword](#highlight.tags.keyword).\n    */ controlKeyword: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that defines something.\n    */ definitionKeyword: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) related to defining or\n    interfacing with modules.\n    */ moduleKeyword: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$keyword),\n    operator: /**\n    An operator.\n    */ $4c72ff8c9e8a407a$var$operator,\n    /**\n    An [operator](#highlight.tags.operator) that dereferences something.\n    */ derefOperator: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$operator),\n    /**\n    Arithmetic-related [operator](#highlight.tags.operator).\n    */ arithmeticOperator: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$operator),\n    /**\n    Logical [operator](#highlight.tags.operator).\n    */ logicOperator: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$operator),\n    /**\n    Bit [operator](#highlight.tags.operator).\n    */ bitwiseOperator: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$operator),\n    /**\n    Comparison [operator](#highlight.tags.operator).\n    */ compareOperator: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$operator),\n    /**\n    [Operator](#highlight.tags.operator) that updates its operand.\n    */ updateOperator: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$operator),\n    /**\n    [Operator](#highlight.tags.operator) that defines something.\n    */ definitionOperator: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$operator),\n    /**\n    Type-related [operator](#highlight.tags.operator).\n    */ typeOperator: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$operator),\n    /**\n    Control-flow [operator](#highlight.tags.operator).\n    */ controlOperator: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$operator),\n    punctuation: /**\n    Program or markup punctuation.\n    */ $4c72ff8c9e8a407a$var$punctuation,\n    /**\n    [Punctuation](#highlight.tags.punctuation) that separates\n    things.\n    */ separator: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$punctuation),\n    bracket: /**\n    Bracket-style [punctuation](#highlight.tags.punctuation).\n    */ $4c72ff8c9e8a407a$var$bracket,\n    /**\n    Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`\n    tokens).\n    */ angleBracket: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$bracket),\n    /**\n    Square [brackets](#highlight.tags.bracket) (usually `[` and `]`\n    tokens).\n    */ squareBracket: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$bracket),\n    /**\n    Parentheses (usually `(` and `)` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */ paren: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$bracket),\n    /**\n    Braces (usually `{` and `}` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */ brace: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$bracket),\n    content: /**\n    Content, for example plain text in XML or markup documents.\n    */ $4c72ff8c9e8a407a$var$content,\n    heading: /**\n    [Content](#highlight.tags.content) that represents a heading.\n    */ $4c72ff8c9e8a407a$var$heading,\n    /**\n    A level 1 [heading](#highlight.tags.heading).\n    */ heading1: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$heading),\n    /**\n    A level 2 [heading](#highlight.tags.heading).\n    */ heading2: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$heading),\n    /**\n    A level 3 [heading](#highlight.tags.heading).\n    */ heading3: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$heading),\n    /**\n    A level 4 [heading](#highlight.tags.heading).\n    */ heading4: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$heading),\n    /**\n    A level 5 [heading](#highlight.tags.heading).\n    */ heading5: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$heading),\n    /**\n    A level 6 [heading](#highlight.tags.heading).\n    */ heading6: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$heading),\n    /**\n    A prose separator (such as a horizontal rule).\n    */ contentSeparator: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$content),\n    /**\n    [Content](#highlight.tags.content) that represents a list.\n    */ list: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$content),\n    /**\n    [Content](#highlight.tags.content) that represents a quote.\n    */ quote: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$content),\n    /**\n    [Content](#highlight.tags.content) that is emphasized.\n    */ emphasis: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$content),\n    /**\n    [Content](#highlight.tags.content) that is styled strong.\n    */ strong: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$content),\n    /**\n    [Content](#highlight.tags.content) that is part of a link.\n    */ link: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$content),\n    /**\n    [Content](#highlight.tags.content) that is styled as code or\n    monospace.\n    */ monospace: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$content),\n    /**\n    [Content](#highlight.tags.content) that has a strike-through\n    style.\n    */ strikethrough: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$content),\n    /**\n    Inserted text in a change-tracking format.\n    */ inserted: $4c72ff8c9e8a407a$var$t(),\n    /**\n    Deleted text.\n    */ deleted: $4c72ff8c9e8a407a$var$t(),\n    /**\n    Changed text.\n    */ changed: $4c72ff8c9e8a407a$var$t(),\n    /**\n    An invalid or unsyntactic element.\n    */ invalid: $4c72ff8c9e8a407a$var$t(),\n    meta: /**\n    Metadata or meta-instruction.\n    */ $4c72ff8c9e8a407a$var$meta,\n    /**\n    [Metadata](#highlight.tags.meta) that applies to the entire\n    document.\n    */ documentMeta: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$meta),\n    /**\n    [Metadata](#highlight.tags.meta) that annotates or adds\n    attributes to a given syntactic element.\n    */ annotation: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$meta),\n    /**\n    Processing instruction or preprocessor directive. Subtag of\n    [meta](#highlight.tags.meta).\n    */ processingInstruction: $4c72ff8c9e8a407a$var$t($4c72ff8c9e8a407a$var$meta),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that a\n    given element is being defined. Expected to be used with the\n    various [name](#highlight.tags.name) tags.\n    */ definition: $4c72ff8c9e8a407a$export$3288d34c523a1192.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that\n    something is constant. Mostly expected to be used with\n    [variable names](#highlight.tags.variableName).\n    */ constant: $4c72ff8c9e8a407a$export$3288d34c523a1192.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) used to indicate that\n    a [variable](#highlight.tags.variableName) or [property\n    name](#highlight.tags.propertyName) is being called or defined\n    as a function.\n    */ function: $4c72ff8c9e8a407a$export$3288d34c523a1192.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that can be applied to\n    [names](#highlight.tags.name) to indicate that they belong to\n    the language's standard environment.\n    */ standard: $4c72ff8c9e8a407a$export$3288d34c523a1192.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates a given\n    [names](#highlight.tags.name) is local to some scope.\n    */ local: $4c72ff8c9e8a407a$export$3288d34c523a1192.defineModifier(),\n    /**\n    A generic variant [modifier](#highlight.Tag^defineModifier) that\n    can be used to tag language-specific alternative variants of\n    some common tag. It is recommended for themes to define special\n    forms of at least the [string](#highlight.tags.string) and\n    [variable name](#highlight.tags.variableName) tags, since those\n    come up a lot.\n    */ special: $4c72ff8c9e8a407a$export$3288d34c523a1192.defineModifier()\n};\n/**\nThis is a highlighter that adds stable, predictable classes to\ntokens, for styling with external CSS.\n\nThe following tags are mapped to their name prefixed with `\"tok-\"`\n(for example `\"tok-comment\"`):\n\n* [`link`](#highlight.tags.link)\n* [`heading`](#highlight.tags.heading)\n* [`emphasis`](#highlight.tags.emphasis)\n* [`strong`](#highlight.tags.strong)\n* [`keyword`](#highlight.tags.keyword)\n* [`atom`](#highlight.tags.atom)\n* [`bool`](#highlight.tags.bool)\n* [`url`](#highlight.tags.url)\n* [`labelName`](#highlight.tags.labelName)\n* [`inserted`](#highlight.tags.inserted)\n* [`deleted`](#highlight.tags.deleted)\n* [`literal`](#highlight.tags.literal)\n* [`string`](#highlight.tags.string)\n* [`number`](#highlight.tags.number)\n* [`variableName`](#highlight.tags.variableName)\n* [`typeName`](#highlight.tags.typeName)\n* [`namespace`](#highlight.tags.namespace)\n* [`className`](#highlight.tags.className)\n* [`macroName`](#highlight.tags.macroName)\n* [`propertyName`](#highlight.tags.propertyName)\n* [`operator`](#highlight.tags.operator)\n* [`comment`](#highlight.tags.comment)\n* [`meta`](#highlight.tags.meta)\n* [`punctuation`](#highlight.tags.punctuation)\n* [`invalid`](#highlight.tags.invalid)\n\nIn addition, these mappings are provided:\n\n* [`regexp`](#highlight.tags.regexp),\n  [`escape`](#highlight.tags.escape), and\n  [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)\n  are mapped to `\"tok-string2\"`\n* [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName2\"`\n* [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-local\"`\n* [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-definition\"`\n* [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)\n  to `\"tok-propertyName tok-definition\"`\n*/ const $4c72ff8c9e8a407a$export$bf3ffb24fb17216c = $4c72ff8c9e8a407a$export$b7f6332ce20f80fb([\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.link,\n        class: \"tok-link\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.heading,\n        class: \"tok-heading\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.emphasis,\n        class: \"tok-emphasis\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.strong,\n        class: \"tok-strong\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.keyword,\n        class: \"tok-keyword\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.atom,\n        class: \"tok-atom\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.bool,\n        class: \"tok-bool\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.url,\n        class: \"tok-url\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.labelName,\n        class: \"tok-labelName\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.inserted,\n        class: \"tok-inserted\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.deleted,\n        class: \"tok-deleted\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.literal,\n        class: \"tok-literal\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.string,\n        class: \"tok-string\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.number,\n        class: \"tok-number\"\n    },\n    {\n        tag: [\n            $4c72ff8c9e8a407a$export$8b7a896ae75accbf.regexp,\n            $4c72ff8c9e8a407a$export$8b7a896ae75accbf.escape,\n            $4c72ff8c9e8a407a$export$8b7a896ae75accbf.special($4c72ff8c9e8a407a$export$8b7a896ae75accbf.string)\n        ],\n        class: \"tok-string2\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.variableName,\n        class: \"tok-variableName\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.local($4c72ff8c9e8a407a$export$8b7a896ae75accbf.variableName),\n        class: \"tok-variableName tok-local\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.definition($4c72ff8c9e8a407a$export$8b7a896ae75accbf.variableName),\n        class: \"tok-variableName tok-definition\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.special($4c72ff8c9e8a407a$export$8b7a896ae75accbf.variableName),\n        class: \"tok-variableName2\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.definition($4c72ff8c9e8a407a$export$8b7a896ae75accbf.propertyName),\n        class: \"tok-propertyName tok-definition\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.typeName,\n        class: \"tok-typeName\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.namespace,\n        class: \"tok-namespace\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.className,\n        class: \"tok-className\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.macroName,\n        class: \"tok-macroName\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.propertyName,\n        class: \"tok-propertyName\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.operator,\n        class: \"tok-operator\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.comment,\n        class: \"tok-comment\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.meta,\n        class: \"tok-meta\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.invalid,\n        class: \"tok-invalid\"\n    },\n    {\n        tag: $4c72ff8c9e8a407a$export$8b7a896ae75accbf.punctuation,\n        class: \"tok-punctuation\"\n    }\n]);\n\n\n\nvar $14831f1c512a5db9$var$_a;\n/**\nNode prop stored in a parser's top syntax node to provide the\nfacet that stores language-specific data for that language.\n*/ const $14831f1c512a5db9$export$27a2e78097f753f7 = /*@__PURE__*/ new (0, $4d476c57e17b24ca$export$b8034b9bc18acd90)();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/ function $14831f1c512a5db9$export$b57f683f43553b99(baseData) {\n    return (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n        combine: baseData ? (values)=>values.concat(baseData) : undefined\n    });\n}\n/**\nSyntax node prop used to register sublanguages. Should be added to\nthe top level node type for the language.\n*/ const $14831f1c512a5db9$export$4afc6f37514bbb67 = /*@__PURE__*/ new (0, $4d476c57e17b24ca$export$b8034b9bc18acd90)();\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. The class\ncan be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)\nsubclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or\nvia the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass\nfor stream parsers.\n*/ class $14831f1c512a5db9$export$ce4fe1c9e6520c1a {\n    /**\n    Construct a language object. If you need to invoke this\n    directly, first define a data facet with\n    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then\n    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it\n    to the language's outer syntax node.\n    */ constructor(/**\n    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet\n    used for this language.\n    */ data, parser, extraExtensions = [], /**\n    A language name.\n    */ name = \"\"){\n        this.data = data;\n        this.name = name;\n        // Kludge to define EditorState.tree as a debugging helper,\n        // without the EditorState package actually knowing about\n        // languages and lezer trees.\n        if (!(0, $ccfb9497d8ef598f$export$afa855cbfaff27f2).prototype.hasOwnProperty(\"tree\")) Object.defineProperty((0, $ccfb9497d8ef598f$export$afa855cbfaff27f2).prototype, \"tree\", {\n            get () {\n                return $14831f1c512a5db9$export$7fc98e56a4ca6be1(this);\n            }\n        });\n        this.parser = parser;\n        this.extension = [\n            $14831f1c512a5db9$export$789c912f57fe164c.of(this),\n            (0, $ccfb9497d8ef598f$export$afa855cbfaff27f2).languageData.of((state, pos, side)=>{\n                let top = $14831f1c512a5db9$var$topNodeAt(state, pos, side), data = top.type.prop($14831f1c512a5db9$export$27a2e78097f753f7);\n                if (!data) return [];\n                let base = state.facet(data), sub = top.type.prop($14831f1c512a5db9$export$4afc6f37514bbb67);\n                if (sub) {\n                    let innerNode = top.resolve(pos - top.from, side);\n                    for (let sublang of sub)if (sublang.test(innerNode, state)) {\n                        let data = state.facet(sublang.facet);\n                        return sublang.type == \"replace\" ? data : data.concat(base);\n                    }\n                }\n                return base;\n            })\n        ].concat(extraExtensions);\n    }\n    /**\n    Query whether this language is active at the given position.\n    */ isActiveAt(state, pos, side = -1) {\n        return $14831f1c512a5db9$var$topNodeAt(state, pos, side).type.prop($14831f1c512a5db9$export$27a2e78097f753f7) == this.data;\n    }\n    /**\n    Find the document regions that were parsed using this language.\n    The returned regions will _include_ any nested languages rooted\n    in this language, when those exist.\n    */ findRegions(state) {\n        let lang = state.facet($14831f1c512a5db9$export$789c912f57fe164c);\n        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [\n            {\n                from: 0,\n                to: state.doc.length\n            }\n        ];\n        if (!lang || !lang.allowsNesting) return [];\n        let result = [];\n        let explore = (tree, from)=>{\n            if (tree.prop($14831f1c512a5db9$export$27a2e78097f753f7) == this.data) {\n                result.push({\n                    from: from,\n                    to: from + tree.length\n                });\n                return;\n            }\n            let mount = tree.prop((0, $4d476c57e17b24ca$export$b8034b9bc18acd90).mounted);\n            if (mount) {\n                if (mount.tree.prop($14831f1c512a5db9$export$27a2e78097f753f7) == this.data) {\n                    if (mount.overlay) for (let r of mount.overlay)result.push({\n                        from: r.from + from,\n                        to: r.to + from\n                    });\n                    else result.push({\n                        from: from,\n                        to: from + tree.length\n                    });\n                    return;\n                } else if (mount.overlay) {\n                    let size = result.length;\n                    explore(mount.tree, mount.overlay[0].from + from);\n                    if (result.length > size) return;\n                }\n            }\n            for(let i = 0; i < tree.children.length; i++){\n                let ch = tree.children[i];\n                if (ch instanceof (0, $4d476c57e17b24ca$export$7fbedc92909ed28e)) explore(ch, tree.positions[i] + from);\n            }\n        };\n        explore($14831f1c512a5db9$export$7fc98e56a4ca6be1(state), 0);\n        return result;\n    }\n    /**\n    Indicates whether this language allows nested languages. The\n    default implementation returns true.\n    */ get allowsNesting() {\n        return true;\n    }\n}\n/**\n@internal\n*/ $14831f1c512a5db9$export$ce4fe1c9e6520c1a.setState = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\nfunction $14831f1c512a5db9$var$topNodeAt(state, pos, side) {\n    let topLang = state.facet($14831f1c512a5db9$export$789c912f57fe164c), tree = $14831f1c512a5db9$export$7fc98e56a4ca6be1(state).topNode;\n    if (!topLang || topLang.allowsNesting) {\n        for(let node = tree; node; node = node.enter(pos, side, (0, $4d476c57e17b24ca$export$b0e28367f55837aa).ExcludeBuffers))if (node.type.isTop) tree = node;\n    }\n    return tree;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer\n[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)\nparsers.\n*/ class $14831f1c512a5db9$export$b243968d9fb6db03 extends $14831f1c512a5db9$export$ce4fe1c9e6520c1a {\n    constructor(data, parser, name){\n        super(data, parser, [], name);\n        this.parser = parser;\n    }\n    /**\n    Define a language from a parser.\n    */ static define(spec) {\n        let data = $14831f1c512a5db9$export$b57f683f43553b99(spec.languageData);\n        return new $14831f1c512a5db9$export$b243968d9fb6db03(data, spec.parser.configure({\n            props: [\n                $14831f1c512a5db9$export$27a2e78097f753f7.add((type)=>type.isTop ? data : undefined)\n            ]\n        }), spec.name);\n    }\n    /**\n    Create a new instance of this language with a reconfigured\n    version of its parser and optionally a new name.\n    */ configure(options, name) {\n        return new $14831f1c512a5db9$export$b243968d9fb6db03(this.data, this.parser.configure(options), name || this.name);\n    }\n    get allowsNesting() {\n        return this.parser.hasWrappers();\n    }\n}\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of the active\n[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no\nlanguage available.\n*/ function $14831f1c512a5db9$export$7fc98e56a4ca6be1(state) {\n    let field = state.field($14831f1c512a5db9$export$ce4fe1c9e6520c1a.state, false);\n    return field ? field.tree : (0, $4d476c57e17b24ca$export$7fbedc92909ed28e).empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/ function $14831f1c512a5db9$export$8694796f3a52e973(state, upto, timeout = 50) {\n    var _a;\n    let parse = (_a = state.field($14831f1c512a5db9$export$ce4fe1c9e6520c1a.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n    if (!parse) return null;\n    let oldVieport = parse.viewport;\n    parse.updateViewport({\n        from: 0,\n        to: upto\n    });\n    let result = parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\n    parse.updateViewport(oldVieport);\n    return result;\n}\n/**\nQueries whether there is a full syntax tree available up to the\ngiven document position. If there isn't, the background parse\nprocess _might_ still be working and update the tree further, but\nthere is no guarantee of that—the parser will [stop\nworking](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a\ncertain amount of time or has moved beyond the visible viewport.\nAlways returns false if no language has been enabled.\n*/ function $14831f1c512a5db9$export$2c95b013b0941e86(state, upto = state.doc.length) {\n    var _a;\n    return ((_a = state.field($14831f1c512a5db9$export$ce4fe1c9e6520c1a.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\n}\n/**\nMove parsing forward, and update the editor state afterwards to\nreflect the new tree. Will work for at most `timeout`\nmilliseconds. Returns true if the parser managed get to the given\nposition in that time.\n*/ function $14831f1c512a5db9$export$b3bcb61c35026d72(view, upto = view.viewport.to, timeout = 100) {\n    let success = $14831f1c512a5db9$export$8694796f3a52e973(view.state, upto, timeout);\n    if (success != $14831f1c512a5db9$export$7fc98e56a4ca6be1(view.state)) view.dispatch({});\n    return !!success;\n}\n/**\nTells you whether the language parser is planning to do more\nparsing work (in a `requestIdleCallback` pseudo-thread) or has\nstopped running, either because it parsed the entire document,\nbecause it spent too much time and was cut off, or because there\nis no language parser enabled.\n*/ function $14831f1c512a5db9$export$23c0ee92d6189d3f(view) {\n    var _a;\n    return ((_a = view.plugin($14831f1c512a5db9$var$parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\n}\n/**\nLezer-style\n[`Input`](https://lezer.codemirror.net/docs/ref#common.Input)\nobject for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.\n*/ class $14831f1c512a5db9$export$78c262ab5af874ad {\n    /**\n    Create an input object for the given document.\n    */ constructor(doc){\n        this.doc = doc;\n        this.cursorPos = 0;\n        this.string = \"\";\n        this.cursor = doc.iter();\n    }\n    get length() {\n        return this.doc.length;\n    }\n    syncTo(pos) {\n        this.string = this.cursor.next(pos - this.cursorPos).value;\n        this.cursorPos = pos + this.string.length;\n        return this.cursorPos - this.string.length;\n    }\n    chunk(pos) {\n        this.syncTo(pos);\n        return this.string;\n    }\n    get lineChunks() {\n        return true;\n    }\n    read(from, to) {\n        let stringStart = this.cursorPos - this.string.length;\n        if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);\n        else return this.string.slice(from - stringStart, to - stringStart);\n    }\n}\nlet $14831f1c512a5db9$var$currentContext = null;\n/**\nA parse context provided to parsers working on the editor content.\n*/ class $14831f1c512a5db9$export$3fcb7c01ff2a41fa {\n    constructor(parser, /**\n    The current editor state.\n    */ state, /**\n    Tree fragments that can be reused by incremental re-parses.\n    */ fragments = [], /**\n    @internal\n    */ tree, /**\n    @internal\n    */ treeLen, /**\n    The current editor viewport (or some overapproximation\n    thereof). Intended to be used for opportunistically avoiding\n    work (in which case\n    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)\n    should be called to make sure the parser is restarted when the\n    skipped region becomes visible).\n    */ viewport, /**\n    @internal\n    */ skipped, /**\n    This is where skipping parsers can register a promise that,\n    when resolved, will schedule a new parse. It is cleared when\n    the parse worker picks up the promise. @internal\n    */ scheduleOn){\n        this.parser = parser;\n        this.state = state;\n        this.fragments = fragments;\n        this.tree = tree;\n        this.treeLen = treeLen;\n        this.viewport = viewport;\n        this.skipped = skipped;\n        this.scheduleOn = scheduleOn;\n        this.parse = null;\n        /**\n        @internal\n        */ this.tempSkipped = [];\n    }\n    /**\n    @internal\n    */ static create(parser, state, viewport) {\n        return new $14831f1c512a5db9$export$3fcb7c01ff2a41fa(parser, state, [], (0, $4d476c57e17b24ca$export$7fbedc92909ed28e).empty, 0, viewport, [], null);\n    }\n    startParse() {\n        return this.parser.startParse(new $14831f1c512a5db9$export$78c262ab5af874ad(this.state.doc), this.fragments);\n    }\n    /**\n    @internal\n    */ work(until, upto) {\n        if (upto != null && upto >= this.state.doc.length) upto = undefined;\n        if (this.tree != (0, $4d476c57e17b24ca$export$7fbedc92909ed28e).empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\n            this.takeTree();\n            return true;\n        }\n        return this.withContext(()=>{\n            var _a;\n            if (typeof until == \"number\") {\n                let endTime = Date.now() + until;\n                until = ()=>Date.now() > endTime;\n            }\n            if (!this.parse) this.parse = this.startParse();\n            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length) this.parse.stopAt(upto);\n            for(;;){\n                let done = this.parse.advance();\n                if (done) {\n                    this.fragments = this.withoutTempSkipped((0, $4d476c57e17b24ca$export$3ae2ede6dca97077).addTree(done, this.fragments, this.parse.stoppedAt != null));\n                    this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;\n                    this.tree = done;\n                    this.parse = null;\n                    if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length)) this.parse = this.startParse();\n                    else return true;\n                }\n                if (until()) return false;\n            }\n        });\n    }\n    /**\n    @internal\n    */ takeTree() {\n        let pos, tree;\n        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\n            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos) this.parse.stopAt(pos);\n            this.withContext(()=>{\n                while(!(tree = this.parse.advance()));\n            });\n            this.treeLen = pos;\n            this.tree = tree;\n            this.fragments = this.withoutTempSkipped((0, $4d476c57e17b24ca$export$3ae2ede6dca97077).addTree(this.tree, this.fragments, true));\n            this.parse = null;\n        }\n    }\n    withContext(f) {\n        let prev = $14831f1c512a5db9$var$currentContext;\n        $14831f1c512a5db9$var$currentContext = this;\n        try {\n            return f();\n        } finally{\n            $14831f1c512a5db9$var$currentContext = prev;\n        }\n    }\n    withoutTempSkipped(fragments) {\n        for(let r; r = this.tempSkipped.pop();)fragments = $14831f1c512a5db9$var$cutFragments(fragments, r.from, r.to);\n        return fragments;\n    }\n    /**\n    @internal\n    */ changes(changes, newState) {\n        let { fragments: fragments, tree: tree, treeLen: treeLen, viewport: viewport, skipped: skipped } = this;\n        this.takeTree();\n        if (!changes.empty) {\n            let ranges = [];\n            changes.iterChangedRanges((fromA, toA, fromB, toB)=>ranges.push({\n                    fromA: fromA,\n                    toA: toA,\n                    fromB: fromB,\n                    toB: toB\n                }));\n            fragments = (0, $4d476c57e17b24ca$export$3ae2ede6dca97077).applyChanges(fragments, ranges);\n            tree = (0, $4d476c57e17b24ca$export$7fbedc92909ed28e).empty;\n            treeLen = 0;\n            viewport = {\n                from: changes.mapPos(viewport.from, -1),\n                to: changes.mapPos(viewport.to, 1)\n            };\n            if (this.skipped.length) {\n                skipped = [];\n                for (let r of this.skipped){\n                    let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);\n                    if (from < to) skipped.push({\n                        from: from,\n                        to: to\n                    });\n                }\n            }\n        }\n        return new $14831f1c512a5db9$export$3fcb7c01ff2a41fa(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\n    }\n    /**\n    @internal\n    */ updateViewport(viewport) {\n        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to) return false;\n        this.viewport = viewport;\n        let startLen = this.skipped.length;\n        for(let i = 0; i < this.skipped.length; i++){\n            let { from: from, to: to } = this.skipped[i];\n            if (from < viewport.to && to > viewport.from) {\n                this.fragments = $14831f1c512a5db9$var$cutFragments(this.fragments, from, to);\n                this.skipped.splice(i--, 1);\n            }\n        }\n        if (this.skipped.length >= startLen) return false;\n        this.reset();\n        return true;\n    }\n    /**\n    @internal\n    */ reset() {\n        if (this.parse) {\n            this.takeTree();\n            this.parse = null;\n        }\n    }\n    /**\n    Notify the parse scheduler that the given region was skipped\n    because it wasn't in view, and the parse should be restarted\n    when it comes into view.\n    */ skipUntilInView(from, to) {\n        this.skipped.push({\n            from: from,\n            to: to\n        });\n    }\n    /**\n    Returns a parser intended to be used as placeholder when\n    asynchronously loading a nested parser. It'll skip its input and\n    mark it as not-really-parsed, so that the next update will parse\n    it again.\n    \n    When `until` is given, a reparse will be scheduled when that\n    promise resolves.\n    */ static getSkippingParser(until) {\n        return new class extends (0, $4d476c57e17b24ca$export$7acfa6ed01010e37) {\n            createParse(input, fragments, ranges) {\n                let from = ranges[0].from, to = ranges[ranges.length - 1].to;\n                let parser = {\n                    parsedPos: from,\n                    advance () {\n                        let cx = $14831f1c512a5db9$var$currentContext;\n                        if (cx) {\n                            for (let r of ranges)cx.tempSkipped.push(r);\n                            if (until) cx.scheduleOn = cx.scheduleOn ? Promise.all([\n                                cx.scheduleOn,\n                                until\n                            ]) : until;\n                        }\n                        this.parsedPos = to;\n                        return new (0, $4d476c57e17b24ca$export$7fbedc92909ed28e)((0, $4d476c57e17b24ca$export$f06e977173f1857c).none, [], [], to - from);\n                    },\n                    stoppedAt: null,\n                    stopAt () {}\n                };\n                return parser;\n            }\n        };\n    }\n    /**\n    @internal\n    */ isDone(upto) {\n        upto = Math.min(upto, this.state.doc.length);\n        let frags = this.fragments;\n        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\n    }\n    /**\n    Get the context for the current parse, or `null` if no editor\n    parse is in progress.\n    */ static get() {\n        return $14831f1c512a5db9$var$currentContext;\n    }\n}\nfunction $14831f1c512a5db9$var$cutFragments(fragments, from, to) {\n    return (0, $4d476c57e17b24ca$export$3ae2ede6dca97077).applyChanges(fragments, [\n        {\n            fromA: from,\n            toA: to,\n            fromB: from,\n            toB: to\n        }\n    ]);\n}\nclass $14831f1c512a5db9$var$LanguageState {\n    constructor(// A mutable parse state that is used to preserve work done during\n    // the lifetime of a state when moving to the next state.\n    context){\n        this.context = context;\n        this.tree = context.tree;\n    }\n    apply(tr) {\n        if (!tr.docChanged && this.tree == this.context.tree) return this;\n        let newCx = this.context.changes(tr.changes, tr.state);\n        // If the previous parse wasn't done, go forward only up to its\n        // end position or the end of the viewport, to avoid slowing down\n        // state updates with parse work beyond the viewport.\n        let upto = this.context.treeLen == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\n        if (!newCx.work(20 /* Apply */ , upto)) newCx.takeTree();\n        return new $14831f1c512a5db9$var$LanguageState(newCx);\n    }\n    static init(state) {\n        let vpTo = Math.min(3000 /* InitViewport */ , state.doc.length);\n        let parseState = $14831f1c512a5db9$export$3fcb7c01ff2a41fa.create(state.facet($14831f1c512a5db9$export$789c912f57fe164c).parser, state, {\n            from: 0,\n            to: vpTo\n        });\n        if (!parseState.work(20 /* Apply */ , vpTo)) parseState.takeTree();\n        return new $14831f1c512a5db9$var$LanguageState(parseState);\n    }\n}\n$14831f1c512a5db9$export$ce4fe1c9e6520c1a.state = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create: $14831f1c512a5db9$var$LanguageState.init,\n    update (value, tr) {\n        for (let e of tr.effects)if (e.is($14831f1c512a5db9$export$ce4fe1c9e6520c1a.setState)) return e.value;\n        if (tr.startState.facet($14831f1c512a5db9$export$789c912f57fe164c) != tr.state.facet($14831f1c512a5db9$export$789c912f57fe164c)) return $14831f1c512a5db9$var$LanguageState.init(tr.state);\n        return value.apply(tr);\n    }\n});\nlet $14831f1c512a5db9$var$requestIdle = (callback)=>{\n    let timeout = setTimeout(()=>callback(), 500 /* MaxPause */ );\n    return ()=>clearTimeout(timeout);\n};\nif (typeof requestIdleCallback != \"undefined\") $14831f1c512a5db9$var$requestIdle = (callback)=>{\n    let idle = -1, timeout = setTimeout(()=>{\n        idle = requestIdleCallback(callback, {\n            timeout: 400 /* MinPause */ \n        });\n    }, 100 /* MinPause */ );\n    return ()=>idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\n};\nconst $14831f1c512a5db9$var$isInputPending = typeof navigator != \"undefined\" && (($14831f1c512a5db9$var$_a = navigator.scheduling) === null || $14831f1c512a5db9$var$_a === void 0 ? void 0 : $14831f1c512a5db9$var$_a.isInputPending) ? ()=>navigator.scheduling.isInputPending() : null;\nconst $14831f1c512a5db9$var$parseWorker = /*@__PURE__*/ (0, $071334078f8d3f8a$export$44d5eccfd62adda7).fromClass(class ParseWorker {\n    constructor(view){\n        this.view = view;\n        this.working = null;\n        this.workScheduled = 0;\n        // End of the current time chunk\n        this.chunkEnd = -1;\n        // Milliseconds of budget left for this chunk\n        this.chunkBudget = -1;\n        this.work = this.work.bind(this);\n        this.scheduleWork();\n    }\n    update(update) {\n        let cx = this.view.state.field($14831f1c512a5db9$export$ce4fe1c9e6520c1a.state).context;\n        if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen) this.scheduleWork();\n        if (update.docChanged) {\n            if (this.view.hasFocus) this.chunkBudget += 50 /* ChangeBonus */ ;\n            this.scheduleWork();\n        }\n        this.checkAsyncSchedule(cx);\n    }\n    scheduleWork() {\n        if (this.working) return;\n        let { state: state } = this.view, field = state.field($14831f1c512a5db9$export$ce4fe1c9e6520c1a.state);\n        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length)) this.working = $14831f1c512a5db9$var$requestIdle(this.work);\n    }\n    work(deadline) {\n        this.working = null;\n        let now = Date.now();\n        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {\n            this.chunkEnd = now + 30000 /* ChunkTime */ ;\n            this.chunkBudget = 3000 /* ChunkBudget */ ;\n        }\n        if (this.chunkBudget <= 0) return; // No more budget\n        let { state: state, viewport: { to: vpTo } } = this.view, field = state.field($14831f1c512a5db9$export$ce4fe1c9e6520c1a.state);\n        if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* MaxParseAhead */ )) return;\n        let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Slice */ , deadline && !$14831f1c512a5db9$var$isInputPending ? Math.max(25 /* MinSlice */ , deadline.timeRemaining() - 5) : 1e9);\n        let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\n        let done = field.context.work(()=>{\n            return $14831f1c512a5db9$var$isInputPending && $14831f1c512a5db9$var$isInputPending() || Date.now() > endTime;\n        }, vpTo + (viewportFirst ? 0 : 100000 /* MaxParseAhead */ ));\n        this.chunkBudget -= Date.now() - now;\n        if (done || this.chunkBudget <= 0) {\n            field.context.takeTree();\n            this.view.dispatch({\n                effects: $14831f1c512a5db9$export$ce4fe1c9e6520c1a.setState.of(new $14831f1c512a5db9$var$LanguageState(field.context))\n            });\n        }\n        if (this.chunkBudget > 0 && !(done && !viewportFirst)) this.scheduleWork();\n        this.checkAsyncSchedule(field.context);\n    }\n    checkAsyncSchedule(cx) {\n        if (cx.scheduleOn) {\n            this.workScheduled++;\n            cx.scheduleOn.then(()=>this.scheduleWork()).catch((err)=>(0, $071334078f8d3f8a$export$f86b2a1a2ce291b3)(this.view.state, err)).then(()=>this.workScheduled--);\n            cx.scheduleOn = null;\n        }\n    }\n    destroy() {\n        if (this.working) this.working();\n    }\n    isWorking() {\n        return !!(this.working || this.workScheduled > 0);\n    }\n}, {\n    eventHandlers: {\n        focus () {\n            this.scheduleWork();\n        }\n    }\n});\n/**\nThe facet used to associate a language with an editor state. Used\nby `Language` object's `extension` property (so you don't need to\nmanually wrap your languages in this). Can be used to access the\ncurrent language on a state.\n*/ const $14831f1c512a5db9$export$789c912f57fe164c = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (languages) {\n        return languages.length ? languages[0] : null;\n    },\n    enables: (language)=>[\n            $14831f1c512a5db9$export$ce4fe1c9e6520c1a.state,\n            $14831f1c512a5db9$var$parseWorker,\n            (0, $071334078f8d3f8a$export$eece2fccabbb77c5).contentAttributes.compute([\n                language\n            ], (state)=>{\n                let lang = state.facet(language);\n                return lang && lang.name ? {\n                    \"data-language\": lang.name\n                } : {};\n            })\n        ]\n});\n/**\nThis class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/ class $14831f1c512a5db9$export$cbdefefa8a51dd3b {\n    /**\n    Create a language support object.\n    */ constructor(/**\n    The language object.\n    */ language, /**\n    An optional set of supporting extensions. When nesting a\n    language in another language, the outer language is encouraged\n    to include the supporting extensions for its inner languages\n    in its own set of support extensions.\n    */ support = []){\n        this.language = language;\n        this.support = support;\n        this.extension = [\n            language,\n            support\n        ];\n    }\n}\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/ class $14831f1c512a5db9$export$50ab82debf88f71 {\n    constructor(/**\n    The name of this language.\n    */ name, /**\n    Alternative names for the mode (lowercased, includes `this.name`).\n    */ alias, /**\n    File extensions associated with this language.\n    */ extensions, /**\n    Optional filename pattern that should be associated with this\n    language.\n    */ filename, loadFunc, /**\n    If the language has been loaded, this will hold its value.\n    */ support){\n        this.name = name;\n        this.alias = alias;\n        this.extensions = extensions;\n        this.filename = filename;\n        this.loadFunc = loadFunc;\n        this.support = support;\n        this.loading = null;\n    }\n    /**\n    Start loading the the language. Will return a promise that\n    resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n    object when the language successfully loads.\n    */ load() {\n        return this.loading || (this.loading = this.loadFunc().then((support)=>this.support = support, (err)=>{\n            this.loading = null;\n            throw err;\n        }));\n    }\n    /**\n    Create a language description.\n    */ static of(spec) {\n        let { load: load, support: support } = spec;\n        if (!load) {\n            if (!support) throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\n            load = ()=>Promise.resolve(support);\n        }\n        return new $14831f1c512a5db9$export$50ab82debf88f71(spec.name, (spec.alias || []).concat(spec.name).map((s)=>s.toLowerCase()), spec.extensions || [], spec.filename, load, support);\n    }\n    /**\n    Look for a language in the given array of descriptions that\n    matches the filename. Will first match\n    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n    and return the first language that matches.\n    */ static matchFilename(descs, filename) {\n        for (let d of descs)if (d.filename && d.filename.test(filename)) return d;\n        let ext = /\\.([^.]+)$/.exec(filename);\n        if (ext) {\n            for (let d of descs)if (d.extensions.indexOf(ext[1]) > -1) return d;\n        }\n        return null;\n    }\n    /**\n    Look for a language whose name or alias matches the the given\n    name (case-insensitively). If `fuzzy` is true, and no direct\n    matchs is found, this'll also search for a language whose name\n    or alias occurs in the string (for names shorter than three\n    characters, only when surrounded by non-word characters).\n    */ static matchLanguageName(descs, name, fuzzy = true) {\n        name = name.toLowerCase();\n        for (let d of descs)if (d.alias.some((a)=>a == name)) return d;\n        if (fuzzy) for (let d of descs)for (let a of d.alias){\n            let found = name.indexOf(a);\n            if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length]))) return d;\n        }\n        return null;\n    }\n}\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth, as a column number (see\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given\nline. A return value of `null` indicates no indentation can be\ndetermined, and the line should inherit the indentation of the one\nabove it. A return value of `undefined` defers to the next indent\nservice.\n*/ const $14831f1c512a5db9$export$5952625dce50d1f3 = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\n/**\nFacet for overriding the unit by which indentation happens. Should\nbe a string consisting either entirely of the same whitespace\ncharacter. When not set, this defaults to 2 spaces.\n*/ const $14831f1c512a5db9$export$9e0d0c2ce4d3ceb5 = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine: (values)=>{\n        if (!values.length) return \"  \";\n        let unit = values[0];\n        if (!unit || /\\S/.test(unit) || Array.from(unit).some((e)=>e != unit[0])) throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n        return unit;\n    }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/ function $14831f1c512a5db9$export$ad3205d09311a797(state) {\n    let unit = state.facet($14831f1c512a5db9$export$9e0d0c2ce4d3ceb5);\n    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/ function $14831f1c512a5db9$export$db5a40e207b40576(state, cols) {\n    let result = \"\", ts = state.tabSize, ch = state.facet($14831f1c512a5db9$export$9e0d0c2ce4d3ceb5)[0];\n    if (ch == \"\t\") {\n        while(cols >= ts){\n            result += \"\t\";\n            cols -= ts;\n        }\n        ch = \" \";\n    }\n    for(let i = 0; i < cols; i++)result += ch;\n    return result;\n}\n/**\nGet the indentation, as a column number, at the given position.\nWill first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)\nthat are registered, and if none of those return an indentation,\nthis will check the syntax tree for the [indent node\nprop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a\nnumber when an indentation could be determined, and null\notherwise.\n*/ function $14831f1c512a5db9$export$a2d3c9dbce6d2211(context, pos) {\n    if (context instanceof (0, $ccfb9497d8ef598f$export$afa855cbfaff27f2)) context = new $14831f1c512a5db9$export$eeab79349cc2f7c8(context);\n    for (let service of context.state.facet($14831f1c512a5db9$export$5952625dce50d1f3)){\n        let result = service(context, pos);\n        if (result !== undefined) return result;\n    }\n    let tree = $14831f1c512a5db9$export$7fc98e56a4ca6be1(context.state);\n    return tree ? $14831f1c512a5db9$var$syntaxIndentation(context, tree, pos) : null;\n}\n/**\nCreate a change set that auto-indents all lines touched by the\ngiven document range.\n*/ function $14831f1c512a5db9$export$2fc72a4ad8b85e40(state, from, to) {\n    let updated = Object.create(null);\n    let context = new $14831f1c512a5db9$export$eeab79349cc2f7c8(state, {\n        overrideIndentation: (start)=>{\n            var _a;\n            return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1;\n        }\n    });\n    let changes = [];\n    for(let pos = from; pos <= to;){\n        let line = state.doc.lineAt(pos);\n        pos = line.to + 1;\n        let indent = $14831f1c512a5db9$export$a2d3c9dbce6d2211(context, line.from);\n        if (indent == null) continue;\n        if (!/\\S/.test(line.text)) indent = 0;\n        let cur = /^\\s*/.exec(line.text)[0];\n        let norm = $14831f1c512a5db9$export$db5a40e207b40576(state, indent);\n        if (cur != norm) {\n            updated[line.from] = indent;\n            changes.push({\n                from: line.from,\n                to: line.from + cur.length,\n                insert: norm\n            });\n        }\n    }\n    return state.changes(changes);\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/ class $14831f1c512a5db9$export$eeab79349cc2f7c8 {\n    /**\n    Create an indent context.\n    */ constructor(/**\n    The editor state.\n    */ state, /**\n    @internal\n    */ options = {}){\n        this.state = state;\n        this.options = options;\n        this.unit = $14831f1c512a5db9$export$ad3205d09311a797(state);\n    }\n    /**\n    Get a description of the line at the given position, taking\n    [simulated line\n    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    into account. If there is such a break at `pos`, the `bias`\n    argument determines whether the part of the line line before or\n    after the break is used.\n    */ lineAt(pos, bias = 1) {\n        let line = this.state.doc.lineAt(pos);\n        let { simulateBreak: simulateBreak, simulateDoubleBreak: simulateDoubleBreak } = this.options;\n        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\n            if (simulateDoubleBreak && simulateBreak == pos) return {\n                text: \"\",\n                from: pos\n            };\n            else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos) return {\n                text: line.text.slice(simulateBreak - line.from),\n                from: simulateBreak\n            };\n            else return {\n                text: line.text.slice(0, simulateBreak - line.from),\n                from: line.from\n            };\n        }\n        return line;\n    }\n    /**\n    Get the text directly after `pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */ textAfterPos(pos, bias = 1) {\n        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak) return \"\";\n        let { text: text, from: from } = this.lineAt(pos, bias);\n        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\n    }\n    /**\n    Find the column for the given position.\n    */ column(pos, bias = 1) {\n        let { text: text, from: from } = this.lineAt(pos, bias);\n        let result = this.countColumn(text, pos - from);\n        let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\n        if (override > -1) result += override - this.countColumn(text, text.search(/\\S|$/));\n        return result;\n    }\n    /**\n    Find the column position (taking tabs into account) of the given\n    position in the given string.\n    */ countColumn(line, pos = line.length) {\n        return (0, $ccfb9497d8ef598f$export$20b4ab289374d0ac)(line, this.state.tabSize, pos);\n    }\n    /**\n    Find the indentation column of the line at the given point.\n    */ lineIndent(pos, bias = 1) {\n        let { text: text, from: from } = this.lineAt(pos, bias);\n        let override = this.options.overrideIndentation;\n        if (override) {\n            let overriden = override(from);\n            if (overriden > -1) return overriden;\n        }\n        return this.countColumn(text, text.search(/\\S|$/));\n    }\n    /**\n    Returns the [simulated line\n    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    for this context, if any.\n    */ get simulatedBreak() {\n        return this.options.simulateBreak || null;\n    }\n}\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number (see also\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null\nindicates that no definitive indentation can be determined.\n*/ const $14831f1c512a5db9$export$72c7d4c52b3c6460 = /*@__PURE__*/ new (0, $4d476c57e17b24ca$export$b8034b9bc18acd90)();\n// Compute the indentation for a given position from the syntax tree.\nfunction $14831f1c512a5db9$var$syntaxIndentation(cx, ast, pos) {\n    return $14831f1c512a5db9$var$indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);\n}\nfunction $14831f1c512a5db9$var$ignoreClosed(cx) {\n    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\n}\nfunction $14831f1c512a5db9$var$indentStrategy(tree) {\n    let strategy = tree.type.prop($14831f1c512a5db9$export$72c7d4c52b3c6460);\n    if (strategy) return strategy;\n    let first = tree.firstChild, close;\n    if (first && (close = first.type.prop((0, $4d476c57e17b24ca$export$b8034b9bc18acd90).closedBy))) {\n        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;\n        return (cx)=>$14831f1c512a5db9$var$delimitedStrategy(cx, true, 1, undefined, closed && !$14831f1c512a5db9$var$ignoreClosed(cx) ? last.from : undefined);\n    }\n    return tree.parent == null ? $14831f1c512a5db9$var$topIndent : null;\n}\nfunction $14831f1c512a5db9$var$indentFrom(node, pos, base) {\n    for(; node; node = node.parent){\n        let strategy = $14831f1c512a5db9$var$indentStrategy(node);\n        if (strategy) return strategy($14831f1c512a5db9$export$8aaeb0848a33f7c3.create(base, pos, node));\n    }\n    return null;\n}\nfunction $14831f1c512a5db9$var$topIndent() {\n    return 0;\n}\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions registered on syntax nodes.\n*/ class $14831f1c512a5db9$export$8aaeb0848a33f7c3 extends $14831f1c512a5db9$export$eeab79349cc2f7c8 {\n    constructor(base, /**\n    The position at which indentation is being computed.\n    */ pos, /**\n    The syntax tree node to which the indentation strategy\n    applies.\n    */ node){\n        super(base.state, base.options);\n        this.base = base;\n        this.pos = pos;\n        this.node = node;\n    }\n    /**\n    @internal\n    */ static create(base, pos, node) {\n        return new $14831f1c512a5db9$export$8aaeb0848a33f7c3(base, pos, node);\n    }\n    /**\n    Get the text directly after `this.pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */ get textAfter() {\n        return this.textAfterPos(this.pos);\n    }\n    /**\n    Get the indentation at the reference line for `this.node`, which\n    is the line on which it starts, unless there is a node that is\n    _not_ a parent of this node covering the start of that line. If\n    so, the line at the start of that node is tried, again skipping\n    on if it is covered by another such node.\n    */ get baseIndent() {\n        return this.baseIndentFor(this.node);\n    }\n    /**\n    Get the indentation for the reference line of the given node\n    (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).\n    */ baseIndentFor(node) {\n        let line = this.state.doc.lineAt(node.from);\n        // Skip line starts that are covered by a sibling (or cousin, etc)\n        for(;;){\n            let atBreak = node.resolve(line.from);\n            while(atBreak.parent && atBreak.parent.from == atBreak.from)atBreak = atBreak.parent;\n            if ($14831f1c512a5db9$var$isParent(atBreak, node)) break;\n            line = this.state.doc.lineAt(atBreak.from);\n        }\n        return this.lineIndent(line.from);\n    }\n    /**\n    Continue looking for indentations in the node's parent nodes,\n    and return the result of that.\n    */ continue() {\n        let parent = this.node.parent;\n        return parent ? $14831f1c512a5db9$var$indentFrom(parent, this.pos, this.base) : 0;\n    }\n}\nfunction $14831f1c512a5db9$var$isParent(parent, of) {\n    for(let cur = of; cur; cur = cur.parent)if (parent == cur) return true;\n    return false;\n}\n// Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\nfunction $14831f1c512a5db9$var$bracketedAligned(context) {\n    let tree = context.node;\n    let openToken = tree.childAfter(tree.from), last = tree.lastChild;\n    if (!openToken) return null;\n    let sim = context.options.simulateBreak;\n    let openLine = context.state.doc.lineAt(openToken.from);\n    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n    for(let pos = openToken.to;;){\n        let next = tree.childAfter(pos);\n        if (!next || next == last) return null;\n        if (!next.type.isSkipped) return next.from < lineEnd ? openToken : null;\n        pos = next.to;\n    }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/ function $14831f1c512a5db9$export$60e82ea306899488({ closing: closing, align: align = true, units: units = 1 }) {\n    return (context)=>$14831f1c512a5db9$var$delimitedStrategy(context, align, units, closing);\n}\nfunction $14831f1c512a5db9$var$delimitedStrategy(context, align, units, closing, closedAt) {\n    let after = context.textAfter, space = after.match(/^\\s*/)[0].length;\n    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n    let aligned = align ? $14831f1c512a5db9$var$bracketedAligned(context) : null;\n    if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);\n    return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/ const $14831f1c512a5db9$export$4764c629086182f2 = (context)=>context.baseIndent;\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/ function $14831f1c512a5db9$export$688ff433e7e7cc5c({ except: except, units: units = 1 } = {}) {\n    return (context)=>{\n        let matchExcept = except && except.test(context.textAfter);\n        return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n    };\n}\nconst $14831f1c512a5db9$var$DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/ function $14831f1c512a5db9$export$9bcaf6e2125ee117() {\n    return (0, $ccfb9497d8ef598f$export$afa855cbfaff27f2).transactionFilter.of((tr)=>{\n        if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\")) return tr;\n        let rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n        if (!rules.length) return tr;\n        let doc = tr.newDoc, { head: head } = tr.newSelection.main, line = doc.lineAt(head);\n        if (head > line.from + $14831f1c512a5db9$var$DontIndentBeyond) return tr;\n        let lineStart = doc.sliceString(line.from, head);\n        if (!rules.some((r)=>r.test(lineStart))) return tr;\n        let { state: state } = tr, last = -1, changes = [];\n        for (let { head: head } of state.selection.ranges){\n            let line = state.doc.lineAt(head);\n            if (line.from == last) continue;\n            last = line.from;\n            let indent = $14831f1c512a5db9$export$a2d3c9dbce6d2211(state, line.from);\n            if (indent == null) continue;\n            let cur = /^\\s*/.exec(line.text)[0];\n            let norm = $14831f1c512a5db9$export$db5a40e207b40576(state, indent);\n            if (cur != norm) changes.push({\n                from: line.from,\n                to: line.from + cur.length,\n                insert: norm\n            });\n        }\n        return changes.length ? [\n            tr,\n            {\n                changes: changes,\n                sequential: true\n            }\n        ] : tr;\n    });\n}\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/ const $14831f1c512a5db9$export$40014037e3ef64a = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/ const $14831f1c512a5db9$export$9b075a85eb4377d8 = /*@__PURE__*/ new (0, $4d476c57e17b24ca$export$b8034b9bc18acd90)();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/ function $14831f1c512a5db9$export$48672beae16a681b(node) {\n    let first = node.firstChild, last = node.lastChild;\n    return first && first.to < last.from ? {\n        from: first.to,\n        to: last.type.isError ? node.to : last.from\n    } : null;\n}\nfunction $14831f1c512a5db9$var$syntaxFolding(state, start, end) {\n    let tree = $14831f1c512a5db9$export$7fc98e56a4ca6be1(state);\n    if (tree.length < end) return null;\n    let inner = tree.resolveInner(end, 1);\n    let found = null;\n    for(let cur = inner; cur; cur = cur.parent){\n        if (cur.to <= end || cur.from > end) continue;\n        if (found && cur.from < start) break;\n        let prop = cur.type.prop($14831f1c512a5db9$export$9b075a85eb4377d8);\n        if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !$14831f1c512a5db9$var$isUnfinished(cur))) {\n            let value = prop(cur, state);\n            if (value && value.from <= end && value.from >= start && value.to > end) found = value;\n        }\n    }\n    return found;\n}\nfunction $14831f1c512a5db9$var$isUnfinished(node) {\n    let ch = node.lastChild;\n    return ch && ch.to == node.to && ch.type.isError;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/ function $14831f1c512a5db9$export$cbe8a3d55245b07d(state, lineStart, lineEnd) {\n    for (let service of state.facet($14831f1c512a5db9$export$40014037e3ef64a)){\n        let result = service(state, lineStart, lineEnd);\n        if (result) return result;\n    }\n    return $14831f1c512a5db9$var$syntaxFolding(state, lineStart, lineEnd);\n}\nfunction $14831f1c512a5db9$var$mapRange(range, mapping) {\n    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);\n    return from >= to ? undefined : {\n        from: from,\n        to: to\n    };\n}\n/**\nState effect that can be attached to a transaction to fold the\ngiven range. (You probably only need this in exceptional\ncircumstances—usually you'll just want to let\n[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold\ngutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)\n*/ const $14831f1c512a5db9$export$a123efe007ad265 = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define({\n    map: $14831f1c512a5db9$var$mapRange\n});\n/**\nState effect that unfolds the given range (if it was folded).\n*/ const $14831f1c512a5db9$export$bf2507dc398fc1ab = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define({\n    map: $14831f1c512a5db9$var$mapRange\n});\nfunction $14831f1c512a5db9$var$selectedLines(view) {\n    let lines = [];\n    for (let { head: head } of view.state.selection.ranges){\n        if (lines.some((l)=>l.from <= head && l.to >= head)) continue;\n        lines.push(view.lineBlockAt(head));\n    }\n    return lines;\n}\n/**\nThe state field that stores the folded ranges (as a [decoration\nset](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to\n[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and\n[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold\nstate.\n*/ const $14831f1c512a5db9$export$6955fe1f7c578abb = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create () {\n        return (0, $071334078f8d3f8a$export$10e30b733df217ea).none;\n    },\n    update (folded, tr) {\n        folded = folded.map(tr.changes);\n        for (let e of tr.effects){\n            if (e.is($14831f1c512a5db9$export$a123efe007ad265) && !$14831f1c512a5db9$var$foldExists(folded, e.value.from, e.value.to)) folded = folded.update({\n                add: [\n                    $14831f1c512a5db9$var$foldWidget.range(e.value.from, e.value.to)\n                ]\n            });\n            else if (e.is($14831f1c512a5db9$export$bf2507dc398fc1ab)) folded = folded.update({\n                filter: (from, to)=>e.value.from != from || e.value.to != to,\n                filterFrom: e.value.from,\n                filterTo: e.value.to\n            });\n        }\n        // Clear folded ranges that cover the selection head\n        if (tr.selection) {\n            let onSelection = false, { head: head } = tr.selection.main;\n            folded.between(head, head, (a, b)=>{\n                if (a < head && b > head) onSelection = true;\n            });\n            if (onSelection) folded = folded.update({\n                filterFrom: head,\n                filterTo: head,\n                filter: (a, b)=>b <= head || a >= head\n            });\n        }\n        return folded;\n    },\n    provide: (f)=>(0, $071334078f8d3f8a$export$eece2fccabbb77c5).decorations.from(f),\n    toJSON (folded, state) {\n        let ranges = [];\n        folded.between(0, state.doc.length, (from, to)=>{\n            ranges.push(from, to);\n        });\n        return ranges;\n    },\n    fromJSON (value) {\n        if (!Array.isArray(value) || value.length % 2) throw new RangeError(\"Invalid JSON for fold state\");\n        let ranges = [];\n        for(let i = 0; i < value.length;){\n            let from = value[i++], to = value[i++];\n            if (typeof from != \"number\" || typeof to != \"number\") throw new RangeError(\"Invalid JSON for fold state\");\n            ranges.push($14831f1c512a5db9$var$foldWidget.range(from, to));\n        }\n        return (0, $071334078f8d3f8a$export$10e30b733df217ea).set(ranges, true);\n    }\n});\n/**\nGet a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges\nin the given state.\n*/ function $14831f1c512a5db9$export$2b3c199812391e05(state) {\n    return state.field($14831f1c512a5db9$export$6955fe1f7c578abb, false) || (0, $ccfb9497d8ef598f$export$34cb5241245008dd).empty;\n}\nfunction $14831f1c512a5db9$var$findFold(state, from, to) {\n    var _a;\n    let found = null;\n    (_a = state.field($14831f1c512a5db9$export$6955fe1f7c578abb, false)) === null || _a === void 0 || _a.between(from, to, (from, to)=>{\n        if (!found || found.from > from) found = {\n            from: from,\n            to: to\n        };\n    });\n    return found;\n}\nfunction $14831f1c512a5db9$var$foldExists(folded, from, to) {\n    let found = false;\n    folded.between(from, from, (a, b)=>{\n        if (a == from && b == to) found = true;\n    });\n    return found;\n}\nfunction $14831f1c512a5db9$var$maybeEnable(state, other) {\n    return state.field($14831f1c512a5db9$export$6955fe1f7c578abb, false) ? other : other.concat((0, $ccfb9497d8ef598f$export$95000d4efaa4321f).appendConfig.of($14831f1c512a5db9$export$2c875b83a85d0f31()));\n}\n/**\nFold the lines that are selected, if possible.\n*/ const $14831f1c512a5db9$export$52e96be2adbea02a = (view)=>{\n    for (let line of $14831f1c512a5db9$var$selectedLines(view)){\n        let range = $14831f1c512a5db9$export$cbe8a3d55245b07d(view.state, line.from, line.to);\n        if (range) {\n            view.dispatch({\n                effects: $14831f1c512a5db9$var$maybeEnable(view.state, [\n                    $14831f1c512a5db9$export$a123efe007ad265.of(range),\n                    $14831f1c512a5db9$var$announceFold(view, range)\n                ])\n            });\n            return true;\n        }\n    }\n    return false;\n};\n/**\nUnfold folded ranges on selected lines.\n*/ const $14831f1c512a5db9$export$f4cd5e9f2c073861 = (view)=>{\n    if (!view.state.field($14831f1c512a5db9$export$6955fe1f7c578abb, false)) return false;\n    let effects = [];\n    for (let line of $14831f1c512a5db9$var$selectedLines(view)){\n        let folded = $14831f1c512a5db9$var$findFold(view.state, line.from, line.to);\n        if (folded) effects.push($14831f1c512a5db9$export$bf2507dc398fc1ab.of(folded), $14831f1c512a5db9$var$announceFold(view, folded, false));\n    }\n    if (effects.length) view.dispatch({\n        effects: effects\n    });\n    return effects.length > 0;\n};\nfunction $14831f1c512a5db9$var$announceFold(view, range, fold = true) {\n    let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;\n    return (0, $071334078f8d3f8a$export$eece2fccabbb77c5).announce.of(`${view.state.phrase(fold ? \"Folded lines\" : \"Unfolded lines\")} ${lineFrom} ${view.state.phrase(\"to\")} ${lineTo}.`);\n}\n/**\nFold all top-level foldable ranges. Note that, in most cases,\nfolding information will depend on the [syntax\ntree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work\nreliably when the document hasn't been fully parsed (either\nbecause the editor state was only just initialized, or because the\ndocument is so big that the parser decided not to parse it\nentirely).\n*/ const $14831f1c512a5db9$export$5396d9eaf1c0ba76 = (view)=>{\n    let { state: state } = view, effects = [];\n    for(let pos = 0; pos < state.doc.length;){\n        let line = view.lineBlockAt(pos), range = $14831f1c512a5db9$export$cbe8a3d55245b07d(state, line.from, line.to);\n        if (range) effects.push($14831f1c512a5db9$export$a123efe007ad265.of(range));\n        pos = (range ? view.lineBlockAt(range.to) : line).to + 1;\n    }\n    if (effects.length) view.dispatch({\n        effects: $14831f1c512a5db9$var$maybeEnable(view.state, effects)\n    });\n    return !!effects.length;\n};\n/**\nUnfold all folded code.\n*/ const $14831f1c512a5db9$export$5671b24df569b27d = (view)=>{\n    let field = view.state.field($14831f1c512a5db9$export$6955fe1f7c578abb, false);\n    if (!field || !field.size) return false;\n    let effects = [];\n    field.between(0, view.state.doc.length, (from, to)=>{\n        effects.push($14831f1c512a5db9$export$bf2507dc398fc1ab.of({\n            from: from,\n            to: to\n        }));\n    });\n    view.dispatch({\n        effects: effects\n    });\n    return true;\n};\n// Find the foldable region containing the given line, if one exists\nfunction $14831f1c512a5db9$var$foldableContainer(view, lineBlock) {\n    // Look backwards through line blocks until we find a foldable region that\n    // intersects with the line\n    for(let line = lineBlock;;){\n        let foldableRegion = $14831f1c512a5db9$export$cbe8a3d55245b07d(view.state, line.from, line.to);\n        if (foldableRegion && foldableRegion.to > lineBlock.from) return foldableRegion;\n        if (!line.from) return null;\n        line = view.lineBlockAt(line.from - 1);\n    }\n}\n/**\nToggle folding at cursors. Unfolds if there is an existing fold\nstarting in that line, tries to find a foldable range around it\notherwise.\n*/ const $14831f1c512a5db9$export$b23e83f59d68c8f1 = (view)=>{\n    let effects = [];\n    for (let line of $14831f1c512a5db9$var$selectedLines(view)){\n        let folded = $14831f1c512a5db9$var$findFold(view.state, line.from, line.to);\n        if (folded) effects.push($14831f1c512a5db9$export$bf2507dc398fc1ab.of(folded), $14831f1c512a5db9$var$announceFold(view, folded, false));\n        else {\n            let foldRange = $14831f1c512a5db9$var$foldableContainer(view, line);\n            if (foldRange) effects.push($14831f1c512a5db9$export$a123efe007ad265.of(foldRange), $14831f1c512a5db9$var$announceFold(view, foldRange));\n        }\n    }\n    if (effects.length > 0) view.dispatch({\n        effects: $14831f1c512a5db9$var$maybeEnable(view.state, effects)\n    });\n    return !!effects.length;\n};\n/**\nDefault fold-related key bindings.\n\n - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).\n - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).\n - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).\n - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).\n*/ const $14831f1c512a5db9$export$39c52376a8936d67 = [\n    {\n        key: \"Ctrl-Shift-[\",\n        mac: \"Cmd-Alt-[\",\n        run: $14831f1c512a5db9$export$52e96be2adbea02a\n    },\n    {\n        key: \"Ctrl-Shift-]\",\n        mac: \"Cmd-Alt-]\",\n        run: $14831f1c512a5db9$export$f4cd5e9f2c073861\n    },\n    {\n        key: \"Ctrl-Alt-[\",\n        run: $14831f1c512a5db9$export$5396d9eaf1c0ba76\n    },\n    {\n        key: \"Ctrl-Alt-]\",\n        run: $14831f1c512a5db9$export$5671b24df569b27d\n    }\n];\nconst $14831f1c512a5db9$var$defaultConfig = {\n    placeholderDOM: null,\n    placeholderText: \"…\"\n};\nconst $14831f1c512a5db9$var$foldConfig = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (values) {\n        return (0, $ccfb9497d8ef598f$export$4e19c0b693794a7e)(values, $14831f1c512a5db9$var$defaultConfig);\n    }\n});\n/**\nCreate an extension that configures code folding.\n*/ function $14831f1c512a5db9$export$2c875b83a85d0f31(config) {\n    let result = [\n        $14831f1c512a5db9$export$6955fe1f7c578abb,\n        $14831f1c512a5db9$var$baseTheme$1\n    ];\n    if (config) result.push($14831f1c512a5db9$var$foldConfig.of(config));\n    return result;\n}\nconst $14831f1c512a5db9$var$foldWidget = /*@__PURE__*/ (0, $071334078f8d3f8a$export$10e30b733df217ea).replace({\n    widget: /*@__PURE__*/ new class extends (0, $071334078f8d3f8a$export$95cdd842edb044c5) {\n        toDOM(view) {\n            let { state: state } = view, conf = state.facet($14831f1c512a5db9$var$foldConfig);\n            let onclick = (event)=>{\n                let line = view.lineBlockAt(view.posAtDOM(event.target));\n                let folded = $14831f1c512a5db9$var$findFold(view.state, line.from, line.to);\n                if (folded) view.dispatch({\n                    effects: $14831f1c512a5db9$export$bf2507dc398fc1ab.of(folded)\n                });\n                event.preventDefault();\n            };\n            if (conf.placeholderDOM) return conf.placeholderDOM(view, onclick);\n            let element = document.createElement(\"span\");\n            element.textContent = conf.placeholderText;\n            element.setAttribute(\"aria-label\", state.phrase(\"folded code\"));\n            element.title = state.phrase(\"unfold\");\n            element.className = \"cm-foldPlaceholder\";\n            element.onclick = onclick;\n            return element;\n        }\n    }\n});\nconst $14831f1c512a5db9$var$foldGutterDefaults = {\n    openText: \"⌄\",\n    closedText: \"›\",\n    markerDOM: null,\n    domEventHandlers: {},\n    foldingChanged: ()=>false\n};\nclass $14831f1c512a5db9$var$FoldMarker extends (0, $071334078f8d3f8a$export$591ab4c909549043) {\n    constructor(config, open){\n        super();\n        this.config = config;\n        this.open = open;\n    }\n    eq(other) {\n        return this.config == other.config && this.open == other.open;\n    }\n    toDOM(view) {\n        if (this.config.markerDOM) return this.config.markerDOM(this.open);\n        let span = document.createElement(\"span\");\n        span.textContent = this.open ? this.config.openText : this.config.closedText;\n        span.title = view.state.phrase(this.open ? \"Fold line\" : \"Unfold line\");\n        return span;\n    }\n}\n/**\nCreate an extension that registers a fold gutter, which shows a\nfold status indicator before foldable lines (which can be clicked\nto fold or unfold the line).\n*/ function $14831f1c512a5db9$export$c4dcf64f741b6228(config = {}) {\n    let fullConfig = Object.assign(Object.assign({}, $14831f1c512a5db9$var$foldGutterDefaults), config);\n    let canFold = new $14831f1c512a5db9$var$FoldMarker(fullConfig, true), canUnfold = new $14831f1c512a5db9$var$FoldMarker(fullConfig, false);\n    let markers = (0, $071334078f8d3f8a$export$44d5eccfd62adda7).fromClass(class {\n        constructor(view){\n            this.from = view.viewport.from;\n            this.markers = this.buildMarkers(view);\n        }\n        update(update) {\n            if (update.docChanged || update.viewportChanged || update.startState.facet($14831f1c512a5db9$export$789c912f57fe164c) != update.state.facet($14831f1c512a5db9$export$789c912f57fe164c) || update.startState.field($14831f1c512a5db9$export$6955fe1f7c578abb, false) != update.state.field($14831f1c512a5db9$export$6955fe1f7c578abb, false) || $14831f1c512a5db9$export$7fc98e56a4ca6be1(update.startState) != $14831f1c512a5db9$export$7fc98e56a4ca6be1(update.state) || fullConfig.foldingChanged(update)) this.markers = this.buildMarkers(update.view);\n        }\n        buildMarkers(view) {\n            let builder = new (0, $ccfb9497d8ef598f$export$89e09ce03c7e8594)();\n            for (let line of view.viewportLineBlocks){\n                let mark = $14831f1c512a5db9$var$findFold(view.state, line.from, line.to) ? canUnfold : $14831f1c512a5db9$export$cbe8a3d55245b07d(view.state, line.from, line.to) ? canFold : null;\n                if (mark) builder.add(line.from, line.from, mark);\n            }\n            return builder.finish();\n        }\n    });\n    let { domEventHandlers: domEventHandlers } = fullConfig;\n    return [\n        markers,\n        (0, $071334078f8d3f8a$export$f2b922cb4a245974)({\n            class: \"cm-foldGutter\",\n            markers (view) {\n                var _a;\n                return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || (0, $ccfb9497d8ef598f$export$34cb5241245008dd).empty;\n            },\n            initialSpacer () {\n                return new $14831f1c512a5db9$var$FoldMarker(fullConfig, false);\n            },\n            domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), {\n                click: (view, line, event)=>{\n                    if (domEventHandlers.click && domEventHandlers.click(view, line, event)) return true;\n                    let folded = $14831f1c512a5db9$var$findFold(view.state, line.from, line.to);\n                    if (folded) {\n                        view.dispatch({\n                            effects: $14831f1c512a5db9$export$bf2507dc398fc1ab.of(folded)\n                        });\n                        return true;\n                    }\n                    let range = $14831f1c512a5db9$export$cbe8a3d55245b07d(view.state, line.from, line.to);\n                    if (range) {\n                        view.dispatch({\n                            effects: $14831f1c512a5db9$export$a123efe007ad265.of(range)\n                        });\n                        return true;\n                    }\n                    return false;\n                }\n            })\n        }),\n        $14831f1c512a5db9$export$2c875b83a85d0f31()\n    ];\n}\nconst $14831f1c512a5db9$var$baseTheme$1 = /*@__PURE__*/ (0, $071334078f8d3f8a$export$eece2fccabbb77c5).baseTheme({\n    \".cm-foldPlaceholder\": {\n        backgroundColor: \"#eee\",\n        border: \"1px solid #ddd\",\n        color: \"#888\",\n        borderRadius: \".2em\",\n        margin: \"0 1px\",\n        padding: \"0 1px\",\n        cursor: \"pointer\"\n    },\n    \".cm-foldGutter span\": {\n        padding: \"0 1px\",\n        cursor: \"pointer\"\n    }\n});\n/**\nA highlight style associates CSS styles with higlighting\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).\n*/ class $14831f1c512a5db9$export$4819f093bdd5b4a {\n    constructor(/**\n    The tag styles used to create this highlight style.\n    */ specs, options){\n        this.specs = specs;\n        let modSpec;\n        function def(spec) {\n            let cls = (0, $fa62f485c41d169a$export$b920c662d2efee20).newName();\n            (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\n            return cls;\n        }\n        const all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : undefined;\n        const scopeOpt = options.scope;\n        this.scope = scopeOpt instanceof $14831f1c512a5db9$export$ce4fe1c9e6520c1a ? (type)=>type.prop($14831f1c512a5db9$export$27a2e78097f753f7) == scopeOpt.data : scopeOpt ? (type)=>type == scopeOpt : undefined;\n        this.style = (0, $4c72ff8c9e8a407a$export$b7f6332ce20f80fb)(specs.map((style)=>({\n                tag: style.tag,\n                class: style.class || def(Object.assign({}, style, {\n                    tag: null\n                }))\n            })), {\n            all: all\n        }).style;\n        this.module = modSpec ? new (0, $fa62f485c41d169a$export$b920c662d2efee20)(modSpec) : null;\n        this.themeType = options.themeType;\n    }\n    /**\n    Create a highlighter style that associates the given styles to\n    the given tags. The specs must be objects that hold a style tag\n    or array of tags in their `tag` property, and either a single\n    `class` property providing a static CSS class (for highlighter\n    that rely on external styling), or a\n    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n    set of CSS properties (which define the styling for those tags).\n    \n    The CSS rules created for a highlighter will be emitted in the\n    order of the spec's properties. That means that for elements that\n    have multiple tags associated with them, styles defined further\n    down in the list will have a higher CSS precedence than styles\n    defined earlier.\n    */ static define(specs, options) {\n        return new $14831f1c512a5db9$export$4819f093bdd5b4a(specs, options || {});\n    }\n}\nconst $14831f1c512a5db9$var$highlighterFacet = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $14831f1c512a5db9$var$fallbackHighlighter = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (values) {\n        return values.length ? [\n            values[0]\n        ] : null;\n    }\n});\nfunction $14831f1c512a5db9$var$getHighlighters(state) {\n    let main = state.facet($14831f1c512a5db9$var$highlighterFacet);\n    return main.length ? main : state.facet($14831f1c512a5db9$var$fallbackHighlighter);\n}\n/**\nWrap a highlighter in an editor extension that uses it to apply\nsyntax highlighting to the editor content.\n\nWhen multiple (non-fallback) styles are provided, the styling\napplied is the union of the classes they emit.\n*/ function $14831f1c512a5db9$export$ec1b956ff3a16361(highlighter, options) {\n    let ext = [\n        $14831f1c512a5db9$var$treeHighlighter\n    ], themeType;\n    if (highlighter instanceof $14831f1c512a5db9$export$4819f093bdd5b4a) {\n        if (highlighter.module) ext.push((0, $071334078f8d3f8a$export$eece2fccabbb77c5).styleModule.of(highlighter.module));\n        themeType = highlighter.themeType;\n    }\n    if (options === null || options === void 0 ? void 0 : options.fallback) ext.push($14831f1c512a5db9$var$fallbackHighlighter.of(highlighter));\n    else if (themeType) ext.push($14831f1c512a5db9$var$highlighterFacet.computeN([\n        (0, $071334078f8d3f8a$export$eece2fccabbb77c5).darkTheme\n    ], (state)=>{\n        return state.facet((0, $071334078f8d3f8a$export$eece2fccabbb77c5).darkTheme) == (themeType == \"dark\") ? [\n            highlighter\n        ] : [];\n    }));\n    else ext.push($14831f1c512a5db9$var$highlighterFacet.of(highlighter));\n    return ext;\n}\n/**\nReturns the CSS classes (if any) that the highlighters active in\nthe state would assign to the given style\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and\n(optional) language\n[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).\n*/ function $14831f1c512a5db9$export$8ca2b052028e8782(state, tags, scope) {\n    let highlighters = $14831f1c512a5db9$var$getHighlighters(state);\n    let result = null;\n    if (highlighters) {\n        for (let highlighter of highlighters)if (!highlighter.scope || scope && highlighter.scope(scope)) {\n            let cls = highlighter.style(tags);\n            if (cls) result = result ? result + \" \" + cls : cls;\n        }\n    }\n    return result;\n}\nclass $14831f1c512a5db9$var$TreeHighlighter {\n    constructor(view){\n        this.markCache = Object.create(null);\n        this.tree = $14831f1c512a5db9$export$7fc98e56a4ca6be1(view.state);\n        this.decorations = this.buildDeco(view, $14831f1c512a5db9$var$getHighlighters(view.state));\n    }\n    update(update) {\n        let tree = $14831f1c512a5db9$export$7fc98e56a4ca6be1(update.state), highlighters = $14831f1c512a5db9$var$getHighlighters(update.state);\n        let styleChange = highlighters != $14831f1c512a5db9$var$getHighlighters(update.startState);\n        if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) this.decorations = this.decorations.map(update.changes);\n        else if (tree != this.tree || update.viewportChanged || styleChange) {\n            this.tree = tree;\n            this.decorations = this.buildDeco(update.view, highlighters);\n        }\n    }\n    buildDeco(view, highlighters) {\n        if (!highlighters || !this.tree.length) return (0, $071334078f8d3f8a$export$10e30b733df217ea).none;\n        let builder = new (0, $ccfb9497d8ef598f$export$89e09ce03c7e8594)();\n        for (let { from: from, to: to } of view.visibleRanges)(0, $4c72ff8c9e8a407a$export$af82b3d076119fad)(this.tree, highlighters, (from, to, style)=>{\n            builder.add(from, to, this.markCache[style] || (this.markCache[style] = (0, $071334078f8d3f8a$export$10e30b733df217ea).mark({\n                class: style\n            })));\n        }, from, to);\n        return builder.finish();\n    }\n}\nconst $14831f1c512a5db9$var$treeHighlighter = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$b92464a736444411).high(/*@__PURE__*/ (0, $071334078f8d3f8a$export$44d5eccfd62adda7).fromClass($14831f1c512a5db9$var$TreeHighlighter, {\n    decorations: (v)=>v.decorations\n}));\n/**\nA default highlight style (works well with light themes).\n*/ const $14831f1c512a5db9$export$bb02a6818dd48320 = /*@__PURE__*/ $14831f1c512a5db9$export$4819f093bdd5b4a.define([\n    {\n        tag: (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).meta,\n        color: \"#404740\"\n    },\n    {\n        tag: (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).link,\n        textDecoration: \"underline\"\n    },\n    {\n        tag: (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).heading,\n        textDecoration: \"underline\",\n        fontWeight: \"bold\"\n    },\n    {\n        tag: (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).emphasis,\n        fontStyle: \"italic\"\n    },\n    {\n        tag: (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).strong,\n        fontWeight: \"bold\"\n    },\n    {\n        tag: (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).strikethrough,\n        textDecoration: \"line-through\"\n    },\n    {\n        tag: (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).keyword,\n        color: \"#708\"\n    },\n    {\n        tag: [\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).atom,\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).bool,\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).url,\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).contentSeparator,\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).labelName\n        ],\n        color: \"#219\"\n    },\n    {\n        tag: [\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).literal,\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).inserted\n        ],\n        color: \"#164\"\n    },\n    {\n        tag: [\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).string,\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).deleted\n        ],\n        color: \"#a11\"\n    },\n    {\n        tag: [\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).regexp,\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).escape,\n            /*@__PURE__*/ (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).special((0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).string)\n        ],\n        color: \"#e40\"\n    },\n    {\n        tag: /*@__PURE__*/ (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).definition((0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).variableName),\n        color: \"#00f\"\n    },\n    {\n        tag: /*@__PURE__*/ (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).local((0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).variableName),\n        color: \"#30a\"\n    },\n    {\n        tag: [\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).typeName,\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).namespace\n        ],\n        color: \"#085\"\n    },\n    {\n        tag: (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).className,\n        color: \"#167\"\n    },\n    {\n        tag: [\n            /*@__PURE__*/ (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).special((0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).variableName),\n            (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).macroName\n        ],\n        color: \"#256\"\n    },\n    {\n        tag: /*@__PURE__*/ (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).definition((0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).propertyName),\n        color: \"#00c\"\n    },\n    {\n        tag: (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).comment,\n        color: \"#940\"\n    },\n    {\n        tag: (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf).invalid,\n        color: \"#f00\"\n    }\n]);\nconst $14831f1c512a5db9$var$baseTheme = /*@__PURE__*/ (0, $071334078f8d3f8a$export$eece2fccabbb77c5).baseTheme({\n    \"&.cm-focused .cm-matchingBracket\": {\n        backgroundColor: \"#328c8252\"\n    },\n    \"&.cm-focused .cm-nonmatchingBracket\": {\n        backgroundColor: \"#bb555544\"\n    }\n});\nconst $14831f1c512a5db9$var$DefaultScanDist = 10000, $14831f1c512a5db9$var$DefaultBrackets = \"()[]{}\";\nconst $14831f1c512a5db9$var$bracketMatchingConfig = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (configs) {\n        return (0, $ccfb9497d8ef598f$export$4e19c0b693794a7e)(configs, {\n            afterCursor: true,\n            brackets: $14831f1c512a5db9$var$DefaultBrackets,\n            maxScanDistance: $14831f1c512a5db9$var$DefaultScanDist,\n            renderMatch: $14831f1c512a5db9$var$defaultRenderMatch\n        });\n    }\n});\nconst $14831f1c512a5db9$var$matchingMark = /*@__PURE__*/ (0, $071334078f8d3f8a$export$10e30b733df217ea).mark({\n    class: \"cm-matchingBracket\"\n}), $14831f1c512a5db9$var$nonmatchingMark = /*@__PURE__*/ (0, $071334078f8d3f8a$export$10e30b733df217ea).mark({\n    class: \"cm-nonmatchingBracket\"\n});\nfunction $14831f1c512a5db9$var$defaultRenderMatch(match) {\n    let decorations = [];\n    let mark = match.matched ? $14831f1c512a5db9$var$matchingMark : $14831f1c512a5db9$var$nonmatchingMark;\n    decorations.push(mark.range(match.start.from, match.start.to));\n    if (match.end) decorations.push(mark.range(match.end.from, match.end.to));\n    return decorations;\n}\nconst $14831f1c512a5db9$var$bracketMatchingState = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create () {\n        return (0, $071334078f8d3f8a$export$10e30b733df217ea).none;\n    },\n    update (deco, tr) {\n        if (!tr.docChanged && !tr.selection) return deco;\n        let decorations = [];\n        let config = tr.state.facet($14831f1c512a5db9$var$bracketMatchingConfig);\n        for (let range of tr.state.selection.ranges){\n            if (!range.empty) continue;\n            let match = $14831f1c512a5db9$export$3391942603e90cda(tr.state, range.head, -1, config) || range.head > 0 && $14831f1c512a5db9$export$3391942603e90cda(tr.state, range.head - 1, 1, config) || config.afterCursor && ($14831f1c512a5db9$export$3391942603e90cda(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && $14831f1c512a5db9$export$3391942603e90cda(tr.state, range.head + 1, -1, config));\n            if (match) decorations = decorations.concat(config.renderMatch(match, tr.state));\n        }\n        return (0, $071334078f8d3f8a$export$10e30b733df217ea).set(decorations, true);\n    },\n    provide: (f)=>(0, $071334078f8d3f8a$export$eece2fccabbb77c5).decorations.from(f)\n});\nconst $14831f1c512a5db9$var$bracketMatchingUnique = [\n    $14831f1c512a5db9$var$bracketMatchingState,\n    $14831f1c512a5db9$var$baseTheme\n];\n/**\nCreate an extension that enables bracket matching. Whenever the\ncursor is next to a bracket, that bracket and the one it matches\nare highlighted. Or, when no matching bracket is found, another\nhighlighting style is used to indicate this.\n*/ function $14831f1c512a5db9$export$cef7edfd214be605(config = {}) {\n    return [\n        $14831f1c512a5db9$var$bracketMatchingConfig.of(config),\n        $14831f1c512a5db9$var$bracketMatchingUnique\n    ];\n}\n/**\nWhen larger syntax nodes, such as HTML tags, are marked as\nopening/closing, it can be a bit messy to treat the whole node as\na matchable bracket. This node prop allows you to define, for such\na node, a ‘handle’—the part of the node that is highlighted, and\nthat the cursor must be on to activate highlighting in the first\nplace.\n*/ const $14831f1c512a5db9$export$ca7d74cd5b9f1011 = /*@__PURE__*/ new (0, $4d476c57e17b24ca$export$b8034b9bc18acd90)();\nfunction $14831f1c512a5db9$var$matchingNodes(node, dir, brackets) {\n    let byProp = node.prop(dir < 0 ? (0, $4d476c57e17b24ca$export$b8034b9bc18acd90).openedBy : (0, $4d476c57e17b24ca$export$b8034b9bc18acd90).closedBy);\n    if (byProp) return byProp;\n    if (node.name.length == 1) {\n        let index = brackets.indexOf(node.name);\n        if (index > -1 && index % 2 == (dir < 0 ? 1 : 0)) return [\n            brackets[index + dir]\n        ];\n    }\n    return null;\n}\nfunction $14831f1c512a5db9$var$findHandle(node) {\n    let hasHandle = node.type.prop($14831f1c512a5db9$export$ca7d74cd5b9f1011);\n    return hasHandle ? hasHandle(node.node) : node;\n}\n/**\nFind the matching bracket for the token at `pos`, scanning\ndirection `dir`. Only the `brackets` and `maxScanDistance`\nproperties are used from `config`, if given. Returns null if no\nbracket was found at `pos`, or a match result otherwise.\n*/ function $14831f1c512a5db9$export$3391942603e90cda(state, pos, dir, config = {}) {\n    let maxScanDistance = config.maxScanDistance || $14831f1c512a5db9$var$DefaultScanDist, brackets = config.brackets || $14831f1c512a5db9$var$DefaultBrackets;\n    let tree = $14831f1c512a5db9$export$7fc98e56a4ca6be1(state), node = tree.resolveInner(pos, dir);\n    for(let cur = node; cur; cur = cur.parent){\n        let matches = $14831f1c512a5db9$var$matchingNodes(cur.type, dir, brackets);\n        if (matches && cur.from < cur.to) {\n            let handle = $14831f1c512a5db9$var$findHandle(cur);\n            if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to)) return $14831f1c512a5db9$var$matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);\n        }\n    }\n    return $14831f1c512a5db9$var$matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);\n}\nfunction $14831f1c512a5db9$var$matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {\n    let parent = token.parent, firstToken = {\n        from: handle.from,\n        to: handle.to\n    };\n    let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();\n    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to))) do if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {\n        if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {\n            let endHandle = $14831f1c512a5db9$var$findHandle(cursor);\n            return {\n                start: firstToken,\n                end: endHandle ? {\n                    from: endHandle.from,\n                    to: endHandle.to\n                } : undefined,\n                matched: true\n            };\n        } else if ($14831f1c512a5db9$var$matchingNodes(cursor.type, dir, brackets)) depth++;\n        else if ($14831f1c512a5db9$var$matchingNodes(cursor.type, -dir, brackets)) {\n            if (depth == 0) {\n                let endHandle = $14831f1c512a5db9$var$findHandle(cursor);\n                return {\n                    start: firstToken,\n                    end: endHandle && endHandle.from < endHandle.to ? {\n                        from: endHandle.from,\n                        to: endHandle.to\n                    } : undefined,\n                    matched: false\n                };\n            }\n            depth--;\n        }\n    }\n    while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());\n    return {\n        start: firstToken,\n        matched: false\n    };\n}\nfunction $14831f1c512a5db9$var$matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {\n    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);\n    let bracket = brackets.indexOf(startCh);\n    if (bracket < 0 || bracket % 2 == 0 != dir > 0) return null;\n    let startToken = {\n        from: dir < 0 ? pos - 1 : pos,\n        to: dir > 0 ? pos + 1 : pos\n    };\n    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;\n    for(let distance = 0; !iter.next().done && distance <= maxScanDistance;){\n        let text = iter.value;\n        if (dir < 0) distance += text.length;\n        let basePos = pos + distance * dir;\n        for(let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir){\n            let found = brackets.indexOf(text[pos]);\n            if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType) continue;\n            if (found % 2 == 0 == dir > 0) depth++;\n            else if (depth == 1) return {\n                start: startToken,\n                end: {\n                    from: basePos + pos,\n                    to: basePos + pos + 1\n                },\n                matched: found >> 1 == bracket >> 1\n            };\n            else depth--;\n        }\n        if (dir > 0) distance += text.length;\n    }\n    return iter.done ? {\n        start: startToken,\n        matched: false\n    } : null;\n}\n// Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\nfunction $14831f1c512a5db9$var$countCol(string, end, tabSize, startIndex = 0, startValue = 0) {\n    if (end == null) {\n        end = string.search(/[^\\s\\u00a0]/);\n        if (end == -1) end = string.length;\n    }\n    let n = startValue;\n    for(let i = startIndex; i < end; i++)if (string.charCodeAt(i) == 9) n += tabSize - n % tabSize;\n    else n++;\n    return n;\n}\n/**\nEncapsulates a single line of input. Given to stream syntax code,\nwhich uses it to tokenize the content.\n*/ class $14831f1c512a5db9$export$72a09304cc8c1940 {\n    /**\n    Create a stream.\n    */ constructor(/**\n    The line.\n    */ string, tabSize, /**\n    The current indent unit size.\n    */ indentUnit, overrideIndent){\n        this.string = string;\n        this.tabSize = tabSize;\n        this.indentUnit = indentUnit;\n        this.overrideIndent = overrideIndent;\n        /**\n        The current position on the line.\n        */ this.pos = 0;\n        /**\n        The start position of the current token.\n        */ this.start = 0;\n        this.lastColumnPos = 0;\n        this.lastColumnValue = 0;\n    }\n    /**\n    True if we are at the end of the line.\n    */ eol() {\n        return this.pos >= this.string.length;\n    }\n    /**\n    True if we are at the start of the line.\n    */ sol() {\n        return this.pos == 0;\n    }\n    /**\n    Get the next code unit after the current position, or undefined\n    if we're at the end of the line.\n    */ peek() {\n        return this.string.charAt(this.pos) || undefined;\n    }\n    /**\n    Read the next code unit and advance `this.pos`.\n    */ next() {\n        if (this.pos < this.string.length) return this.string.charAt(this.pos++);\n    }\n    /**\n    Match the next character against the given string, regular\n    expression, or predicate. Consume and return it if it matches.\n    */ eat(match) {\n        let ch = this.string.charAt(this.pos);\n        let ok;\n        if (typeof match == \"string\") ok = ch == match;\n        else ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\n        if (ok) {\n            ++this.pos;\n            return ch;\n        }\n    }\n    /**\n    Continue matching characters that match the given string,\n    regular expression, or predicate function. Return true if any\n    characters were consumed.\n    */ eatWhile(match) {\n        let start = this.pos;\n        while(this.eat(match));\n        return this.pos > start;\n    }\n    /**\n    Consume whitespace ahead of `this.pos`. Return true if any was\n    found.\n    */ eatSpace() {\n        let start = this.pos;\n        while(/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))++this.pos;\n        return this.pos > start;\n    }\n    /**\n    Move to the end of the line.\n    */ skipToEnd() {\n        this.pos = this.string.length;\n    }\n    /**\n    Move to directly before the given character, if found on the\n    current line.\n    */ skipTo(ch) {\n        let found = this.string.indexOf(ch, this.pos);\n        if (found > -1) {\n            this.pos = found;\n            return true;\n        }\n    }\n    /**\n    Move back `n` characters.\n    */ backUp(n) {\n        this.pos -= n;\n    }\n    /**\n    Get the column position at `this.pos`.\n    */ column() {\n        if (this.lastColumnPos < this.start) {\n            this.lastColumnValue = $14831f1c512a5db9$var$countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n            this.lastColumnPos = this.start;\n        }\n        return this.lastColumnValue;\n    }\n    /**\n    Get the indentation column of the current line.\n    */ indentation() {\n        var _a;\n        return (_a = this.overrideIndent) !== null && _a !== void 0 ? _a : $14831f1c512a5db9$var$countCol(this.string, null, this.tabSize);\n    }\n    /**\n    Match the input against the given string or regular expression\n    (which should start with a `^`). Return true or the regexp match\n    if it matches.\n    \n    Unless `consume` is set to `false`, this will move `this.pos`\n    past the matched text.\n    \n    When matching a string `caseInsensitive` can be set to true to\n    make the match case-insensitive.\n    */ match(pattern, consume, caseInsensitive) {\n        if (typeof pattern == \"string\") {\n            let cased = (str)=>caseInsensitive ? str.toLowerCase() : str;\n            let substr = this.string.substr(this.pos, pattern.length);\n            if (cased(substr) == cased(pattern)) {\n                if (consume !== false) this.pos += pattern.length;\n                return true;\n            } else return null;\n        } else {\n            let match = this.string.slice(this.pos).match(pattern);\n            if (match && match.index > 0) return null;\n            if (match && consume !== false) this.pos += match[0].length;\n            return match;\n        }\n    }\n    /**\n    Get the current token.\n    */ current() {\n        return this.string.slice(this.start, this.pos);\n    }\n}\nfunction $14831f1c512a5db9$var$fullParser(spec) {\n    return {\n        name: spec.name || \"\",\n        token: spec.token,\n        blankLine: spec.blankLine || (()=>{}),\n        startState: spec.startState || (()=>true),\n        copyState: spec.copyState || $14831f1c512a5db9$var$defaultCopyState,\n        indent: spec.indent || (()=>null),\n        languageData: spec.languageData || {},\n        tokenTable: spec.tokenTable || $14831f1c512a5db9$var$noTokens\n    };\n}\nfunction $14831f1c512a5db9$var$defaultCopyState(state) {\n    if (typeof state != \"object\") return state;\n    let newState = {};\n    for(let prop in state){\n        let val = state[prop];\n        newState[prop] = val instanceof Array ? val.slice() : val;\n    }\n    return newState;\n}\nconst $14831f1c512a5db9$var$IndentedFrom = /*@__PURE__*/ new WeakMap();\n/**\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror\n5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).\n*/ class $14831f1c512a5db9$export$5ee3cc23916207d8 extends $14831f1c512a5db9$export$ce4fe1c9e6520c1a {\n    constructor(parser){\n        let data = $14831f1c512a5db9$export$b57f683f43553b99(parser.languageData);\n        let p = $14831f1c512a5db9$var$fullParser(parser), self;\n        let impl = new class extends (0, $4d476c57e17b24ca$export$7acfa6ed01010e37) {\n            createParse(input, fragments, ranges) {\n                return new $14831f1c512a5db9$var$Parse(self, input, fragments, ranges);\n            }\n        };\n        super(data, impl, [\n            $14831f1c512a5db9$export$5952625dce50d1f3.of((cx, pos)=>this.getIndent(cx, pos))\n        ], parser.name);\n        this.topNode = $14831f1c512a5db9$var$docID(data);\n        self = this;\n        this.streamParser = p;\n        this.stateAfter = new (0, $4d476c57e17b24ca$export$b8034b9bc18acd90)({\n            perNode: true\n        });\n        this.tokenTable = parser.tokenTable ? new $14831f1c512a5db9$var$TokenTable(p.tokenTable) : $14831f1c512a5db9$var$defaultTokenTable;\n    }\n    /**\n    Define a stream language.\n    */ static define(spec) {\n        return new $14831f1c512a5db9$export$5ee3cc23916207d8(spec);\n    }\n    getIndent(cx, pos) {\n        let tree = $14831f1c512a5db9$export$7fc98e56a4ca6be1(cx.state), at = tree.resolve(pos);\n        while(at && at.type != this.topNode)at = at.parent;\n        if (!at) return null;\n        let from = undefined;\n        let { overrideIndentation: overrideIndentation } = cx.options;\n        if (overrideIndentation) {\n            from = $14831f1c512a5db9$var$IndentedFrom.get(cx.state);\n            if (from != null && from < pos - 1e4) from = undefined;\n        }\n        let start = $14831f1c512a5db9$var$findState(this, tree, 0, at.from, from !== null && from !== void 0 ? from : pos), statePos, state;\n        if (start) {\n            state = start.state;\n            statePos = start.pos + 1;\n        } else {\n            state = this.streamParser.startState(cx.unit);\n            statePos = 0;\n        }\n        if (pos - statePos > 10000 /* MaxIndentScanDist */ ) return null;\n        while(statePos < pos){\n            let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);\n            if (line.length) {\n                let indentation = overrideIndentation ? overrideIndentation(line.from) : -1;\n                let stream = new $14831f1c512a5db9$export$72a09304cc8c1940(line.text, cx.state.tabSize, cx.unit, indentation < 0 ? undefined : indentation);\n                while(stream.pos < end - line.from)$14831f1c512a5db9$var$readToken(this.streamParser.token, stream, state);\n            } else this.streamParser.blankLine(state, cx.unit);\n            if (end == pos) break;\n            statePos = line.to + 1;\n        }\n        let line = cx.lineAt(pos);\n        if (overrideIndentation && from == null) $14831f1c512a5db9$var$IndentedFrom.set(cx.state, line.from);\n        return this.streamParser.indent(state, /^\\s*(.*)/.exec(line.text)[1], cx);\n    }\n    get allowsNesting() {\n        return false;\n    }\n}\nfunction $14831f1c512a5db9$var$findState(lang, tree, off, startPos, before) {\n    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\n    if (state) return {\n        state: lang.streamParser.copyState(state),\n        pos: off + tree.length\n    };\n    for(let i = tree.children.length - 1; i >= 0; i--){\n        let child = tree.children[i], pos = off + tree.positions[i];\n        let found = child instanceof (0, $4d476c57e17b24ca$export$7fbedc92909ed28e) && pos < before && $14831f1c512a5db9$var$findState(lang, child, pos, startPos, before);\n        if (found) return found;\n    }\n    return null;\n}\nfunction $14831f1c512a5db9$var$cutTree(lang, tree, from, to, inside) {\n    if (inside && from <= 0 && to >= tree.length) return tree;\n    if (!inside && tree.type == lang.topNode) inside = true;\n    for(let i = tree.children.length - 1; i >= 0; i--){\n        let pos = tree.positions[i], child = tree.children[i], inner;\n        if (pos < to && child instanceof (0, $4d476c57e17b24ca$export$7fbedc92909ed28e)) {\n            if (!(inner = $14831f1c512a5db9$var$cutTree(lang, child, from - pos, to - pos, inside))) break;\n            return !inside ? inner : new (0, $4d476c57e17b24ca$export$7fbedc92909ed28e)(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\n        }\n    }\n    return null;\n}\nfunction $14831f1c512a5db9$var$findStartInFragments(lang, fragments, startPos, editorState) {\n    for (let f of fragments){\n        let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);\n        let found = from <= startPos && to > startPos && $14831f1c512a5db9$var$findState(lang, f.tree, 0 - f.offset, startPos, to), tree;\n        if (found && (tree = $14831f1c512a5db9$var$cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false))) return {\n            state: found.state,\n            tree: tree\n        };\n    }\n    return {\n        state: lang.streamParser.startState(editorState ? $14831f1c512a5db9$export$ad3205d09311a797(editorState) : 4),\n        tree: (0, $4d476c57e17b24ca$export$7fbedc92909ed28e).empty\n    };\n}\nclass $14831f1c512a5db9$var$Parse {\n    constructor(lang, input, fragments, ranges){\n        this.lang = lang;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.stoppedAt = null;\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.rangeIndex = 0;\n        this.to = ranges[ranges.length - 1].to;\n        let context = $14831f1c512a5db9$export$3fcb7c01ff2a41fa.get(), from = ranges[0].from;\n        let { state: state, tree: tree } = $14831f1c512a5db9$var$findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);\n        this.state = state;\n        this.parsedPos = this.chunkStart = from + tree.length;\n        for(let i = 0; i < tree.children.length; i++){\n            this.chunks.push(tree.children[i]);\n            this.chunkPos.push(tree.positions[i]);\n        }\n        if (context && this.parsedPos < context.viewport.from - 100000 /* MaxDistanceBeforeViewport */ ) {\n            this.state = this.lang.streamParser.startState($14831f1c512a5db9$export$ad3205d09311a797(context.state));\n            context.skipUntilInView(this.parsedPos, context.viewport.from);\n            this.parsedPos = context.viewport.from;\n        }\n        this.moveRangeIndex();\n    }\n    advance() {\n        let context = $14831f1c512a5db9$export$3fcb7c01ff2a41fa.get();\n        let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\n        let end = Math.min(parseEnd, this.chunkStart + 2048 /* ChunkSize */ );\n        if (context) end = Math.min(end, context.viewport.to);\n        while(this.parsedPos < end)this.parseLine(context);\n        if (this.chunkStart < this.parsedPos) this.finishChunk();\n        if (this.parsedPos >= parseEnd) return this.finish();\n        if (context && this.parsedPos >= context.viewport.to) {\n            context.skipUntilInView(this.parsedPos, parseEnd);\n            return this.finish();\n        }\n        return null;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n    }\n    lineAfter(pos) {\n        let chunk = this.input.chunk(pos);\n        if (!this.input.lineChunks) {\n            let eol = chunk.indexOf(\"\\n\");\n            if (eol > -1) chunk = chunk.slice(0, eol);\n        } else if (chunk == \"\\n\") chunk = \"\";\n        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\n    }\n    nextLine() {\n        let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;\n        for(let index = this.rangeIndex;;){\n            let rangeEnd = this.ranges[index].to;\n            if (rangeEnd >= end) break;\n            line = line.slice(0, rangeEnd - (end - line.length));\n            index++;\n            if (index == this.ranges.length) break;\n            let rangeStart = this.ranges[index].from;\n            let after = this.lineAfter(rangeStart);\n            line += after;\n            end = rangeStart + after.length;\n        }\n        return {\n            line: line,\n            end: end\n        };\n    }\n    skipGapsTo(pos, offset, side) {\n        for(;;){\n            let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;\n            if (side > 0 ? end > offPos : end >= offPos) break;\n            let start = this.ranges[++this.rangeIndex].from;\n            offset += start - end;\n        }\n        return offset;\n    }\n    moveRangeIndex() {\n        while(this.ranges[this.rangeIndex].to < this.parsedPos)this.rangeIndex++;\n    }\n    emitToken(id, from, to, size, offset) {\n        if (this.ranges.length > 1) {\n            offset = this.skipGapsTo(from, offset, 1);\n            from += offset;\n            let len0 = this.chunk.length;\n            offset = this.skipGapsTo(to, offset, -1);\n            to += offset;\n            size += this.chunk.length - len0;\n        }\n        this.chunk.push(id, from, to, size);\n        return offset;\n    }\n    parseLine(context) {\n        let { line: line, end: end } = this.nextLine(), offset = 0, { streamParser: streamParser } = this.lang;\n        let stream = new $14831f1c512a5db9$export$72a09304cc8c1940(line, context ? context.state.tabSize : 4, context ? $14831f1c512a5db9$export$ad3205d09311a797(context.state) : 2);\n        if (stream.eol()) streamParser.blankLine(this.state, stream.indentUnit);\n        else while(!stream.eol()){\n            let token = $14831f1c512a5db9$var$readToken(streamParser.token, stream, this.state);\n            if (token) offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);\n            if (stream.start > 10000 /* MaxLineLength */ ) break;\n        }\n        this.parsedPos = end;\n        this.moveRangeIndex();\n        if (this.parsedPos < this.to) this.parsedPos++;\n    }\n    finishChunk() {\n        let tree = (0, $4d476c57e17b24ca$export$7fbedc92909ed28e).build({\n            buffer: this.chunk,\n            start: this.chunkStart,\n            length: this.parsedPos - this.chunkStart,\n            nodeSet: $14831f1c512a5db9$var$nodeSet,\n            topID: 0,\n            maxBufferLength: 2048 /* ChunkSize */ ,\n            reused: this.chunkReused\n        });\n        tree = new (0, $4d476c57e17b24ca$export$7fbedc92909ed28e)(tree.type, tree.children, tree.positions, tree.length, [\n            [\n                this.lang.stateAfter,\n                this.lang.streamParser.copyState(this.state)\n            ]\n        ]);\n        this.chunks.push(tree);\n        this.chunkPos.push(this.chunkStart - this.ranges[0].from);\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.chunkStart = this.parsedPos;\n    }\n    finish() {\n        return new (0, $4d476c57e17b24ca$export$7fbedc92909ed28e)(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\n    }\n}\nfunction $14831f1c512a5db9$var$readToken(token, stream, state) {\n    stream.start = stream.pos;\n    for(let i = 0; i < 10; i++){\n        let result = token(stream, state);\n        if (stream.pos > stream.start) return result;\n    }\n    throw new Error(\"Stream parser failed to advance stream.\");\n}\nconst $14831f1c512a5db9$var$noTokens = /*@__PURE__*/ Object.create(null);\nconst $14831f1c512a5db9$var$typeArray = [\n    (0, $4d476c57e17b24ca$export$f06e977173f1857c).none\n];\nconst $14831f1c512a5db9$var$nodeSet = /*@__PURE__*/ new (0, $4d476c57e17b24ca$export$7fad5fb00d8de02c)($14831f1c512a5db9$var$typeArray);\nconst $14831f1c512a5db9$var$warned = [];\nconst $14831f1c512a5db9$var$defaultTable = /*@__PURE__*/ Object.create(null);\nfor (let [legacyName, name] of [\n    [\n        \"variable\",\n        \"variableName\"\n    ],\n    [\n        \"variable-2\",\n        \"variableName.special\"\n    ],\n    [\n        \"string-2\",\n        \"string.special\"\n    ],\n    [\n        \"def\",\n        \"variableName.definition\"\n    ],\n    [\n        \"tag\",\n        \"tagName\"\n    ],\n    [\n        \"attribute\",\n        \"attributeName\"\n    ],\n    [\n        \"type\",\n        \"typeName\"\n    ],\n    [\n        \"builtin\",\n        \"variableName.standard\"\n    ],\n    [\n        \"qualifier\",\n        \"modifier\"\n    ],\n    [\n        \"error\",\n        \"invalid\"\n    ],\n    [\n        \"header\",\n        \"heading\"\n    ],\n    [\n        \"property\",\n        \"propertyName\"\n    ]\n])$14831f1c512a5db9$var$defaultTable[legacyName] = /*@__PURE__*/ $14831f1c512a5db9$var$createTokenType($14831f1c512a5db9$var$noTokens, name);\nclass $14831f1c512a5db9$var$TokenTable {\n    constructor(extra){\n        this.extra = extra;\n        this.table = Object.assign(Object.create(null), $14831f1c512a5db9$var$defaultTable);\n    }\n    resolve(tag) {\n        return !tag ? 0 : this.table[tag] || (this.table[tag] = $14831f1c512a5db9$var$createTokenType(this.extra, tag));\n    }\n}\nconst $14831f1c512a5db9$var$defaultTokenTable = /*@__PURE__*/ new $14831f1c512a5db9$var$TokenTable($14831f1c512a5db9$var$noTokens);\nfunction $14831f1c512a5db9$var$warnForPart(part, msg) {\n    if ($14831f1c512a5db9$var$warned.indexOf(part) > -1) return;\n    $14831f1c512a5db9$var$warned.push(part);\n    console.warn(msg);\n}\nfunction $14831f1c512a5db9$var$createTokenType(extra, tagStr) {\n    let tag = null;\n    for (let part of tagStr.split(\".\")){\n        let value = extra[part] || (0, $4c72ff8c9e8a407a$export$8b7a896ae75accbf)[part];\n        if (!value) $14831f1c512a5db9$var$warnForPart(part, `Unknown highlighting tag ${part}`);\n        else if (typeof value == \"function\") {\n            if (!tag) $14831f1c512a5db9$var$warnForPart(part, `Modifier ${part} used at start of tag`);\n            else tag = value(tag);\n        } else if (tag) $14831f1c512a5db9$var$warnForPart(part, `Tag ${part} used as modifier`);\n        else tag = value;\n    }\n    if (!tag) return 0;\n    let name = tagStr.replace(/ /g, \"_\"), type = (0, $4d476c57e17b24ca$export$f06e977173f1857c).define({\n        id: $14831f1c512a5db9$var$typeArray.length,\n        name: name,\n        props: [\n            (0, $4c72ff8c9e8a407a$export$c537e79bb7b94295)({\n                [name]: tag\n            })\n        ]\n    });\n    $14831f1c512a5db9$var$typeArray.push(type);\n    return type.id;\n}\nfunction $14831f1c512a5db9$var$docID(data) {\n    let type = (0, $4d476c57e17b24ca$export$f06e977173f1857c).define({\n        id: $14831f1c512a5db9$var$typeArray.length,\n        name: \"Document\",\n        props: [\n            $14831f1c512a5db9$export$27a2e78097f753f7.add(()=>data)\n        ]\n    });\n    $14831f1c512a5db9$var$typeArray.push(type);\n    return type;\n}\n\n\n\n\n\n\n/**\nComment or uncomment the current selection. Will use line comments\nif available, otherwise falling back to block comments.\n*/ const $d04c89efcb565ec8$export$afbcdd0bff36c567 = (target)=>{\n    let { state: state } = target, line = state.doc.lineAt(state.selection.main.from), config = $d04c89efcb565ec8$var$getConfig(target.state, line.from);\n    return config.line ? $d04c89efcb565ec8$export$63a9abf96aaa3c5d(target) : config.block ? $d04c89efcb565ec8$export$e88d9eff7cafcc34(target) : false;\n};\nfunction $d04c89efcb565ec8$var$command(f, option) {\n    return ({ state: state, dispatch: dispatch })=>{\n        if (state.readOnly) return false;\n        let tr = f(option, state);\n        if (!tr) return false;\n        dispatch(state.update(tr));\n        return true;\n    };\n}\n/**\nComment or uncomment the current selection using line comments.\nThe line comment syntax is taken from the\n[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\n*/ const $d04c89efcb565ec8$export$63a9abf96aaa3c5d = /*@__PURE__*/ $d04c89efcb565ec8$var$command($d04c89efcb565ec8$var$changeLineComment, 0 /* CommentOption.Toggle */ );\n/**\nComment the current selection using line comments.\n*/ const $d04c89efcb565ec8$export$5d080f5a78d4f5b3 = /*@__PURE__*/ $d04c89efcb565ec8$var$command($d04c89efcb565ec8$var$changeLineComment, 1 /* CommentOption.Comment */ );\n/**\nUncomment the current selection using line comments.\n*/ const $d04c89efcb565ec8$export$5a43b8c36509b6fd = /*@__PURE__*/ $d04c89efcb565ec8$var$command($d04c89efcb565ec8$var$changeLineComment, 2 /* CommentOption.Uncomment */ );\n/**\nComment or uncomment the current selection using block comments.\nThe block comment syntax is taken from the\n[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\n*/ const $d04c89efcb565ec8$export$19d6fa84ce3a55ab = /*@__PURE__*/ $d04c89efcb565ec8$var$command($d04c89efcb565ec8$var$changeBlockComment, 0 /* CommentOption.Toggle */ );\n/**\nComment the current selection using block comments.\n*/ const $d04c89efcb565ec8$export$f2ae215066c4835a = /*@__PURE__*/ $d04c89efcb565ec8$var$command($d04c89efcb565ec8$var$changeBlockComment, 1 /* CommentOption.Comment */ );\n/**\nUncomment the current selection using block comments.\n*/ const $d04c89efcb565ec8$export$fddcfb23c3a05835 = /*@__PURE__*/ $d04c89efcb565ec8$var$command($d04c89efcb565ec8$var$changeBlockComment, 2 /* CommentOption.Uncomment */ );\n/**\nComment or uncomment the lines around the current selection using\nblock comments.\n*/ const $d04c89efcb565ec8$export$e88d9eff7cafcc34 = /*@__PURE__*/ $d04c89efcb565ec8$var$command((o, s)=>$d04c89efcb565ec8$var$changeBlockComment(o, s, $d04c89efcb565ec8$var$selectedLineRanges(s)), 0 /* CommentOption.Toggle */ );\nfunction $d04c89efcb565ec8$var$getConfig(state, pos) {\n    let data = state.languageDataAt(\"commentTokens\", pos);\n    return data.length ? data[0] : {};\n}\nconst $d04c89efcb565ec8$var$SearchMargin = 50;\n/**\nDetermines if the given range is block-commented in the given\nstate.\n*/ function $d04c89efcb565ec8$var$findBlockComment(state, { open: open, close: close }, from, to) {\n    let textBefore = state.sliceDoc(from - $d04c89efcb565ec8$var$SearchMargin, from);\n    let textAfter = state.sliceDoc(to, to + $d04c89efcb565ec8$var$SearchMargin);\n    let spaceBefore = /\\s*$/.exec(textBefore)[0].length, spaceAfter = /^\\s*/.exec(textAfter)[0].length;\n    let beforeOff = textBefore.length - spaceBefore;\n    if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) return {\n        open: {\n            pos: from - spaceBefore,\n            margin: spaceBefore && 1\n        },\n        close: {\n            pos: to + spaceAfter,\n            margin: spaceAfter && 1\n        }\n    };\n    let startText, endText;\n    if (to - from <= 2 * $d04c89efcb565ec8$var$SearchMargin) startText = endText = state.sliceDoc(from, to);\n    else {\n        startText = state.sliceDoc(from, from + $d04c89efcb565ec8$var$SearchMargin);\n        endText = state.sliceDoc(to - $d04c89efcb565ec8$var$SearchMargin, to);\n    }\n    let startSpace = /^\\s*/.exec(startText)[0].length, endSpace = /\\s*$/.exec(endText)[0].length;\n    let endOff = endText.length - endSpace - close.length;\n    if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) return {\n        open: {\n            pos: from + startSpace + open.length,\n            margin: /\\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0\n        },\n        close: {\n            pos: to - endSpace - close.length,\n            margin: /\\s/.test(endText.charAt(endOff - 1)) ? 1 : 0\n        }\n    };\n    return null;\n}\nfunction $d04c89efcb565ec8$var$selectedLineRanges(state) {\n    let ranges = [];\n    for (let r of state.selection.ranges){\n        let fromLine = state.doc.lineAt(r.from);\n        let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);\n        let last = ranges.length - 1;\n        if (last >= 0 && ranges[last].to > fromLine.from) ranges[last].to = toLine.to;\n        else ranges.push({\n            from: fromLine.from + /^\\s*/.exec(fromLine.text)[0].length,\n            to: toLine.to\n        });\n    }\n    return ranges;\n}\n// Performs toggle, comment and uncomment of block comments in\n// languages that support them.\nfunction $d04c89efcb565ec8$var$changeBlockComment(option, state, ranges = state.selection.ranges) {\n    let tokens = ranges.map((r)=>$d04c89efcb565ec8$var$getConfig(state, r.from).block);\n    if (!tokens.every((c)=>c)) return null;\n    let comments = ranges.map((r, i)=>$d04c89efcb565ec8$var$findBlockComment(state, tokens[i], r.from, r.to));\n    if (option != 2 /* CommentOption.Uncomment */  && !comments.every((c)=>c)) return {\n        changes: state.changes(ranges.map((range, i)=>{\n            if (comments[i]) return [];\n            return [\n                {\n                    from: range.from,\n                    insert: tokens[i].open + \" \"\n                },\n                {\n                    from: range.to,\n                    insert: \" \" + tokens[i].close\n                }\n            ];\n        }))\n    };\n    else if (option != 1 /* CommentOption.Comment */  && comments.some((c)=>c)) {\n        let changes = [];\n        for(let i = 0, comment; i < comments.length; i++)if (comment = comments[i]) {\n            let token = tokens[i], { open: open, close: close } = comment;\n            changes.push({\n                from: open.pos - token.open.length,\n                to: open.pos + open.margin\n            }, {\n                from: close.pos - close.margin,\n                to: close.pos + token.close.length\n            });\n        }\n        return {\n            changes: changes\n        };\n    }\n    return null;\n}\n// Performs toggle, comment and uncomment of line comments.\nfunction $d04c89efcb565ec8$var$changeLineComment(option, state, ranges = state.selection.ranges) {\n    let lines = [];\n    let prevLine = -1;\n    for (let { from: from, to: to } of ranges){\n        let startI = lines.length, minIndent = 1e9;\n        let token = $d04c89efcb565ec8$var$getConfig(state, from).line;\n        if (!token) continue;\n        for(let pos = from; pos <= to;){\n            let line = state.doc.lineAt(pos);\n            if (line.from > prevLine && (from == to || to > line.from)) {\n                prevLine = line.from;\n                let indent = /^\\s*/.exec(line.text)[0].length;\n                let empty = indent == line.length;\n                let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;\n                if (indent < line.text.length && indent < minIndent) minIndent = indent;\n                lines.push({\n                    line: line,\n                    comment: comment,\n                    token: token,\n                    indent: indent,\n                    empty: empty,\n                    single: false\n                });\n            }\n            pos = line.to + 1;\n        }\n        if (minIndent < 1e9) {\n            for(let i = startI; i < lines.length; i++)if (lines[i].indent < lines[i].line.text.length) lines[i].indent = minIndent;\n        }\n        if (lines.length == startI + 1) lines[startI].single = true;\n    }\n    if (option != 2 /* CommentOption.Uncomment */  && lines.some((l)=>l.comment < 0 && (!l.empty || l.single))) {\n        let changes = [];\n        for (let { line: line, token: token, indent: indent, empty: empty, single: single } of lines)if (single || !empty) changes.push({\n            from: line.from + indent,\n            insert: token + \" \"\n        });\n        let changeSet = state.changes(changes);\n        return {\n            changes: changeSet,\n            selection: state.selection.map(changeSet, 1)\n        };\n    } else if (option != 1 /* CommentOption.Comment */  && lines.some((l)=>l.comment >= 0)) {\n        let changes = [];\n        for (let { line: line, comment: comment, token: token } of lines)if (comment >= 0) {\n            let from = line.from + comment, to = from + token.length;\n            if (line.text[to - line.from] == \" \") to++;\n            changes.push({\n                from: from,\n                to: to\n            });\n        }\n        return {\n            changes: changes\n        };\n    }\n    return null;\n}\nconst $d04c89efcb565ec8$var$fromHistory = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$9279461326b8700a).define();\n/**\nTransaction annotation that will prevent that transaction from\nbeing combined with other transactions in the undo history. Given\n`\"before\"`, it'll prevent merging with previous transactions. With\n`\"after\"`, subsequent transactions won't be combined with this\none. With `\"full\"`, the transaction is isolated on both sides.\n*/ const $d04c89efcb565ec8$export$33e0bb25992f9954 = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$9279461326b8700a).define();\n/**\nThis facet provides a way to register functions that, given a\ntransaction, provide a set of effects that the history should\nstore when inverting the transaction. This can be used to\nintegrate some kinds of effects in the history, so that they can\nbe undone (and redone again).\n*/ const $d04c89efcb565ec8$export$edb12867fb9b2023 = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define();\nconst $d04c89efcb565ec8$var$historyConfig = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (configs) {\n        return (0, $ccfb9497d8ef598f$export$4e19c0b693794a7e)(configs, {\n            minDepth: 100,\n            newGroupDelay: 500,\n            joinToEvent: (_t, isAdjacent)=>isAdjacent\n        }, {\n            minDepth: Math.max,\n            newGroupDelay: Math.min,\n            joinToEvent: (a, b)=>(tr, adj)=>a(tr, adj) || b(tr, adj)\n        });\n    }\n});\nfunction $d04c89efcb565ec8$var$changeEnd(changes) {\n    let end = 0;\n    changes.iterChangedRanges((_, to)=>end = to);\n    return end;\n}\nconst $d04c89efcb565ec8$var$historyField_ = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create () {\n        return $d04c89efcb565ec8$var$HistoryState.empty;\n    },\n    update (state, tr) {\n        let config = tr.state.facet($d04c89efcb565ec8$var$historyConfig);\n        let fromHist = tr.annotation($d04c89efcb565ec8$var$fromHistory);\n        if (fromHist) {\n            let selection = tr.docChanged ? (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).single($d04c89efcb565ec8$var$changeEnd(tr.changes)) : undefined;\n            let item = $d04c89efcb565ec8$var$HistEvent.fromTransaction(tr, selection), from = fromHist.side;\n            let other = from == 0 /* BranchName.Done */  ? state.undone : state.done;\n            if (item) other = $d04c89efcb565ec8$var$updateBranch(other, other.length, config.minDepth, item);\n            else other = $d04c89efcb565ec8$var$addSelection(other, tr.startState.selection);\n            return new $d04c89efcb565ec8$var$HistoryState(from == 0 /* BranchName.Done */  ? fromHist.rest : other, from == 0 /* BranchName.Done */  ? other : fromHist.rest);\n        }\n        let isolate = tr.annotation($d04c89efcb565ec8$export$33e0bb25992f9954);\n        if (isolate == \"full\" || isolate == \"before\") state = state.isolate();\n        if (tr.annotation((0, $ccfb9497d8ef598f$export$febc5573c75cefb0).addToHistory) === false) return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;\n        let event = $d04c89efcb565ec8$var$HistEvent.fromTransaction(tr);\n        let time = tr.annotation((0, $ccfb9497d8ef598f$export$febc5573c75cefb0).time), userEvent = tr.annotation((0, $ccfb9497d8ef598f$export$febc5573c75cefb0).userEvent);\n        if (event) state = state.addChanges(event, time, userEvent, config, tr);\n        else if (tr.selection) state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);\n        if (isolate == \"full\" || isolate == \"after\") state = state.isolate();\n        return state;\n    },\n    toJSON (value) {\n        return {\n            done: value.done.map((e)=>e.toJSON()),\n            undone: value.undone.map((e)=>e.toJSON())\n        };\n    },\n    fromJSON (json) {\n        return new $d04c89efcb565ec8$var$HistoryState(json.done.map($d04c89efcb565ec8$var$HistEvent.fromJSON), json.undone.map($d04c89efcb565ec8$var$HistEvent.fromJSON));\n    }\n});\n/**\nCreate a history extension with the given configuration.\n*/ function $d04c89efcb565ec8$export$55abd4691b317664(config = {}) {\n    return [\n        $d04c89efcb565ec8$var$historyField_,\n        $d04c89efcb565ec8$var$historyConfig.of(config),\n        (0, $071334078f8d3f8a$export$eece2fccabbb77c5).domEventHandlers({\n            beforeinput (e, view) {\n                let command = e.inputType == \"historyUndo\" ? $d04c89efcb565ec8$export$21f930c44940fd98 : e.inputType == \"historyRedo\" ? $d04c89efcb565ec8$export$1688e416fee0a49e : null;\n                if (!command) return false;\n                e.preventDefault();\n                return command(view);\n            }\n        })\n    ];\n}\n/**\nThe state field used to store the history data. Should probably\nonly be used when you want to\n[serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or\n[deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way\nthat preserves history.\n*/ const $d04c89efcb565ec8$export$c00598b6ceeb3e9 = $d04c89efcb565ec8$var$historyField_;\nfunction $d04c89efcb565ec8$var$cmd(side, selection) {\n    return function({ state: state, dispatch: dispatch }) {\n        if (!selection && state.readOnly) return false;\n        let historyState = state.field($d04c89efcb565ec8$var$historyField_, false);\n        if (!historyState) return false;\n        let tr = historyState.pop(side, state, selection);\n        if (!tr) return false;\n        dispatch(tr);\n        return true;\n    };\n}\n/**\nUndo a single group of history events. Returns false if no group\nwas available.\n*/ const $d04c89efcb565ec8$export$21f930c44940fd98 = /*@__PURE__*/ $d04c89efcb565ec8$var$cmd(0 /* BranchName.Done */ , false);\n/**\nRedo a group of history events. Returns false if no group was\navailable.\n*/ const $d04c89efcb565ec8$export$1688e416fee0a49e = /*@__PURE__*/ $d04c89efcb565ec8$var$cmd(1 /* BranchName.Undone */ , false);\n/**\nUndo a change or selection change.\n*/ const $d04c89efcb565ec8$export$43103d47530fe49f = /*@__PURE__*/ $d04c89efcb565ec8$var$cmd(0 /* BranchName.Done */ , true);\n/**\nRedo a change or selection change.\n*/ const $d04c89efcb565ec8$export$2d87af80f1777f20 = /*@__PURE__*/ $d04c89efcb565ec8$var$cmd(1 /* BranchName.Undone */ , true);\nfunction $d04c89efcb565ec8$var$depth(side) {\n    return function(state) {\n        let histState = state.field($d04c89efcb565ec8$var$historyField_, false);\n        if (!histState) return 0;\n        let branch = side == 0 /* BranchName.Done */  ? histState.done : histState.undone;\n        return branch.length - (branch.length && !branch[0].changes ? 1 : 0);\n    };\n}\n/**\nThe amount of undoable change events available in a given state.\n*/ const $d04c89efcb565ec8$export$f8a176c2b9a10bdb = /*@__PURE__*/ $d04c89efcb565ec8$var$depth(0 /* BranchName.Done */ );\n/**\nThe amount of redoable change events available in a given state.\n*/ const $d04c89efcb565ec8$export$3ffe6b288e7d941b = /*@__PURE__*/ $d04c89efcb565ec8$var$depth(1 /* BranchName.Undone */ );\n// History events store groups of changes or effects that need to be\n// undone/redone together.\nclass $d04c89efcb565ec8$var$HistEvent {\n    constructor(// The changes in this event. Normal events hold at least one\n    // change or effect. But it may be necessary to store selection\n    // events before the first change, in which case a special type of\n    // instance is created which doesn't hold any changes, with\n    // changes == startSelection == undefined\n    changes, // The effects associated with this event\n    effects, // Accumulated mapping (from addToHistory==false) that should be\n    // applied to events below this one.\n    mapped, // The selection before this event\n    startSelection, // Stores selection changes after this event, to be used for\n    // selection undo/redo.\n    selectionsAfter){\n        this.changes = changes;\n        this.effects = effects;\n        this.mapped = mapped;\n        this.startSelection = startSelection;\n        this.selectionsAfter = selectionsAfter;\n    }\n    setSelAfter(after) {\n        return new $d04c89efcb565ec8$var$HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);\n    }\n    toJSON() {\n        var _a, _b, _c;\n        return {\n            changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),\n            mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),\n            startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),\n            selectionsAfter: this.selectionsAfter.map((s)=>s.toJSON())\n        };\n    }\n    static fromJSON(json) {\n        return new $d04c89efcb565ec8$var$HistEvent(json.changes && (0, $ccfb9497d8ef598f$export$29d7fbdcb1f8b71c).fromJSON(json.changes), [], json.mapped && (0, $ccfb9497d8ef598f$export$34b6a936f2bb06a2).fromJSON(json.mapped), json.startSelection && (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).fromJSON(json.startSelection), json.selectionsAfter.map((0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).fromJSON));\n    }\n    // This does not check `addToHistory` and such, it assumes the\n    // transaction needs to be converted to an item. Returns null when\n    // there are no changes or effects in the transaction.\n    static fromTransaction(tr, selection) {\n        let effects = $d04c89efcb565ec8$var$none;\n        for (let invert of tr.startState.facet($d04c89efcb565ec8$export$edb12867fb9b2023)){\n            let result = invert(tr);\n            if (result.length) effects = effects.concat(result);\n        }\n        if (!effects.length && tr.changes.empty) return null;\n        return new $d04c89efcb565ec8$var$HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, $d04c89efcb565ec8$var$none);\n    }\n    static selection(selections) {\n        return new $d04c89efcb565ec8$var$HistEvent(undefined, $d04c89efcb565ec8$var$none, undefined, undefined, selections);\n    }\n}\nfunction $d04c89efcb565ec8$var$updateBranch(branch, to, maxLen, newEvent) {\n    let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;\n    let newBranch = branch.slice(start, to);\n    newBranch.push(newEvent);\n    return newBranch;\n}\nfunction $d04c89efcb565ec8$var$isAdjacent(a, b) {\n    let ranges = [], isAdjacent = false;\n    a.iterChangedRanges((f, t)=>ranges.push(f, t));\n    b.iterChangedRanges((_f, _t, f, t)=>{\n        for(let i = 0; i < ranges.length;){\n            let from = ranges[i++], to = ranges[i++];\n            if (t >= from && f <= to) isAdjacent = true;\n        }\n    });\n    return isAdjacent;\n}\nfunction $d04c89efcb565ec8$var$eqSelectionShape(a, b) {\n    return a.ranges.length == b.ranges.length && a.ranges.filter((r, i)=>r.empty != b.ranges[i].empty).length === 0;\n}\nfunction $d04c89efcb565ec8$var$conc(a, b) {\n    return !a.length ? b : !b.length ? a : a.concat(b);\n}\nconst $d04c89efcb565ec8$var$none = [];\nconst $d04c89efcb565ec8$var$MaxSelectionsPerEvent = 200;\nfunction $d04c89efcb565ec8$var$addSelection(branch, selection) {\n    if (!branch.length) return [\n        $d04c89efcb565ec8$var$HistEvent.selection([\n            selection\n        ])\n    ];\n    else {\n        let lastEvent = branch[branch.length - 1];\n        let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - $d04c89efcb565ec8$var$MaxSelectionsPerEvent));\n        if (sels.length && sels[sels.length - 1].eq(selection)) return branch;\n        sels.push(selection);\n        return $d04c89efcb565ec8$var$updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));\n    }\n}\n// Assumes the top item has one or more selectionAfter values\nfunction $d04c89efcb565ec8$var$popSelection(branch) {\n    let last = branch[branch.length - 1];\n    let newBranch = branch.slice();\n    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));\n    return newBranch;\n}\n// Add a mapping to the top event in the given branch. If this maps\n// away all the changes and effects in that item, drop it and\n// propagate the mapping to the next item.\nfunction $d04c89efcb565ec8$var$addMappingToBranch(branch, mapping) {\n    if (!branch.length) return branch;\n    let length = branch.length, selections = $d04c89efcb565ec8$var$none;\n    while(length){\n        let event = $d04c89efcb565ec8$var$mapEvent(branch[length - 1], mapping, selections);\n        if (event.changes && !event.changes.empty || event.effects.length) {\n            let result = branch.slice(0, length);\n            result[length - 1] = event;\n            return result;\n        } else {\n            mapping = event.mapped;\n            length--;\n            selections = event.selectionsAfter;\n        }\n    }\n    return selections.length ? [\n        $d04c89efcb565ec8$var$HistEvent.selection(selections)\n    ] : $d04c89efcb565ec8$var$none;\n}\nfunction $d04c89efcb565ec8$var$mapEvent(event, mapping, extraSelections) {\n    let selections = $d04c89efcb565ec8$var$conc(event.selectionsAfter.length ? event.selectionsAfter.map((s)=>s.map(mapping)) : $d04c89efcb565ec8$var$none, extraSelections);\n    // Change-less events don't store mappings (they are always the last event in a branch)\n    if (!event.changes) return $d04c89efcb565ec8$var$HistEvent.selection(selections);\n    let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);\n    let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;\n    return new $d04c89efcb565ec8$var$HistEvent(mappedChanges, (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);\n}\nconst $d04c89efcb565ec8$var$joinableUserEvent = /^(input\\.type|delete)($|\\.)/;\nclass $d04c89efcb565ec8$var$HistoryState {\n    constructor(done, undone, prevTime = 0, prevUserEvent){\n        this.done = done;\n        this.undone = undone;\n        this.prevTime = prevTime;\n        this.prevUserEvent = prevUserEvent;\n    }\n    isolate() {\n        return this.prevTime ? new $d04c89efcb565ec8$var$HistoryState(this.done, this.undone) : this;\n    }\n    addChanges(event, time, userEvent, config, tr) {\n        let done = this.done, lastEvent = done[done.length - 1];\n        if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || $d04c89efcb565ec8$var$joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config.newGroupDelay && config.joinToEvent(tr, $d04c89efcb565ec8$var$isAdjacent(lastEvent.changes, event.changes)) || // For compose (but not compose.start) events, always join with previous event\n        userEvent == \"input.type.compose\")) done = $d04c89efcb565ec8$var$updateBranch(done, done.length - 1, config.minDepth, new $d04c89efcb565ec8$var$HistEvent(event.changes.compose(lastEvent.changes), $d04c89efcb565ec8$var$conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, $d04c89efcb565ec8$var$none));\n        else done = $d04c89efcb565ec8$var$updateBranch(done, done.length, config.minDepth, event);\n        return new $d04c89efcb565ec8$var$HistoryState(done, $d04c89efcb565ec8$var$none, time, userEvent);\n    }\n    addSelection(selection, time, userEvent, newGroupDelay) {\n        let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : $d04c89efcb565ec8$var$none;\n        if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\\.)/.test(userEvent) && $d04c89efcb565ec8$var$eqSelectionShape(last[last.length - 1], selection)) return this;\n        return new $d04c89efcb565ec8$var$HistoryState($d04c89efcb565ec8$var$addSelection(this.done, selection), this.undone, time, userEvent);\n    }\n    addMapping(mapping) {\n        return new $d04c89efcb565ec8$var$HistoryState($d04c89efcb565ec8$var$addMappingToBranch(this.done, mapping), $d04c89efcb565ec8$var$addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);\n    }\n    pop(side, state, selection) {\n        let branch = side == 0 /* BranchName.Done */  ? this.done : this.undone;\n        if (branch.length == 0) return null;\n        let event = branch[branch.length - 1];\n        if (selection && event.selectionsAfter.length) return state.update({\n            selection: event.selectionsAfter[event.selectionsAfter.length - 1],\n            annotations: $d04c89efcb565ec8$var$fromHistory.of({\n                side: side,\n                rest: $d04c89efcb565ec8$var$popSelection(branch)\n            }),\n            userEvent: side == 0 /* BranchName.Done */  ? \"select.undo\" : \"select.redo\",\n            scrollIntoView: true\n        });\n        else if (!event.changes) return null;\n        else {\n            let rest = branch.length == 1 ? $d04c89efcb565ec8$var$none : branch.slice(0, branch.length - 1);\n            if (event.mapped) rest = $d04c89efcb565ec8$var$addMappingToBranch(rest, event.mapped);\n            return state.update({\n                changes: event.changes,\n                selection: event.startSelection,\n                effects: event.effects,\n                annotations: $d04c89efcb565ec8$var$fromHistory.of({\n                    side: side,\n                    rest: rest\n                }),\n                filter: false,\n                userEvent: side == 0 /* BranchName.Done */  ? \"undo\" : \"redo\",\n                scrollIntoView: true\n            });\n        }\n    }\n}\n$d04c89efcb565ec8$var$HistoryState.empty = /*@__PURE__*/ new $d04c89efcb565ec8$var$HistoryState($d04c89efcb565ec8$var$none, $d04c89efcb565ec8$var$none);\n/**\nDefault key bindings for the undo history.\n\n- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).\n- Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).\n- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).\n- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).\n*/ const $d04c89efcb565ec8$export$ab4a28cb63e8a670 = [\n    {\n        key: \"Mod-z\",\n        run: $d04c89efcb565ec8$export$21f930c44940fd98,\n        preventDefault: true\n    },\n    {\n        key: \"Mod-y\",\n        mac: \"Mod-Shift-z\",\n        run: $d04c89efcb565ec8$export$1688e416fee0a49e,\n        preventDefault: true\n    },\n    {\n        linux: \"Ctrl-Shift-z\",\n        run: $d04c89efcb565ec8$export$1688e416fee0a49e,\n        preventDefault: true\n    },\n    {\n        key: \"Mod-u\",\n        run: $d04c89efcb565ec8$export$43103d47530fe49f,\n        preventDefault: true\n    },\n    {\n        key: \"Alt-u\",\n        mac: \"Mod-Shift-u\",\n        run: $d04c89efcb565ec8$export$2d87af80f1777f20,\n        preventDefault: true\n    }\n];\nfunction $d04c89efcb565ec8$var$updateSel(sel, by) {\n    return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create(sel.ranges.map(by), sel.mainIndex);\n}\nfunction $d04c89efcb565ec8$var$setSel(state, selection) {\n    return state.update({\n        selection: selection,\n        scrollIntoView: true,\n        userEvent: \"select\"\n    });\n}\nfunction $d04c89efcb565ec8$var$moveSel({ state: state, dispatch: dispatch }, how) {\n    let selection = $d04c89efcb565ec8$var$updateSel(state.selection, how);\n    if (selection.eq(state.selection)) return false;\n    dispatch($d04c89efcb565ec8$var$setSel(state, selection));\n    return true;\n}\nfunction $d04c89efcb565ec8$var$rangeEnd(range, forward) {\n    return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(forward ? range.to : range.from);\n}\nfunction $d04c89efcb565ec8$var$cursorByChar(view, forward) {\n    return $d04c89efcb565ec8$var$moveSel(view, (range)=>range.empty ? view.moveByChar(range, forward) : $d04c89efcb565ec8$var$rangeEnd(range, forward));\n}\nfunction $d04c89efcb565ec8$var$ltrAtCursor(view) {\n    return view.textDirectionAt(view.state.selection.main.head) == (0, $071334078f8d3f8a$export$cacd6541cfeeb6c1).LTR;\n}\n/**\nMove the selection one character to the left (which is backward in\nleft-to-right text, forward in right-to-left text).\n*/ const $d04c89efcb565ec8$export$3447f2b737925430 = (view)=>$d04c89efcb565ec8$var$cursorByChar(view, !$d04c89efcb565ec8$var$ltrAtCursor(view));\n/**\nMove the selection one character to the right.\n*/ const $d04c89efcb565ec8$export$e45941411d098b = (view)=>$d04c89efcb565ec8$var$cursorByChar(view, $d04c89efcb565ec8$var$ltrAtCursor(view));\n/**\nMove the selection one character forward.\n*/ const $d04c89efcb565ec8$export$25b7809021291927 = (view)=>$d04c89efcb565ec8$var$cursorByChar(view, true);\n/**\nMove the selection one character backward.\n*/ const $d04c89efcb565ec8$export$6ddc33d0aa7a1b65 = (view)=>$d04c89efcb565ec8$var$cursorByChar(view, false);\nfunction $d04c89efcb565ec8$var$cursorByGroup(view, forward) {\n    return $d04c89efcb565ec8$var$moveSel(view, (range)=>range.empty ? view.moveByGroup(range, forward) : $d04c89efcb565ec8$var$rangeEnd(range, forward));\n}\n/**\nMove the selection to the left across one group of word or\nnon-word (but also non-space) characters.\n*/ const $d04c89efcb565ec8$export$137fb1611fb38377 = (view)=>$d04c89efcb565ec8$var$cursorByGroup(view, !$d04c89efcb565ec8$var$ltrAtCursor(view));\n/**\nMove the selection one group to the right.\n*/ const $d04c89efcb565ec8$export$8fb2c619d55341b4 = (view)=>$d04c89efcb565ec8$var$cursorByGroup(view, $d04c89efcb565ec8$var$ltrAtCursor(view));\n/**\nMove the selection one group forward.\n*/ const $d04c89efcb565ec8$export$ce8d94762dbdebb8 = (view)=>$d04c89efcb565ec8$var$cursorByGroup(view, true);\n/**\nMove the selection one group backward.\n*/ const $d04c89efcb565ec8$export$dd83d1d646f184d8 = (view)=>$d04c89efcb565ec8$var$cursorByGroup(view, false);\nfunction $d04c89efcb565ec8$var$moveBySubword(view, range, forward) {\n    let categorize = view.state.charCategorizer(range.from);\n    return view.moveByChar(range, forward, (start)=>{\n        let cat = (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Space, pos = range.from;\n        let done = false, sawUpper = false, sawLower = false;\n        let step = (next)=>{\n            if (done) return false;\n            pos += forward ? next.length : -next.length;\n            let nextCat = categorize(next), ahead;\n            if (nextCat == (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word && next.charCodeAt(0) < 128 && /[\\W_]/.test(next)) nextCat = -1; // Treat word punctuation specially\n            if (cat == (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Space) cat = nextCat;\n            if (cat != nextCat) return false;\n            if (cat == (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word) {\n                if (next.toLowerCase() == next) {\n                    if (!forward && sawUpper) return false;\n                    sawLower = true;\n                } else if (sawLower) {\n                    if (forward) return false;\n                    done = true;\n                } else {\n                    if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word && ahead.toLowerCase() == ahead) return false;\n                    sawUpper = true;\n                }\n            }\n            return true;\n        };\n        step(start);\n        return step;\n    });\n}\nfunction $d04c89efcb565ec8$var$cursorBySubword(view, forward) {\n    return $d04c89efcb565ec8$var$moveSel(view, (range)=>range.empty ? $d04c89efcb565ec8$var$moveBySubword(view, range, forward) : $d04c89efcb565ec8$var$rangeEnd(range, forward));\n}\n/**\nMove the selection one group or camel-case subword forward.\n*/ const $d04c89efcb565ec8$export$d969a5b0dca9c3e2 = (view)=>$d04c89efcb565ec8$var$cursorBySubword(view, true);\n/**\nMove the selection one group or camel-case subword backward.\n*/ const $d04c89efcb565ec8$export$ade35f5607ad3d82 = (view)=>$d04c89efcb565ec8$var$cursorBySubword(view, false);\nfunction $d04c89efcb565ec8$var$interestingNode(state, node, bracketProp) {\n    if (node.type.prop(bracketProp)) return true;\n    let len = node.to - node.from;\n    return len && (len > 2 || /[^\\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;\n}\nfunction $d04c89efcb565ec8$var$moveBySyntax(state, start, forward) {\n    let pos = (0, $14831f1c512a5db9$export$7fc98e56a4ca6be1)(state).resolveInner(start.head);\n    let bracketProp = forward ? (0, $4d476c57e17b24ca$export$b8034b9bc18acd90).closedBy : (0, $4d476c57e17b24ca$export$b8034b9bc18acd90).openedBy;\n    // Scan forward through child nodes to see if there's an interesting\n    // node ahead.\n    for(let at = start.head;;){\n        let next = forward ? pos.childAfter(at) : pos.childBefore(at);\n        if (!next) break;\n        if ($d04c89efcb565ec8$var$interestingNode(state, next, bracketProp)) pos = next;\n        else at = forward ? next.to : next.from;\n    }\n    let bracket = pos.type.prop(bracketProp), match, newPos;\n    if (bracket && (match = forward ? (0, $14831f1c512a5db9$export$3391942603e90cda)(state, pos.from, 1) : (0, $14831f1c512a5db9$export$3391942603e90cda)(state, pos.to, -1)) && match.matched) newPos = forward ? match.end.to : match.end.from;\n    else newPos = forward ? pos.to : pos.from;\n    return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(newPos, forward ? -1 : 1);\n}\n/**\nMove the cursor over the next syntactic element to the left.\n*/ const $d04c89efcb565ec8$export$1e53c014543c10bb = (view)=>$d04c89efcb565ec8$var$moveSel(view, (range)=>$d04c89efcb565ec8$var$moveBySyntax(view.state, range, !$d04c89efcb565ec8$var$ltrAtCursor(view)));\n/**\nMove the cursor over the next syntactic element to the right.\n*/ const $d04c89efcb565ec8$export$62c6dc33f5d01e39 = (view)=>$d04c89efcb565ec8$var$moveSel(view, (range)=>$d04c89efcb565ec8$var$moveBySyntax(view.state, range, $d04c89efcb565ec8$var$ltrAtCursor(view)));\nfunction $d04c89efcb565ec8$var$cursorByLine(view, forward) {\n    return $d04c89efcb565ec8$var$moveSel(view, (range)=>{\n        if (!range.empty) return $d04c89efcb565ec8$var$rangeEnd(range, forward);\n        let moved = view.moveVertically(range, forward);\n        return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);\n    });\n}\n/**\nMove the selection one line up.\n*/ const $d04c89efcb565ec8$export$fe179dad0485d99d = (view)=>$d04c89efcb565ec8$var$cursorByLine(view, false);\n/**\nMove the selection one line down.\n*/ const $d04c89efcb565ec8$export$75f9b75ffb1a9dc5 = (view)=>$d04c89efcb565ec8$var$cursorByLine(view, true);\nfunction $d04c89efcb565ec8$var$pageInfo(view) {\n    let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;\n    let marginTop = 0, marginBottom = 0, height;\n    if (selfScroll) {\n        for (let source of view.state.facet((0, $071334078f8d3f8a$export$eece2fccabbb77c5).scrollMargins)){\n            let margins = source(view);\n            if (margins === null || margins === void 0 ? void 0 : margins.top) marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);\n            if (margins === null || margins === void 0 ? void 0 : margins.bottom) marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);\n        }\n        height = view.scrollDOM.clientHeight - marginTop - marginBottom;\n    } else height = (view.dom.ownerDocument.defaultView || window).innerHeight;\n    return {\n        marginTop: marginTop,\n        marginBottom: marginBottom,\n        selfScroll: selfScroll,\n        height: Math.max(view.defaultLineHeight, height - 5)\n    };\n}\nfunction $d04c89efcb565ec8$var$cursorByPage(view, forward) {\n    let page = $d04c89efcb565ec8$var$pageInfo(view);\n    let { state: state } = view, selection = $d04c89efcb565ec8$var$updateSel(state.selection, (range)=>{\n        return range.empty ? view.moveVertically(range, forward, page.height) : $d04c89efcb565ec8$var$rangeEnd(range, forward);\n    });\n    if (selection.eq(state.selection)) return false;\n    let effect;\n    if (page.selfScroll) {\n        let startPos = view.coordsAtPos(state.selection.main.head);\n        let scrollRect = view.scrollDOM.getBoundingClientRect();\n        let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;\n        if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom) effect = (0, $071334078f8d3f8a$export$eece2fccabbb77c5).scrollIntoView(selection.main.head, {\n            y: \"start\",\n            yMargin: startPos.top - scrollTop\n        });\n    }\n    view.dispatch($d04c89efcb565ec8$var$setSel(state, selection), {\n        effects: effect\n    });\n    return true;\n}\n/**\nMove the selection one page up.\n*/ const $d04c89efcb565ec8$export$546ec71a9f854193 = (view)=>$d04c89efcb565ec8$var$cursorByPage(view, false);\n/**\nMove the selection one page down.\n*/ const $d04c89efcb565ec8$export$6e407c2072d437f4 = (view)=>$d04c89efcb565ec8$var$cursorByPage(view, true);\nfunction $d04c89efcb565ec8$var$moveByLineBoundary(view, start, forward) {\n    let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);\n    if (moved.head == start.head && moved.head != (forward ? line.to : line.from)) moved = view.moveToLineBoundary(start, forward, false);\n    if (!forward && moved.head == line.from && line.length) {\n        let space = /^\\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;\n        if (space && start.head != line.from + space) moved = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(line.from + space);\n    }\n    return moved;\n}\n/**\nMove the selection to the next line wrap point, or to the end of\nthe line if there isn't one left on this line.\n*/ const $d04c89efcb565ec8$export$b59ae3b25af6ea13 = (view)=>$d04c89efcb565ec8$var$moveSel(view, (range)=>$d04c89efcb565ec8$var$moveByLineBoundary(view, range, true));\n/**\nMove the selection to previous line wrap point, or failing that to\nthe start of the line. If the line is indented, and the cursor\nisn't already at the end of the indentation, this will move to the\nend of the indentation instead of the start of the line.\n*/ const $d04c89efcb565ec8$export$64939ebc49b03818 = (view)=>$d04c89efcb565ec8$var$moveSel(view, (range)=>$d04c89efcb565ec8$var$moveByLineBoundary(view, range, false));\n/**\nMove the selection one line wrap point to the left.\n*/ const $d04c89efcb565ec8$export$515c8c77cfbd2e73 = (view)=>$d04c89efcb565ec8$var$moveSel(view, (range)=>$d04c89efcb565ec8$var$moveByLineBoundary(view, range, !$d04c89efcb565ec8$var$ltrAtCursor(view)));\n/**\nMove the selection one line wrap point to the right.\n*/ const $d04c89efcb565ec8$export$912e453a1e062a62 = (view)=>$d04c89efcb565ec8$var$moveSel(view, (range)=>$d04c89efcb565ec8$var$moveByLineBoundary(view, range, $d04c89efcb565ec8$var$ltrAtCursor(view)));\n/**\nMove the selection to the start of the line.\n*/ const $d04c89efcb565ec8$export$9c7dea99650bd512 = (view)=>$d04c89efcb565ec8$var$moveSel(view, (range)=>(0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(view.lineBlockAt(range.head).from, 1));\n/**\nMove the selection to the end of the line.\n*/ const $d04c89efcb565ec8$export$2a3cdaf3ab2dcbf2 = (view)=>$d04c89efcb565ec8$var$moveSel(view, (range)=>(0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(view.lineBlockAt(range.head).to, -1));\nfunction $d04c89efcb565ec8$var$toMatchingBracket(state, dispatch, extend) {\n    let found = false, selection = $d04c89efcb565ec8$var$updateSel(state.selection, (range)=>{\n        let matching = (0, $14831f1c512a5db9$export$3391942603e90cda)(state, range.head, -1) || (0, $14831f1c512a5db9$export$3391942603e90cda)(state, range.head, 1) || range.head > 0 && (0, $14831f1c512a5db9$export$3391942603e90cda)(state, range.head - 1, 1) || range.head < state.doc.length && (0, $14831f1c512a5db9$export$3391942603e90cda)(state, range.head + 1, -1);\n        if (!matching || !matching.end) return range;\n        found = true;\n        let head = matching.start.from == range.head ? matching.end.to : matching.end.from;\n        return extend ? (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(range.anchor, head) : (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(head);\n    });\n    if (!found) return false;\n    dispatch($d04c89efcb565ec8$var$setSel(state, selection));\n    return true;\n}\n/**\nMove the selection to the bracket matching the one it is currently\non, if any.\n*/ const $d04c89efcb565ec8$export$e5a7e1f2d38b1f6a = ({ state: state, dispatch: dispatch })=>$d04c89efcb565ec8$var$toMatchingBracket(state, dispatch, false);\n/**\nExtend the selection to the bracket matching the one the selection\nhead is currently on, if any.\n*/ const $d04c89efcb565ec8$export$a56168b85007a381 = ({ state: state, dispatch: dispatch })=>$d04c89efcb565ec8$var$toMatchingBracket(state, dispatch, true);\nfunction $d04c89efcb565ec8$var$extendSel(view, how) {\n    let selection = $d04c89efcb565ec8$var$updateSel(view.state.selection, (range)=>{\n        let head = how(range);\n        return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);\n    });\n    if (selection.eq(view.state.selection)) return false;\n    view.dispatch($d04c89efcb565ec8$var$setSel(view.state, selection));\n    return true;\n}\nfunction $d04c89efcb565ec8$var$selectByChar(view, forward) {\n    return $d04c89efcb565ec8$var$extendSel(view, (range)=>view.moveByChar(range, forward));\n}\n/**\nMove the selection head one character to the left, while leaving\nthe anchor in place.\n*/ const $d04c89efcb565ec8$export$639be832433387f = (view)=>$d04c89efcb565ec8$var$selectByChar(view, !$d04c89efcb565ec8$var$ltrAtCursor(view));\n/**\nMove the selection head one character to the right.\n*/ const $d04c89efcb565ec8$export$49e3d65796d89132 = (view)=>$d04c89efcb565ec8$var$selectByChar(view, $d04c89efcb565ec8$var$ltrAtCursor(view));\n/**\nMove the selection head one character forward.\n*/ const $d04c89efcb565ec8$export$6a18f0ec4e3aa4ba = (view)=>$d04c89efcb565ec8$var$selectByChar(view, true);\n/**\nMove the selection head one character backward.\n*/ const $d04c89efcb565ec8$export$1132822fa6924c1d = (view)=>$d04c89efcb565ec8$var$selectByChar(view, false);\nfunction $d04c89efcb565ec8$var$selectByGroup(view, forward) {\n    return $d04c89efcb565ec8$var$extendSel(view, (range)=>view.moveByGroup(range, forward));\n}\n/**\nMove the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to\nthe left.\n*/ const $d04c89efcb565ec8$export$ef839611b4c2ba40 = (view)=>$d04c89efcb565ec8$var$selectByGroup(view, !$d04c89efcb565ec8$var$ltrAtCursor(view));\n/**\nMove the selection head one group to the right.\n*/ const $d04c89efcb565ec8$export$5ebbb4cf65fe8a74 = (view)=>$d04c89efcb565ec8$var$selectByGroup(view, $d04c89efcb565ec8$var$ltrAtCursor(view));\n/**\nMove the selection head one group forward.\n*/ const $d04c89efcb565ec8$export$53ddb317471acf76 = (view)=>$d04c89efcb565ec8$var$selectByGroup(view, true);\n/**\nMove the selection head one group backward.\n*/ const $d04c89efcb565ec8$export$65a2ce60964fa778 = (view)=>$d04c89efcb565ec8$var$selectByGroup(view, false);\nfunction $d04c89efcb565ec8$var$selectBySubword(view, forward) {\n    return $d04c89efcb565ec8$var$extendSel(view, (range)=>$d04c89efcb565ec8$var$moveBySubword(view, range, forward));\n}\n/**\nMove the selection head one group or camel-case subword forward.\n*/ const $d04c89efcb565ec8$export$c4f4d945a8760145 = (view)=>$d04c89efcb565ec8$var$selectBySubword(view, true);\n/**\nMove the selection head one group or subword backward.\n*/ const $d04c89efcb565ec8$export$3a6caa1f1abce2e2 = (view)=>$d04c89efcb565ec8$var$selectBySubword(view, false);\n/**\nMove the selection head over the next syntactic element to the left.\n*/ const $d04c89efcb565ec8$export$67b15be4414061b5 = (view)=>$d04c89efcb565ec8$var$extendSel(view, (range)=>$d04c89efcb565ec8$var$moveBySyntax(view.state, range, !$d04c89efcb565ec8$var$ltrAtCursor(view)));\n/**\nMove the selection head over the next syntactic element to the right.\n*/ const $d04c89efcb565ec8$export$74aa476df7791ce = (view)=>$d04c89efcb565ec8$var$extendSel(view, (range)=>$d04c89efcb565ec8$var$moveBySyntax(view.state, range, $d04c89efcb565ec8$var$ltrAtCursor(view)));\nfunction $d04c89efcb565ec8$var$selectByLine(view, forward) {\n    return $d04c89efcb565ec8$var$extendSel(view, (range)=>view.moveVertically(range, forward));\n}\n/**\nMove the selection head one line up.\n*/ const $d04c89efcb565ec8$export$92aa693a1ecd7061 = (view)=>$d04c89efcb565ec8$var$selectByLine(view, false);\n/**\nMove the selection head one line down.\n*/ const $d04c89efcb565ec8$export$bf847527697a3040 = (view)=>$d04c89efcb565ec8$var$selectByLine(view, true);\nfunction $d04c89efcb565ec8$var$selectByPage(view, forward) {\n    return $d04c89efcb565ec8$var$extendSel(view, (range)=>view.moveVertically(range, forward, $d04c89efcb565ec8$var$pageInfo(view).height));\n}\n/**\nMove the selection head one page up.\n*/ const $d04c89efcb565ec8$export$61eab34d4ff5cbaf = (view)=>$d04c89efcb565ec8$var$selectByPage(view, false);\n/**\nMove the selection head one page down.\n*/ const $d04c89efcb565ec8$export$a4c186a0dadaf91c = (view)=>$d04c89efcb565ec8$var$selectByPage(view, true);\n/**\nMove the selection head to the next line boundary.\n*/ const $d04c89efcb565ec8$export$df223d0097d57a86 = (view)=>$d04c89efcb565ec8$var$extendSel(view, (range)=>$d04c89efcb565ec8$var$moveByLineBoundary(view, range, true));\n/**\nMove the selection head to the previous line boundary.\n*/ const $d04c89efcb565ec8$export$643176ee603b8e87 = (view)=>$d04c89efcb565ec8$var$extendSel(view, (range)=>$d04c89efcb565ec8$var$moveByLineBoundary(view, range, false));\n/**\nMove the selection head one line boundary to the left.\n*/ const $d04c89efcb565ec8$export$769cc61da74090c5 = (view)=>$d04c89efcb565ec8$var$extendSel(view, (range)=>$d04c89efcb565ec8$var$moveByLineBoundary(view, range, !$d04c89efcb565ec8$var$ltrAtCursor(view)));\n/**\nMove the selection head one line boundary to the right.\n*/ const $d04c89efcb565ec8$export$de427496204690a6 = (view)=>$d04c89efcb565ec8$var$extendSel(view, (range)=>$d04c89efcb565ec8$var$moveByLineBoundary(view, range, $d04c89efcb565ec8$var$ltrAtCursor(view)));\n/**\nMove the selection head to the start of the line.\n*/ const $d04c89efcb565ec8$export$a0e1e86f753956a4 = (view)=>$d04c89efcb565ec8$var$extendSel(view, (range)=>(0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(view.lineBlockAt(range.head).from));\n/**\nMove the selection head to the end of the line.\n*/ const $d04c89efcb565ec8$export$bd34a38d148e23af = (view)=>$d04c89efcb565ec8$var$extendSel(view, (range)=>(0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(view.lineBlockAt(range.head).to));\n/**\nMove the selection to the start of the document.\n*/ const $d04c89efcb565ec8$export$ff7ed6e6e1cb317f = ({ state: state, dispatch: dispatch })=>{\n    dispatch($d04c89efcb565ec8$var$setSel(state, {\n        anchor: 0\n    }));\n    return true;\n};\n/**\nMove the selection to the end of the document.\n*/ const $d04c89efcb565ec8$export$b12ef1671b2836da = ({ state: state, dispatch: dispatch })=>{\n    dispatch($d04c89efcb565ec8$var$setSel(state, {\n        anchor: state.doc.length\n    }));\n    return true;\n};\n/**\nMove the selection head to the start of the document.\n*/ const $d04c89efcb565ec8$export$aa525ee829cc26b = ({ state: state, dispatch: dispatch })=>{\n    dispatch($d04c89efcb565ec8$var$setSel(state, {\n        anchor: state.selection.main.anchor,\n        head: 0\n    }));\n    return true;\n};\n/**\nMove the selection head to the end of the document.\n*/ const $d04c89efcb565ec8$export$fff0131cdd9694fe = ({ state: state, dispatch: dispatch })=>{\n    dispatch($d04c89efcb565ec8$var$setSel(state, {\n        anchor: state.selection.main.anchor,\n        head: state.doc.length\n    }));\n    return true;\n};\n/**\nSelect the entire document.\n*/ const $d04c89efcb565ec8$export$90aca4adda6ff0f5 = ({ state: state, dispatch: dispatch })=>{\n    dispatch(state.update({\n        selection: {\n            anchor: 0,\n            head: state.doc.length\n        },\n        userEvent: \"select\"\n    }));\n    return true;\n};\n/**\nExpand the selection to cover entire lines.\n*/ const $d04c89efcb565ec8$export$e41c12847640c21 = ({ state: state, dispatch: dispatch })=>{\n    let ranges = $d04c89efcb565ec8$var$selectedLineBlocks(state).map(({ from: from, to: to })=>(0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(from, Math.min(to + 1, state.doc.length)));\n    dispatch(state.update({\n        selection: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create(ranges),\n        userEvent: \"select\"\n    }));\n    return true;\n};\n/**\nSelect the next syntactic construct that is larger than the\nselection. Note that this will only work insofar as the language\n[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full\nsyntax tree.\n*/ const $d04c89efcb565ec8$export$f38a48fa120d50ce = ({ state: state, dispatch: dispatch })=>{\n    let selection = $d04c89efcb565ec8$var$updateSel(state.selection, (range)=>{\n        var _a;\n        let context = (0, $14831f1c512a5db9$export$7fc98e56a4ca6be1)(state).resolveInner(range.head, 1);\n        while(!(context.from < range.from && context.to >= range.to || context.to > range.to && context.from <= range.from || !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))context = context.parent;\n        return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(context.to, context.from);\n    });\n    dispatch($d04c89efcb565ec8$var$setSel(state, selection));\n    return true;\n};\n/**\nSimplify the current selection. When multiple ranges are selected,\nreduce it to its main range. Otherwise, if the selection is\nnon-empty, convert it to a cursor selection.\n*/ const $d04c89efcb565ec8$export$2f90cebc0d40abf = ({ state: state, dispatch: dispatch })=>{\n    let cur = state.selection, selection = null;\n    if (cur.ranges.length > 1) selection = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create([\n        cur.main\n    ]);\n    else if (!cur.main.empty) selection = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create([\n        (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(cur.main.head)\n    ]);\n    if (!selection) return false;\n    dispatch($d04c89efcb565ec8$var$setSel(state, selection));\n    return true;\n};\nfunction $d04c89efcb565ec8$var$deleteBy(target, by) {\n    if (target.state.readOnly) return false;\n    let event = \"delete.selection\", { state: state } = target;\n    let changes = state.changeByRange((range)=>{\n        let { from: from, to: to } = range;\n        if (from == to) {\n            let towards = by(from);\n            if (towards < from) {\n                event = \"delete.backward\";\n                towards = $d04c89efcb565ec8$var$skipAtomic(target, towards, false);\n            } else if (towards > from) {\n                event = \"delete.forward\";\n                towards = $d04c89efcb565ec8$var$skipAtomic(target, towards, true);\n            }\n            from = Math.min(from, towards);\n            to = Math.max(to, towards);\n        } else {\n            from = $d04c89efcb565ec8$var$skipAtomic(target, from, false);\n            to = $d04c89efcb565ec8$var$skipAtomic(target, to, true);\n        }\n        return from == to ? {\n            range: range\n        } : {\n            changes: {\n                from: from,\n                to: to\n            },\n            range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(from)\n        };\n    });\n    if (changes.changes.empty) return false;\n    target.dispatch(state.update(changes, {\n        scrollIntoView: true,\n        userEvent: event,\n        effects: event == \"delete.selection\" ? (0, $071334078f8d3f8a$export$eece2fccabbb77c5).announce.of(state.phrase(\"Selection deleted\")) : undefined\n    }));\n    return true;\n}\nfunction $d04c89efcb565ec8$var$skipAtomic(target, pos, forward) {\n    if (target instanceof (0, $071334078f8d3f8a$export$eece2fccabbb77c5)) for (let ranges of target.state.facet((0, $071334078f8d3f8a$export$eece2fccabbb77c5).atomicRanges).map((f)=>f(target)))ranges.between(pos, pos, (from, to)=>{\n        if (from < pos && to > pos) pos = forward ? to : from;\n    });\n    return pos;\n}\nconst $d04c89efcb565ec8$var$deleteByChar = (target, forward)=>$d04c89efcb565ec8$var$deleteBy(target, (pos)=>{\n        let { state: state } = target, line = state.doc.lineAt(pos), before, targetPos;\n        if (!forward && pos > line.from && pos < line.from + 200 && !/[^ \\t]/.test(before = line.text.slice(0, pos - line.from))) {\n            if (before[before.length - 1] == \"\t\") return pos - 1;\n            let col = (0, $ccfb9497d8ef598f$export$20b4ab289374d0ac)(before, state.tabSize), drop = col % (0, $14831f1c512a5db9$export$ad3205d09311a797)(state) || (0, $14831f1c512a5db9$export$ad3205d09311a797)(state);\n            for(let i = 0; i < drop && before[before.length - 1 - i] == \" \"; i++)pos--;\n            targetPos = pos;\n        } else {\n            targetPos = (0, $ccfb9497d8ef598f$export$a0fa439fd515e1ed)(line.text, pos - line.from, forward, forward) + line.from;\n            if (targetPos == pos && line.number != (forward ? state.doc.lines : 1)) targetPos += forward ? 1 : -1;\n        }\n        return targetPos;\n    });\n/**\nDelete the selection, or, for cursor selections, the character\nbefore the cursor.\n*/ const $d04c89efcb565ec8$export$1e8a14efe7ca9a33 = (view)=>$d04c89efcb565ec8$var$deleteByChar(view, false);\n/**\nDelete the selection or the character after the cursor.\n*/ const $d04c89efcb565ec8$export$d41683a0f042cb80 = (view)=>$d04c89efcb565ec8$var$deleteByChar(view, true);\nconst $d04c89efcb565ec8$var$deleteByGroup = (target, forward)=>$d04c89efcb565ec8$var$deleteBy(target, (start)=>{\n        let pos = start, { state: state } = target, line = state.doc.lineAt(pos);\n        let categorize = state.charCategorizer(pos);\n        for(let cat = null;;){\n            if (pos == (forward ? line.to : line.from)) {\n                if (pos == start && line.number != (forward ? state.doc.lines : 1)) pos += forward ? 1 : -1;\n                break;\n            }\n            let next = (0, $ccfb9497d8ef598f$export$a0fa439fd515e1ed)(line.text, pos - line.from, forward) + line.from;\n            let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);\n            let nextCat = categorize(nextChar);\n            if (cat != null && nextCat != cat) break;\n            if (nextChar != \" \" || pos != start) cat = nextCat;\n            pos = next;\n        }\n        return pos;\n    });\n/**\nDelete the selection or backward until the end of the next\n[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of\nwhitespace when they consist of a single space.\n*/ const $d04c89efcb565ec8$export$3072f591ab219e94 = (target)=>$d04c89efcb565ec8$var$deleteByGroup(target, false);\n/**\nDelete the selection or forward until the end of the next group.\n*/ const $d04c89efcb565ec8$export$56a4e2ef21b58242 = (target)=>$d04c89efcb565ec8$var$deleteByGroup(target, true);\n/**\nDelete the selection, or, if it is a cursor selection, delete to\nthe end of the line. If the cursor is directly at the end of the\nline, delete the line break after it.\n*/ const $d04c89efcb565ec8$export$ae3820c4ce0e9c92 = (view)=>$d04c89efcb565ec8$var$deleteBy(view, (pos)=>{\n        let lineEnd = view.lineBlockAt(pos).to;\n        return pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1);\n    });\n/**\nDelete the selection, or, if it is a cursor selection, delete to\nthe start of the line. If the cursor is directly at the start of the\nline, delete the line break before it.\n*/ const $d04c89efcb565ec8$export$dc80e21fb31e84a5 = (view)=>$d04c89efcb565ec8$var$deleteBy(view, (pos)=>{\n        let lineStart = view.lineBlockAt(pos).from;\n        return pos > lineStart ? lineStart : Math.max(0, pos - 1);\n    });\n/**\nDelete all whitespace directly before a line end from the\ndocument.\n*/ const $d04c89efcb565ec8$export$8acd3a9fe3872724 = ({ state: state, dispatch: dispatch })=>{\n    if (state.readOnly) return false;\n    let changes = [];\n    for(let pos = 0, prev = \"\", iter = state.doc.iter();;){\n        iter.next();\n        if (iter.lineBreak || iter.done) {\n            let trailing = prev.search(/\\s+$/);\n            if (trailing > -1) changes.push({\n                from: pos - (prev.length - trailing),\n                to: pos\n            });\n            if (iter.done) break;\n            prev = \"\";\n        } else prev = iter.value;\n        pos += iter.value.length;\n    }\n    if (!changes.length) return false;\n    dispatch(state.update({\n        changes: changes,\n        userEvent: \"delete\"\n    }));\n    return true;\n};\n/**\nReplace each selection range with a line break, leaving the cursor\non the line before the break.\n*/ const $d04c89efcb565ec8$export$a258d4581e1d5d3c = ({ state: state, dispatch: dispatch })=>{\n    if (state.readOnly) return false;\n    let changes = state.changeByRange((range)=>{\n        return {\n            changes: {\n                from: range.from,\n                to: range.to,\n                insert: (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).of([\n                    \"\",\n                    \"\"\n                ])\n            },\n            range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(range.from)\n        };\n    });\n    dispatch(state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input\"\n    }));\n    return true;\n};\n/**\nFlip the characters before and after the cursor(s).\n*/ const $d04c89efcb565ec8$export$55467a37288e4063 = ({ state: state, dispatch: dispatch })=>{\n    if (state.readOnly) return false;\n    let changes = state.changeByRange((range)=>{\n        if (!range.empty || range.from == 0 || range.from == state.doc.length) return {\n            range: range\n        };\n        let pos = range.from, line = state.doc.lineAt(pos);\n        let from = pos == line.from ? pos - 1 : (0, $ccfb9497d8ef598f$export$a0fa439fd515e1ed)(line.text, pos - line.from, false) + line.from;\n        let to = pos == line.to ? pos + 1 : (0, $ccfb9497d8ef598f$export$a0fa439fd515e1ed)(line.text, pos - line.from, true) + line.from;\n        return {\n            changes: {\n                from: from,\n                to: to,\n                insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos))\n            },\n            range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(to)\n        };\n    });\n    if (changes.changes.empty) return false;\n    dispatch(state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"move.character\"\n    }));\n    return true;\n};\nfunction $d04c89efcb565ec8$var$selectedLineBlocks(state) {\n    let blocks = [], upto = -1;\n    for (let range of state.selection.ranges){\n        let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);\n        if (!range.empty && range.to == endLine.from) endLine = state.doc.lineAt(range.to - 1);\n        if (upto >= startLine.number) {\n            let prev = blocks[blocks.length - 1];\n            prev.to = endLine.to;\n            prev.ranges.push(range);\n        } else blocks.push({\n            from: startLine.from,\n            to: endLine.to,\n            ranges: [\n                range\n            ]\n        });\n        upto = endLine.number + 1;\n    }\n    return blocks;\n}\nfunction $d04c89efcb565ec8$var$moveLine(state, dispatch, forward) {\n    if (state.readOnly) return false;\n    let changes = [], ranges = [];\n    for (let block of $d04c89efcb565ec8$var$selectedLineBlocks(state)){\n        if (forward ? block.to == state.doc.length : block.from == 0) continue;\n        let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);\n        let size = nextLine.length + 1;\n        if (forward) {\n            changes.push({\n                from: block.to,\n                to: nextLine.to\n            }, {\n                from: block.from,\n                insert: nextLine.text + state.lineBreak\n            });\n            for (let r of block.ranges)ranges.push((0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));\n        } else {\n            changes.push({\n                from: nextLine.from,\n                to: block.from\n            }, {\n                from: block.to,\n                insert: state.lineBreak + nextLine.text\n            });\n            for (let r of block.ranges)ranges.push((0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(r.anchor - size, r.head - size));\n        }\n    }\n    if (!changes.length) return false;\n    dispatch(state.update({\n        changes: changes,\n        scrollIntoView: true,\n        selection: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create(ranges, state.selection.mainIndex),\n        userEvent: \"move.line\"\n    }));\n    return true;\n}\n/**\nMove the selected lines up one line.\n*/ const $d04c89efcb565ec8$export$c4eebaf75cfae23e = ({ state: state, dispatch: dispatch })=>$d04c89efcb565ec8$var$moveLine(state, dispatch, false);\n/**\nMove the selected lines down one line.\n*/ const $d04c89efcb565ec8$export$ac19ae98a6fcd34c = ({ state: state, dispatch: dispatch })=>$d04c89efcb565ec8$var$moveLine(state, dispatch, true);\nfunction $d04c89efcb565ec8$var$copyLine(state, dispatch, forward) {\n    if (state.readOnly) return false;\n    let changes = [];\n    for (let block of $d04c89efcb565ec8$var$selectedLineBlocks(state))if (forward) changes.push({\n        from: block.from,\n        insert: state.doc.slice(block.from, block.to) + state.lineBreak\n    });\n    else changes.push({\n        from: block.to,\n        insert: state.lineBreak + state.doc.slice(block.from, block.to)\n    });\n    dispatch(state.update({\n        changes: changes,\n        scrollIntoView: true,\n        userEvent: \"input.copyline\"\n    }));\n    return true;\n}\n/**\nCreate a copy of the selected lines. Keep the selection in the top copy.\n*/ const $d04c89efcb565ec8$export$c3798d29213e527c = ({ state: state, dispatch: dispatch })=>$d04c89efcb565ec8$var$copyLine(state, dispatch, false);\n/**\nCreate a copy of the selected lines. Keep the selection in the bottom copy.\n*/ const $d04c89efcb565ec8$export$1ad385c375816d2f = ({ state: state, dispatch: dispatch })=>$d04c89efcb565ec8$var$copyLine(state, dispatch, true);\n/**\nDelete selected lines.\n*/ const $d04c89efcb565ec8$export$aba0d4cd8923f1ae = (view)=>{\n    if (view.state.readOnly) return false;\n    let { state: state } = view, changes = state.changes($d04c89efcb565ec8$var$selectedLineBlocks(state).map(({ from: from, to: to })=>{\n        if (from > 0) from--;\n        else if (to < state.doc.length) to++;\n        return {\n            from: from,\n            to: to\n        };\n    }));\n    let selection = $d04c89efcb565ec8$var$updateSel(state.selection, (range)=>view.moveVertically(range, true)).map(changes);\n    view.dispatch({\n        changes: changes,\n        selection: selection,\n        scrollIntoView: true,\n        userEvent: \"delete.line\"\n    });\n    return true;\n};\n/**\nReplace the selection with a newline.\n*/ const $d04c89efcb565ec8$export$e7e1d174affeae8d = ({ state: state, dispatch: dispatch })=>{\n    dispatch(state.update(state.replaceSelection(state.lineBreak), {\n        scrollIntoView: true,\n        userEvent: \"input\"\n    }));\n    return true;\n};\nfunction $d04c89efcb565ec8$var$isBetweenBrackets(state, pos) {\n    if (/\\(\\)|\\[\\]|\\{\\}/.test(state.sliceDoc(pos - 1, pos + 1))) return {\n        from: pos,\n        to: pos\n    };\n    let context = (0, $14831f1c512a5db9$export$7fc98e56a4ca6be1)(state).resolveInner(pos);\n    let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;\n    if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop((0, $4d476c57e17b24ca$export$b8034b9bc18acd90).closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from) return {\n        from: before.to,\n        to: after.from\n    };\n    return null;\n}\n/**\nReplace the selection with a newline and indent the newly created\nline(s). If the current line consists only of whitespace, this\nwill also delete that whitespace. When the cursor is between\nmatching brackets, an additional newline will be inserted after\nthe cursor.\n*/ const $d04c89efcb565ec8$export$668310d2b1aa07d5 = /*@__PURE__*/ $d04c89efcb565ec8$var$newlineAndIndent(false);\n/**\nCreate a blank, indented line below the current line.\n*/ const $d04c89efcb565ec8$export$2ff1ccbcf65d0770 = /*@__PURE__*/ $d04c89efcb565ec8$var$newlineAndIndent(true);\nfunction $d04c89efcb565ec8$var$newlineAndIndent(atEof) {\n    return ({ state: state, dispatch: dispatch })=>{\n        if (state.readOnly) return false;\n        let changes = state.changeByRange((range)=>{\n            let { from: from, to: to } = range, line = state.doc.lineAt(from);\n            let explode = !atEof && from == to && $d04c89efcb565ec8$var$isBetweenBrackets(state, from);\n            if (atEof) from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;\n            let cx = new (0, $14831f1c512a5db9$export$eeab79349cc2f7c8)(state, {\n                simulateBreak: from,\n                simulateDoubleBreak: !!explode\n            });\n            let indent = (0, $14831f1c512a5db9$export$a2d3c9dbce6d2211)(cx, from);\n            if (indent == null) indent = /^\\s*/.exec(state.doc.lineAt(from).text)[0].length;\n            while(to < line.to && /\\s/.test(line.text[to - line.from]))to++;\n            if (explode) ({ from: from, to: to } = explode);\n            else if (from > line.from && from < line.from + 100 && !/\\S/.test(line.text.slice(0, from))) from = line.from;\n            let insert = [\n                \"\",\n                (0, $14831f1c512a5db9$export$db5a40e207b40576)(state, indent)\n            ];\n            if (explode) insert.push((0, $14831f1c512a5db9$export$db5a40e207b40576)(state, cx.lineIndent(line.from, -1)));\n            return {\n                changes: {\n                    from: from,\n                    to: to,\n                    insert: (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).of(insert)\n                },\n                range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(from + 1 + insert[1].length)\n            };\n        });\n        dispatch(state.update(changes, {\n            scrollIntoView: true,\n            userEvent: \"input\"\n        }));\n        return true;\n    };\n}\nfunction $d04c89efcb565ec8$var$changeBySelectedLine(state, f) {\n    let atLine = -1;\n    return state.changeByRange((range)=>{\n        let changes = [];\n        for(let pos = range.from; pos <= range.to;){\n            let line = state.doc.lineAt(pos);\n            if (line.number > atLine && (range.empty || range.to > line.from)) {\n                f(line, changes, range);\n                atLine = line.number;\n            }\n            pos = line.to + 1;\n        }\n        let changeSet = state.changes(changes);\n        return {\n            changes: changes,\n            range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))\n        };\n    });\n}\n/**\nAuto-indent the selected lines. This uses the [indentation service\nfacet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent\ninformation.\n*/ const $d04c89efcb565ec8$export$ffcf50534fec79c3 = ({ state: state, dispatch: dispatch })=>{\n    if (state.readOnly) return false;\n    let updated = Object.create(null);\n    let context = new (0, $14831f1c512a5db9$export$eeab79349cc2f7c8)(state, {\n        overrideIndentation: (start)=>{\n            let found = updated[start];\n            return found == null ? -1 : found;\n        }\n    });\n    let changes = $d04c89efcb565ec8$var$changeBySelectedLine(state, (line, changes, range)=>{\n        let indent = (0, $14831f1c512a5db9$export$a2d3c9dbce6d2211)(context, line.from);\n        if (indent == null) return;\n        if (!/\\S/.test(line.text)) indent = 0;\n        let cur = /^\\s*/.exec(line.text)[0];\n        let norm = (0, $14831f1c512a5db9$export$db5a40e207b40576)(state, indent);\n        if (cur != norm || range.from < line.from + cur.length) {\n            updated[line.from] = indent;\n            changes.push({\n                from: line.from,\n                to: line.from + cur.length,\n                insert: norm\n            });\n        }\n    });\n    if (!changes.changes.empty) dispatch(state.update(changes, {\n        userEvent: \"indent\"\n    }));\n    return true;\n};\n/**\nAdd a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected\nlines.\n*/ const $d04c89efcb565ec8$export$a61bf6a946ffc826 = ({ state: state, dispatch: dispatch })=>{\n    if (state.readOnly) return false;\n    dispatch(state.update($d04c89efcb565ec8$var$changeBySelectedLine(state, (line, changes)=>{\n        changes.push({\n            from: line.from,\n            insert: state.facet((0, $14831f1c512a5db9$export$9e0d0c2ce4d3ceb5))\n        });\n    }), {\n        userEvent: \"input.indent\"\n    }));\n    return true;\n};\n/**\nRemove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all\nselected lines.\n*/ const $d04c89efcb565ec8$export$e4b902122bfe67ae = ({ state: state, dispatch: dispatch })=>{\n    if (state.readOnly) return false;\n    dispatch(state.update($d04c89efcb565ec8$var$changeBySelectedLine(state, (line, changes)=>{\n        let space = /^\\s*/.exec(line.text)[0];\n        if (!space) return;\n        let col = (0, $ccfb9497d8ef598f$export$20b4ab289374d0ac)(space, state.tabSize), keep = 0;\n        let insert = (0, $14831f1c512a5db9$export$db5a40e207b40576)(state, Math.max(0, col - (0, $14831f1c512a5db9$export$ad3205d09311a797)(state)));\n        while(keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))keep++;\n        changes.push({\n            from: line.from + keep,\n            to: line.from + space.length,\n            insert: insert.slice(keep)\n        });\n    }), {\n        userEvent: \"delete.dedent\"\n    }));\n    return true;\n};\n/**\nInsert a tab character at the cursor or, if something is selected,\nuse [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire\nselection.\n*/ const $d04c89efcb565ec8$export$89b2fa0b43bd10f8 = ({ state: state, dispatch: dispatch })=>{\n    if (state.selection.ranges.some((r)=>!r.empty)) return $d04c89efcb565ec8$export$a61bf6a946ffc826({\n        state: state,\n        dispatch: dispatch\n    });\n    dispatch(state.update(state.replaceSelection(\"\t\"), {\n        scrollIntoView: true,\n        userEvent: \"input\"\n    }));\n    return true;\n};\n/**\nArray of key bindings containing the Emacs-style bindings that are\navailable on macOS by default.\n\n - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)\n - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)\n - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)\n - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)\n - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)\n - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)\n - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)\n - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)\n - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)\n - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)\n - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)\n - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)\n - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)\n - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)\n*/ const $d04c89efcb565ec8$export$ef7c3246c722c48f = [\n    {\n        key: \"Ctrl-b\",\n        run: $d04c89efcb565ec8$export$3447f2b737925430,\n        shift: $d04c89efcb565ec8$export$639be832433387f,\n        preventDefault: true\n    },\n    {\n        key: \"Ctrl-f\",\n        run: $d04c89efcb565ec8$export$e45941411d098b,\n        shift: $d04c89efcb565ec8$export$49e3d65796d89132\n    },\n    {\n        key: \"Ctrl-p\",\n        run: $d04c89efcb565ec8$export$fe179dad0485d99d,\n        shift: $d04c89efcb565ec8$export$92aa693a1ecd7061\n    },\n    {\n        key: \"Ctrl-n\",\n        run: $d04c89efcb565ec8$export$75f9b75ffb1a9dc5,\n        shift: $d04c89efcb565ec8$export$bf847527697a3040\n    },\n    {\n        key: \"Ctrl-a\",\n        run: $d04c89efcb565ec8$export$9c7dea99650bd512,\n        shift: $d04c89efcb565ec8$export$a0e1e86f753956a4\n    },\n    {\n        key: \"Ctrl-e\",\n        run: $d04c89efcb565ec8$export$2a3cdaf3ab2dcbf2,\n        shift: $d04c89efcb565ec8$export$bd34a38d148e23af\n    },\n    {\n        key: \"Ctrl-d\",\n        run: $d04c89efcb565ec8$export$d41683a0f042cb80\n    },\n    {\n        key: \"Ctrl-h\",\n        run: $d04c89efcb565ec8$export$1e8a14efe7ca9a33\n    },\n    {\n        key: \"Ctrl-k\",\n        run: $d04c89efcb565ec8$export$ae3820c4ce0e9c92\n    },\n    {\n        key: \"Ctrl-Alt-h\",\n        run: $d04c89efcb565ec8$export$3072f591ab219e94\n    },\n    {\n        key: \"Ctrl-o\",\n        run: $d04c89efcb565ec8$export$a258d4581e1d5d3c\n    },\n    {\n        key: \"Ctrl-t\",\n        run: $d04c89efcb565ec8$export$55467a37288e4063\n    },\n    {\n        key: \"Ctrl-v\",\n        run: $d04c89efcb565ec8$export$6e407c2072d437f4\n    }\n];\n/**\nAn array of key bindings closely sticking to platform-standard or\nwidely used bindings. (This includes the bindings from\n[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`\nproperty changed to `mac`.)\n\n - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)\n - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)\n - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)\n - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)\n - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)\n - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)\n - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)\n - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)\n - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)\n - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)\n - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)\n - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)\n - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)\n - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)\n - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)\n - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)\n - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)\n - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)\n - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)\n - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)\n - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)\n - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)\n - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)\n - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)\n - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).\n - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).\n*/ const $d04c89efcb565ec8$export$ae5dfd95be821a1c = /*@__PURE__*/ [\n    {\n        key: \"ArrowLeft\",\n        run: $d04c89efcb565ec8$export$3447f2b737925430,\n        shift: $d04c89efcb565ec8$export$639be832433387f,\n        preventDefault: true\n    },\n    {\n        key: \"Mod-ArrowLeft\",\n        mac: \"Alt-ArrowLeft\",\n        run: $d04c89efcb565ec8$export$137fb1611fb38377,\n        shift: $d04c89efcb565ec8$export$ef839611b4c2ba40,\n        preventDefault: true\n    },\n    {\n        mac: \"Cmd-ArrowLeft\",\n        run: $d04c89efcb565ec8$export$515c8c77cfbd2e73,\n        shift: $d04c89efcb565ec8$export$769cc61da74090c5,\n        preventDefault: true\n    },\n    {\n        key: \"ArrowRight\",\n        run: $d04c89efcb565ec8$export$e45941411d098b,\n        shift: $d04c89efcb565ec8$export$49e3d65796d89132,\n        preventDefault: true\n    },\n    {\n        key: \"Mod-ArrowRight\",\n        mac: \"Alt-ArrowRight\",\n        run: $d04c89efcb565ec8$export$8fb2c619d55341b4,\n        shift: $d04c89efcb565ec8$export$5ebbb4cf65fe8a74,\n        preventDefault: true\n    },\n    {\n        mac: \"Cmd-ArrowRight\",\n        run: $d04c89efcb565ec8$export$912e453a1e062a62,\n        shift: $d04c89efcb565ec8$export$de427496204690a6,\n        preventDefault: true\n    },\n    {\n        key: \"ArrowUp\",\n        run: $d04c89efcb565ec8$export$fe179dad0485d99d,\n        shift: $d04c89efcb565ec8$export$92aa693a1ecd7061,\n        preventDefault: true\n    },\n    {\n        mac: \"Cmd-ArrowUp\",\n        run: $d04c89efcb565ec8$export$ff7ed6e6e1cb317f,\n        shift: $d04c89efcb565ec8$export$aa525ee829cc26b\n    },\n    {\n        mac: \"Ctrl-ArrowUp\",\n        run: $d04c89efcb565ec8$export$546ec71a9f854193,\n        shift: $d04c89efcb565ec8$export$61eab34d4ff5cbaf\n    },\n    {\n        key: \"ArrowDown\",\n        run: $d04c89efcb565ec8$export$75f9b75ffb1a9dc5,\n        shift: $d04c89efcb565ec8$export$bf847527697a3040,\n        preventDefault: true\n    },\n    {\n        mac: \"Cmd-ArrowDown\",\n        run: $d04c89efcb565ec8$export$b12ef1671b2836da,\n        shift: $d04c89efcb565ec8$export$fff0131cdd9694fe\n    },\n    {\n        mac: \"Ctrl-ArrowDown\",\n        run: $d04c89efcb565ec8$export$6e407c2072d437f4,\n        shift: $d04c89efcb565ec8$export$a4c186a0dadaf91c\n    },\n    {\n        key: \"PageUp\",\n        run: $d04c89efcb565ec8$export$546ec71a9f854193,\n        shift: $d04c89efcb565ec8$export$61eab34d4ff5cbaf\n    },\n    {\n        key: \"PageDown\",\n        run: $d04c89efcb565ec8$export$6e407c2072d437f4,\n        shift: $d04c89efcb565ec8$export$a4c186a0dadaf91c\n    },\n    {\n        key: \"Home\",\n        run: $d04c89efcb565ec8$export$64939ebc49b03818,\n        shift: $d04c89efcb565ec8$export$643176ee603b8e87,\n        preventDefault: true\n    },\n    {\n        key: \"Mod-Home\",\n        run: $d04c89efcb565ec8$export$ff7ed6e6e1cb317f,\n        shift: $d04c89efcb565ec8$export$aa525ee829cc26b\n    },\n    {\n        key: \"End\",\n        run: $d04c89efcb565ec8$export$b59ae3b25af6ea13,\n        shift: $d04c89efcb565ec8$export$df223d0097d57a86,\n        preventDefault: true\n    },\n    {\n        key: \"Mod-End\",\n        run: $d04c89efcb565ec8$export$b12ef1671b2836da,\n        shift: $d04c89efcb565ec8$export$fff0131cdd9694fe\n    },\n    {\n        key: \"Enter\",\n        run: $d04c89efcb565ec8$export$668310d2b1aa07d5\n    },\n    {\n        key: \"Mod-a\",\n        run: $d04c89efcb565ec8$export$90aca4adda6ff0f5\n    },\n    {\n        key: \"Backspace\",\n        run: $d04c89efcb565ec8$export$1e8a14efe7ca9a33,\n        shift: $d04c89efcb565ec8$export$1e8a14efe7ca9a33\n    },\n    {\n        key: \"Delete\",\n        run: $d04c89efcb565ec8$export$d41683a0f042cb80\n    },\n    {\n        key: \"Mod-Backspace\",\n        mac: \"Alt-Backspace\",\n        run: $d04c89efcb565ec8$export$3072f591ab219e94\n    },\n    {\n        key: \"Mod-Delete\",\n        mac: \"Alt-Delete\",\n        run: $d04c89efcb565ec8$export$56a4e2ef21b58242\n    },\n    {\n        mac: \"Mod-Backspace\",\n        run: $d04c89efcb565ec8$export$dc80e21fb31e84a5\n    },\n    {\n        mac: \"Mod-Delete\",\n        run: $d04c89efcb565ec8$export$ae3820c4ce0e9c92\n    }\n].concat(/*@__PURE__*/ $d04c89efcb565ec8$export$ef7c3246c722c48f.map((b)=>({\n        mac: b.key,\n        run: b.run,\n        shift: b.shift\n    })));\n/**\nThe default keymap. Includes all bindings from\n[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:\n\n- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)\n- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)\n- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)\n- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)\n- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)\n- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)\n- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)\n- Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)\n- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)\n- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)\n- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)\n- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)\n- Ctrl-Alt-\\\\ (Cmd-Alt-\\\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)\n- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)\n- Shift-Ctrl-\\\\ (Shift-Cmd-\\\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)\n- Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).\n- Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).\n*/ const $d04c89efcb565ec8$export$ab2e8d0ac5d2b69e = /*@__PURE__*/ [\n    {\n        key: \"Alt-ArrowLeft\",\n        mac: \"Ctrl-ArrowLeft\",\n        run: $d04c89efcb565ec8$export$1e53c014543c10bb,\n        shift: $d04c89efcb565ec8$export$67b15be4414061b5\n    },\n    {\n        key: \"Alt-ArrowRight\",\n        mac: \"Ctrl-ArrowRight\",\n        run: $d04c89efcb565ec8$export$62c6dc33f5d01e39,\n        shift: $d04c89efcb565ec8$export$74aa476df7791ce\n    },\n    {\n        key: \"Alt-ArrowUp\",\n        run: $d04c89efcb565ec8$export$c4eebaf75cfae23e\n    },\n    {\n        key: \"Shift-Alt-ArrowUp\",\n        run: $d04c89efcb565ec8$export$c3798d29213e527c\n    },\n    {\n        key: \"Alt-ArrowDown\",\n        run: $d04c89efcb565ec8$export$ac19ae98a6fcd34c\n    },\n    {\n        key: \"Shift-Alt-ArrowDown\",\n        run: $d04c89efcb565ec8$export$1ad385c375816d2f\n    },\n    {\n        key: \"Escape\",\n        run: $d04c89efcb565ec8$export$2f90cebc0d40abf\n    },\n    {\n        key: \"Mod-Enter\",\n        run: $d04c89efcb565ec8$export$2ff1ccbcf65d0770\n    },\n    {\n        key: \"Alt-l\",\n        mac: \"Ctrl-l\",\n        run: $d04c89efcb565ec8$export$e41c12847640c21\n    },\n    {\n        key: \"Mod-i\",\n        run: $d04c89efcb565ec8$export$f38a48fa120d50ce,\n        preventDefault: true\n    },\n    {\n        key: \"Mod-[\",\n        run: $d04c89efcb565ec8$export$e4b902122bfe67ae\n    },\n    {\n        key: \"Mod-]\",\n        run: $d04c89efcb565ec8$export$a61bf6a946ffc826\n    },\n    {\n        key: \"Mod-Alt-\\\\\",\n        run: $d04c89efcb565ec8$export$ffcf50534fec79c3\n    },\n    {\n        key: \"Shift-Mod-k\",\n        run: $d04c89efcb565ec8$export$aba0d4cd8923f1ae\n    },\n    {\n        key: \"Shift-Mod-\\\\\",\n        run: $d04c89efcb565ec8$export$e5a7e1f2d38b1f6a\n    },\n    {\n        key: \"Mod-/\",\n        run: $d04c89efcb565ec8$export$afbcdd0bff36c567\n    },\n    {\n        key: \"Alt-A\",\n        run: $d04c89efcb565ec8$export$19d6fa84ce3a55ab\n    }\n].concat($d04c89efcb565ec8$export$ae5dfd95be821a1c);\n/**\nA binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and\nShift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).\nPlease see the [Tab example](../../examples/tab/) before using\nthis.\n*/ const $d04c89efcb565ec8$export$893b77570f8af4da = {\n    key: \"Tab\",\n    run: $d04c89efcb565ec8$export$a61bf6a946ffc826,\n    shift: $d04c89efcb565ec8$export$e4b902122bfe67ae\n};\n\n\n\n\nfunction $60bdbe617b6ae52f$export$2e2bcd8739ae039() {\n    var elt = arguments[0];\n    if (typeof elt == \"string\") elt = document.createElement(elt);\n    var i = 1, next = arguments[1];\n    if (next && typeof next == \"object\" && next.nodeType == null && !Array.isArray(next)) {\n        for(var name in next)if (Object.prototype.hasOwnProperty.call(next, name)) {\n            var value = next[name];\n            if (typeof value == \"string\") elt.setAttribute(name, value);\n            else if (value != null) elt[name] = value;\n        }\n        i++;\n    }\n    for(; i < arguments.length; i++)$60bdbe617b6ae52f$var$add(elt, arguments[i]);\n    return elt;\n}\nfunction $60bdbe617b6ae52f$var$add(elt, child) {\n    if (typeof child == \"string\") elt.appendChild(document.createTextNode(child));\n    else if (child == null) ;\n    else if (child.nodeType != null) elt.appendChild(child);\n    else if (Array.isArray(child)) for(var i = 0; i < child.length; i++)$60bdbe617b6ae52f$var$add(elt, child[i]);\n    else throw new RangeError(\"Unsupported child node: \" + child);\n}\n\n\nconst $f7ab002c71421b53$var$basicNormalize = typeof String.prototype.normalize == \"function\" ? (x)=>x.normalize(\"NFKD\") : (x)=>x;\n/**\nA search cursor provides an iterator over text matches in a\ndocument.\n*/ class $f7ab002c71421b53$export$4989b254f32490be {\n    /**\n    Create a text cursor. The query is the search string, `from` to\n    `to` provides the region to search.\n    \n    When `normalize` is given, it will be called, on both the query\n    string and the content it is matched against, before comparing.\n    You can, for example, create a case-insensitive search by\n    passing `s => s.toLowerCase()`.\n    \n    Text is always normalized with\n    [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n    (when supported).\n    */ constructor(text, query, from = 0, to = text.length, normalize, test){\n        this.test = test;\n        /**\n        The current match (only holds a meaningful value after\n        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when\n        `done` is false).\n        */ this.value = {\n            from: 0,\n            to: 0\n        };\n        /**\n        Whether the end of the iterated region has been reached.\n        */ this.done = false;\n        this.matches = [];\n        this.buffer = \"\";\n        this.bufferPos = 0;\n        this.iter = text.iterRange(from, to);\n        this.bufferStart = from;\n        this.normalize = normalize ? (x)=>normalize($f7ab002c71421b53$var$basicNormalize(x)) : $f7ab002c71421b53$var$basicNormalize;\n        this.query = this.normalize(query);\n    }\n    peek() {\n        if (this.bufferPos == this.buffer.length) {\n            this.bufferStart += this.buffer.length;\n            this.iter.next();\n            if (this.iter.done) return -1;\n            this.bufferPos = 0;\n            this.buffer = this.iter.value;\n        }\n        return (0, $ccfb9497d8ef598f$export$42977f40461e1360)(this.buffer, this.bufferPos);\n    }\n    /**\n    Look for the next match. Updates the iterator's\n    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and\n    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called\n    at least once before using the cursor.\n    */ next() {\n        while(this.matches.length)this.matches.pop();\n        return this.nextOverlapping();\n    }\n    /**\n    The `next` method will ignore matches that partially overlap a\n    previous match. This method behaves like `next`, but includes\n    such matches.\n    */ nextOverlapping() {\n        for(;;){\n            let next = this.peek();\n            if (next < 0) {\n                this.done = true;\n                return this;\n            }\n            let str = (0, $ccfb9497d8ef598f$export$73bfc63873071f74)(next), start = this.bufferStart + this.bufferPos;\n            this.bufferPos += (0, $ccfb9497d8ef598f$export$a870abf234f6353c)(next);\n            let norm = this.normalize(str);\n            for(let i = 0, pos = start;; i++){\n                let code = norm.charCodeAt(i);\n                let match = this.match(code, pos);\n                if (match) {\n                    this.value = match;\n                    return this;\n                }\n                if (i == norm.length - 1) break;\n                if (pos == start && i < str.length && str.charCodeAt(i) == code) pos++;\n            }\n        }\n    }\n    match(code, pos) {\n        let match = null;\n        for(let i = 0; i < this.matches.length; i += 2){\n            let index = this.matches[i], keep = false;\n            if (this.query.charCodeAt(index) == code) {\n                if (index == this.query.length - 1) match = {\n                    from: this.matches[i + 1],\n                    to: pos + 1\n                };\n                else {\n                    this.matches[i]++;\n                    keep = true;\n                }\n            }\n            if (!keep) {\n                this.matches.splice(i, 2);\n                i -= 2;\n            }\n        }\n        if (this.query.charCodeAt(0) == code) {\n            if (this.query.length == 1) match = {\n                from: pos,\n                to: pos + 1\n            };\n            else this.matches.push(1, pos);\n        }\n        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferPos)) match = null;\n        return match;\n    }\n}\nif (typeof Symbol != \"undefined\") $f7ab002c71421b53$export$4989b254f32490be.prototype[Symbol.iterator] = function() {\n    return this;\n};\nconst $f7ab002c71421b53$var$empty = {\n    from: -1,\n    to: -1,\n    match: /*@__PURE__*/ /.*/.exec(\"\")\n};\nconst $f7ab002c71421b53$var$baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\n/**\nThis class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)\nbut searches for a regular expression pattern instead of a plain\nstring.\n*/ class $f7ab002c71421b53$export$234e2283eb9dcd35 {\n    /**\n    Create a cursor that will search the given range in the given\n    document. `query` should be the raw pattern (as you'd pass it to\n    `new RegExp`).\n    */ constructor(text, query, options, from = 0, to = text.length){\n        this.text = text;\n        this.to = to;\n        this.curLine = \"\";\n        /**\n        Set to `true` when the cursor has reached the end of the search\n        range.\n        */ this.done = false;\n        /**\n        Will contain an object with the extent of the match and the\n        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)\n        sucessfully finds a match.\n        */ this.value = $f7ab002c71421b53$var$empty;\n        if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query)) return new $f7ab002c71421b53$var$MultilineRegExpCursor(text, query, options, from, to);\n        this.re = new RegExp(query, $f7ab002c71421b53$var$baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.iter = text.iter();\n        let startLine = text.lineAt(from);\n        this.curLineStart = startLine.from;\n        this.matchPos = $f7ab002c71421b53$var$toCharEnd(text, from);\n        this.getLine(this.curLineStart);\n    }\n    getLine(skip) {\n        this.iter.next(skip);\n        if (this.iter.lineBreak) this.curLine = \"\";\n        else {\n            this.curLine = this.iter.value;\n            if (this.curLineStart + this.curLine.length > this.to) this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\n            this.iter.next();\n        }\n    }\n    nextLine() {\n        this.curLineStart = this.curLineStart + this.curLine.length + 1;\n        if (this.curLineStart > this.to) this.curLine = \"\";\n        else this.getLine(0);\n    }\n    /**\n    Move to the next match, if there is one.\n    */ next() {\n        for(let off = this.matchPos - this.curLineStart;;){\n            this.re.lastIndex = off;\n            let match = this.matchPos <= this.to && this.re.exec(this.curLine);\n            if (match) {\n                let from = this.curLineStart + match.index, to = from + match[0].length;\n                this.matchPos = $f7ab002c71421b53$var$toCharEnd(this.text, to + (from == to ? 1 : 0));\n                if (from == this.curLineStart + this.curLine.length) this.nextLine();\n                if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {\n                    this.value = {\n                        from: from,\n                        to: to,\n                        match: match\n                    };\n                    return this;\n                }\n                off = this.matchPos - this.curLineStart;\n            } else if (this.curLineStart + this.curLine.length < this.to) {\n                this.nextLine();\n                off = 0;\n            } else {\n                this.done = true;\n                return this;\n            }\n        }\n    }\n}\nconst $f7ab002c71421b53$var$flattened = /*@__PURE__*/ new WeakMap();\n// Reusable (partially) flattened document strings\nclass $f7ab002c71421b53$var$FlattenedDoc {\n    constructor(from, text){\n        this.from = from;\n        this.text = text;\n    }\n    get to() {\n        return this.from + this.text.length;\n    }\n    static get(doc, from, to) {\n        let cached = $f7ab002c71421b53$var$flattened.get(doc);\n        if (!cached || cached.from >= to || cached.to <= from) {\n            let flat = new $f7ab002c71421b53$var$FlattenedDoc(from, doc.sliceString(from, to));\n            $f7ab002c71421b53$var$flattened.set(doc, flat);\n            return flat;\n        }\n        if (cached.from == from && cached.to == to) return cached;\n        let { text: text, from: cachedFrom } = cached;\n        if (cachedFrom > from) {\n            text = doc.sliceString(from, cachedFrom) + text;\n            cachedFrom = from;\n        }\n        if (cached.to < to) text += doc.sliceString(cached.to, to);\n        $f7ab002c71421b53$var$flattened.set(doc, new $f7ab002c71421b53$var$FlattenedDoc(cachedFrom, text));\n        return new $f7ab002c71421b53$var$FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\n    }\n}\nclass $f7ab002c71421b53$var$MultilineRegExpCursor {\n    constructor(text, query, options, from, to){\n        this.text = text;\n        this.to = to;\n        this.done = false;\n        this.value = $f7ab002c71421b53$var$empty;\n        this.matchPos = $f7ab002c71421b53$var$toCharEnd(text, from);\n        this.re = new RegExp(query, $f7ab002c71421b53$var$baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.flat = $f7ab002c71421b53$var$FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Base */ ));\n    }\n    chunkEnd(pos) {\n        return pos >= this.to ? this.to : this.text.lineAt(pos).to;\n    }\n    next() {\n        for(;;){\n            let off = this.re.lastIndex = this.matchPos - this.flat.from;\n            let match = this.re.exec(this.flat.text);\n            // Skip empty matches directly after the last match\n            if (match && !match[0] && match.index == off) {\n                this.re.lastIndex = off + 1;\n                match = this.re.exec(this.flat.text);\n            }\n            if (match) {\n                let from = this.flat.from + match.index, to = from + match[0].length;\n                // If a match goes almost to the end of a noncomplete chunk, try\n                // again, since it'll likely be able to match more\n                if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) && (!this.test || this.test(from, to, match))) {\n                    this.value = {\n                        from: from,\n                        to: to,\n                        match: match\n                    };\n                    this.matchPos = $f7ab002c71421b53$var$toCharEnd(this.text, to + (from == to ? 1 : 0));\n                    return this;\n                }\n            }\n            if (this.flat.to == this.to) {\n                this.done = true;\n                return this;\n            }\n            // Grow the flattened doc\n            this.flat = $f7ab002c71421b53$var$FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\n        }\n    }\n}\nif (typeof Symbol != \"undefined\") $f7ab002c71421b53$export$234e2283eb9dcd35.prototype[Symbol.iterator] = $f7ab002c71421b53$var$MultilineRegExpCursor.prototype[Symbol.iterator] = function() {\n    return this;\n};\nfunction $f7ab002c71421b53$var$validRegExp(source) {\n    try {\n        new RegExp(source, $f7ab002c71421b53$var$baseFlags);\n        return true;\n    } catch (_a) {\n        return false;\n    }\n}\nfunction $f7ab002c71421b53$var$toCharEnd(text, pos) {\n    if (pos >= text.length) return pos;\n    let line = text.lineAt(pos), next;\n    while(pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)pos++;\n    return pos;\n}\nfunction $f7ab002c71421b53$var$createLineDialog(view) {\n    let input = (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"input\", {\n        class: \"cm-textfield\",\n        name: \"line\"\n    });\n    let dom = (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"form\", {\n        class: \"cm-gotoLine\",\n        onkeydown: (event)=>{\n            if (event.keyCode == 27) {\n                event.preventDefault();\n                view.dispatch({\n                    effects: $f7ab002c71421b53$var$dialogEffect.of(false)\n                });\n                view.focus();\n            } else if (event.keyCode == 13) {\n                event.preventDefault();\n                go();\n            }\n        },\n        onsubmit: (event)=>{\n            event.preventDefault();\n            go();\n        }\n    }, (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"button\", {\n        class: \"cm-button\",\n        type: \"submit\"\n    }, view.state.phrase(\"go\")));\n    function go() {\n        let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\n        if (!match) return;\n        let { state: state } = view, startLine = state.doc.lineAt(state.selection.main.head);\n        let [, sign, ln, cl, percent] = match;\n        let col = cl ? +cl.slice(1) : 0;\n        let line = ln ? +ln : startLine.number;\n        if (ln && percent) {\n            let pc = line / 100;\n            if (sign) pc = pc * (sign == \"-\" ? -1 : 1) + startLine.number / state.doc.lines;\n            line = Math.round(state.doc.lines * pc);\n        } else if (ln && sign) line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\n        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\n        view.dispatch({\n            effects: $f7ab002c71421b53$var$dialogEffect.of(false),\n            selection: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),\n            scrollIntoView: true\n        });\n        view.focus();\n    }\n    return {\n        dom: dom\n    };\n}\nconst $f7ab002c71421b53$var$dialogEffect = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\nconst $f7ab002c71421b53$var$dialogField = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create () {\n        return true;\n    },\n    update (value, tr) {\n        for (let e of tr.effects)if (e.is($f7ab002c71421b53$var$dialogEffect)) value = e.value;\n        return value;\n    },\n    provide: (f)=>(0, $071334078f8d3f8a$export$e89c3c9af31c1e3b).from(f, (val)=>val ? $f7ab002c71421b53$var$createLineDialog : null)\n});\n/**\nCommand that shows a dialog asking the user for a line number, and\nwhen a valid position is provided, moves the cursor to that line.\n\nSupports line numbers, relative line offsets prefixed with `+` or\n`-`, document percentages suffixed with `%`, and an optional\ncolumn position by adding `:` and a second number after the line\nnumber.\n*/ const $f7ab002c71421b53$export$5d5b784f9a618ec3 = (view)=>{\n    let panel = (0, $071334078f8d3f8a$export$7361ed18ff57179e)(view, $f7ab002c71421b53$var$createLineDialog);\n    if (!panel) {\n        let effects = [\n            $f7ab002c71421b53$var$dialogEffect.of(true)\n        ];\n        if (view.state.field($f7ab002c71421b53$var$dialogField, false) == null) effects.push((0, $ccfb9497d8ef598f$export$95000d4efaa4321f).appendConfig.of([\n            $f7ab002c71421b53$var$dialogField,\n            $f7ab002c71421b53$var$baseTheme$1\n        ]));\n        view.dispatch({\n            effects: effects\n        });\n        panel = (0, $071334078f8d3f8a$export$7361ed18ff57179e)(view, $f7ab002c71421b53$var$createLineDialog);\n    }\n    if (panel) panel.dom.querySelector(\"input\").focus();\n    return true;\n};\nconst $f7ab002c71421b53$var$baseTheme$1 = /*@__PURE__*/ (0, $071334078f8d3f8a$export$eece2fccabbb77c5).baseTheme({\n    \".cm-panel.cm-gotoLine\": {\n        padding: \"2px 6px 4px\",\n        \"& label\": {\n            fontSize: \"80%\"\n        }\n    }\n});\nconst $f7ab002c71421b53$var$defaultHighlightOptions = {\n    highlightWordAroundCursor: false,\n    minSelectionLength: 1,\n    maxMatches: 100,\n    wholeWords: false\n};\nconst $f7ab002c71421b53$var$highlightConfig = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (options) {\n        return (0, $ccfb9497d8ef598f$export$4e19c0b693794a7e)(options, $f7ab002c71421b53$var$defaultHighlightOptions, {\n            highlightWordAroundCursor: (a, b)=>a || b,\n            minSelectionLength: Math.min,\n            maxMatches: Math.min\n        });\n    }\n});\n/**\nThis extension highlights text that matches the selection. It uses\nthe `\"cm-selectionMatch\"` class for the highlighting. When\n`highlightWordAroundCursor` is enabled, the word at the cursor\nitself will be highlighted with `\"cm-selectionMatch-main\"`.\n*/ function $f7ab002c71421b53$export$f14efe56171a2e02(options) {\n    let ext = [\n        $f7ab002c71421b53$var$defaultTheme,\n        $f7ab002c71421b53$var$matchHighlighter\n    ];\n    if (options) ext.push($f7ab002c71421b53$var$highlightConfig.of(options));\n    return ext;\n}\nconst $f7ab002c71421b53$var$matchDeco = /*@__PURE__*/ (0, $071334078f8d3f8a$export$10e30b733df217ea).mark({\n    class: \"cm-selectionMatch\"\n});\nconst $f7ab002c71421b53$var$mainMatchDeco = /*@__PURE__*/ (0, $071334078f8d3f8a$export$10e30b733df217ea).mark({\n    class: \"cm-selectionMatch cm-selectionMatch-main\"\n});\n// Whether the characters directly outside the given positions are non-word characters\nfunction $f7ab002c71421b53$var$insideWordBoundaries(check, state, from, to) {\n    return (from == 0 || check(state.sliceDoc(from - 1, from)) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word) && (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word);\n}\n// Whether the characters directly at the given positions are word characters\nfunction $f7ab002c71421b53$var$insideWord(check, state, from, to) {\n    return check(state.sliceDoc(from, from + 1)) == (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word && check(state.sliceDoc(to - 1, to)) == (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word;\n}\nconst $f7ab002c71421b53$var$matchHighlighter = /*@__PURE__*/ (0, $071334078f8d3f8a$export$44d5eccfd62adda7).fromClass(class {\n    constructor(view){\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.selectionSet || update.docChanged || update.viewportChanged) this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let conf = view.state.facet($f7ab002c71421b53$var$highlightConfig);\n        let { state: state } = view, sel = state.selection;\n        if (sel.ranges.length > 1) return (0, $071334078f8d3f8a$export$10e30b733df217ea).none;\n        let range = sel.main, query, check = null;\n        if (range.empty) {\n            if (!conf.highlightWordAroundCursor) return (0, $071334078f8d3f8a$export$10e30b733df217ea).none;\n            let word = state.wordAt(range.head);\n            if (!word) return (0, $071334078f8d3f8a$export$10e30b733df217ea).none;\n            check = state.charCategorizer(range.head);\n            query = state.sliceDoc(word.from, word.to);\n        } else {\n            let len = range.to - range.from;\n            if (len < conf.minSelectionLength || len > 200) return (0, $071334078f8d3f8a$export$10e30b733df217ea).none;\n            if (conf.wholeWords) {\n                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\n                check = state.charCategorizer(range.head);\n                if (!($f7ab002c71421b53$var$insideWordBoundaries(check, state, range.from, range.to) && $f7ab002c71421b53$var$insideWord(check, state, range.from, range.to))) return (0, $071334078f8d3f8a$export$10e30b733df217ea).none;\n            } else {\n                query = state.sliceDoc(range.from, range.to).trim();\n                if (!query) return (0, $071334078f8d3f8a$export$10e30b733df217ea).none;\n            }\n        }\n        let deco = [];\n        for (let part of view.visibleRanges){\n            let cursor = new $f7ab002c71421b53$export$4989b254f32490be(state.doc, query, part.from, part.to);\n            while(!cursor.next().done){\n                let { from: from, to: to } = cursor.value;\n                if (!check || $f7ab002c71421b53$var$insideWordBoundaries(check, state, from, to)) {\n                    if (range.empty && from <= range.from && to >= range.to) deco.push($f7ab002c71421b53$var$mainMatchDeco.range(from, to));\n                    else if (from >= range.to || to <= range.from) deco.push($f7ab002c71421b53$var$matchDeco.range(from, to));\n                    if (deco.length > conf.maxMatches) return (0, $071334078f8d3f8a$export$10e30b733df217ea).none;\n                }\n            }\n        }\n        return (0, $071334078f8d3f8a$export$10e30b733df217ea).set(deco);\n    }\n}, {\n    decorations: (v)=>v.decorations\n});\nconst $f7ab002c71421b53$var$defaultTheme = /*@__PURE__*/ (0, $071334078f8d3f8a$export$eece2fccabbb77c5).baseTheme({\n    \".cm-selectionMatch\": {\n        backgroundColor: \"#99ff7780\"\n    },\n    \".cm-searchMatch .cm-selectionMatch\": {\n        backgroundColor: \"transparent\"\n    }\n});\n// Select the words around the cursors.\nconst $f7ab002c71421b53$var$selectWord = ({ state: state, dispatch: dispatch })=>{\n    let { selection: selection } = state;\n    let newSel = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create(selection.ranges.map((range)=>state.wordAt(range.head) || (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(range.head)), selection.mainIndex);\n    if (newSel.eq(selection)) return false;\n    dispatch(state.update({\n        selection: newSel\n    }));\n    return true;\n};\n// Find next occurrence of query relative to last cursor. Wrap around\n// the document if there are no more matches.\nfunction $f7ab002c71421b53$var$findNextOccurrence(state, query) {\n    let { main: main, ranges: ranges } = state.selection;\n    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;\n    for(let cycled = false, cursor = new $f7ab002c71421b53$export$4989b254f32490be(state.doc, query, ranges[ranges.length - 1].to);;){\n        cursor.next();\n        if (cursor.done) {\n            if (cycled) return null;\n            cursor = new $f7ab002c71421b53$export$4989b254f32490be(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\n            cycled = true;\n        } else {\n            if (cycled && ranges.some((r)=>r.from == cursor.value.from)) continue;\n            if (fullWord) {\n                let word = state.wordAt(cursor.value.from);\n                if (!word || word.from != cursor.value.from || word.to != cursor.value.to) continue;\n            }\n            return cursor.value;\n        }\n    }\n}\n/**\nSelect next occurrence of the current selection. Expand selection\nto the surrounding word when the selection is empty.\n*/ const $f7ab002c71421b53$export$dd0e64cebe05ee17 = ({ state: state, dispatch: dispatch })=>{\n    let { ranges: ranges } = state.selection;\n    if (ranges.some((sel)=>sel.from === sel.to)) return $f7ab002c71421b53$var$selectWord({\n        state: state,\n        dispatch: dispatch\n    });\n    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\n    if (state.selection.ranges.some((r)=>state.sliceDoc(r.from, r.to) != searchedText)) return false;\n    let range = $f7ab002c71421b53$var$findNextOccurrence(state, searchedText);\n    if (!range) return false;\n    dispatch(state.update({\n        selection: state.selection.addRange((0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(range.from, range.to), false),\n        effects: (0, $071334078f8d3f8a$export$eece2fccabbb77c5).scrollIntoView(range.to)\n    }));\n    return true;\n};\nconst $f7ab002c71421b53$var$searchConfigFacet = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (configs) {\n        return (0, $ccfb9497d8ef598f$export$4e19c0b693794a7e)(configs, {\n            top: false,\n            caseSensitive: false,\n            literal: false,\n            regexp: false,\n            wholeWord: false,\n            createPanel: (view)=>new $f7ab002c71421b53$var$SearchPanel(view),\n            scrollToMatch: (range)=>(0, $071334078f8d3f8a$export$eece2fccabbb77c5).scrollIntoView(range)\n        });\n    }\n});\n/**\nAdd search state to the editor configuration, and optionally\nconfigure the search extension.\n([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically\nenable this if it isn't already on).\n*/ function $f7ab002c71421b53$export$d76128d007d19019(config) {\n    return config ? [\n        $f7ab002c71421b53$var$searchConfigFacet.of(config),\n        $f7ab002c71421b53$var$searchExtensions\n    ] : $f7ab002c71421b53$var$searchExtensions;\n}\n/**\nA search query. Part of the editor's search state.\n*/ class $f7ab002c71421b53$export$4bc63ef50ec3954e {\n    /**\n    Create a query object.\n    */ constructor(config){\n        this.search = config.search;\n        this.caseSensitive = !!config.caseSensitive;\n        this.literal = !!config.literal;\n        this.regexp = !!config.regexp;\n        this.replace = config.replace || \"\";\n        this.valid = !!this.search && (!this.regexp || $f7ab002c71421b53$var$validRegExp(this.search));\n        this.unquoted = this.unquote(this.search);\n        this.wholeWord = !!config.wholeWord;\n    }\n    /**\n    @internal\n    */ unquote(text) {\n        return this.literal ? text : text.replace(/\\\\([nrt\\\\])/g, (_, ch)=>ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\t\" : \"\\\\\");\n    }\n    /**\n    Compare this query to another query.\n    */ eq(other) {\n        return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp && this.wholeWord == other.wholeWord;\n    }\n    /**\n    @internal\n    */ create() {\n        return this.regexp ? new $f7ab002c71421b53$var$RegExpQuery(this) : new $f7ab002c71421b53$var$StringQuery(this);\n    }\n    /**\n    Get a search cursor for this query, searching through the given\n    range in the given state.\n    */ getCursor(state, from = 0, to) {\n        let st = state.doc ? state : (0, $ccfb9497d8ef598f$export$afa855cbfaff27f2).create({\n            doc: state\n        });\n        if (to == null) to = st.doc.length;\n        return this.regexp ? $f7ab002c71421b53$var$regexpCursor(this, st, from, to) : $f7ab002c71421b53$var$stringCursor(this, st, from, to);\n    }\n}\nclass $f7ab002c71421b53$var$QueryType {\n    constructor(spec){\n        this.spec = spec;\n    }\n}\nfunction $f7ab002c71421b53$var$stringCursor(spec, state, from, to) {\n    return new $f7ab002c71421b53$export$4989b254f32490be(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : (x)=>x.toLowerCase(), spec.wholeWord ? $f7ab002c71421b53$var$stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);\n}\nfunction $f7ab002c71421b53$var$stringWordTest(doc, categorizer) {\n    return (from, to, buf, bufPos)=>{\n        if (bufPos > from || bufPos + buf.length < to) {\n            bufPos = Math.max(0, from - 2);\n            buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));\n        }\n        return (categorizer($f7ab002c71421b53$var$charBefore(buf, from - bufPos)) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word || categorizer($f7ab002c71421b53$var$charAfter(buf, from - bufPos)) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word) && (categorizer($f7ab002c71421b53$var$charAfter(buf, to - bufPos)) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word || categorizer($f7ab002c71421b53$var$charBefore(buf, to - bufPos)) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word);\n    };\n}\nclass $f7ab002c71421b53$var$StringQuery extends $f7ab002c71421b53$var$QueryType {\n    constructor(spec){\n        super(spec);\n    }\n    nextMatch(state, curFrom, curTo) {\n        let cursor = $f7ab002c71421b53$var$stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();\n        if (cursor.done) cursor = $f7ab002c71421b53$var$stringCursor(this.spec, state, 0, curFrom).nextOverlapping();\n        return cursor.done ? null : cursor.value;\n    }\n    // Searching in reverse is, rather than implementing an inverted search\n    // cursor, done by scanning chunk after chunk forward.\n    prevMatchInRange(state, from, to) {\n        for(let pos = to;;){\n            let start = Math.max(from, pos - 10000 /* ChunkSize */  - this.spec.unquoted.length);\n            let cursor = $f7ab002c71421b53$var$stringCursor(this.spec, state, start, pos), range = null;\n            while(!cursor.nextOverlapping().done)range = cursor.value;\n            if (range) return range;\n            if (start == from) return null;\n            pos -= 10000 /* ChunkSize */ ;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(_result) {\n        return this.spec.unquote(this.spec.replace);\n    }\n    matchAll(state, limit) {\n        let cursor = $f7ab002c71421b53$var$stringCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while(!cursor.next().done){\n            if (ranges.length >= limit) return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = $f7ab002c71421b53$var$stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));\n        while(!cursor.next().done)add(cursor.value.from, cursor.value.to);\n    }\n}\nfunction $f7ab002c71421b53$var$regexpCursor(spec, state, from, to) {\n    return new $f7ab002c71421b53$export$234e2283eb9dcd35(state.doc, spec.search, {\n        ignoreCase: !spec.caseSensitive,\n        test: spec.wholeWord ? $f7ab002c71421b53$var$regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined\n    }, from, to);\n}\nfunction $f7ab002c71421b53$var$charBefore(str, index) {\n    return str.slice((0, $ccfb9497d8ef598f$export$a0fa439fd515e1ed)(str, index, false), index);\n}\nfunction $f7ab002c71421b53$var$charAfter(str, index) {\n    return str.slice(index, (0, $ccfb9497d8ef598f$export$a0fa439fd515e1ed)(str, index));\n}\nfunction $f7ab002c71421b53$var$regexpWordTest(categorizer) {\n    return (_from, _to, match)=>!match[0].length || (categorizer($f7ab002c71421b53$var$charBefore(match.input, match.index)) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word || categorizer($f7ab002c71421b53$var$charAfter(match.input, match.index)) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word) && (categorizer($f7ab002c71421b53$var$charAfter(match.input, match.index + match[0].length)) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word || categorizer($f7ab002c71421b53$var$charBefore(match.input, match.index + match[0].length)) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word);\n}\nclass $f7ab002c71421b53$var$RegExpQuery extends $f7ab002c71421b53$var$QueryType {\n    nextMatch(state, curFrom, curTo) {\n        let cursor = $f7ab002c71421b53$var$regexpCursor(this.spec, state, curTo, state.doc.length).next();\n        if (cursor.done) cursor = $f7ab002c71421b53$var$regexpCursor(this.spec, state, 0, curFrom).next();\n        return cursor.done ? null : cursor.value;\n    }\n    prevMatchInRange(state, from, to) {\n        for(let size = 1;; size++){\n            let start = Math.max(from, to - size * 10000 /* ChunkSize */ );\n            let cursor = $f7ab002c71421b53$var$regexpCursor(this.spec, state, start, to), range = null;\n            while(!cursor.next().done)range = cursor.value;\n            if (range && (start == from || range.from > start + 10)) return range;\n            if (start == from) return null;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(result) {\n        return this.spec.unquote(this.spec.replace.replace(/\\$([$&\\d+])/g, (m, i)=>i == \"$\" ? \"$\" : i == \"&\" ? result.match[0] : i != \"0\" && +i < result.match.length ? result.match[i] : m));\n    }\n    matchAll(state, limit) {\n        let cursor = $f7ab002c71421b53$var$regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while(!cursor.next().done){\n            if (ranges.length >= limit) return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = $f7ab002c71421b53$var$regexpCursor(this.spec, state, Math.max(0, from - 250 /* HighlightMargin */ ), Math.min(to + 250 /* HighlightMargin */ , state.doc.length));\n        while(!cursor.next().done)add(cursor.value.from, cursor.value.to);\n    }\n}\n/**\nA state effect that updates the current search query. Note that\nthis only has an effect if the search state has been initialized\n(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or\nby running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least\nonce).\n*/ const $f7ab002c71421b53$export$2cd1e14773f5e71b = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\nconst $f7ab002c71421b53$var$togglePanel = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\nconst $f7ab002c71421b53$var$searchState = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create (state) {\n        return new $f7ab002c71421b53$var$SearchState($f7ab002c71421b53$var$defaultQuery(state).create(), null);\n    },\n    update (value, tr) {\n        for (let effect of tr.effects){\n            if (effect.is($f7ab002c71421b53$export$2cd1e14773f5e71b)) value = new $f7ab002c71421b53$var$SearchState(effect.value.create(), value.panel);\n            else if (effect.is($f7ab002c71421b53$var$togglePanel)) value = new $f7ab002c71421b53$var$SearchState(value.query, effect.value ? $f7ab002c71421b53$var$createSearchPanel : null);\n        }\n        return value;\n    },\n    provide: (f)=>(0, $071334078f8d3f8a$export$e89c3c9af31c1e3b).from(f, (val)=>val.panel)\n});\n/**\nGet the current search query from an editor state.\n*/ function $f7ab002c71421b53$export$1664b92369554829(state) {\n    let curState = state.field($f7ab002c71421b53$var$searchState, false);\n    return curState ? curState.query.spec : $f7ab002c71421b53$var$defaultQuery(state);\n}\n/**\nQuery whether the search panel is open in the given editor state.\n*/ function $f7ab002c71421b53$export$453cecf1765eeb62(state) {\n    var _a;\n    return ((_a = state.field($f7ab002c71421b53$var$searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;\n}\nclass $f7ab002c71421b53$var$SearchState {\n    constructor(query, panel){\n        this.query = query;\n        this.panel = panel;\n    }\n}\nconst $f7ab002c71421b53$var$matchMark = /*@__PURE__*/ (0, $071334078f8d3f8a$export$10e30b733df217ea).mark({\n    class: \"cm-searchMatch\"\n}), $f7ab002c71421b53$var$selectedMatchMark = /*@__PURE__*/ (0, $071334078f8d3f8a$export$10e30b733df217ea).mark({\n    class: \"cm-searchMatch cm-searchMatch-selected\"\n});\nconst $f7ab002c71421b53$var$searchHighlighter = /*@__PURE__*/ (0, $071334078f8d3f8a$export$44d5eccfd62adda7).fromClass(class {\n    constructor(view){\n        this.view = view;\n        this.decorations = this.highlight(view.state.field($f7ab002c71421b53$var$searchState));\n    }\n    update(update) {\n        let state = update.state.field($f7ab002c71421b53$var$searchState);\n        if (state != update.startState.field($f7ab002c71421b53$var$searchState) || update.docChanged || update.selectionSet || update.viewportChanged) this.decorations = this.highlight(state);\n    }\n    highlight({ query: query, panel: panel }) {\n        if (!panel || !query.spec.valid) return (0, $071334078f8d3f8a$export$10e30b733df217ea).none;\n        let { view: view } = this;\n        let builder = new (0, $ccfb9497d8ef598f$export$89e09ce03c7e8594)();\n        for(let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++){\n            let { from: from, to: to } = ranges[i];\n            while(i < l - 1 && to > ranges[i + 1].from - 500 /* HighlightMargin */ )to = ranges[++i].to;\n            query.highlight(view.state, from, to, (from, to)=>{\n                let selected = view.state.selection.ranges.some((r)=>r.from == from && r.to == to);\n                builder.add(from, to, selected ? $f7ab002c71421b53$var$selectedMatchMark : $f7ab002c71421b53$var$matchMark);\n            });\n        }\n        return builder.finish();\n    }\n}, {\n    decorations: (v)=>v.decorations\n});\nfunction $f7ab002c71421b53$var$searchCommand(f) {\n    return (view)=>{\n        let state = view.state.field($f7ab002c71421b53$var$searchState, false);\n        return state && state.query.spec.valid ? f(view, state) : $f7ab002c71421b53$export$8894af164d40b422(view);\n    };\n}\n/**\nOpen the search panel if it isn't already open, and move the\nselection to the first match after the current main selection.\nWill wrap around to the start of the document when it reaches the\nend.\n*/ const $f7ab002c71421b53$export$ebdf538520f8717 = /*@__PURE__*/ $f7ab002c71421b53$var$searchCommand((view, { query: query })=>{\n    let { to: to } = view.state.selection.main;\n    let next = query.nextMatch(view.state, to, to);\n    if (!next) return false;\n    let selection = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).single(next.from, next.to);\n    let config = view.state.facet($f7ab002c71421b53$var$searchConfigFacet);\n    view.dispatch({\n        selection: selection,\n        effects: [\n            $f7ab002c71421b53$var$announceMatch(view, next),\n            config.scrollToMatch(selection.main, view)\n        ],\n        userEvent: \"select.search\"\n    });\n    $f7ab002c71421b53$var$selectSearchInput(view);\n    return true;\n});\n/**\nMove the selection to the previous instance of the search query,\nbefore the current main selection. Will wrap past the start\nof the document to start searching at the end again.\n*/ const $f7ab002c71421b53$export$eef4841c27f82c55 = /*@__PURE__*/ $f7ab002c71421b53$var$searchCommand((view, { query: query })=>{\n    let { state: state } = view, { from: from } = state.selection.main;\n    let prev = query.prevMatch(state, from, from);\n    if (!prev) return false;\n    let selection = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).single(prev.from, prev.to);\n    let config = view.state.facet($f7ab002c71421b53$var$searchConfigFacet);\n    view.dispatch({\n        selection: selection,\n        effects: [\n            $f7ab002c71421b53$var$announceMatch(view, prev),\n            config.scrollToMatch(selection.main, view)\n        ],\n        userEvent: \"select.search\"\n    });\n    $f7ab002c71421b53$var$selectSearchInput(view);\n    return true;\n});\n/**\nSelect all instances of the search query.\n*/ const $f7ab002c71421b53$export$5d21cfc86ff1ce1d = /*@__PURE__*/ $f7ab002c71421b53$var$searchCommand((view, { query: query })=>{\n    let ranges = query.matchAll(view.state, 1000);\n    if (!ranges || !ranges.length) return false;\n    view.dispatch({\n        selection: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create(ranges.map((r)=>(0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(r.from, r.to))),\n        userEvent: \"select.search.matches\"\n    });\n    return true;\n});\n/**\nSelect all instances of the currently selected text.\n*/ const $f7ab002c71421b53$export$6f1c98d8556667b5 = ({ state: state, dispatch: dispatch })=>{\n    let sel = state.selection;\n    if (sel.ranges.length > 1 || sel.main.empty) return false;\n    let { from: from, to: to } = sel.main;\n    let ranges = [], main = 0;\n    for(let cur = new $f7ab002c71421b53$export$4989b254f32490be(state.doc, state.sliceDoc(from, to)); !cur.next().done;){\n        if (ranges.length > 1000) return false;\n        if (cur.value.from == from) main = ranges.length;\n        ranges.push((0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(cur.value.from, cur.value.to));\n    }\n    dispatch(state.update({\n        selection: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create(ranges, main),\n        userEvent: \"select.search.matches\"\n    }));\n    return true;\n};\n/**\nReplace the current match of the search query.\n*/ const $f7ab002c71421b53$export$f9afe47535eaf3d2 = /*@__PURE__*/ $f7ab002c71421b53$var$searchCommand((view, { query: query })=>{\n    let { state: state } = view, { from: from, to: to } = state.selection.main;\n    if (state.readOnly) return false;\n    let next = query.nextMatch(state, from, from);\n    if (!next) return false;\n    let changes = [], selection, replacement;\n    let effects = [];\n    if (next.from == from && next.to == to) {\n        replacement = state.toText(query.getReplacement(next));\n        changes.push({\n            from: next.from,\n            to: next.to,\n            insert: replacement\n        });\n        next = query.nextMatch(state, next.from, next.to);\n        effects.push((0, $071334078f8d3f8a$export$eece2fccabbb77c5).announce.of(state.phrase(\"replaced match on line $\", state.doc.lineAt(from).number) + \".\"));\n    }\n    if (next) {\n        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;\n        selection = (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).single(next.from - off, next.to - off);\n        effects.push($f7ab002c71421b53$var$announceMatch(view, next));\n        effects.push(state.facet($f7ab002c71421b53$var$searchConfigFacet).scrollToMatch(selection.main, view));\n    }\n    view.dispatch({\n        changes: changes,\n        selection: selection,\n        effects: effects,\n        userEvent: \"input.replace\"\n    });\n    return true;\n});\n/**\nReplace all instances of the search query with the given\nreplacement.\n*/ const $f7ab002c71421b53$export$b8b3234b4edfc4c2 = /*@__PURE__*/ $f7ab002c71421b53$var$searchCommand((view, { query: query })=>{\n    if (view.state.readOnly) return false;\n    let changes = query.matchAll(view.state, 1e9).map((match)=>{\n        let { from: from, to: to } = match;\n        return {\n            from: from,\n            to: to,\n            insert: query.getReplacement(match)\n        };\n    });\n    if (!changes.length) return false;\n    let announceText = view.state.phrase(\"replaced $ matches\", changes.length) + \".\";\n    view.dispatch({\n        changes: changes,\n        effects: (0, $071334078f8d3f8a$export$eece2fccabbb77c5).announce.of(announceText),\n        userEvent: \"input.replace.all\"\n    });\n    return true;\n});\nfunction $f7ab002c71421b53$var$createSearchPanel(view) {\n    return view.state.facet($f7ab002c71421b53$var$searchConfigFacet).createPanel(view);\n}\nfunction $f7ab002c71421b53$var$defaultQuery(state, fallback) {\n    var _a, _b, _c, _d, _e;\n    let sel = state.selection.main;\n    let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\n    if (fallback && !selText) return fallback;\n    let config = state.facet($f7ab002c71421b53$var$searchConfigFacet);\n    return new $f7ab002c71421b53$export$4bc63ef50ec3954e({\n        search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\\n/g, \"\\\\n\"),\n        caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,\n        literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,\n        regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,\n        wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord\n    });\n}\nfunction $f7ab002c71421b53$var$getSearchInput(view) {\n    let panel = (0, $071334078f8d3f8a$export$7361ed18ff57179e)(view, $f7ab002c71421b53$var$createSearchPanel);\n    return panel && panel.dom.querySelector(\"[main-field]\");\n}\nfunction $f7ab002c71421b53$var$selectSearchInput(view) {\n    let input = $f7ab002c71421b53$var$getSearchInput(view);\n    if (input && input == view.root.activeElement) input.select();\n}\n/**\nMake sure the search panel is open and focused.\n*/ const $f7ab002c71421b53$export$8894af164d40b422 = (view)=>{\n    let state = view.state.field($f7ab002c71421b53$var$searchState, false);\n    if (state && state.panel) {\n        let searchInput = $f7ab002c71421b53$var$getSearchInput(view);\n        if (searchInput && searchInput != view.root.activeElement) {\n            let query = $f7ab002c71421b53$var$defaultQuery(view.state, state.query.spec);\n            if (query.valid) view.dispatch({\n                effects: $f7ab002c71421b53$export$2cd1e14773f5e71b.of(query)\n            });\n            searchInput.focus();\n            searchInput.select();\n        }\n    } else view.dispatch({\n        effects: [\n            $f7ab002c71421b53$var$togglePanel.of(true),\n            state ? $f7ab002c71421b53$export$2cd1e14773f5e71b.of($f7ab002c71421b53$var$defaultQuery(view.state, state.query.spec)) : (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).appendConfig.of($f7ab002c71421b53$var$searchExtensions)\n        ]\n    });\n    return true;\n};\n/**\nClose the search panel.\n*/ const $f7ab002c71421b53$export$4c389f3929badbb8 = (view)=>{\n    let state = view.state.field($f7ab002c71421b53$var$searchState, false);\n    if (!state || !state.panel) return false;\n    let panel = (0, $071334078f8d3f8a$export$7361ed18ff57179e)(view, $f7ab002c71421b53$var$createSearchPanel);\n    if (panel && panel.dom.contains(view.root.activeElement)) view.focus();\n    view.dispatch({\n        effects: $f7ab002c71421b53$var$togglePanel.of(false)\n    });\n    return true;\n};\n/**\nDefault search-related key bindings.\n\n - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)\n - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)\n - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)\n - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)\n - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)\n*/ const $f7ab002c71421b53$export$2dba96787cbe0a4a = [\n    {\n        key: \"Mod-f\",\n        run: $f7ab002c71421b53$export$8894af164d40b422,\n        scope: \"editor search-panel\"\n    },\n    {\n        key: \"F3\",\n        run: $f7ab002c71421b53$export$ebdf538520f8717,\n        shift: $f7ab002c71421b53$export$eef4841c27f82c55,\n        scope: \"editor search-panel\",\n        preventDefault: true\n    },\n    {\n        key: \"Mod-g\",\n        run: $f7ab002c71421b53$export$ebdf538520f8717,\n        shift: $f7ab002c71421b53$export$eef4841c27f82c55,\n        scope: \"editor search-panel\",\n        preventDefault: true\n    },\n    {\n        key: \"Escape\",\n        run: $f7ab002c71421b53$export$4c389f3929badbb8,\n        scope: \"editor search-panel\"\n    },\n    {\n        key: \"Mod-Shift-l\",\n        run: $f7ab002c71421b53$export$6f1c98d8556667b5\n    },\n    {\n        key: \"Alt-g\",\n        run: $f7ab002c71421b53$export$5d5b784f9a618ec3\n    },\n    {\n        key: \"Mod-d\",\n        run: $f7ab002c71421b53$export$dd0e64cebe05ee17,\n        preventDefault: true\n    }\n];\nclass $f7ab002c71421b53$var$SearchPanel {\n    constructor(view){\n        this.view = view;\n        let query = this.query = view.state.field($f7ab002c71421b53$var$searchState).query.spec;\n        this.commit = this.commit.bind(this);\n        this.searchField = (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"input\", {\n            value: query.search,\n            placeholder: $f7ab002c71421b53$var$phrase(view, \"Find\"),\n            \"aria-label\": $f7ab002c71421b53$var$phrase(view, \"Find\"),\n            class: \"cm-textfield\",\n            name: \"search\",\n            form: \"\",\n            \"main-field\": \"true\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.replaceField = (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"input\", {\n            value: query.replace,\n            placeholder: $f7ab002c71421b53$var$phrase(view, \"Replace\"),\n            \"aria-label\": $f7ab002c71421b53$var$phrase(view, \"Replace\"),\n            class: \"cm-textfield\",\n            name: \"replace\",\n            form: \"\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.caseField = (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"input\", {\n            type: \"checkbox\",\n            name: \"case\",\n            form: \"\",\n            checked: query.caseSensitive,\n            onchange: this.commit\n        });\n        this.reField = (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"input\", {\n            type: \"checkbox\",\n            name: \"re\",\n            form: \"\",\n            checked: query.regexp,\n            onchange: this.commit\n        });\n        this.wordField = (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"input\", {\n            type: \"checkbox\",\n            name: \"word\",\n            form: \"\",\n            checked: query.wholeWord,\n            onchange: this.commit\n        });\n        function button(name, onclick, content) {\n            return (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"button\", {\n                class: \"cm-button\",\n                name: name,\n                onclick: onclick,\n                type: \"button\"\n            }, content);\n        }\n        this.dom = (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"div\", {\n            onkeydown: (e)=>this.keydown(e),\n            class: \"cm-search\"\n        }, [\n            this.searchField,\n            button(\"next\", ()=>$f7ab002c71421b53$export$ebdf538520f8717(view), [\n                $f7ab002c71421b53$var$phrase(view, \"next\")\n            ]),\n            button(\"prev\", ()=>$f7ab002c71421b53$export$eef4841c27f82c55(view), [\n                $f7ab002c71421b53$var$phrase(view, \"previous\")\n            ]),\n            button(\"select\", ()=>$f7ab002c71421b53$export$5d21cfc86ff1ce1d(view), [\n                $f7ab002c71421b53$var$phrase(view, \"all\")\n            ]),\n            (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"label\", null, [\n                this.caseField,\n                $f7ab002c71421b53$var$phrase(view, \"match case\")\n            ]),\n            (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"label\", null, [\n                this.reField,\n                $f7ab002c71421b53$var$phrase(view, \"regexp\")\n            ]),\n            (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"label\", null, [\n                this.wordField,\n                $f7ab002c71421b53$var$phrase(view, \"by word\")\n            ]),\n            ...view.state.readOnly ? [] : [\n                (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"br\"),\n                this.replaceField,\n                button(\"replace\", ()=>$f7ab002c71421b53$export$f9afe47535eaf3d2(view), [\n                    $f7ab002c71421b53$var$phrase(view, \"replace\")\n                ]),\n                button(\"replaceAll\", ()=>$f7ab002c71421b53$export$b8b3234b4edfc4c2(view), [\n                    $f7ab002c71421b53$var$phrase(view, \"replace all\")\n                ])\n            ],\n            (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"button\", {\n                name: \"close\",\n                onclick: ()=>$f7ab002c71421b53$export$4c389f3929badbb8(view),\n                \"aria-label\": $f7ab002c71421b53$var$phrase(view, \"close\"),\n                type: \"button\"\n            }, [\n                \"\\xd7\"\n            ])\n        ]);\n    }\n    commit() {\n        let query = new $f7ab002c71421b53$export$4bc63ef50ec3954e({\n            search: this.searchField.value,\n            caseSensitive: this.caseField.checked,\n            regexp: this.reField.checked,\n            wholeWord: this.wordField.checked,\n            replace: this.replaceField.value\n        });\n        if (!query.eq(this.query)) {\n            this.query = query;\n            this.view.dispatch({\n                effects: $f7ab002c71421b53$export$2cd1e14773f5e71b.of(query)\n            });\n        }\n    }\n    keydown(e) {\n        if ((0, $071334078f8d3f8a$export$bce154f45536286e)(this.view, e, \"search-panel\")) e.preventDefault();\n        else if (e.keyCode == 13 && e.target == this.searchField) {\n            e.preventDefault();\n            (e.shiftKey ? $f7ab002c71421b53$export$eef4841c27f82c55 : $f7ab002c71421b53$export$ebdf538520f8717)(this.view);\n        } else if (e.keyCode == 13 && e.target == this.replaceField) {\n            e.preventDefault();\n            $f7ab002c71421b53$export$f9afe47535eaf3d2(this.view);\n        }\n    }\n    update(update) {\n        for (let tr of update.transactions)for (let effect of tr.effects)if (effect.is($f7ab002c71421b53$export$2cd1e14773f5e71b) && !effect.value.eq(this.query)) this.setQuery(effect.value);\n    }\n    setQuery(query) {\n        this.query = query;\n        this.searchField.value = query.search;\n        this.replaceField.value = query.replace;\n        this.caseField.checked = query.caseSensitive;\n        this.reField.checked = query.regexp;\n        this.wordField.checked = query.wholeWord;\n    }\n    mount() {\n        this.searchField.select();\n    }\n    get pos() {\n        return 80;\n    }\n    get top() {\n        return this.view.state.facet($f7ab002c71421b53$var$searchConfigFacet).top;\n    }\n}\nfunction $f7ab002c71421b53$var$phrase(view, phrase) {\n    return view.state.phrase(phrase);\n}\nconst $f7ab002c71421b53$var$AnnounceMargin = 30;\nconst $f7ab002c71421b53$var$Break = /[\\s\\.,:;?!]/;\nfunction $f7ab002c71421b53$var$announceMatch(view, { from: from, to: to }) {\n    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;\n    let start = Math.max(line.from, from - $f7ab002c71421b53$var$AnnounceMargin), end = Math.min(lineEnd, to + $f7ab002c71421b53$var$AnnounceMargin);\n    let text = view.state.sliceDoc(start, end);\n    if (start != line.from) {\n        for(let i = 0; i < $f7ab002c71421b53$var$AnnounceMargin; i++)if (!$f7ab002c71421b53$var$Break.test(text[i + 1]) && $f7ab002c71421b53$var$Break.test(text[i])) {\n            text = text.slice(i);\n            break;\n        }\n    }\n    if (end != lineEnd) {\n        for(let i = text.length - 1; i > text.length - $f7ab002c71421b53$var$AnnounceMargin; i--)if (!$f7ab002c71421b53$var$Break.test(text[i - 1]) && $f7ab002c71421b53$var$Break.test(text[i])) {\n            text = text.slice(0, i);\n            break;\n        }\n    }\n    return (0, $071334078f8d3f8a$export$eece2fccabbb77c5).announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${line.number}.`);\n}\nconst $f7ab002c71421b53$var$baseTheme = /*@__PURE__*/ (0, $071334078f8d3f8a$export$eece2fccabbb77c5).baseTheme({\n    \".cm-panel.cm-search\": {\n        padding: \"2px 6px 4px\",\n        position: \"relative\",\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"4px\",\n            backgroundColor: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        },\n        \"& input, & button, & label\": {\n            margin: \".2em .6em .2em 0\"\n        },\n        \"& input[type=checkbox]\": {\n            marginRight: \".2em\"\n        },\n        \"& label\": {\n            fontSize: \"80%\",\n            whiteSpace: \"pre\"\n        }\n    },\n    \"&light .cm-searchMatch\": {\n        backgroundColor: \"#ffff0054\"\n    },\n    \"&dark .cm-searchMatch\": {\n        backgroundColor: \"#00ffff8a\"\n    },\n    \"&light .cm-searchMatch-selected\": {\n        backgroundColor: \"#ff6a0054\"\n    },\n    \"&dark .cm-searchMatch-selected\": {\n        backgroundColor: \"#ff00ff8a\"\n    }\n});\nconst $f7ab002c71421b53$var$searchExtensions = [\n    $f7ab002c71421b53$var$searchState,\n    /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$b92464a736444411).lowest($f7ab002c71421b53$var$searchHighlighter),\n    $f7ab002c71421b53$var$baseTheme\n];\n\n\n\n\n\n/**\nAn instance of this is passed to completion source functions.\n*/ class $9e3d41a34fba402a$export$7b73e80391102dce {\n    /**\n    Create a new completion context. (Mostly useful for testing\n    completion sources—in the editor, the extension will create\n    these for you.)\n    */ constructor(/**\n    The editor state that the completion happens in.\n    */ state, /**\n    The position at which the completion is happening.\n    */ pos, /**\n    Indicates whether completion was activated explicitly, or\n    implicitly by typing. The usual way to respond to this is to\n    only return completions when either there is part of a\n    completable entity before the cursor, or `explicit` is true.\n    */ explicit){\n        this.state = state;\n        this.pos = pos;\n        this.explicit = explicit;\n        /**\n        @internal\n        */ this.abortListeners = [];\n    }\n    /**\n    Get the extent, content, and (if there is a token) type of the\n    token before `this.pos`.\n    */ tokenBefore(types) {\n        let token = (0, $14831f1c512a5db9$export$7fc98e56a4ca6be1)(this.state).resolveInner(this.pos, -1);\n        while(token && types.indexOf(token.name) < 0)token = token.parent;\n        return token ? {\n            from: token.from,\n            to: this.pos,\n            text: this.state.sliceDoc(token.from, this.pos),\n            type: token.type\n        } : null;\n    }\n    /**\n    Get the match of the given expression directly before the\n    cursor.\n    */ matchBefore(expr) {\n        let line = this.state.doc.lineAt(this.pos);\n        let start = Math.max(line.from, this.pos - 250);\n        let str = line.text.slice(start - line.from, this.pos - line.from);\n        let found = str.search($9e3d41a34fba402a$var$ensureAnchor(expr, false));\n        return found < 0 ? null : {\n            from: start + found,\n            to: this.pos,\n            text: str.slice(found)\n        };\n    }\n    /**\n    Yields true when the query has been aborted. Can be useful in\n    asynchronous queries to avoid doing work that will be ignored.\n    */ get aborted() {\n        return this.abortListeners == null;\n    }\n    /**\n    Allows you to register abort handlers, which will be called when\n    the query is\n    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).\n    */ addEventListener(type, listener) {\n        if (type == \"abort\" && this.abortListeners) this.abortListeners.push(listener);\n    }\n}\nfunction $9e3d41a34fba402a$var$toSet(chars) {\n    let flat = Object.keys(chars).join(\"\");\n    let words = /\\w/.test(flat);\n    if (words) flat = flat.replace(/\\w/g, \"\");\n    return `[${words ? \"\\\\w\" : \"\"}${flat.replace(/[^\\w\\s]/g, \"\\\\$&\")}]`;\n}\nfunction $9e3d41a34fba402a$var$prefixMatch(options) {\n    let first = Object.create(null), rest = Object.create(null);\n    for (let { label: label } of options){\n        first[label[0]] = true;\n        for(let i = 1; i < label.length; i++)rest[label[i]] = true;\n    }\n    let source = $9e3d41a34fba402a$var$toSet(first) + $9e3d41a34fba402a$var$toSet(rest) + \"*$\";\n    return [\n        new RegExp(\"^\" + source),\n        new RegExp(source)\n    ];\n}\n/**\nGiven a a fixed array of options, return an autocompleter that\ncompletes them.\n*/ function $9e3d41a34fba402a$export$db0ee7d2648a0c4b(list) {\n    let options = list.map((o)=>typeof o == \"string\" ? {\n            label: o\n        } : o);\n    let [validFor, match] = options.every((o)=>/^\\w+$/.test(o.label)) ? [\n        /\\w*$/,\n        /\\w+$/\n    ] : $9e3d41a34fba402a$var$prefixMatch(options);\n    return (context)=>{\n        let token = context.matchBefore(match);\n        return token || context.explicit ? {\n            from: token ? token.from : context.pos,\n            options: options,\n            validFor: validFor\n        } : null;\n    };\n}\n/**\nWrap the given completion source so that it will only fire when the\ncursor is in a syntax node with one of the given names.\n*/ function $9e3d41a34fba402a$export$498fe7f50ed891b8(nodes, source) {\n    return (context)=>{\n        for(let pos = (0, $14831f1c512a5db9$export$7fc98e56a4ca6be1)(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent){\n            if (nodes.indexOf(pos.name) > -1) return source(context);\n            if (pos.type.isTop) break;\n        }\n        return null;\n    };\n}\n/**\nWrap the given completion source so that it will not fire when the\ncursor is in a syntax node with one of the given names.\n*/ function $9e3d41a34fba402a$export$1dfdaeb1e91714c0(nodes, source) {\n    return (context)=>{\n        for(let pos = (0, $14831f1c512a5db9$export$7fc98e56a4ca6be1)(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent){\n            if (nodes.indexOf(pos.name) > -1) return null;\n            if (pos.type.isTop) break;\n        }\n        return source(context);\n    };\n}\nclass $9e3d41a34fba402a$var$Option {\n    constructor(completion, source, match, score){\n        this.completion = completion;\n        this.source = source;\n        this.match = match;\n        this.score = score;\n    }\n}\nfunction $9e3d41a34fba402a$var$cur(state) {\n    return state.selection.main.from;\n}\n// Make sure the given regexp has a $ at its end and, if `start` is\n// true, a ^ at its start.\nfunction $9e3d41a34fba402a$var$ensureAnchor(expr, start) {\n    var _a;\n    let { source: source } = expr;\n    let addStart = start && source[0] != \"^\", addEnd = source[source.length - 1] != \"$\";\n    if (!addStart && !addEnd) return expr;\n    return new RegExp(`${addStart ? \"^\" : \"\"}(?:${source})${addEnd ? \"$\" : \"\"}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : expr.ignoreCase ? \"i\" : \"\");\n}\n/**\nThis annotation is added to transactions that are produced by\npicking a completion.\n*/ const $9e3d41a34fba402a$export$6c84d44c1ceeb831 = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$9279461326b8700a).define();\n/**\nHelper function that returns a transaction spec which inserts a\ncompletion's text in the main selection range, and any other\nselection range that has the same text in front of it.\n*/ function $9e3d41a34fba402a$export$496ff43229d73eba(state, text, from, to) {\n    let { main: main } = state.selection, fromOff = from - main.from, toOff = to - main.from;\n    return Object.assign(Object.assign({}, state.changeByRange((range)=>{\n        if (range != main && from != to && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to)) return {\n            range: range\n        };\n        return {\n            changes: {\n                from: range.from + fromOff,\n                to: to == main.from ? range.to : range.from + toOff,\n                insert: text\n            },\n            range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(range.from + fromOff + text.length)\n        };\n    })), {\n        userEvent: \"input.complete\"\n    });\n}\nconst $9e3d41a34fba402a$var$SourceCache = /*@__PURE__*/ new WeakMap();\nfunction $9e3d41a34fba402a$var$asSource(source) {\n    if (!Array.isArray(source)) return source;\n    let known = $9e3d41a34fba402a$var$SourceCache.get(source);\n    if (!known) $9e3d41a34fba402a$var$SourceCache.set(source, known = $9e3d41a34fba402a$export$db0ee7d2648a0c4b(source));\n    return known;\n}\nconst $9e3d41a34fba402a$var$startCompletionEffect = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\nconst $9e3d41a34fba402a$var$closeCompletionEffect = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\n// A pattern matcher for fuzzy completion matching. Create an instance\n// once for a pattern, and then use that to match any number of\n// completions.\nclass $9e3d41a34fba402a$var$FuzzyMatcher {\n    constructor(pattern){\n        this.pattern = pattern;\n        this.chars = [];\n        this.folded = [];\n        // Buffers reused by calls to `match` to track matched character\n        // positions.\n        this.any = [];\n        this.precise = [];\n        this.byWord = [];\n        this.score = 0;\n        this.matched = [];\n        for(let p = 0; p < pattern.length;){\n            let char = (0, $ccfb9497d8ef598f$export$42977f40461e1360)(pattern, p), size = (0, $ccfb9497d8ef598f$export$a870abf234f6353c)(char);\n            this.chars.push(char);\n            let part = pattern.slice(p, p + size), upper = part.toUpperCase();\n            this.folded.push((0, $ccfb9497d8ef598f$export$42977f40461e1360)(upper == part ? part.toLowerCase() : upper, 0));\n            p += size;\n        }\n        this.astral = pattern.length != this.chars.length;\n    }\n    ret(score, matched) {\n        this.score = score;\n        this.matched = matched;\n        return true;\n    }\n    // Matches a given word (completion) against the pattern (input).\n    // Will return a boolean indicating whether there was a match and,\n    // on success, set `this.score` to the score, `this.matched` to an\n    // array of `from, to` pairs indicating the matched parts of `word`.\n    //\n    // The score is a number that is more negative the worse the match\n    // is. See `Penalty` above.\n    match(word) {\n        if (this.pattern.length == 0) return this.ret(-100 /* NotFull */ , []);\n        if (word.length < this.pattern.length) return false;\n        let { chars: chars, folded: folded, any: any, precise: precise, byWord: byWord } = this;\n        // For single-character queries, only match when they occur right\n        // at the start\n        if (chars.length == 1) {\n            let first = (0, $ccfb9497d8ef598f$export$42977f40461e1360)(word, 0), firstSize = (0, $ccfb9497d8ef598f$export$a870abf234f6353c)(first);\n            let score = firstSize == word.length ? 0 : -100 /* NotFull */ ;\n            if (first == chars[0]) ;\n            else if (first == folded[0]) score += -200 /* CaseFold */ ;\n            else return false;\n            return this.ret(score, [\n                0,\n                firstSize\n            ]);\n        }\n        let direct = word.indexOf(this.pattern);\n        if (direct == 0) return this.ret(word.length == this.pattern.length ? 0 : -100 /* NotFull */ , [\n            0,\n            this.pattern.length\n        ]);\n        let len = chars.length, anyTo = 0;\n        if (direct < 0) {\n            for(let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;){\n                let next = (0, $ccfb9497d8ef598f$export$42977f40461e1360)(word, i);\n                if (next == chars[anyTo] || next == folded[anyTo]) any[anyTo++] = i;\n                i += (0, $ccfb9497d8ef598f$export$a870abf234f6353c)(next);\n            }\n            // No match, exit immediately\n            if (anyTo < len) return false;\n        }\n        // This tracks the extent of the precise (non-folded, not\n        // necessarily adjacent) match\n        let preciseTo = 0;\n        // Tracks whether there is a match that hits only characters that\n        // appear to be starting words. `byWordFolded` is set to true when\n        // a case folded character is encountered in such a match\n        let byWordTo = 0, byWordFolded = false;\n        // If we've found a partial adjacent match, these track its state\n        let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;\n        let hasLower = /[a-z]/.test(word), wordAdjacent = true;\n        // Go over the option's text, scanning for the various kinds of matches\n        for(let i = 0, e = Math.min(word.length, 200), prevType = 0 /* NonWord */ ; i < e && byWordTo < len;){\n            let next = (0, $ccfb9497d8ef598f$export$42977f40461e1360)(word, i);\n            if (direct < 0) {\n                if (preciseTo < len && next == chars[preciseTo]) precise[preciseTo++] = i;\n                if (adjacentTo < len) {\n                    if (next == chars[adjacentTo] || next == folded[adjacentTo]) {\n                        if (adjacentTo == 0) adjacentStart = i;\n                        adjacentEnd = i + 1;\n                        adjacentTo++;\n                    } else adjacentTo = 0;\n                }\n            }\n            let ch, type = next < 0xff ? next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Lower */  : next >= 65 && next <= 90 ? 1 /* Upper */  : 0 /* NonWord */  : (ch = (0, $ccfb9497d8ef598f$export$73bfc63873071f74)(next)) != ch.toLowerCase() ? 1 /* Upper */  : ch != ch.toUpperCase() ? 2 /* Lower */  : 0 /* NonWord */ ;\n            if (!i || type == 1 /* Upper */  && hasLower || prevType == 0 /* NonWord */  && type != 0 /* NonWord */ ) {\n                if (chars[byWordTo] == next || folded[byWordTo] == next && (byWordFolded = true)) byWord[byWordTo++] = i;\n                else if (byWord.length) wordAdjacent = false;\n            }\n            prevType = type;\n            i += (0, $ccfb9497d8ef598f$export$a870abf234f6353c)(next);\n        }\n        if (byWordTo == len && byWord[0] == 0 && wordAdjacent) return this.result(-100 /* ByWord */  + (byWordFolded ? -200 /* CaseFold */  : 0), byWord, word);\n        if (adjacentTo == len && adjacentStart == 0) return this.ret(-200 /* CaseFold */  - word.length + (adjacentEnd == word.length ? 0 : -100 /* NotFull */ ), [\n            0,\n            adjacentEnd\n        ]);\n        if (direct > -1) return this.ret(-700 /* NotStart */  - word.length, [\n            direct,\n            direct + this.pattern.length\n        ]);\n        if (adjacentTo == len) return this.ret(-900 /* NotStart */  - word.length, [\n            adjacentStart,\n            adjacentEnd\n        ]);\n        if (byWordTo == len) return this.result(-100 /* ByWord */  + (byWordFolded ? -200 /* CaseFold */  : 0) + -700 /* NotStart */  + (wordAdjacent ? 0 : -1100 /* Gap */ ), byWord, word);\n        return chars.length == 2 ? false : this.result((any[0] ? -700 /* NotStart */  : 0) + -200 /* CaseFold */  + -1100 /* Gap */ , any, word);\n    }\n    result(score, positions, word) {\n        let result = [], i = 0;\n        for (let pos of positions){\n            let to = pos + (this.astral ? (0, $ccfb9497d8ef598f$export$a870abf234f6353c)((0, $ccfb9497d8ef598f$export$42977f40461e1360)(word, pos)) : 1);\n            if (i && result[i - 1] == pos) result[i - 1] = to;\n            else {\n                result[i++] = pos;\n                result[i++] = to;\n            }\n        }\n        return this.ret(score - word.length, result);\n    }\n}\nconst $9e3d41a34fba402a$var$completionConfig = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (configs) {\n        return (0, $ccfb9497d8ef598f$export$4e19c0b693794a7e)(configs, {\n            activateOnTyping: true,\n            selectOnOpen: true,\n            override: null,\n            closeOnBlur: true,\n            maxRenderedOptions: 100,\n            defaultKeymap: true,\n            tooltipClass: ()=>\"\",\n            optionClass: ()=>\"\",\n            aboveCursor: false,\n            icons: true,\n            addToOptions: [],\n            positionInfo: $9e3d41a34fba402a$var$defaultPositionInfo,\n            compareCompletions: (a, b)=>a.label.localeCompare(b.label),\n            interactionDelay: 75\n        }, {\n            defaultKeymap: (a, b)=>a && b,\n            closeOnBlur: (a, b)=>a && b,\n            icons: (a, b)=>a && b,\n            tooltipClass: (a, b)=>(c)=>$9e3d41a34fba402a$var$joinClass(a(c), b(c)),\n            optionClass: (a, b)=>(c)=>$9e3d41a34fba402a$var$joinClass(a(c), b(c)),\n            addToOptions: (a, b)=>a.concat(b)\n        });\n    }\n});\nfunction $9e3d41a34fba402a$var$joinClass(a, b) {\n    return a ? b ? a + \" \" + b : a : b;\n}\nfunction $9e3d41a34fba402a$var$defaultPositionInfo(view, list, option, info, space) {\n    let rtl = view.textDirection == (0, $071334078f8d3f8a$export$cacd6541cfeeb6c1).RTL, left = rtl, narrow = false;\n    let side = \"top\", offset, maxWidth;\n    let spaceLeft = list.left - space.left, spaceRight = space.right - list.right;\n    let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;\n    if (left && spaceLeft < Math.min(infoWidth, spaceRight)) left = false;\n    else if (!left && spaceRight < Math.min(infoWidth, spaceLeft)) left = true;\n    if (infoWidth <= (left ? spaceLeft : spaceRight)) {\n        offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;\n        maxWidth = Math.min(400 /* Width */ , left ? spaceLeft : spaceRight);\n    } else {\n        narrow = true;\n        maxWidth = Math.min(400 /* Width */ , (rtl ? list.right : space.right - list.left) - 30 /* Margin */ );\n        let spaceBelow = space.bottom - list.bottom;\n        if (spaceBelow >= infoHeight || spaceBelow > list.top) offset = option.bottom - list.top;\n        else {\n            side = \"bottom\";\n            offset = list.bottom - option.top;\n        }\n    }\n    return {\n        style: `${side}: ${offset}px; max-width: ${maxWidth}px`,\n        class: \"cm-completionInfo-\" + (narrow ? rtl ? \"left-narrow\" : \"right-narrow\" : left ? \"left\" : \"right\")\n    };\n}\nfunction $9e3d41a34fba402a$var$optionContent(config) {\n    let content = config.addToOptions.slice();\n    if (config.icons) content.push({\n        render (completion) {\n            let icon = document.createElement(\"div\");\n            icon.classList.add(\"cm-completionIcon\");\n            if (completion.type) icon.classList.add(...completion.type.split(/\\s+/g).map((cls)=>\"cm-completionIcon-\" + cls));\n            icon.setAttribute(\"aria-hidden\", \"true\");\n            return icon;\n        },\n        position: 20\n    });\n    content.push({\n        render (completion, _s, match) {\n            let labelElt = document.createElement(\"span\");\n            labelElt.className = \"cm-completionLabel\";\n            let label = completion.displayLabel || completion.label, off = 0;\n            for(let j = 0; j < match.length;){\n                let from = match[j++], to = match[j++];\n                if (from > off) labelElt.appendChild(document.createTextNode(label.slice(off, from)));\n                let span = labelElt.appendChild(document.createElement(\"span\"));\n                span.appendChild(document.createTextNode(label.slice(from, to)));\n                span.className = \"cm-completionMatchedText\";\n                off = to;\n            }\n            if (off < label.length) labelElt.appendChild(document.createTextNode(label.slice(off)));\n            return labelElt;\n        },\n        position: 50\n    }, {\n        render (completion) {\n            if (!completion.detail) return null;\n            let detailElt = document.createElement(\"span\");\n            detailElt.className = \"cm-completionDetail\";\n            detailElt.textContent = completion.detail;\n            return detailElt;\n        },\n        position: 80\n    });\n    return content.sort((a, b)=>a.position - b.position).map((a)=>a.render);\n}\nfunction $9e3d41a34fba402a$var$rangeAroundSelected(total, selected, max) {\n    if (total <= max) return {\n        from: 0,\n        to: total\n    };\n    if (selected < 0) selected = 0;\n    if (selected <= total >> 1) {\n        let off = Math.floor(selected / max);\n        return {\n            from: off * max,\n            to: (off + 1) * max\n        };\n    }\n    let off = Math.floor((total - selected) / max);\n    return {\n        from: total - (off + 1) * max,\n        to: total - off * max\n    };\n}\nclass $9e3d41a34fba402a$var$CompletionTooltip {\n    constructor(view, stateField, applyCompletion){\n        this.view = view;\n        this.stateField = stateField;\n        this.applyCompletion = applyCompletion;\n        this.info = null;\n        this.infoDestroy = null;\n        this.placeInfoReq = {\n            read: ()=>this.measureInfo(),\n            write: (pos)=>this.placeInfo(pos),\n            key: this\n        };\n        this.space = null;\n        this.currentClass = \"\";\n        let cState = view.state.field(stateField);\n        let { options: options, selected: selected } = cState.open;\n        let config = view.state.facet($9e3d41a34fba402a$var$completionConfig);\n        this.optionContent = $9e3d41a34fba402a$var$optionContent(config);\n        this.optionClass = config.optionClass;\n        this.tooltipClass = config.tooltipClass;\n        this.range = $9e3d41a34fba402a$var$rangeAroundSelected(options.length, selected, config.maxRenderedOptions);\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-tooltip-autocomplete\";\n        this.updateTooltipClass(view.state);\n        this.dom.addEventListener(\"mousedown\", (e)=>{\n            for(let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode)if (dom.nodeName == \"LI\" && (match = /-(\\d+)$/.exec(dom.id)) && +match[1] < options.length) {\n                this.applyCompletion(view, options[+match[1]]);\n                e.preventDefault();\n                return;\n            }\n        });\n        this.dom.addEventListener(\"focusout\", (e)=>{\n            let state = view.state.field(this.stateField, false);\n            if (state && state.tooltip && view.state.facet($9e3d41a34fba402a$var$completionConfig).closeOnBlur && e.relatedTarget != view.contentDOM) view.dispatch({\n                effects: $9e3d41a34fba402a$var$closeCompletionEffect.of(null)\n            });\n        });\n        this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));\n        this.list.addEventListener(\"scroll\", ()=>{\n            if (this.info) this.view.requestMeasure(this.placeInfoReq);\n        });\n    }\n    mount() {\n        this.updateSel();\n    }\n    update(update) {\n        var _a, _b, _c;\n        let cState = update.state.field(this.stateField);\n        let prevState = update.startState.field(this.stateField);\n        this.updateTooltipClass(update.state);\n        if (cState != prevState) {\n            this.updateSel();\n            if (((_a = cState.open) === null || _a === void 0 ? void 0 : _a.disabled) != ((_b = prevState.open) === null || _b === void 0 ? void 0 : _b.disabled)) this.dom.classList.toggle(\"cm-tooltip-autocomplete-disabled\", !!((_c = cState.open) === null || _c === void 0 ? void 0 : _c.disabled));\n        }\n    }\n    updateTooltipClass(state) {\n        let cls = this.tooltipClass(state);\n        if (cls != this.currentClass) {\n            for (let c of this.currentClass.split(\" \"))if (c) this.dom.classList.remove(c);\n            for (let c of cls.split(\" \"))if (c) this.dom.classList.add(c);\n            this.currentClass = cls;\n        }\n    }\n    positioned(space) {\n        this.space = space;\n        if (this.info) this.view.requestMeasure(this.placeInfoReq);\n    }\n    updateSel() {\n        let cState = this.view.state.field(this.stateField), open = cState.open;\n        if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {\n            this.range = $9e3d41a34fba402a$var$rangeAroundSelected(open.options.length, open.selected, this.view.state.facet($9e3d41a34fba402a$var$completionConfig).maxRenderedOptions);\n            this.list.remove();\n            this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));\n            this.list.addEventListener(\"scroll\", ()=>{\n                if (this.info) this.view.requestMeasure(this.placeInfoReq);\n            });\n        }\n        if (this.updateSelectedOption(open.selected)) {\n            this.destroyInfo();\n            let { completion: completion } = open.options[open.selected];\n            let { info: info } = completion;\n            if (!info) return;\n            let infoResult = typeof info === \"string\" ? document.createTextNode(info) : info(completion);\n            if (!infoResult) return;\n            if (\"then\" in infoResult) infoResult.then((obj)=>{\n                if (obj && this.view.state.field(this.stateField, false) == cState) this.addInfoPane(obj, completion);\n            }).catch((e)=>(0, $071334078f8d3f8a$export$f86b2a1a2ce291b3)(this.view.state, e, \"completion info\"));\n            else this.addInfoPane(infoResult, completion);\n        }\n    }\n    addInfoPane(content, completion) {\n        this.destroyInfo();\n        let wrap = this.info = document.createElement(\"div\");\n        wrap.className = \"cm-tooltip cm-completionInfo\";\n        if (content.nodeType != null) {\n            wrap.appendChild(content);\n            this.infoDestroy = null;\n        } else {\n            let { dom: dom, destroy: destroy } = content;\n            wrap.appendChild(dom);\n            this.infoDestroy = destroy || null;\n        }\n        this.dom.appendChild(wrap);\n        this.view.requestMeasure(this.placeInfoReq);\n    }\n    updateSelectedOption(selected) {\n        let set = null;\n        for(let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++){\n            if (opt.nodeName != \"LI\" || !opt.id) i--; // A section header\n            else if (i == selected) {\n                if (!opt.hasAttribute(\"aria-selected\")) {\n                    opt.setAttribute(\"aria-selected\", \"true\");\n                    set = opt;\n                }\n            } else if (opt.hasAttribute(\"aria-selected\")) opt.removeAttribute(\"aria-selected\");\n        }\n        if (set) $9e3d41a34fba402a$var$scrollIntoView(this.list, set);\n        return set;\n    }\n    measureInfo() {\n        let sel = this.dom.querySelector(\"[aria-selected]\");\n        if (!sel || !this.info) return null;\n        let listRect = this.dom.getBoundingClientRect();\n        let infoRect = this.info.getBoundingClientRect();\n        let selRect = sel.getBoundingClientRect();\n        let space = this.space;\n        if (!space) {\n            let win = this.dom.ownerDocument.defaultView || window;\n            space = {\n                left: 0,\n                top: 0,\n                right: win.innerWidth,\n                bottom: win.innerHeight\n            };\n        }\n        if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space.top, listRect.top) + 10) return null;\n        return this.view.state.facet($9e3d41a34fba402a$var$completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space);\n    }\n    placeInfo(pos) {\n        if (this.info) {\n            if (pos) {\n                if (pos.style) this.info.style.cssText = pos.style;\n                this.info.className = \"cm-tooltip cm-completionInfo \" + (pos.class || \"\");\n            } else this.info.style.cssText = \"top: -1e6px\";\n        }\n    }\n    createListBox(options, id, range) {\n        const ul = document.createElement(\"ul\");\n        ul.id = id;\n        ul.setAttribute(\"role\", \"listbox\");\n        ul.setAttribute(\"aria-expanded\", \"true\");\n        ul.setAttribute(\"aria-label\", this.view.state.phrase(\"Completions\"));\n        let curSection = null;\n        for(let i = range.from; i < range.to; i++){\n            let { completion: completion, match: match } = options[i], { section: section } = completion;\n            if (section) {\n                let name = typeof section == \"string\" ? section : section.name;\n                if (name != curSection && (i > range.from || range.from == 0)) {\n                    curSection = name;\n                    if (typeof section != \"string\" && section.header) ul.appendChild(section.header(section));\n                    else {\n                        let header = ul.appendChild(document.createElement(\"completion-section\"));\n                        header.textContent = name;\n                    }\n                }\n            }\n            const li = ul.appendChild(document.createElement(\"li\"));\n            li.id = id + \"-\" + i;\n            li.setAttribute(\"role\", \"option\");\n            let cls = this.optionClass(completion);\n            if (cls) li.className = cls;\n            for (let source of this.optionContent){\n                let node = source(completion, this.view.state, match);\n                if (node) li.appendChild(node);\n            }\n        }\n        if (range.from) ul.classList.add(\"cm-completionListIncompleteTop\");\n        if (range.to < options.length) ul.classList.add(\"cm-completionListIncompleteBottom\");\n        return ul;\n    }\n    destroyInfo() {\n        if (this.info) {\n            if (this.infoDestroy) this.infoDestroy();\n            this.info.remove();\n            this.info = null;\n        }\n    }\n    destroy() {\n        this.destroyInfo();\n    }\n}\n// We allocate a new function instance every time the completion\n// changes to force redrawing/repositioning of the tooltip\nfunction $9e3d41a34fba402a$var$completionTooltip(stateField, applyCompletion) {\n    return (view)=>new $9e3d41a34fba402a$var$CompletionTooltip(view, stateField, applyCompletion);\n}\nfunction $9e3d41a34fba402a$var$scrollIntoView(container, element) {\n    let parent = container.getBoundingClientRect();\n    let self = element.getBoundingClientRect();\n    if (self.top < parent.top) container.scrollTop -= parent.top - self.top;\n    else if (self.bottom > parent.bottom) container.scrollTop += self.bottom - parent.bottom;\n}\n// Used to pick a preferred option when two options with the same\n// label occur in the result.\nfunction $9e3d41a34fba402a$var$score(option) {\n    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);\n}\nfunction $9e3d41a34fba402a$var$sortOptions(active, state) {\n    let options = [];\n    let sections = null;\n    let addOption = (option)=>{\n        options.push(option);\n        let { section: section } = option.completion;\n        if (section) {\n            if (!sections) sections = [];\n            let name = typeof section == \"string\" ? section : section.name;\n            if (!sections.some((s)=>s.name == name)) sections.push(typeof section == \"string\" ? {\n                name: name\n            } : section);\n        }\n    };\n    for (let a of active)if (a.hasResult()) {\n        let getMatch = a.result.getMatch;\n        if (a.result.filter === false) for (let option of a.result.options)addOption(new $9e3d41a34fba402a$var$Option(option, a.source, getMatch ? getMatch(option) : [], 1e9 - options.length));\n        else {\n            let matcher = new $9e3d41a34fba402a$var$FuzzyMatcher(state.sliceDoc(a.from, a.to));\n            for (let option of a.result.options)if (matcher.match(option.label)) {\n                let matched = !option.displayLabel ? matcher.matched : getMatch ? getMatch(option, matcher.matched) : [];\n                addOption(new $9e3d41a34fba402a$var$Option(option, a.source, matched, matcher.score + (option.boost || 0)));\n            }\n        }\n    }\n    if (sections) {\n        let sectionOrder = Object.create(null), pos = 0;\n        let cmp = (a, b)=>{\n            var _a, _b;\n            return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1);\n        };\n        for (let s of sections.sort(cmp)){\n            pos -= 1e5;\n            sectionOrder[s.name] = pos;\n        }\n        for (let option of options){\n            let { section: section } = option.completion;\n            if (section) option.score += sectionOrder[typeof section == \"string\" ? section : section.name];\n        }\n    }\n    let result = [], prev = null;\n    let compare = state.facet($9e3d41a34fba402a$var$completionConfig).compareCompletions;\n    for (let opt of options.sort((a, b)=>b.score - a.score || compare(a.completion, b.completion))){\n        let cur = opt.completion;\n        if (!prev || prev.label != cur.label || prev.detail != cur.detail || prev.type != null && cur.type != null && prev.type != cur.type || prev.apply != cur.apply || prev.boost != cur.boost) result.push(opt);\n        else if ($9e3d41a34fba402a$var$score(opt.completion) > $9e3d41a34fba402a$var$score(prev)) result[result.length - 1] = opt;\n        prev = opt.completion;\n    }\n    return result;\n}\nclass $9e3d41a34fba402a$var$CompletionDialog {\n    constructor(options, attrs, tooltip, timestamp, selected, disabled){\n        this.options = options;\n        this.attrs = attrs;\n        this.tooltip = tooltip;\n        this.timestamp = timestamp;\n        this.selected = selected;\n        this.disabled = disabled;\n    }\n    setSelected(selected, id) {\n        return selected == this.selected || selected >= this.options.length ? this : new $9e3d41a34fba402a$var$CompletionDialog(this.options, $9e3d41a34fba402a$var$makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);\n    }\n    static build(active, state, id, prev, conf) {\n        let options = $9e3d41a34fba402a$var$sortOptions(active, state);\n        if (!options.length) return prev && active.some((a)=>a.state == 1 /* Pending */ ) ? new $9e3d41a34fba402a$var$CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;\n        let selected = state.facet($9e3d41a34fba402a$var$completionConfig).selectOnOpen ? 0 : -1;\n        if (prev && prev.selected != selected && prev.selected != -1) {\n            let selectedValue = prev.options[prev.selected].completion;\n            for(let i = 0; i < options.length; i++)if (options[i].completion == selectedValue) {\n                selected = i;\n                break;\n            }\n        }\n        return new $9e3d41a34fba402a$var$CompletionDialog(options, $9e3d41a34fba402a$var$makeAttrs(id, selected), {\n            pos: active.reduce((a, b)=>b.hasResult() ? Math.min(a, b.from) : a, 1e8),\n            create: $9e3d41a34fba402a$var$completionTooltip($9e3d41a34fba402a$var$completionState, $9e3d41a34fba402a$var$applyCompletion),\n            above: conf.aboveCursor\n        }, prev ? prev.timestamp : Date.now(), selected, false);\n    }\n    map(changes) {\n        return new $9e3d41a34fba402a$var$CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {\n            pos: changes.mapPos(this.tooltip.pos)\n        }), this.timestamp, this.selected, this.disabled);\n    }\n}\nclass $9e3d41a34fba402a$var$CompletionState {\n    constructor(active, id, open){\n        this.active = active;\n        this.id = id;\n        this.open = open;\n    }\n    static start() {\n        return new $9e3d41a34fba402a$var$CompletionState($9e3d41a34fba402a$var$none, \"cm-ac-\" + Math.floor(Math.random() * 2e6).toString(36), null);\n    }\n    update(tr) {\n        let { state: state } = tr, conf = state.facet($9e3d41a34fba402a$var$completionConfig);\n        let sources = conf.override || state.languageDataAt(\"autocomplete\", $9e3d41a34fba402a$var$cur(state)).map($9e3d41a34fba402a$var$asSource);\n        let active = sources.map((source)=>{\n            let value = this.active.find((s)=>s.source == source) || new $9e3d41a34fba402a$var$ActiveSource(source, this.active.some((a)=>a.state != 0 /* Inactive */ ) ? 1 /* Pending */  : 0 /* Inactive */ );\n            return value.update(tr, conf);\n        });\n        if (active.length == this.active.length && active.every((a, i)=>a == this.active[i])) active = this.active;\n        let open = this.open;\n        if (open && tr.docChanged) open = open.map(tr.changes);\n        if (tr.selection || active.some((a)=>a.hasResult() && tr.changes.touchesRange(a.from, a.to)) || !$9e3d41a34fba402a$var$sameResults(active, this.active)) open = $9e3d41a34fba402a$var$CompletionDialog.build(active, state, this.id, open, conf);\n        else if (open && open.disabled && !active.some((a)=>a.state == 1 /* Pending */ )) open = null;\n        if (!open && active.every((a)=>a.state != 1 /* Pending */ ) && active.some((a)=>a.hasResult())) active = active.map((a)=>a.hasResult() ? new $9e3d41a34fba402a$var$ActiveSource(a.source, 0 /* Inactive */ ) : a);\n        for (let effect of tr.effects)if (effect.is($9e3d41a34fba402a$var$setSelectedEffect)) open = open && open.setSelected(effect.value, this.id);\n        return active == this.active && open == this.open ? this : new $9e3d41a34fba402a$var$CompletionState(active, this.id, open);\n    }\n    get tooltip() {\n        return this.open ? this.open.tooltip : null;\n    }\n    get attrs() {\n        return this.open ? this.open.attrs : $9e3d41a34fba402a$var$baseAttrs;\n    }\n}\nfunction $9e3d41a34fba402a$var$sameResults(a, b) {\n    if (a == b) return true;\n    for(let iA = 0, iB = 0;;){\n        while(iA < a.length && !a[iA].hasResult)iA++;\n        while(iB < b.length && !b[iB].hasResult)iB++;\n        let endA = iA == a.length, endB = iB == b.length;\n        if (endA || endB) return endA == endB;\n        if (a[iA++].result != b[iB++].result) return false;\n    }\n}\nconst $9e3d41a34fba402a$var$baseAttrs = {\n    \"aria-autocomplete\": \"list\"\n};\nfunction $9e3d41a34fba402a$var$makeAttrs(id, selected) {\n    let result = {\n        \"aria-autocomplete\": \"list\",\n        \"aria-haspopup\": \"listbox\",\n        \"aria-controls\": id\n    };\n    if (selected > -1) result[\"aria-activedescendant\"] = id + \"-\" + selected;\n    return result;\n}\nconst $9e3d41a34fba402a$var$none = [];\nfunction $9e3d41a34fba402a$var$getUserEvent(tr) {\n    return tr.isUserEvent(\"input.type\") ? \"input\" : tr.isUserEvent(\"delete.backward\") ? \"delete\" : null;\n}\nclass $9e3d41a34fba402a$var$ActiveSource {\n    constructor(source, state, explicitPos = -1){\n        this.source = source;\n        this.state = state;\n        this.explicitPos = explicitPos;\n    }\n    hasResult() {\n        return false;\n    }\n    update(tr, conf) {\n        let event = $9e3d41a34fba402a$var$getUserEvent(tr), value = this;\n        if (event) value = value.handleUserEvent(tr, event, conf);\n        else if (tr.docChanged) value = value.handleChange(tr);\n        else if (tr.selection && value.state != 0 /* Inactive */ ) value = new $9e3d41a34fba402a$var$ActiveSource(value.source, 0 /* Inactive */ );\n        for (let effect of tr.effects){\n            if (effect.is($9e3d41a34fba402a$var$startCompletionEffect)) value = new $9e3d41a34fba402a$var$ActiveSource(value.source, 1 /* Pending */ , effect.value ? $9e3d41a34fba402a$var$cur(tr.state) : -1);\n            else if (effect.is($9e3d41a34fba402a$var$closeCompletionEffect)) value = new $9e3d41a34fba402a$var$ActiveSource(value.source, 0 /* Inactive */ );\n            else if (effect.is($9e3d41a34fba402a$var$setActiveEffect)) {\n                for (let active of effect.value)if (active.source == value.source) value = active;\n            }\n        }\n        return value;\n    }\n    handleUserEvent(tr, type, conf) {\n        return type == \"delete\" || !conf.activateOnTyping ? this.map(tr.changes) : new $9e3d41a34fba402a$var$ActiveSource(this.source, 1 /* Pending */ );\n    }\n    handleChange(tr) {\n        return tr.changes.touchesRange($9e3d41a34fba402a$var$cur(tr.startState)) ? new $9e3d41a34fba402a$var$ActiveSource(this.source, 0 /* Inactive */ ) : this.map(tr.changes);\n    }\n    map(changes) {\n        return changes.empty || this.explicitPos < 0 ? this : new $9e3d41a34fba402a$var$ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));\n    }\n}\nclass $9e3d41a34fba402a$var$ActiveResult extends $9e3d41a34fba402a$var$ActiveSource {\n    constructor(source, explicitPos, result, from, to){\n        super(source, 2 /* Result */ , explicitPos);\n        this.result = result;\n        this.from = from;\n        this.to = to;\n    }\n    hasResult() {\n        return true;\n    }\n    handleUserEvent(tr, type, conf) {\n        var _a;\n        let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);\n        let pos = $9e3d41a34fba402a$var$cur(tr.state);\n        if ((this.explicitPos < 0 ? pos <= from : pos < this.from) || pos > to || type == \"delete\" && $9e3d41a34fba402a$var$cur(tr.startState) == this.from) return new $9e3d41a34fba402a$var$ActiveSource(this.source, type == \"input\" && conf.activateOnTyping ? 1 /* Pending */  : 0 /* Inactive */ );\n        let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos), updated;\n        if ($9e3d41a34fba402a$var$checkValid(this.result.validFor, tr.state, from, to)) return new $9e3d41a34fba402a$var$ActiveResult(this.source, explicitPos, this.result, from, to);\n        if (this.result.update && (updated = this.result.update(this.result, from, to, new $9e3d41a34fba402a$export$7b73e80391102dce(tr.state, pos, explicitPos >= 0)))) return new $9e3d41a34fba402a$var$ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : $9e3d41a34fba402a$var$cur(tr.state));\n        return new $9e3d41a34fba402a$var$ActiveSource(this.source, 1 /* Pending */ , explicitPos);\n    }\n    handleChange(tr) {\n        return tr.changes.touchesRange(this.from, this.to) ? new $9e3d41a34fba402a$var$ActiveSource(this.source, 0 /* Inactive */ ) : this.map(tr.changes);\n    }\n    map(mapping) {\n        return mapping.empty ? this : new $9e3d41a34fba402a$var$ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));\n    }\n}\nfunction $9e3d41a34fba402a$var$checkValid(validFor, state, from, to) {\n    if (!validFor) return false;\n    let text = state.sliceDoc(from, to);\n    return typeof validFor == \"function\" ? validFor(text, from, to, state) : $9e3d41a34fba402a$var$ensureAnchor(validFor, true).test(text);\n}\nconst $9e3d41a34fba402a$var$setActiveEffect = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define({\n    map (sources, mapping) {\n        return sources.map((s)=>s.map(mapping));\n    }\n});\nconst $9e3d41a34fba402a$var$setSelectedEffect = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\nconst $9e3d41a34fba402a$var$completionState = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create () {\n        return $9e3d41a34fba402a$var$CompletionState.start();\n    },\n    update (value, tr) {\n        return value.update(tr);\n    },\n    provide: (f)=>[\n            (0, $071334078f8d3f8a$export$dba11b50e1aa3c12).from(f, (val)=>val.tooltip),\n            (0, $071334078f8d3f8a$export$eece2fccabbb77c5).contentAttributes.from(f, (state)=>state.attrs)\n        ]\n});\nfunction $9e3d41a34fba402a$var$applyCompletion(view, option) {\n    const apply = option.completion.apply || option.completion.label;\n    let result = view.state.field($9e3d41a34fba402a$var$completionState).active.find((a)=>a.source == option.source);\n    if (!(result instanceof $9e3d41a34fba402a$var$ActiveResult)) return false;\n    if (typeof apply == \"string\") view.dispatch(Object.assign(Object.assign({}, $9e3d41a34fba402a$export$496ff43229d73eba(view.state, apply, result.from, result.to)), {\n        annotations: $9e3d41a34fba402a$export$6c84d44c1ceeb831.of(option.completion)\n    }));\n    else apply(view, option.completion, result.from, result.to);\n    return true;\n}\n/**\nReturns a command that moves the completion selection forward or\nbackward by the given amount.\n*/ function $9e3d41a34fba402a$export$26f3a479ac65d653(forward, by = \"option\") {\n    return (view)=>{\n        let cState = view.state.field($9e3d41a34fba402a$var$completionState, false);\n        if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet($9e3d41a34fba402a$var$completionConfig).interactionDelay) return false;\n        let step = 1, tooltip;\n        if (by == \"page\" && (tooltip = (0, $071334078f8d3f8a$export$46455b4476d4b8e1)(view, cState.open.tooltip))) step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector(\"li\").offsetHeight) - 1);\n        let { length: length } = cState.open.options;\n        let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;\n        if (selected < 0) selected = by == \"page\" ? 0 : length - 1;\n        else if (selected >= length) selected = by == \"page\" ? length - 1 : 0;\n        view.dispatch({\n            effects: $9e3d41a34fba402a$var$setSelectedEffect.of(selected)\n        });\n        return true;\n    };\n}\n/**\nAccept the current completion.\n*/ const $9e3d41a34fba402a$export$537623a3380ccdae = (view)=>{\n    let cState = view.state.field($9e3d41a34fba402a$var$completionState, false);\n    if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet($9e3d41a34fba402a$var$completionConfig).interactionDelay) return false;\n    return $9e3d41a34fba402a$var$applyCompletion(view, cState.open.options[cState.open.selected]);\n};\n/**\nExplicitly start autocompletion.\n*/ const $9e3d41a34fba402a$export$8a36416d28f82fd5 = (view)=>{\n    let cState = view.state.field($9e3d41a34fba402a$var$completionState, false);\n    if (!cState) return false;\n    view.dispatch({\n        effects: $9e3d41a34fba402a$var$startCompletionEffect.of(true)\n    });\n    return true;\n};\n/**\nClose the currently active completion.\n*/ const $9e3d41a34fba402a$export$bdc62126738c63ab = (view)=>{\n    let cState = view.state.field($9e3d41a34fba402a$var$completionState, false);\n    if (!cState || !cState.active.some((a)=>a.state != 0 /* Inactive */ )) return false;\n    view.dispatch({\n        effects: $9e3d41a34fba402a$var$closeCompletionEffect.of(null)\n    });\n    return true;\n};\nclass $9e3d41a34fba402a$var$RunningQuery {\n    constructor(active, context){\n        this.active = active;\n        this.context = context;\n        this.time = Date.now();\n        this.updates = [];\n        // Note that 'undefined' means 'not done yet', whereas 'null' means\n        // 'query returned null'.\n        this.done = undefined;\n    }\n}\nconst $9e3d41a34fba402a$var$DebounceTime = 50, $9e3d41a34fba402a$var$MaxUpdateCount = 50, $9e3d41a34fba402a$var$MinAbortTime = 1000;\nconst $9e3d41a34fba402a$var$completionPlugin = /*@__PURE__*/ (0, $071334078f8d3f8a$export$44d5eccfd62adda7).fromClass(class {\n    constructor(view){\n        this.view = view;\n        this.debounceUpdate = -1;\n        this.running = [];\n        this.debounceAccept = -1;\n        this.composing = 0 /* None */ ;\n        for (let active of view.state.field($9e3d41a34fba402a$var$completionState).active)if (active.state == 1 /* Pending */ ) this.startQuery(active);\n    }\n    update(update) {\n        let cState = update.state.field($9e3d41a34fba402a$var$completionState);\n        if (!update.selectionSet && !update.docChanged && update.startState.field($9e3d41a34fba402a$var$completionState) == cState) return;\n        let doesReset = update.transactions.some((tr)=>{\n            return (tr.selection || tr.docChanged) && !$9e3d41a34fba402a$var$getUserEvent(tr);\n        });\n        for(let i = 0; i < this.running.length; i++){\n            let query = this.running[i];\n            if (doesReset || query.updates.length + update.transactions.length > $9e3d41a34fba402a$var$MaxUpdateCount && Date.now() - query.time > $9e3d41a34fba402a$var$MinAbortTime) {\n                for (let handler of query.context.abortListeners)try {\n                    handler();\n                } catch (e) {\n                    (0, $071334078f8d3f8a$export$f86b2a1a2ce291b3)(this.view.state, e);\n                }\n                query.context.abortListeners = null;\n                this.running.splice(i--, 1);\n            } else query.updates.push(...update.transactions);\n        }\n        if (this.debounceUpdate > -1) clearTimeout(this.debounceUpdate);\n        this.debounceUpdate = cState.active.some((a)=>a.state == 1 /* Pending */  && !this.running.some((q)=>q.active.source == a.source)) ? setTimeout(()=>this.startUpdate(), $9e3d41a34fba402a$var$DebounceTime) : -1;\n        if (this.composing != 0 /* None */ ) for (let tr of update.transactions){\n            if ($9e3d41a34fba402a$var$getUserEvent(tr) == \"input\") this.composing = 2 /* Changed */ ;\n            else if (this.composing == 2 /* Changed */  && tr.selection) this.composing = 3 /* ChangedAndMoved */ ;\n        }\n    }\n    startUpdate() {\n        this.debounceUpdate = -1;\n        let { state: state } = this.view, cState = state.field($9e3d41a34fba402a$var$completionState);\n        for (let active of cState.active)if (active.state == 1 /* Pending */  && !this.running.some((r)=>r.active.source == active.source)) this.startQuery(active);\n    }\n    startQuery(active) {\n        let { state: state } = this.view, pos = $9e3d41a34fba402a$var$cur(state);\n        let context = new $9e3d41a34fba402a$export$7b73e80391102dce(state, pos, active.explicitPos == pos);\n        let pending = new $9e3d41a34fba402a$var$RunningQuery(active, context);\n        this.running.push(pending);\n        Promise.resolve(active.source(context)).then((result)=>{\n            if (!pending.context.aborted) {\n                pending.done = result || null;\n                this.scheduleAccept();\n            }\n        }, (err)=>{\n            this.view.dispatch({\n                effects: $9e3d41a34fba402a$var$closeCompletionEffect.of(null)\n            });\n            (0, $071334078f8d3f8a$export$f86b2a1a2ce291b3)(this.view.state, err);\n        });\n    }\n    scheduleAccept() {\n        if (this.running.every((q)=>q.done !== undefined)) this.accept();\n        else if (this.debounceAccept < 0) this.debounceAccept = setTimeout(()=>this.accept(), $9e3d41a34fba402a$var$DebounceTime);\n    }\n    // For each finished query in this.running, try to create a result\n    // or, if appropriate, restart the query.\n    accept() {\n        var _a;\n        if (this.debounceAccept > -1) clearTimeout(this.debounceAccept);\n        this.debounceAccept = -1;\n        let updated = [];\n        let conf = this.view.state.facet($9e3d41a34fba402a$var$completionConfig);\n        for(let i = 0; i < this.running.length; i++){\n            let query = this.running[i];\n            if (query.done === undefined) continue;\n            this.running.splice(i--, 1);\n            if (query.done) {\n                let active = new $9e3d41a34fba402a$var$ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : $9e3d41a34fba402a$var$cur(query.updates.length ? query.updates[0].startState : this.view.state));\n                // Replay the transactions that happened since the start of\n                // the request and see if that preserves the result\n                for (let tr of query.updates)active = active.update(tr, conf);\n                if (active.hasResult()) {\n                    updated.push(active);\n                    continue;\n                }\n            }\n            let current = this.view.state.field($9e3d41a34fba402a$var$completionState).active.find((a)=>a.source == query.active.source);\n            if (current && current.state == 1 /* Pending */ ) {\n                if (query.done == null) {\n                    // Explicitly failed. Should clear the pending status if it\n                    // hasn't been re-set in the meantime.\n                    let active = new $9e3d41a34fba402a$var$ActiveSource(query.active.source, 0 /* Inactive */ );\n                    for (let tr of query.updates)active = active.update(tr, conf);\n                    if (active.state != 1 /* Pending */ ) updated.push(active);\n                } else // Cleared by subsequent transactions. Restart.\n                this.startQuery(current);\n            }\n        }\n        if (updated.length) this.view.dispatch({\n            effects: $9e3d41a34fba402a$var$setActiveEffect.of(updated)\n        });\n    }\n}, {\n    eventHandlers: {\n        blur (event) {\n            let state = this.view.state.field($9e3d41a34fba402a$var$completionState, false);\n            if (state && state.tooltip && this.view.state.facet($9e3d41a34fba402a$var$completionConfig).closeOnBlur) {\n                let dialog = state.open && (0, $071334078f8d3f8a$export$46455b4476d4b8e1)(this.view, state.open.tooltip);\n                if (!dialog || !dialog.dom.contains(event.relatedTarget)) this.view.dispatch({\n                    effects: $9e3d41a34fba402a$var$closeCompletionEffect.of(null)\n                });\n            }\n        },\n        compositionstart () {\n            this.composing = 1 /* Started */ ;\n        },\n        compositionend () {\n            if (this.composing == 3 /* ChangedAndMoved */ ) // Safari fires compositionend events synchronously, possibly\n            // from inside an update, so dispatch asynchronously to avoid reentrancy\n            setTimeout(()=>this.view.dispatch({\n                    effects: $9e3d41a34fba402a$var$startCompletionEffect.of(false)\n                }), 20);\n            this.composing = 0 /* None */ ;\n        }\n    }\n});\nconst $9e3d41a34fba402a$var$baseTheme = /*@__PURE__*/ (0, $071334078f8d3f8a$export$eece2fccabbb77c5).baseTheme({\n    \".cm-tooltip.cm-tooltip-autocomplete\": {\n        \"& > ul\": {\n            fontFamily: \"monospace\",\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden auto\",\n            maxWidth_fallback: \"700px\",\n            maxWidth: \"min(700px, 95vw)\",\n            minWidth: \"250px\",\n            maxHeight: \"10em\",\n            height: \"100%\",\n            listStyle: \"none\",\n            margin: 0,\n            padding: 0,\n            \"& > li, & > completion-section\": {\n                padding: \"1px 3px\",\n                lineHeight: 1.2\n            },\n            \"& > li\": {\n                overflowX: \"hidden\",\n                textOverflow: \"ellipsis\",\n                cursor: \"pointer\"\n            },\n            \"& > completion-section\": {\n                display: \"list-item\",\n                borderBottom: \"1px solid silver\",\n                paddingLeft: \"0.5em\",\n                opacity: 0.7\n            }\n        }\n    },\n    \"&light .cm-tooltip-autocomplete ul li[aria-selected]\": {\n        background: \"#17c\",\n        color: \"white\"\n    },\n    \"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\n        background: \"#777\"\n    },\n    \"&dark .cm-tooltip-autocomplete ul li[aria-selected]\": {\n        background: \"#347\",\n        color: \"white\"\n    },\n    \"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\n        background: \"#444\"\n    },\n    \".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after\": {\n        content: '\"\\xb7\\xb7\\xb7\"',\n        opacity: 0.5,\n        display: \"block\",\n        textAlign: \"center\"\n    },\n    \".cm-tooltip.cm-completionInfo\": {\n        position: \"absolute\",\n        padding: \"3px 9px\",\n        width: \"max-content\",\n        maxWidth: `${400 /* Width */ }px`,\n        boxSizing: \"border-box\"\n    },\n    \".cm-completionInfo.cm-completionInfo-left\": {\n        right: \"100%\"\n    },\n    \".cm-completionInfo.cm-completionInfo-right\": {\n        left: \"100%\"\n    },\n    \".cm-completionInfo.cm-completionInfo-left-narrow\": {\n        right: `${30 /* Margin */ }px`\n    },\n    \".cm-completionInfo.cm-completionInfo-right-narrow\": {\n        left: `${30 /* Margin */ }px`\n    },\n    \"&light .cm-snippetField\": {\n        backgroundColor: \"#00000022\"\n    },\n    \"&dark .cm-snippetField\": {\n        backgroundColor: \"#ffffff22\"\n    },\n    \".cm-snippetFieldPosition\": {\n        verticalAlign: \"text-top\",\n        width: 0,\n        height: \"1.15em\",\n        display: \"inline-block\",\n        margin: \"0 -0.7px -.7em\",\n        borderLeft: \"1.4px dotted #888\"\n    },\n    \".cm-completionMatchedText\": {\n        textDecoration: \"underline\"\n    },\n    \".cm-completionDetail\": {\n        marginLeft: \"0.5em\",\n        fontStyle: \"italic\"\n    },\n    \".cm-completionIcon\": {\n        fontSize: \"90%\",\n        width: \".8em\",\n        display: \"inline-block\",\n        textAlign: \"center\",\n        paddingRight: \".6em\",\n        opacity: \"0.6\",\n        boxSizing: \"content-box\"\n    },\n    \".cm-completionIcon-function, .cm-completionIcon-method\": {\n        \"&:after\": {\n            content: \"'ƒ'\"\n        }\n    },\n    \".cm-completionIcon-class\": {\n        \"&:after\": {\n            content: \"'○'\"\n        }\n    },\n    \".cm-completionIcon-interface\": {\n        \"&:after\": {\n            content: \"'◌'\"\n        }\n    },\n    \".cm-completionIcon-variable\": {\n        \"&:after\": {\n            content: \"'\\uD835\\uDC65'\"\n        }\n    },\n    \".cm-completionIcon-constant\": {\n        \"&:after\": {\n            content: \"'\\uD835\\uDC36'\"\n        }\n    },\n    \".cm-completionIcon-type\": {\n        \"&:after\": {\n            content: \"'\\uD835\\uDC61'\"\n        }\n    },\n    \".cm-completionIcon-enum\": {\n        \"&:after\": {\n            content: \"'∪'\"\n        }\n    },\n    \".cm-completionIcon-property\": {\n        \"&:after\": {\n            content: \"'□'\"\n        }\n    },\n    \".cm-completionIcon-keyword\": {\n        \"&:after\": {\n            content: \"'\\uD83D\\uDD11︎'\"\n        } // Disable emoji rendering\n    },\n    \".cm-completionIcon-namespace\": {\n        \"&:after\": {\n            content: \"'▢'\"\n        }\n    },\n    \".cm-completionIcon-text\": {\n        \"&:after\": {\n            content: \"'abc'\",\n            fontSize: \"50%\",\n            verticalAlign: \"middle\"\n        }\n    }\n});\nclass $9e3d41a34fba402a$var$FieldPos {\n    constructor(field, line, from, to){\n        this.field = field;\n        this.line = line;\n        this.from = from;\n        this.to = to;\n    }\n}\nclass $9e3d41a34fba402a$var$FieldRange {\n    constructor(field, from, to){\n        this.field = field;\n        this.from = from;\n        this.to = to;\n    }\n    map(changes) {\n        let from = changes.mapPos(this.from, -1, (0, $ccfb9497d8ef598f$export$39cf3280165f92aa).TrackDel);\n        let to = changes.mapPos(this.to, 1, (0, $ccfb9497d8ef598f$export$39cf3280165f92aa).TrackDel);\n        return from == null || to == null ? null : new $9e3d41a34fba402a$var$FieldRange(this.field, from, to);\n    }\n}\nclass $9e3d41a34fba402a$var$Snippet {\n    constructor(lines, fieldPositions){\n        this.lines = lines;\n        this.fieldPositions = fieldPositions;\n    }\n    instantiate(state, pos) {\n        let text = [], lineStart = [\n            pos\n        ];\n        let lineObj = state.doc.lineAt(pos), baseIndent = /^\\s*/.exec(lineObj.text)[0];\n        for (let line of this.lines){\n            if (text.length) {\n                let indent = baseIndent, tabs = /^\\t*/.exec(line)[0].length;\n                for(let i = 0; i < tabs; i++)indent += state.facet((0, $14831f1c512a5db9$export$9e0d0c2ce4d3ceb5));\n                lineStart.push(pos + indent.length - tabs);\n                line = indent + line.slice(tabs);\n            }\n            text.push(line);\n            pos += line.length + 1;\n        }\n        let ranges = this.fieldPositions.map((pos)=>new $9e3d41a34fba402a$var$FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));\n        return {\n            text: text,\n            ranges: ranges\n        };\n    }\n    static parse(template) {\n        let fields = [];\n        let lines = [], positions = [], m;\n        for (let line of template.split(/\\r\\n?|\\n/)){\n            while(m = /[#$]\\{(?:(\\d+)(?::([^}]*))?|([^}]*))\\}/.exec(line)){\n                let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || \"\", found = -1;\n                for(let i = 0; i < fields.length; i++)if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false) found = i;\n                if (found < 0) {\n                    let i = 0;\n                    while(i < fields.length && (seq == null || fields[i].seq != null && fields[i].seq < seq))i++;\n                    fields.splice(i, 0, {\n                        seq: seq,\n                        name: name\n                    });\n                    found = i;\n                    for (let pos of positions)if (pos.field >= found) pos.field++;\n                }\n                positions.push(new $9e3d41a34fba402a$var$FieldPos(found, lines.length, m.index, m.index + name.length));\n                line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);\n            }\n            for(let esc; esc = /\\\\([{}])/.exec(line);){\n                line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);\n                for (let pos of positions)if (pos.line == lines.length && pos.from > esc.index) {\n                    pos.from--;\n                    pos.to--;\n                }\n            }\n            lines.push(line);\n        }\n        return new $9e3d41a34fba402a$var$Snippet(lines, positions);\n    }\n}\nlet $9e3d41a34fba402a$var$fieldMarker = /*@__PURE__*/ (0, $071334078f8d3f8a$export$10e30b733df217ea).widget({\n    widget: /*@__PURE__*/ new class extends (0, $071334078f8d3f8a$export$95cdd842edb044c5) {\n        toDOM() {\n            let span = document.createElement(\"span\");\n            span.className = \"cm-snippetFieldPosition\";\n            return span;\n        }\n        ignoreEvent() {\n            return false;\n        }\n    }\n});\nlet $9e3d41a34fba402a$var$fieldRange = /*@__PURE__*/ (0, $071334078f8d3f8a$export$10e30b733df217ea).mark({\n    class: \"cm-snippetField\"\n});\nclass $9e3d41a34fba402a$var$ActiveSnippet {\n    constructor(ranges, active){\n        this.ranges = ranges;\n        this.active = active;\n        this.deco = (0, $071334078f8d3f8a$export$10e30b733df217ea).set(ranges.map((r)=>(r.from == r.to ? $9e3d41a34fba402a$var$fieldMarker : $9e3d41a34fba402a$var$fieldRange).range(r.from, r.to)));\n    }\n    map(changes) {\n        let ranges = [];\n        for (let r of this.ranges){\n            let mapped = r.map(changes);\n            if (!mapped) return null;\n            ranges.push(mapped);\n        }\n        return new $9e3d41a34fba402a$var$ActiveSnippet(ranges, this.active);\n    }\n    selectionInsideField(sel) {\n        return sel.ranges.every((range)=>this.ranges.some((r)=>r.field == this.active && r.from <= range.from && r.to >= range.to));\n    }\n}\nconst $9e3d41a34fba402a$var$setActive = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define({\n    map (value, changes) {\n        return value && value.map(changes);\n    }\n});\nconst $9e3d41a34fba402a$var$moveToField = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\nconst $9e3d41a34fba402a$var$snippetState = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create () {\n        return null;\n    },\n    update (value, tr) {\n        for (let effect of tr.effects){\n            if (effect.is($9e3d41a34fba402a$var$setActive)) return effect.value;\n            if (effect.is($9e3d41a34fba402a$var$moveToField) && value) return new $9e3d41a34fba402a$var$ActiveSnippet(value.ranges, effect.value);\n        }\n        if (value && tr.docChanged) value = value.map(tr.changes);\n        if (value && tr.selection && !value.selectionInsideField(tr.selection)) value = null;\n        return value;\n    },\n    provide: (f)=>(0, $071334078f8d3f8a$export$eece2fccabbb77c5).decorations.from(f, (val)=>val ? val.deco : (0, $071334078f8d3f8a$export$10e30b733df217ea).none)\n});\nfunction $9e3d41a34fba402a$var$fieldSelection(ranges, field) {\n    return (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).create(ranges.filter((r)=>r.field == field).map((r)=>(0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(r.from, r.to)));\n}\n/**\nConvert a snippet template to a function that can\n[apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written\nusing syntax like this:\n\n    \"for (let ${index} = 0; ${index} < ${end}; ${index}++) {\\n\\t${}\\n}\"\n\nEach `${}` placeholder (you may also use `#{}`) indicates a field\nthat the user can fill in. Its name, if any, will be the default\ncontent for the field.\n\nWhen the snippet is activated by calling the returned function,\nthe code is inserted at the given position. Newlines in the\ntemplate are indented by the indentation of the start line, plus\none [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after\nthe newline.\n\nOn activation, (all instances of) the first field are selected.\nThe user can move between fields with Tab and Shift-Tab as long as\nthe fields are active. Moving to the last field or moving the\ncursor out of the current field deactivates the fields.\n\nThe order of fields defaults to textual order, but you can add\nnumbers to placeholders (`${1}` or `${1:defaultText}`) to provide\na custom order.\n\nTo include a literal `{` or `}` in your template, put a backslash\nin front of it. This will be removed and the brace will not be\ninterpreted as indicating a placeholder.\n*/ function $9e3d41a34fba402a$export$f77f1ac5bf251232(template) {\n    let snippet = $9e3d41a34fba402a$var$Snippet.parse(template);\n    return (editor, completion, from, to)=>{\n        let { text: text, ranges: ranges } = snippet.instantiate(editor.state, from);\n        let spec = {\n            changes: {\n                from: from,\n                to: to,\n                insert: (0, $ccfb9497d8ef598f$export$5f1af8db9871e1d6).of(text)\n            },\n            scrollIntoView: true,\n            annotations: completion ? $9e3d41a34fba402a$export$6c84d44c1ceeb831.of(completion) : undefined\n        };\n        if (ranges.length) spec.selection = $9e3d41a34fba402a$var$fieldSelection(ranges, 0);\n        if (ranges.length > 1) {\n            let active = new $9e3d41a34fba402a$var$ActiveSnippet(ranges, 0);\n            let effects = spec.effects = [\n                $9e3d41a34fba402a$var$setActive.of(active)\n            ];\n            if (editor.state.field($9e3d41a34fba402a$var$snippetState, false) === undefined) effects.push((0, $ccfb9497d8ef598f$export$95000d4efaa4321f).appendConfig.of([\n                $9e3d41a34fba402a$var$snippetState,\n                $9e3d41a34fba402a$var$addSnippetKeymap,\n                $9e3d41a34fba402a$var$snippetPointerHandler,\n                $9e3d41a34fba402a$var$baseTheme\n            ]));\n        }\n        editor.dispatch(editor.state.update(spec));\n    };\n}\nfunction $9e3d41a34fba402a$var$moveField(dir) {\n    return ({ state: state, dispatch: dispatch })=>{\n        let active = state.field($9e3d41a34fba402a$var$snippetState, false);\n        if (!active || dir < 0 && active.active == 0) return false;\n        let next = active.active + dir, last = dir > 0 && !active.ranges.some((r)=>r.field == next + dir);\n        dispatch(state.update({\n            selection: $9e3d41a34fba402a$var$fieldSelection(active.ranges, next),\n            effects: $9e3d41a34fba402a$var$setActive.of(last ? null : new $9e3d41a34fba402a$var$ActiveSnippet(active.ranges, next))\n        }));\n        return true;\n    };\n}\n/**\nA command that clears the active snippet, if any.\n*/ const $9e3d41a34fba402a$export$4d00dce2599b1df3 = ({ state: state, dispatch: dispatch })=>{\n    let active = state.field($9e3d41a34fba402a$var$snippetState, false);\n    if (!active) return false;\n    dispatch(state.update({\n        effects: $9e3d41a34fba402a$var$setActive.of(null)\n    }));\n    return true;\n};\n/**\nMove to the next snippet field, if available.\n*/ const $9e3d41a34fba402a$export$d8da8fdad886df2f = /*@__PURE__*/ $9e3d41a34fba402a$var$moveField(1);\n/**\nMove to the previous snippet field, if available.\n*/ const $9e3d41a34fba402a$export$8d02b23b64ec425c = /*@__PURE__*/ $9e3d41a34fba402a$var$moveField(-1);\n/**\nCheck if there is an active snippet with a next field for\n`nextSnippetField` to move to.\n*/ function $9e3d41a34fba402a$export$9c250e449e4af222(state) {\n    let active = state.field($9e3d41a34fba402a$var$snippetState, false);\n    return !!(active && active.ranges.some((r)=>r.field == active.active + 1));\n}\n/**\nReturns true if there is an active snippet and a previous field\nfor `prevSnippetField` to move to.\n*/ function $9e3d41a34fba402a$export$ace2e22fa9996777(state) {\n    let active = state.field($9e3d41a34fba402a$var$snippetState, false);\n    return !!(active && active.active > 0);\n}\nconst $9e3d41a34fba402a$var$defaultSnippetKeymap = [\n    {\n        key: \"Tab\",\n        run: $9e3d41a34fba402a$export$d8da8fdad886df2f,\n        shift: $9e3d41a34fba402a$export$8d02b23b64ec425c\n    },\n    {\n        key: \"Escape\",\n        run: $9e3d41a34fba402a$export$4d00dce2599b1df3\n    }\n];\n/**\nA facet that can be used to configure the key bindings used by\nsnippets. The default binds Tab to\n[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to\n[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape\nto [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).\n*/ const $9e3d41a34fba402a$export$1808c2f24fc99b36 = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (maps) {\n        return maps.length ? maps[0] : $9e3d41a34fba402a$var$defaultSnippetKeymap;\n    }\n});\nconst $9e3d41a34fba402a$var$addSnippetKeymap = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$b92464a736444411).highest(/*@__PURE__*/ (0, $071334078f8d3f8a$export$5043418e2ef368d5).compute([\n    $9e3d41a34fba402a$export$1808c2f24fc99b36\n], (state)=>state.facet($9e3d41a34fba402a$export$1808c2f24fc99b36)));\n/**\nCreate a completion from a snippet. Returns an object with the\nproperties from `completion`, plus an `apply` function that\napplies the snippet.\n*/ function $9e3d41a34fba402a$export$975ef56e648d23ad(template, completion) {\n    return Object.assign(Object.assign({}, completion), {\n        apply: $9e3d41a34fba402a$export$f77f1ac5bf251232(template)\n    });\n}\nconst $9e3d41a34fba402a$var$snippetPointerHandler = /*@__PURE__*/ (0, $071334078f8d3f8a$export$eece2fccabbb77c5).domEventHandlers({\n    mousedown (event, view) {\n        let active = view.state.field($9e3d41a34fba402a$var$snippetState, false), pos;\n        if (!active || (pos = view.posAtCoords({\n            x: event.clientX,\n            y: event.clientY\n        })) == null) return false;\n        let match = active.ranges.find((r)=>r.from <= pos && r.to >= pos);\n        if (!match || match.field == active.active) return false;\n        view.dispatch({\n            selection: $9e3d41a34fba402a$var$fieldSelection(active.ranges, match.field),\n            effects: $9e3d41a34fba402a$var$setActive.of(active.ranges.some((r)=>r.field > match.field) ? new $9e3d41a34fba402a$var$ActiveSnippet(active.ranges, match.field) : null)\n        });\n        return true;\n    }\n});\nfunction $9e3d41a34fba402a$var$wordRE(wordChars) {\n    let escaped = wordChars.replace(/[\\\\[.+*?(){|^$]/g, \"\\\\$&\");\n    try {\n        return new RegExp(`[\\\\p{Alphabetic}\\\\p{Number}_${escaped}]+`, \"ug\");\n    } catch (_a) {\n        return new RegExp(`[\\w${escaped}]`, \"g\");\n    }\n}\nfunction $9e3d41a34fba402a$var$mapRE(re, f) {\n    return new RegExp(f(re.source), re.unicode ? \"u\" : \"\");\n}\nconst $9e3d41a34fba402a$var$wordCaches = /*@__PURE__*/ Object.create(null);\nfunction $9e3d41a34fba402a$var$wordCache(wordChars) {\n    return $9e3d41a34fba402a$var$wordCaches[wordChars] || ($9e3d41a34fba402a$var$wordCaches[wordChars] = new WeakMap);\n}\nfunction $9e3d41a34fba402a$var$storeWords(doc, wordRE, result, seen, ignoreAt) {\n    for(let lines = doc.iterLines(), pos = 0; !lines.next().done;){\n        let { value: value } = lines, m;\n        wordRE.lastIndex = 0;\n        while(m = wordRE.exec(value))if (!seen[m[0]] && pos + m.index != ignoreAt) {\n            result.push({\n                type: \"text\",\n                label: m[0]\n            });\n            seen[m[0]] = true;\n            if (result.length >= 2000 /* MaxList */ ) return;\n        }\n        pos += value.length + 1;\n    }\n}\nfunction $9e3d41a34fba402a$var$collectWords(doc, cache, wordRE, to, ignoreAt) {\n    let big = doc.length >= 1000 /* MinCacheLen */ ;\n    let cached = big && cache.get(doc);\n    if (cached) return cached;\n    let result = [], seen = Object.create(null);\n    if (doc.children) {\n        let pos = 0;\n        for (let ch of doc.children){\n            if (ch.length >= 1000 /* MinCacheLen */ ) {\n                for (let c of $9e3d41a34fba402a$var$collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos))if (!seen[c.label]) {\n                    seen[c.label] = true;\n                    result.push(c);\n                }\n            } else $9e3d41a34fba402a$var$storeWords(ch, wordRE, result, seen, ignoreAt - pos);\n            pos += ch.length + 1;\n        }\n    } else $9e3d41a34fba402a$var$storeWords(doc, wordRE, result, seen, ignoreAt);\n    if (big && result.length < 2000 /* MaxList */ ) cache.set(doc, result);\n    return result;\n}\n/**\nA completion source that will scan the document for words (using a\n[character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and\nreturn those as completions.\n*/ const $9e3d41a34fba402a$export$a018df98be431a1 = (context)=>{\n    let wordChars = context.state.languageDataAt(\"wordChars\", context.pos).join(\"\");\n    let re = $9e3d41a34fba402a$var$wordRE(wordChars);\n    let token = context.matchBefore($9e3d41a34fba402a$var$mapRE(re, (s)=>s + \"$\"));\n    if (!token && !context.explicit) return null;\n    let from = token ? token.from : context.pos;\n    let options = $9e3d41a34fba402a$var$collectWords(context.state.doc, $9e3d41a34fba402a$var$wordCache(wordChars), re, 50000 /* Range */ , from);\n    return {\n        from: from,\n        options: options,\n        validFor: $9e3d41a34fba402a$var$mapRE(re, (s)=>\"^\" + s)\n    };\n};\nconst $9e3d41a34fba402a$var$defaults = {\n    brackets: [\n        \"(\",\n        \"[\",\n        \"{\",\n        \"'\",\n        '\"'\n    ],\n    before: \")]}:;>\",\n    stringPrefixes: []\n};\nconst $9e3d41a34fba402a$var$closeBracketEffect = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define({\n    map (value, mapping) {\n        let mapped = mapping.mapPos(value, -1, (0, $ccfb9497d8ef598f$export$39cf3280165f92aa).TrackAfter);\n        return mapped == null ? undefined : mapped;\n    }\n});\nconst $9e3d41a34fba402a$var$closedBracket = /*@__PURE__*/ new class extends (0, $ccfb9497d8ef598f$export$d60f08ed93a48611) {\n};\n$9e3d41a34fba402a$var$closedBracket.startSide = 1;\n$9e3d41a34fba402a$var$closedBracket.endSide = -1;\nconst $9e3d41a34fba402a$var$bracketState = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create () {\n        return (0, $ccfb9497d8ef598f$export$34cb5241245008dd).empty;\n    },\n    update (value, tr) {\n        if (tr.selection) {\n            let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;\n            let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;\n            if (lineStart != tr.changes.mapPos(prevLineStart, -1)) value = (0, $ccfb9497d8ef598f$export$34cb5241245008dd).empty;\n        }\n        value = value.map(tr.changes);\n        for (let effect of tr.effects)if (effect.is($9e3d41a34fba402a$var$closeBracketEffect)) value = value.update({\n            add: [\n                $9e3d41a34fba402a$var$closedBracket.range(effect.value, effect.value + 1)\n            ]\n        });\n        return value;\n    }\n});\n/**\nExtension to enable bracket-closing behavior. When a closeable\nbracket is typed, its closing bracket is immediately inserted\nafter the cursor. When closing a bracket directly in front of a\nclosing bracket inserted by the extension, the cursor moves over\nthat bracket.\n*/ function $9e3d41a34fba402a$export$69e4e9d3300ff824() {\n    return [\n        $9e3d41a34fba402a$var$inputHandler,\n        $9e3d41a34fba402a$var$bracketState\n    ];\n}\nconst $9e3d41a34fba402a$var$definedClosing = \"()[]{}<>\";\nfunction $9e3d41a34fba402a$var$closing(ch) {\n    for(let i = 0; i < $9e3d41a34fba402a$var$definedClosing.length; i += 2)if ($9e3d41a34fba402a$var$definedClosing.charCodeAt(i) == ch) return $9e3d41a34fba402a$var$definedClosing.charAt(i + 1);\n    return (0, $ccfb9497d8ef598f$export$73bfc63873071f74)(ch < 128 ? ch : ch + 1);\n}\nfunction $9e3d41a34fba402a$var$config(state, pos) {\n    return state.languageDataAt(\"closeBrackets\", pos)[0] || $9e3d41a34fba402a$var$defaults;\n}\nconst $9e3d41a34fba402a$var$android = typeof navigator == \"object\" && /*@__PURE__*/ /Android\\b/.test(navigator.userAgent);\nconst $9e3d41a34fba402a$var$inputHandler = /*@__PURE__*/ (0, $071334078f8d3f8a$export$eece2fccabbb77c5).inputHandler.of((view, from, to, insert)=>{\n    if (($9e3d41a34fba402a$var$android ? view.composing : view.compositionStarted) || view.state.readOnly) return false;\n    let sel = view.state.selection.main;\n    if (insert.length > 2 || insert.length == 2 && (0, $ccfb9497d8ef598f$export$a870abf234f6353c)((0, $ccfb9497d8ef598f$export$42977f40461e1360)(insert, 0)) == 1 || from != sel.from || to != sel.to) return false;\n    let tr = $9e3d41a34fba402a$export$7ce1ae5219095222(view.state, insert);\n    if (!tr) return false;\n    view.dispatch(tr);\n    return true;\n});\n/**\nCommand that implements deleting a pair of matching brackets when\nthe cursor is between them.\n*/ const $9e3d41a34fba402a$export$5339d701ea89967c = ({ state: state, dispatch: dispatch })=>{\n    if (state.readOnly) return false;\n    let conf = $9e3d41a34fba402a$var$config(state, state.selection.main.head);\n    let tokens = conf.brackets || $9e3d41a34fba402a$var$defaults.brackets;\n    let dont = null, changes = state.changeByRange((range)=>{\n        if (range.empty) {\n            let before = $9e3d41a34fba402a$var$prevChar(state.doc, range.head);\n            for (let token of tokens){\n                if (token == before && $9e3d41a34fba402a$var$nextChar(state.doc, range.head) == $9e3d41a34fba402a$var$closing((0, $ccfb9497d8ef598f$export$42977f40461e1360)(token, 0))) return {\n                    changes: {\n                        from: range.head - token.length,\n                        to: range.head + token.length\n                    },\n                    range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(range.head - token.length)\n                };\n            }\n        }\n        return {\n            range: dont = range\n        };\n    });\n    if (!dont) dispatch(state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"delete.backward\"\n    }));\n    return !dont;\n};\n/**\nClose-brackets related key bindings. Binds Backspace to\n[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).\n*/ const $9e3d41a34fba402a$export$9477e95792b48f4a = [\n    {\n        key: \"Backspace\",\n        run: $9e3d41a34fba402a$export$5339d701ea89967c\n    }\n];\n/**\nImplements the extension's behavior on text insertion. If the\ngiven string counts as a bracket in the language around the\nselection, and replacing the selection with it requires custom\nbehavior (inserting a closing version or skipping past a\npreviously-closed bracket), this function returns a transaction\nrepresenting that custom behavior. (You only need this if you want\nto programmatically insert brackets—the\n[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will\ntake care of running this for user input.)\n*/ function $9e3d41a34fba402a$export$7ce1ae5219095222(state, bracket) {\n    let conf = $9e3d41a34fba402a$var$config(state, state.selection.main.head);\n    let tokens = conf.brackets || $9e3d41a34fba402a$var$defaults.brackets;\n    for (let tok of tokens){\n        let closed = $9e3d41a34fba402a$var$closing((0, $ccfb9497d8ef598f$export$42977f40461e1360)(tok, 0));\n        if (bracket == tok) return closed == tok ? $9e3d41a34fba402a$var$handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : $9e3d41a34fba402a$var$handleOpen(state, tok, closed, conf.before || $9e3d41a34fba402a$var$defaults.before);\n        if (bracket == closed && $9e3d41a34fba402a$var$closedBracketAt(state, state.selection.main.from)) return $9e3d41a34fba402a$var$handleClose(state, tok, closed);\n    }\n    return null;\n}\nfunction $9e3d41a34fba402a$var$closedBracketAt(state, pos) {\n    let found = false;\n    state.field($9e3d41a34fba402a$var$bracketState).between(0, state.doc.length, (from)=>{\n        if (from == pos) found = true;\n    });\n    return found;\n}\nfunction $9e3d41a34fba402a$var$nextChar(doc, pos) {\n    let next = doc.sliceString(pos, pos + 2);\n    return next.slice(0, (0, $ccfb9497d8ef598f$export$a870abf234f6353c)((0, $ccfb9497d8ef598f$export$42977f40461e1360)(next, 0)));\n}\nfunction $9e3d41a34fba402a$var$prevChar(doc, pos) {\n    let prev = doc.sliceString(pos - 2, pos);\n    return (0, $ccfb9497d8ef598f$export$a870abf234f6353c)((0, $ccfb9497d8ef598f$export$42977f40461e1360)(prev, 0)) == prev.length ? prev : prev.slice(1);\n}\nfunction $9e3d41a34fba402a$var$handleOpen(state, open, close, closeBefore) {\n    let dont = null, changes = state.changeByRange((range)=>{\n        if (!range.empty) return {\n            changes: [\n                {\n                    insert: open,\n                    from: range.from\n                },\n                {\n                    insert: close,\n                    from: range.to\n                }\n            ],\n            effects: $9e3d41a34fba402a$var$closeBracketEffect.of(range.to + open.length),\n            range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(range.anchor + open.length, range.head + open.length)\n        };\n        let next = $9e3d41a34fba402a$var$nextChar(state.doc, range.head);\n        if (!next || /\\s/.test(next) || closeBefore.indexOf(next) > -1) return {\n            changes: {\n                insert: open + close,\n                from: range.head\n            },\n            effects: $9e3d41a34fba402a$var$closeBracketEffect.of(range.head + open.length),\n            range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(range.head + open.length)\n        };\n        return {\n            range: dont = range\n        };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\nfunction $9e3d41a34fba402a$var$handleClose(state, _open, close) {\n    let dont = null, changes = state.changeByRange((range)=>{\n        if (range.empty && $9e3d41a34fba402a$var$nextChar(state.doc, range.head) == close) return {\n            changes: {\n                from: range.head,\n                to: range.head + close.length,\n                insert: close\n            },\n            range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(range.head + close.length)\n        };\n        return dont = {\n            range: range\n        };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\n// Handles cases where the open and close token are the same, and\n// possibly triple quotes (as in `\"\"\"abc\"\"\"`-style quoting).\nfunction $9e3d41a34fba402a$var$handleSame(state, token, allowTriple, config) {\n    let stringPrefixes = config.stringPrefixes || $9e3d41a34fba402a$var$defaults.stringPrefixes;\n    let dont = null, changes = state.changeByRange((range)=>{\n        if (!range.empty) return {\n            changes: [\n                {\n                    insert: token,\n                    from: range.from\n                },\n                {\n                    insert: token,\n                    from: range.to\n                }\n            ],\n            effects: $9e3d41a34fba402a$var$closeBracketEffect.of(range.to + token.length),\n            range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).range(range.anchor + token.length, range.head + token.length)\n        };\n        let pos = range.head, next = $9e3d41a34fba402a$var$nextChar(state.doc, pos), start;\n        if (next == token) {\n            if ($9e3d41a34fba402a$var$nodeStart(state, pos)) return {\n                changes: {\n                    insert: token + token,\n                    from: pos\n                },\n                effects: $9e3d41a34fba402a$var$closeBracketEffect.of(pos + token.length),\n                range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(pos + token.length)\n            };\n            else if ($9e3d41a34fba402a$var$closedBracketAt(state, pos)) {\n                let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;\n                let content = isTriple ? token + token + token : token;\n                return {\n                    changes: {\n                        from: pos,\n                        to: pos + content.length,\n                        insert: content\n                    },\n                    range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(pos + content.length)\n                };\n            }\n        } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = $9e3d41a34fba402a$var$canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && $9e3d41a34fba402a$var$nodeStart(state, start)) return {\n            changes: {\n                insert: token + token + token + token,\n                from: pos\n            },\n            effects: $9e3d41a34fba402a$var$closeBracketEffect.of(pos + token.length),\n            range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(pos + token.length)\n        };\n        else if (state.charCategorizer(pos)(next) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word) {\n            if ($9e3d41a34fba402a$var$canStartStringAt(state, pos, stringPrefixes) > -1 && !$9e3d41a34fba402a$var$probablyInString(state, pos, token, stringPrefixes)) return {\n                changes: {\n                    insert: token + token,\n                    from: pos\n                },\n                effects: $9e3d41a34fba402a$var$closeBracketEffect.of(pos + token.length),\n                range: (0, $ccfb9497d8ef598f$export$3bb1bd44aee62999).cursor(pos + token.length)\n            };\n        }\n        return {\n            range: dont = range\n        };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\nfunction $9e3d41a34fba402a$var$nodeStart(state, pos) {\n    let tree = (0, $14831f1c512a5db9$export$7fc98e56a4ca6be1)(state).resolveInner(pos + 1);\n    return tree.parent && tree.from == pos;\n}\nfunction $9e3d41a34fba402a$var$probablyInString(state, pos, quoteToken, prefixes) {\n    let node = (0, $14831f1c512a5db9$export$7fc98e56a4ca6be1)(state).resolveInner(pos, -1);\n    let maxPrefix = prefixes.reduce((m, p)=>Math.max(m, p.length), 0);\n    for(let i = 0; i < 5; i++){\n        let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));\n        let quotePos = start.indexOf(quoteToken);\n        if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {\n            let first = node.firstChild;\n            while(first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos){\n                if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken) return false;\n                first = first.firstChild;\n            }\n            return true;\n        }\n        let parent = node.to == pos && node.parent;\n        if (!parent) break;\n        node = parent;\n    }\n    return false;\n}\nfunction $9e3d41a34fba402a$var$canStartStringAt(state, pos, prefixes) {\n    let charCat = state.charCategorizer(pos);\n    if (charCat(state.sliceDoc(pos - 1, pos)) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word) return pos;\n    for (let prefix of prefixes){\n        let start = pos - prefix.length;\n        if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != (0, $ccfb9497d8ef598f$export$239a3d59567c1401).Word) return start;\n    }\n    return -1;\n}\n/**\nReturns an extension that enables autocompletion.\n*/ function $9e3d41a34fba402a$export$f95786d390465556(config = {}) {\n    return [\n        $9e3d41a34fba402a$var$completionState,\n        $9e3d41a34fba402a$var$completionConfig.of(config),\n        $9e3d41a34fba402a$var$completionPlugin,\n        $9e3d41a34fba402a$var$completionKeymapExt,\n        $9e3d41a34fba402a$var$baseTheme\n    ];\n}\n/**\nBasic keybindings for autocompletion.\n\n - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)\n - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)\n - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`\n - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)\n*/ const $9e3d41a34fba402a$export$2a3d759d156afab4 = [\n    {\n        key: \"Ctrl-Space\",\n        run: $9e3d41a34fba402a$export$8a36416d28f82fd5\n    },\n    {\n        key: \"Escape\",\n        run: $9e3d41a34fba402a$export$bdc62126738c63ab\n    },\n    {\n        key: \"ArrowDown\",\n        run: /*@__PURE__*/ $9e3d41a34fba402a$export$26f3a479ac65d653(true)\n    },\n    {\n        key: \"ArrowUp\",\n        run: /*@__PURE__*/ $9e3d41a34fba402a$export$26f3a479ac65d653(false)\n    },\n    {\n        key: \"PageDown\",\n        run: /*@__PURE__*/ $9e3d41a34fba402a$export$26f3a479ac65d653(true, \"page\")\n    },\n    {\n        key: \"PageUp\",\n        run: /*@__PURE__*/ $9e3d41a34fba402a$export$26f3a479ac65d653(false, \"page\")\n    },\n    {\n        key: \"Enter\",\n        run: $9e3d41a34fba402a$export$537623a3380ccdae\n    }\n];\nconst $9e3d41a34fba402a$var$completionKeymapExt = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$b92464a736444411).highest(/*@__PURE__*/ (0, $071334078f8d3f8a$export$5043418e2ef368d5).computeN([\n    $9e3d41a34fba402a$var$completionConfig\n], (state)=>state.facet($9e3d41a34fba402a$var$completionConfig).defaultKeymap ? [\n        $9e3d41a34fba402a$export$2a3d759d156afab4\n    ] : []));\n/**\nGet the current completion status. When completions are available,\nthis will return `\"active\"`. When completions are pending (in the\nprocess of being queried), this returns `\"pending\"`. Otherwise, it\nreturns `null`.\n*/ function $9e3d41a34fba402a$export$9eb35bf27959eae5(state) {\n    let cState = state.field($9e3d41a34fba402a$var$completionState, false);\n    return cState && cState.active.some((a)=>a.state == 1 /* Pending */ ) ? \"pending\" : cState && cState.active.some((a)=>a.state != 0 /* Inactive */ ) ? \"active\" : null;\n}\nconst $9e3d41a34fba402a$var$completionArrayCache = /*@__PURE__*/ new WeakMap;\n/**\nReturns the available completions as an array.\n*/ function $9e3d41a34fba402a$export$dc0f5d77fb0cbbf5(state) {\n    var _a;\n    let open = (_a = state.field($9e3d41a34fba402a$var$completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    if (!open || open.disabled) return [];\n    let completions = $9e3d41a34fba402a$var$completionArrayCache.get(open.options);\n    if (!completions) $9e3d41a34fba402a$var$completionArrayCache.set(open.options, completions = open.options.map((o)=>o.completion));\n    return completions;\n}\n/**\nReturn the currently selected completion, if any.\n*/ function $9e3d41a34fba402a$export$8c322db2cd50d0f1(state) {\n    var _a;\n    let open = (_a = state.field($9e3d41a34fba402a$var$completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    return open && !open.disabled && open.selected >= 0 ? open.options[open.selected].completion : null;\n}\n/**\nReturns the currently selected position in the active completion\nlist, or null if no completions are active.\n*/ function $9e3d41a34fba402a$export$93d3d3265e08d270(state) {\n    var _a;\n    let open = (_a = state.field($9e3d41a34fba402a$var$completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    return open && !open.disabled && open.selected >= 0 ? open.selected : null;\n}\n/**\nCreate an effect that can be attached to a transaction to change\nthe currently selected completion.\n*/ function $9e3d41a34fba402a$export$64a726c2de6175b8(index) {\n    return $9e3d41a34fba402a$var$setSelectedEffect.of(index);\n}\n\n\n\n\n\nclass $84fbedc1f5497f08$var$SelectedDiagnostic {\n    constructor(from, to, diagnostic){\n        this.from = from;\n        this.to = to;\n        this.diagnostic = diagnostic;\n    }\n}\nclass $84fbedc1f5497f08$var$LintState {\n    constructor(diagnostics, panel, selected){\n        this.diagnostics = diagnostics;\n        this.panel = panel;\n        this.selected = selected;\n    }\n    static init(diagnostics, panel, state) {\n        // Filter the list of diagnostics for which to create markers\n        let markedDiagnostics = diagnostics;\n        let diagnosticFilter = state.facet($84fbedc1f5497f08$var$lintConfig).markerFilter;\n        if (diagnosticFilter) markedDiagnostics = diagnosticFilter(markedDiagnostics);\n        let ranges = (0, $071334078f8d3f8a$export$10e30b733df217ea).set(markedDiagnostics.map((d)=>{\n            // For zero-length ranges or ranges covering only a line break, create a widget\n            return d.from == d.to || d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from ? (0, $071334078f8d3f8a$export$10e30b733df217ea).widget({\n                widget: new $84fbedc1f5497f08$var$DiagnosticWidget(d),\n                diagnostic: d\n            }).range(d.from) : (0, $071334078f8d3f8a$export$10e30b733df217ea).mark({\n                attributes: {\n                    class: \"cm-lintRange cm-lintRange-\" + d.severity + (d.markClass ? \" \" + d.markClass : \"\")\n                },\n                diagnostic: d\n            }).range(d.from, d.to);\n        }), true);\n        return new $84fbedc1f5497f08$var$LintState(ranges, panel, $84fbedc1f5497f08$var$findDiagnostic(ranges));\n    }\n}\nfunction $84fbedc1f5497f08$var$findDiagnostic(diagnostics, diagnostic = null, after = 0) {\n    let found = null;\n    diagnostics.between(after, 1e9, (from, to, { spec: spec })=>{\n        if (diagnostic && spec.diagnostic != diagnostic) return;\n        found = new $84fbedc1f5497f08$var$SelectedDiagnostic(from, to, spec.diagnostic);\n        return false;\n    });\n    return found;\n}\nfunction $84fbedc1f5497f08$var$hideTooltip(tr, tooltip) {\n    let line = tr.startState.doc.lineAt(tooltip.pos);\n    return !!(tr.effects.some((e)=>e.is($84fbedc1f5497f08$export$9c7976977981c7bf)) || tr.changes.touchesRange(line.from, line.to));\n}\nfunction $84fbedc1f5497f08$var$maybeEnableLint(state, effects) {\n    return state.field($84fbedc1f5497f08$var$lintState, false) ? effects : effects.concat((0, $ccfb9497d8ef598f$export$95000d4efaa4321f).appendConfig.of($84fbedc1f5497f08$var$lintExtensions));\n}\n/**\nReturns a transaction spec which updates the current set of\ndiagnostics, and enables the lint extension if if wasn't already\nactive.\n*/ function $84fbedc1f5497f08$export$188c3c6ceeec4bb3(state, diagnostics) {\n    return {\n        effects: $84fbedc1f5497f08$var$maybeEnableLint(state, [\n            $84fbedc1f5497f08$export$9c7976977981c7bf.of(diagnostics)\n        ])\n    };\n}\n/**\nThe state effect that updates the set of active diagnostics. Can\nbe useful when writing an extension that needs to track these.\n*/ const $84fbedc1f5497f08$export$9c7976977981c7bf = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\nconst $84fbedc1f5497f08$var$togglePanel = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\nconst $84fbedc1f5497f08$var$movePanelSelection = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\nconst $84fbedc1f5497f08$var$lintState = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create () {\n        return new $84fbedc1f5497f08$var$LintState((0, $071334078f8d3f8a$export$10e30b733df217ea).none, null, null);\n    },\n    update (value, tr) {\n        if (tr.docChanged) {\n            let mapped = value.diagnostics.map(tr.changes), selected = null;\n            if (value.selected) {\n                let selPos = tr.changes.mapPos(value.selected.from, 1);\n                selected = $84fbedc1f5497f08$var$findDiagnostic(mapped, value.selected.diagnostic, selPos) || $84fbedc1f5497f08$var$findDiagnostic(mapped, null, selPos);\n            }\n            value = new $84fbedc1f5497f08$var$LintState(mapped, value.panel, selected);\n        }\n        for (let effect of tr.effects){\n            if (effect.is($84fbedc1f5497f08$export$9c7976977981c7bf)) value = $84fbedc1f5497f08$var$LintState.init(effect.value, value.panel, tr.state);\n            else if (effect.is($84fbedc1f5497f08$var$togglePanel)) value = new $84fbedc1f5497f08$var$LintState(value.diagnostics, effect.value ? $84fbedc1f5497f08$var$LintPanel.open : null, value.selected);\n            else if (effect.is($84fbedc1f5497f08$var$movePanelSelection)) value = new $84fbedc1f5497f08$var$LintState(value.diagnostics, value.panel, effect.value);\n        }\n        return value;\n    },\n    provide: (f)=>[\n            (0, $071334078f8d3f8a$export$e89c3c9af31c1e3b).from(f, (val)=>val.panel),\n            (0, $071334078f8d3f8a$export$eece2fccabbb77c5).decorations.from(f, (s)=>s.diagnostics)\n        ]\n});\n/**\nReturns the number of active lint diagnostics in the given state.\n*/ function $84fbedc1f5497f08$export$31ce51ade4a789ff(state) {\n    let lint = state.field($84fbedc1f5497f08$var$lintState, false);\n    return lint ? lint.diagnostics.size : 0;\n}\nconst $84fbedc1f5497f08$var$activeMark = /*@__PURE__*/ (0, $071334078f8d3f8a$export$10e30b733df217ea).mark({\n    class: \"cm-lintRange cm-lintRange-active\"\n});\nfunction $84fbedc1f5497f08$var$lintTooltip(view, pos, side) {\n    let { diagnostics: diagnostics } = view.state.field($84fbedc1f5497f08$var$lintState);\n    let found = [], stackStart = 2e8, stackEnd = 0;\n    diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec: spec })=>{\n        if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {\n            found.push(spec.diagnostic);\n            stackStart = Math.min(from, stackStart);\n            stackEnd = Math.max(to, stackEnd);\n        }\n    });\n    let diagnosticFilter = view.state.facet($84fbedc1f5497f08$var$lintConfig).tooltipFilter;\n    if (diagnosticFilter) found = diagnosticFilter(found);\n    if (!found.length) return null;\n    return {\n        pos: stackStart,\n        end: stackEnd,\n        above: view.state.doc.lineAt(stackStart).to < stackEnd,\n        create () {\n            return {\n                dom: $84fbedc1f5497f08$var$diagnosticsTooltip(view, found)\n            };\n        }\n    };\n}\nfunction $84fbedc1f5497f08$var$diagnosticsTooltip(view, diagnostics) {\n    return (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"ul\", {\n        class: \"cm-tooltip-lint\"\n    }, diagnostics.map((d)=>$84fbedc1f5497f08$var$renderDiagnostic(view, d, false)));\n}\n/**\nCommand to open and focus the lint panel.\n*/ const $84fbedc1f5497f08$export$5c4e65c70e8c34a7 = (view)=>{\n    let field = view.state.field($84fbedc1f5497f08$var$lintState, false);\n    if (!field || !field.panel) view.dispatch({\n        effects: $84fbedc1f5497f08$var$maybeEnableLint(view.state, [\n            $84fbedc1f5497f08$var$togglePanel.of(true)\n        ])\n    });\n    let panel = (0, $071334078f8d3f8a$export$7361ed18ff57179e)(view, $84fbedc1f5497f08$var$LintPanel.open);\n    if (panel) panel.dom.querySelector(\".cm-panel-lint ul\").focus();\n    return true;\n};\n/**\nCommand to close the lint panel, when open.\n*/ const $84fbedc1f5497f08$export$2ee372c3e690e3c3 = (view)=>{\n    let field = view.state.field($84fbedc1f5497f08$var$lintState, false);\n    if (!field || !field.panel) return false;\n    view.dispatch({\n        effects: $84fbedc1f5497f08$var$togglePanel.of(false)\n    });\n    return true;\n};\n/**\nMove the selection to the next diagnostic.\n*/ const $84fbedc1f5497f08$export$79abb131646e1359 = (view)=>{\n    let field = view.state.field($84fbedc1f5497f08$var$lintState, false);\n    if (!field) return false;\n    let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);\n    if (!next.value) {\n        next = field.diagnostics.iter(0);\n        if (!next.value || next.from == sel.from && next.to == sel.to) return false;\n    }\n    view.dispatch({\n        selection: {\n            anchor: next.from,\n            head: next.to\n        },\n        scrollIntoView: true\n    });\n    return true;\n};\n/**\nMove the selection to the previous diagnostic.\n*/ const $84fbedc1f5497f08$export$f71c1dd1430b5cc1 = (view)=>{\n    let { state: state } = view, field = state.field($84fbedc1f5497f08$var$lintState, false);\n    if (!field) return false;\n    let sel = state.selection.main;\n    let prevFrom, prevTo, lastFrom, lastTo;\n    field.diagnostics.between(0, state.doc.length, (from, to)=>{\n        if (to < sel.to && (prevFrom == null || prevFrom < from)) {\n            prevFrom = from;\n            prevTo = to;\n        }\n        if (lastFrom == null || from > lastFrom) {\n            lastFrom = from;\n            lastTo = to;\n        }\n    });\n    if (lastFrom == null || prevFrom == null && lastFrom == sel.from) return false;\n    view.dispatch({\n        selection: {\n            anchor: prevFrom !== null && prevFrom !== void 0 ? prevFrom : lastFrom,\n            head: prevTo !== null && prevTo !== void 0 ? prevTo : lastTo\n        },\n        scrollIntoView: true\n    });\n    return true;\n};\n/**\nA set of default key bindings for the lint functionality.\n\n- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)\n- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)\n*/ const $84fbedc1f5497f08$export$a21d7a0cde3cbb60 = [\n    {\n        key: \"Mod-Shift-m\",\n        run: $84fbedc1f5497f08$export$5c4e65c70e8c34a7,\n        preventDefault: true\n    },\n    {\n        key: \"F8\",\n        run: $84fbedc1f5497f08$export$79abb131646e1359\n    }\n];\nconst $84fbedc1f5497f08$var$lintPlugin = /*@__PURE__*/ (0, $071334078f8d3f8a$export$44d5eccfd62adda7).fromClass(class {\n    constructor(view){\n        this.view = view;\n        this.timeout = -1;\n        this.set = true;\n        let { delay: delay } = view.state.facet($84fbedc1f5497f08$var$lintConfig);\n        this.lintTime = Date.now() + delay;\n        this.run = this.run.bind(this);\n        this.timeout = setTimeout(this.run, delay);\n    }\n    run() {\n        let now = Date.now();\n        if (now < this.lintTime - 10) setTimeout(this.run, this.lintTime - now);\n        else {\n            this.set = false;\n            let { state: state } = this.view, { sources: sources } = state.facet($84fbedc1f5497f08$var$lintConfig);\n            Promise.all(sources.map((source)=>Promise.resolve(source(this.view)))).then((annotations)=>{\n                let all = annotations.reduce((a, b)=>a.concat(b));\n                if (this.view.state.doc == state.doc) this.view.dispatch($84fbedc1f5497f08$export$188c3c6ceeec4bb3(this.view.state, all));\n            }, (error)=>{\n                (0, $071334078f8d3f8a$export$f86b2a1a2ce291b3)(this.view.state, error);\n            });\n        }\n    }\n    update(update) {\n        let config = update.state.facet($84fbedc1f5497f08$var$lintConfig);\n        if (update.docChanged || config != update.startState.facet($84fbedc1f5497f08$var$lintConfig) || config.needsRefresh && config.needsRefresh(update)) {\n            this.lintTime = Date.now() + config.delay;\n            if (!this.set) {\n                this.set = true;\n                this.timeout = setTimeout(this.run, config.delay);\n            }\n        }\n    }\n    force() {\n        if (this.set) {\n            this.lintTime = Date.now();\n            this.run();\n        }\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n});\nconst $84fbedc1f5497f08$var$lintConfig = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (input) {\n        return Object.assign({\n            sources: input.map((i)=>i.source)\n        }, (0, $ccfb9497d8ef598f$export$4e19c0b693794a7e)(input.map((i)=>i.config), {\n            delay: 750,\n            markerFilter: null,\n            tooltipFilter: null,\n            needsRefresh: null\n        }, {\n            needsRefresh: (a, b)=>!a ? b : !b ? a : (u)=>a(u) || b(u)\n        }));\n    }\n});\n/**\nGiven a diagnostic source, this function returns an extension that\nenables linting with that source. It will be called whenever the\neditor is idle (after its content changed).\n*/ function $84fbedc1f5497f08$export$8bb7ef7a8be4cb1c(source, config = {}) {\n    return [\n        $84fbedc1f5497f08$var$lintConfig.of({\n            source: source,\n            config: config\n        }),\n        $84fbedc1f5497f08$var$lintPlugin,\n        $84fbedc1f5497f08$var$lintExtensions\n    ];\n}\n/**\nForces any linters [configured](https://codemirror.net/6/docs/ref/#lint.linter) to run when the\neditor is idle to run right away.\n*/ function $84fbedc1f5497f08$export$e917f1893924e285(view) {\n    let plugin = view.plugin($84fbedc1f5497f08$var$lintPlugin);\n    if (plugin) plugin.force();\n}\nfunction $84fbedc1f5497f08$var$assignKeys(actions) {\n    let assigned = [];\n    if (actions) actions: for (let { name: name } of actions){\n        for(let i = 0; i < name.length; i++){\n            let ch = name[i];\n            if (/[a-zA-Z]/.test(ch) && !assigned.some((c)=>c.toLowerCase() == ch.toLowerCase())) {\n                assigned.push(ch);\n                continue actions;\n            }\n        }\n        assigned.push(\"\");\n    }\n    return assigned;\n}\nfunction $84fbedc1f5497f08$var$renderDiagnostic(view, diagnostic, inPanel) {\n    var _a;\n    let keys = inPanel ? $84fbedc1f5497f08$var$assignKeys(diagnostic.actions) : [];\n    return (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"li\", {\n        class: \"cm-diagnostic cm-diagnostic-\" + diagnostic.severity\n    }, (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"span\", {\n        class: \"cm-diagnosticText\"\n    }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i)=>{\n        let fired = false, click = (e)=>{\n            e.preventDefault();\n            if (fired) return;\n            fired = true;\n            let found = $84fbedc1f5497f08$var$findDiagnostic(view.state.field($84fbedc1f5497f08$var$lintState).diagnostics, diagnostic);\n            if (found) action.apply(view, found.from, found.to);\n        };\n        let { name: name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;\n        let nameElt = keyIndex < 0 ? name : [\n            name.slice(0, keyIndex),\n            (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"u\", name.slice(keyIndex, keyIndex + 1)),\n            name.slice(keyIndex + 1)\n        ];\n        return (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"button\", {\n            type: \"button\",\n            class: \"cm-diagnosticAction\",\n            onclick: click,\n            onmousedown: click,\n            \"aria-label\": ` Action: ${name}${keyIndex < 0 ? \"\" : ` (access key \"${keys[i]})\"`}.`\n        }, nameElt);\n    }), diagnostic.source && (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"div\", {\n        class: \"cm-diagnosticSource\"\n    }, diagnostic.source));\n}\nclass $84fbedc1f5497f08$var$DiagnosticWidget extends (0, $071334078f8d3f8a$export$95cdd842edb044c5) {\n    constructor(diagnostic){\n        super();\n        this.diagnostic = diagnostic;\n    }\n    eq(other) {\n        return other.diagnostic == this.diagnostic;\n    }\n    toDOM() {\n        return (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"span\", {\n            class: \"cm-lintPoint cm-lintPoint-\" + this.diagnostic.severity\n        });\n    }\n}\nclass $84fbedc1f5497f08$var$PanelItem {\n    constructor(view, diagnostic){\n        this.diagnostic = diagnostic;\n        this.id = \"item_\" + Math.floor(Math.random() * 0xffffffff).toString(16);\n        this.dom = $84fbedc1f5497f08$var$renderDiagnostic(view, diagnostic, true);\n        this.dom.id = this.id;\n        this.dom.setAttribute(\"role\", \"option\");\n    }\n}\nclass $84fbedc1f5497f08$var$LintPanel {\n    constructor(view){\n        this.view = view;\n        this.items = [];\n        let onkeydown = (event)=>{\n            if (event.keyCode == 27) {\n                $84fbedc1f5497f08$export$2ee372c3e690e3c3(this.view);\n                this.view.focus();\n            } else if (event.keyCode == 38 || event.keyCode == 33) this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);\n            else if (event.keyCode == 40 || event.keyCode == 34) this.moveSelection((this.selectedIndex + 1) % this.items.length);\n            else if (event.keyCode == 36) this.moveSelection(0);\n            else if (event.keyCode == 35) this.moveSelection(this.items.length - 1);\n            else if (event.keyCode == 13) this.view.focus();\n            else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {\n                let { diagnostic: diagnostic } = this.items[this.selectedIndex], keys = $84fbedc1f5497f08$var$assignKeys(diagnostic.actions);\n                for(let i = 0; i < keys.length; i++)if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {\n                    let found = $84fbedc1f5497f08$var$findDiagnostic(this.view.state.field($84fbedc1f5497f08$var$lintState).diagnostics, diagnostic);\n                    if (found) diagnostic.actions[i].apply(view, found.from, found.to);\n                }\n            } else return;\n            event.preventDefault();\n        };\n        let onclick = (event)=>{\n            for(let i = 0; i < this.items.length; i++)if (this.items[i].dom.contains(event.target)) this.moveSelection(i);\n        };\n        this.list = (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"ul\", {\n            tabIndex: 0,\n            role: \"listbox\",\n            \"aria-label\": this.view.state.phrase(\"Diagnostics\"),\n            onkeydown: onkeydown,\n            onclick: onclick\n        });\n        this.dom = (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"div\", {\n            class: \"cm-panel-lint\"\n        }, this.list, (0, $60bdbe617b6ae52f$export$2e2bcd8739ae039)(\"button\", {\n            type: \"button\",\n            name: \"close\",\n            \"aria-label\": this.view.state.phrase(\"close\"),\n            onclick: ()=>$84fbedc1f5497f08$export$2ee372c3e690e3c3(this.view)\n        }, \"\\xd7\"));\n        this.update();\n    }\n    get selectedIndex() {\n        let selected = this.view.state.field($84fbedc1f5497f08$var$lintState).selected;\n        if (!selected) return -1;\n        for(let i = 0; i < this.items.length; i++)if (this.items[i].diagnostic == selected.diagnostic) return i;\n        return -1;\n    }\n    update() {\n        let { diagnostics: diagnostics, selected: selected } = this.view.state.field($84fbedc1f5497f08$var$lintState);\n        let i = 0, needsSync = false, newSelectedItem = null;\n        diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec: spec })=>{\n            let found = -1, item;\n            for(let j = i; j < this.items.length; j++)if (this.items[j].diagnostic == spec.diagnostic) {\n                found = j;\n                break;\n            }\n            if (found < 0) {\n                item = new $84fbedc1f5497f08$var$PanelItem(this.view, spec.diagnostic);\n                this.items.splice(i, 0, item);\n                needsSync = true;\n            } else {\n                item = this.items[found];\n                if (found > i) {\n                    this.items.splice(i, found - i);\n                    needsSync = true;\n                }\n            }\n            if (selected && item.diagnostic == selected.diagnostic) {\n                if (!item.dom.hasAttribute(\"aria-selected\")) {\n                    item.dom.setAttribute(\"aria-selected\", \"true\");\n                    newSelectedItem = item;\n                }\n            } else if (item.dom.hasAttribute(\"aria-selected\")) item.dom.removeAttribute(\"aria-selected\");\n            i++;\n        });\n        while(i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)){\n            needsSync = true;\n            this.items.pop();\n        }\n        if (this.items.length == 0) {\n            this.items.push(new $84fbedc1f5497f08$var$PanelItem(this.view, {\n                from: -1,\n                to: -1,\n                severity: \"info\",\n                message: this.view.state.phrase(\"No diagnostics\")\n            }));\n            needsSync = true;\n        }\n        if (newSelectedItem) {\n            this.list.setAttribute(\"aria-activedescendant\", newSelectedItem.id);\n            this.view.requestMeasure({\n                key: this,\n                read: ()=>({\n                        sel: newSelectedItem.dom.getBoundingClientRect(),\n                        panel: this.list.getBoundingClientRect()\n                    }),\n                write: ({ sel: sel, panel: panel })=>{\n                    if (sel.top < panel.top) this.list.scrollTop -= panel.top - sel.top;\n                    else if (sel.bottom > panel.bottom) this.list.scrollTop += sel.bottom - panel.bottom;\n                }\n            });\n        } else if (this.selectedIndex < 0) this.list.removeAttribute(\"aria-activedescendant\");\n        if (needsSync) this.sync();\n    }\n    sync() {\n        let domPos = this.list.firstChild;\n        function rm() {\n            let prev = domPos;\n            domPos = prev.nextSibling;\n            prev.remove();\n        }\n        for (let item of this.items)if (item.dom.parentNode == this.list) {\n            while(domPos != item.dom)rm();\n            domPos = item.dom.nextSibling;\n        } else this.list.insertBefore(item.dom, domPos);\n        while(domPos)rm();\n    }\n    moveSelection(selectedIndex) {\n        if (this.selectedIndex < 0) return;\n        let field = this.view.state.field($84fbedc1f5497f08$var$lintState);\n        let selection = $84fbedc1f5497f08$var$findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);\n        if (!selection) return;\n        this.view.dispatch({\n            selection: {\n                anchor: selection.from,\n                head: selection.to\n            },\n            scrollIntoView: true,\n            effects: $84fbedc1f5497f08$var$movePanelSelection.of(selection)\n        });\n    }\n    static open(view) {\n        return new $84fbedc1f5497f08$var$LintPanel(view);\n    }\n}\nfunction $84fbedc1f5497f08$var$svg(content, attrs = `viewBox=\"0 0 40 40\"`) {\n    return `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ${attrs}>${encodeURIComponent(content)}</svg>')`;\n}\nfunction $84fbedc1f5497f08$var$underline(color) {\n    return $84fbedc1f5497f08$var$svg(`<path d=\"m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0\" stroke=\"${color}\" fill=\"none\" stroke-width=\".7\"/>`, `width=\"6\" height=\"3\"`);\n}\nconst $84fbedc1f5497f08$var$baseTheme = /*@__PURE__*/ (0, $071334078f8d3f8a$export$eece2fccabbb77c5).baseTheme({\n    \".cm-diagnostic\": {\n        padding: \"3px 6px 3px 8px\",\n        marginLeft: \"-1px\",\n        display: \"block\",\n        whiteSpace: \"pre-wrap\"\n    },\n    \".cm-diagnostic-error\": {\n        borderLeft: \"5px solid #d11\"\n    },\n    \".cm-diagnostic-warning\": {\n        borderLeft: \"5px solid orange\"\n    },\n    \".cm-diagnostic-info\": {\n        borderLeft: \"5px solid #999\"\n    },\n    \".cm-diagnostic-hint\": {\n        borderLeft: \"5px solid #66d\"\n    },\n    \".cm-diagnosticAction\": {\n        font: \"inherit\",\n        border: \"none\",\n        padding: \"2px 4px\",\n        backgroundColor: \"#444\",\n        color: \"white\",\n        borderRadius: \"3px\",\n        marginLeft: \"8px\",\n        cursor: \"pointer\"\n    },\n    \".cm-diagnosticSource\": {\n        fontSize: \"70%\",\n        opacity: .7\n    },\n    \".cm-lintRange\": {\n        backgroundPosition: \"left bottom\",\n        backgroundRepeat: \"repeat-x\",\n        paddingBottom: \"0.7px\"\n    },\n    \".cm-lintRange-error\": {\n        backgroundImage: /*@__PURE__*/ $84fbedc1f5497f08$var$underline(\"#d11\")\n    },\n    \".cm-lintRange-warning\": {\n        backgroundImage: /*@__PURE__*/ $84fbedc1f5497f08$var$underline(\"orange\")\n    },\n    \".cm-lintRange-info\": {\n        backgroundImage: /*@__PURE__*/ $84fbedc1f5497f08$var$underline(\"#999\")\n    },\n    \".cm-lintRange-hint\": {\n        backgroundImage: /*@__PURE__*/ $84fbedc1f5497f08$var$underline(\"#66d\")\n    },\n    \".cm-lintRange-active\": {\n        backgroundColor: \"#ffdd9980\"\n    },\n    \".cm-tooltip-lint\": {\n        padding: 0,\n        margin: 0\n    },\n    \".cm-lintPoint\": {\n        position: \"relative\",\n        \"&:after\": {\n            content: '\"\"',\n            position: \"absolute\",\n            bottom: 0,\n            left: \"-2px\",\n            borderLeft: \"3px solid transparent\",\n            borderRight: \"3px solid transparent\",\n            borderBottom: \"4px solid #d11\"\n        }\n    },\n    \".cm-lintPoint-warning\": {\n        \"&:after\": {\n            borderBottomColor: \"orange\"\n        }\n    },\n    \".cm-lintPoint-info\": {\n        \"&:after\": {\n            borderBottomColor: \"#999\"\n        }\n    },\n    \".cm-lintPoint-hint\": {\n        \"&:after\": {\n            borderBottomColor: \"#66d\"\n        }\n    },\n    \".cm-panel.cm-panel-lint\": {\n        position: \"relative\",\n        \"& ul\": {\n            maxHeight: \"100px\",\n            overflowY: \"auto\",\n            \"& [aria-selected]\": {\n                backgroundColor: \"#ddd\",\n                \"& u\": {\n                    textDecoration: \"underline\"\n                }\n            },\n            \"&:focus [aria-selected]\": {\n                background_fallback: \"#bdf\",\n                backgroundColor: \"Highlight\",\n                color_fallback: \"white\",\n                color: \"HighlightText\"\n            },\n            \"& u\": {\n                textDecoration: \"none\"\n            },\n            padding: 0,\n            margin: 0\n        },\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"2px\",\n            background: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        }\n    }\n});\nfunction $84fbedc1f5497f08$var$severityWeight(sev) {\n    return sev == \"error\" ? 4 : sev == \"warning\" ? 3 : sev == \"info\" ? 2 : 1;\n}\nclass $84fbedc1f5497f08$var$LintGutterMarker extends (0, $071334078f8d3f8a$export$591ab4c909549043) {\n    constructor(diagnostics){\n        super();\n        this.diagnostics = diagnostics;\n        this.severity = diagnostics.reduce((max, d)=>$84fbedc1f5497f08$var$severityWeight(max) < $84fbedc1f5497f08$var$severityWeight(d.severity) ? d.severity : max, \"hint\");\n    }\n    toDOM(view) {\n        let elt = document.createElement(\"div\");\n        elt.className = \"cm-lint-marker cm-lint-marker-\" + this.severity;\n        let diagnostics = this.diagnostics;\n        let diagnosticsFilter = view.state.facet($84fbedc1f5497f08$var$lintGutterConfig).tooltipFilter;\n        if (diagnosticsFilter) diagnostics = diagnosticsFilter(diagnostics);\n        if (diagnostics.length) elt.onmouseover = ()=>$84fbedc1f5497f08$var$gutterMarkerMouseOver(view, elt, diagnostics);\n        return elt;\n    }\n}\nfunction $84fbedc1f5497f08$var$trackHoverOn(view, marker) {\n    let mousemove = (event)=>{\n        let rect = marker.getBoundingClientRect();\n        if (event.clientX > rect.left - 10 /* Margin */  && event.clientX < rect.right + 10 /* Margin */  && event.clientY > rect.top - 10 /* Margin */  && event.clientY < rect.bottom + 10 /* Margin */ ) return;\n        for(let target = event.target; target; target = target.parentNode){\n            if (target.nodeType == 1 && target.classList.contains(\"cm-tooltip-lint\")) return;\n        }\n        window.removeEventListener(\"mousemove\", mousemove);\n        if (view.state.field($84fbedc1f5497f08$var$lintGutterTooltip)) view.dispatch({\n            effects: $84fbedc1f5497f08$var$setLintGutterTooltip.of(null)\n        });\n    };\n    window.addEventListener(\"mousemove\", mousemove);\n}\nfunction $84fbedc1f5497f08$var$gutterMarkerMouseOver(view, marker, diagnostics) {\n    function hovered() {\n        let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);\n        const linePos = view.coordsAtPos(line.from);\n        if (linePos) view.dispatch({\n            effects: $84fbedc1f5497f08$var$setLintGutterTooltip.of({\n                pos: line.from,\n                above: false,\n                create () {\n                    return {\n                        dom: $84fbedc1f5497f08$var$diagnosticsTooltip(view, diagnostics),\n                        getCoords: ()=>marker.getBoundingClientRect()\n                    };\n                }\n            })\n        });\n        marker.onmouseout = marker.onmousemove = null;\n        $84fbedc1f5497f08$var$trackHoverOn(view, marker);\n    }\n    let { hoverTime: hoverTime } = view.state.facet($84fbedc1f5497f08$var$lintGutterConfig);\n    let hoverTimeout = setTimeout(hovered, hoverTime);\n    marker.onmouseout = ()=>{\n        clearTimeout(hoverTimeout);\n        marker.onmouseout = marker.onmousemove = null;\n    };\n    marker.onmousemove = ()=>{\n        clearTimeout(hoverTimeout);\n        hoverTimeout = setTimeout(hovered, hoverTime);\n    };\n}\nfunction $84fbedc1f5497f08$var$markersForDiagnostics(doc, diagnostics) {\n    let byLine = Object.create(null);\n    for (let diagnostic of diagnostics){\n        let line = doc.lineAt(diagnostic.from);\n        (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);\n    }\n    let markers = [];\n    for(let line in byLine)markers.push(new $84fbedc1f5497f08$var$LintGutterMarker(byLine[line]).range(+line));\n    return (0, $ccfb9497d8ef598f$export$34cb5241245008dd).of(markers, true);\n}\nconst $84fbedc1f5497f08$var$lintGutterExtension = /*@__PURE__*/ (0, $071334078f8d3f8a$export$f2b922cb4a245974)({\n    class: \"cm-gutter-lint\",\n    markers: (view)=>view.state.field($84fbedc1f5497f08$var$lintGutterMarkers)\n});\nconst $84fbedc1f5497f08$var$lintGutterMarkers = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create () {\n        return (0, $ccfb9497d8ef598f$export$34cb5241245008dd).empty;\n    },\n    update (markers, tr) {\n        markers = markers.map(tr.changes);\n        let diagnosticFilter = tr.state.facet($84fbedc1f5497f08$var$lintGutterConfig).markerFilter;\n        for (let effect of tr.effects)if (effect.is($84fbedc1f5497f08$export$9c7976977981c7bf)) {\n            let diagnostics = effect.value;\n            if (diagnosticFilter) diagnostics = diagnosticFilter(diagnostics || []);\n            markers = $84fbedc1f5497f08$var$markersForDiagnostics(tr.state.doc, diagnostics.slice(0));\n        }\n        return markers;\n    }\n});\nconst $84fbedc1f5497f08$var$setLintGutterTooltip = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$95000d4efaa4321f).define();\nconst $84fbedc1f5497f08$var$lintGutterTooltip = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$34381b1ce2130245).define({\n    create () {\n        return null;\n    },\n    update (tooltip, tr) {\n        if (tooltip && tr.docChanged) tooltip = $84fbedc1f5497f08$var$hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), {\n            pos: tr.changes.mapPos(tooltip.pos)\n        });\n        return tr.effects.reduce((t, e)=>e.is($84fbedc1f5497f08$var$setLintGutterTooltip) ? e.value : t, tooltip);\n    },\n    provide: (field)=>(0, $071334078f8d3f8a$export$dba11b50e1aa3c12).from(field)\n});\nconst $84fbedc1f5497f08$var$lintGutterTheme = /*@__PURE__*/ (0, $071334078f8d3f8a$export$eece2fccabbb77c5).baseTheme({\n    \".cm-gutter-lint\": {\n        width: \"1.4em\",\n        \"& .cm-gutterElement\": {\n            padding: \".2em\"\n        }\n    },\n    \".cm-lint-marker\": {\n        width: \"1em\",\n        height: \"1em\"\n    },\n    \".cm-lint-marker-info\": {\n        content: /*@__PURE__*/ $84fbedc1f5497f08$var$svg(`<path fill=\"#aaf\" stroke=\"#77e\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M5 5L35 5L35 35L5 35Z\"/>`)\n    },\n    \".cm-lint-marker-warning\": {\n        content: /*@__PURE__*/ $84fbedc1f5497f08$var$svg(`<path fill=\"#fe8\" stroke=\"#fd7\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M20 6L37 35L3 35Z\"/>`)\n    },\n    \".cm-lint-marker-error\": {\n        content: /*@__PURE__*/ $84fbedc1f5497f08$var$svg(`<circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"#f87\" stroke=\"#f43\" stroke-width=\"6\"/>`)\n    }\n});\nconst $84fbedc1f5497f08$var$lintExtensions = [\n    $84fbedc1f5497f08$var$lintState,\n    /*@__PURE__*/ (0, $071334078f8d3f8a$export$eece2fccabbb77c5).decorations.compute([\n        $84fbedc1f5497f08$var$lintState\n    ], (state)=>{\n        let { selected: selected, panel: panel } = state.field($84fbedc1f5497f08$var$lintState);\n        return !selected || !panel || selected.from == selected.to ? (0, $071334078f8d3f8a$export$10e30b733df217ea).none : (0, $071334078f8d3f8a$export$10e30b733df217ea).set([\n            $84fbedc1f5497f08$var$activeMark.range(selected.from, selected.to)\n        ]);\n    }),\n    /*@__PURE__*/ (0, $071334078f8d3f8a$export$69f8d9e63c4aa884)($84fbedc1f5497f08$var$lintTooltip, {\n        hideOn: $84fbedc1f5497f08$var$hideTooltip\n    }),\n    $84fbedc1f5497f08$var$baseTheme\n];\nconst $84fbedc1f5497f08$var$lintGutterConfig = /*@__PURE__*/ (0, $ccfb9497d8ef598f$export$ef7d5e9b79fa1504).define({\n    combine (configs) {\n        return (0, $ccfb9497d8ef598f$export$4e19c0b693794a7e)(configs, {\n            hoverTime: 300 /* Time */ ,\n            markerFilter: null,\n            tooltipFilter: null\n        });\n    }\n});\n/**\nReturns an extension that installs a gutter showing markers for\neach line that has diagnostics, which can be hovered over to see\nthe diagnostics.\n*/ function $84fbedc1f5497f08$export$3a68dabf7c007d32(config = {}) {\n    return [\n        $84fbedc1f5497f08$var$lintGutterConfig.of(config),\n        $84fbedc1f5497f08$var$lintGutterMarkers,\n        $84fbedc1f5497f08$var$lintGutterExtension,\n        $84fbedc1f5497f08$var$lintGutterTheme,\n        $84fbedc1f5497f08$var$lintGutterTooltip\n    ];\n}\n/**\nIterate over the marked diagnostics for the given editor state,\ncalling `f` for each of them. Note that, if the document changed\nsince the diagnostics were created, the `Diagnostic` object will\nhold the original outdated position, whereas the `to` and `from`\narguments hold the diagnostic's current position.\n*/ function $84fbedc1f5497f08$export$7991d57589868fb2(state, f) {\n    let lState = state.field($84fbedc1f5497f08$var$lintState, false);\n    if (lState && lState.diagnostics.size) for(let iter = (0, $ccfb9497d8ef598f$export$34cb5241245008dd).iter([\n        lState.diagnostics\n    ]); iter.value; iter.next())f(iter.value.spec.diagnostic, iter.from, iter.to);\n}\n\n\n// (The superfluous function calls around the list of extensions work\n// around current limitations in tree-shaking software.)\n/**\nThis is an extension value that just pulls together a number of\nextensions that you might want in a basic editor. It is meant as a\nconvenient helper to quickly set up CodeMirror without installing\nand importing a lot of separate packages.\n\nSpecifically, it includes...\n\n - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)\n - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)\n - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)\n - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)\n - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)\n - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)\n - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)\n - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\n - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)\n - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)\n - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)\n - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)\n - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)\n - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)\n - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)\n - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)\n - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)\n - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)\n - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)\n\n(You'll probably want to add some language package to your setup\ntoo.)\n\nThis extension does not allow customization. The idea is that,\nonce you decide you want to configure your editor more precisely,\nyou take this package's source (which is just a bunch of imports\nand an array literal), copy it into your own code, and adjust it\nas desired.\n*/ const $3fa179aa810adb75$export$f4f2465c1e83499c = /*@__PURE__*/ (()=>[\n        (0, $071334078f8d3f8a$export$1a8cf111682eaa7d)(),\n        (0, $071334078f8d3f8a$export$93b52f08bb2c759c)(),\n        (0, $071334078f8d3f8a$export$76dc0899547f659c)(),\n        (0, $d04c89efcb565ec8$export$55abd4691b317664)(),\n        (0, $14831f1c512a5db9$export$c4dcf64f741b6228)(),\n        (0, $071334078f8d3f8a$export$17a3d0ab3687347d)(),\n        (0, $071334078f8d3f8a$export$b8e3092a3bfa2062)(),\n        (0, $ccfb9497d8ef598f$export$afa855cbfaff27f2).allowMultipleSelections.of(true),\n        (0, $14831f1c512a5db9$export$9bcaf6e2125ee117)(),\n        (0, $14831f1c512a5db9$export$ec1b956ff3a16361)((0, $14831f1c512a5db9$export$bb02a6818dd48320), {\n            fallback: true\n        }),\n        (0, $14831f1c512a5db9$export$cef7edfd214be605)(),\n        (0, $9e3d41a34fba402a$export$69e4e9d3300ff824)(),\n        (0, $9e3d41a34fba402a$export$f95786d390465556)(),\n        (0, $071334078f8d3f8a$export$dd482925db1aabd3)(),\n        (0, $071334078f8d3f8a$export$9b6525222ac3b7fb)(),\n        (0, $071334078f8d3f8a$export$1a7e096bee9035c)(),\n        (0, $f7ab002c71421b53$export$f14efe56171a2e02)(),\n        (0, $071334078f8d3f8a$export$5043418e2ef368d5).of([\n            ...(0, $9e3d41a34fba402a$export$9477e95792b48f4a),\n            ...(0, $d04c89efcb565ec8$export$ab2e8d0ac5d2b69e),\n            ...(0, $f7ab002c71421b53$export$2dba96787cbe0a4a),\n            ...(0, $d04c89efcb565ec8$export$ab4a28cb63e8a670),\n            ...(0, $14831f1c512a5db9$export$39c52376a8936d67),\n            ...(0, $9e3d41a34fba402a$export$2a3d759d156afab4),\n            ...(0, $84fbedc1f5497f08$export$a21d7a0cde3cbb60)\n        ])\n    ])();\n/**\nA minimal set of extensions to create a functional editor. Only\nincludes [the default keymap](https://codemirror.net/6/docs/ref/#commands.defaultKeymap), [undo\nhistory](https://codemirror.net/6/docs/ref/#commands.history), [special character\nhighlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars), [custom selection\ndrawing](https://codemirror.net/6/docs/ref/#view.drawSelection), and [default highlight\nstyle](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle).\n*/ const $3fa179aa810adb75$export$def279f8e103ce59 = /*@__PURE__*/ (()=>[\n        (0, $071334078f8d3f8a$export$76dc0899547f659c)(),\n        (0, $d04c89efcb565ec8$export$55abd4691b317664)(),\n        (0, $071334078f8d3f8a$export$17a3d0ab3687347d)(),\n        (0, $14831f1c512a5db9$export$ec1b956ff3a16361)((0, $14831f1c512a5db9$export$bb02a6818dd48320), {\n            fallback: true\n        }),\n        (0, $071334078f8d3f8a$export$5043418e2ef368d5).of([\n            ...(0, $d04c89efcb565ec8$export$ab2e8d0ac5d2b69e),\n            ...(0, $d04c89efcb565ec8$export$ab4a28cb63e8a670)\n        ])\n    ])();\n\n\nfunction $cbf0d71c649045bc$export$425a30f9bf453cff() {\n    let windowDiv = (0, $278360e0666719fc$export$ba255020126e276e)({\n        title: \"editor!\"\n    });\n    let editor = new (0, $071334078f8d3f8a$export$eece2fccabbb77c5)({\n        extensions: [\n            (0, $3fa179aa810adb75$export$f4f2465c1e83499c),\n            (0, $071334078f8d3f8a$export$eece2fccabbb77c5).theme({\n                \".cm-content\": {\n                    fontFamily: \"unifont\"\n                }\n            })\n        ],\n        parent: windowDiv.querySelector(\".body\")\n    });\n}\n\n\n\nfunction $23072682e9353204$export$1a21cdb782ed7a3f() {\n    let windowDiv = (0, $278360e0666719fc$export$ba255020126e276e)({\n        title: \"https://twitch.tv\",\n        body: /*html*/ `\r\n            <div class=\"df fdc jcc aic g4\">\r\n                <label for=\"twitch-channel\">type a twitch username to watch:</label>\r\n                <div>\r\n                    <input type=\"text\" id=\"twitch-channel\">\r\n                    <button id=\"twitch-watch\">watch</button>\r\n                </div>\r\n            </div>\r\n        `,\n        flexCenter: true,\n        center: true,\n        height: 150\n    });\n    windowDiv.querySelector(\"#twitch-watch\").onclick = ()=>{\n        let channelName = windowDiv.querySelector(\"#twitch-channel\").value;\n        windowDiv.remove();\n        (0, $278360e0666719fc$export$ba255020126e276e)({\n            title: `https://twitch.tv/${channelName}`,\n            body: /*html*/ `\r\n                <iframe class=\"w100 h100\" src=\"https://player.twitch.tv/?channel=${channelName}&parent=lumixing.github.io\" frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\"></iframe>\r\n            `,\n            x: 127,\n            y: 39,\n            width: 984,\n            height: 569,\n            hideOverflow: true\n        });\n        (0, $278360e0666719fc$export$ba255020126e276e)({\n            title: `https://twitch.tv/${channelName}/chat`,\n            body: /*html*/ `\r\n                <iframe class=\"w100 h100\" src=\"https://www.twitch.tv/embed/${channelName}/chat?parent=lumixing.github.io\"></iframe>\r\n            `,\n            x: 1127,\n            y: 38,\n            width: 358,\n            height: 806,\n            hideOverflow: true\n        });\n    };\n}\n\n\n\nfunction $19def3d7a0d56989$export$80c4ddf803a798f8() {\n    (0, $278360e0666719fc$export$ba255020126e276e)({\n        title: \"A$AP Rocky - LVL\",\n        body: /*html*/ `\r\n            <iframe class=\"w100 h100\" src=\"https://www.youtube.com/embed/lR5dwQNizVU?&autoplay=1\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\r\n        `,\n        width: 564,\n        height: 341,\n        hideOverflow: true\n    });\n}\n\n\n\n\n\nfunction $c44c686fb5be00f3$export$1290c4a291d31c79(text, time = 2000, type) {\n    let toastDiv = document.createElement(\"div\");\n    toastDiv.classList.add(\"toast\");\n    if (type) toastDiv.classList.add(type);\n    toastDiv.innerHTML = /*html*/ `\r\n        <span>${text}</span>  \r\n    `;\n    document.getElementById(\"toast-container\").append(toastDiv);\n    setTimeout(()=>{\n        toastDiv.style.animation = \"none\";\n    }, 200);\n    if (time >= 0) setTimeout(()=>{\n        toastDiv.style.animation = \"toastOpen .2s ease reverse forwards\";\n        setTimeout(()=>{\n            toastDiv.remove();\n        }, 200);\n    }, time);\n}\n\n\nfunction $c03d508249cc52fb$export$4614aebee8fb9011() {\n    let windowDiv = (0, $278360e0666719fc$export$ba255020126e276e)({\n        title: \"what's new?!\",\n        icon: (0, (/*@__PURE__*/$parcel$interopDefault($589e12536ead20e8$exports))),\n        body: /*html*/ `\r\n            <div style=\"padding: 8px\">\r\n                <h1>WHAT'S NEW?!</h1>\r\n                <span>in version 0.2</span>\r\n\r\n                <h1 style=\"margin-top: 16px\">Added</h1>\r\n                \r\n                <div style=\"margin-bottom: 16px\">\r\n                    <p>Some cool new apps!</p>\r\n                    <ul>\r\n                        <li><b>About</b> See what's all about lumOS</li>\r\n                        <li><b>Editor</b> Edit away your thoughts</li>\r\n                        <li><b>Twitch</b> Watch a Twitch&trade; streamer</li>\r\n                        <li><b>Spotify</b> Not really Spotify.. (their embeds suck!)</li>\r\n                        <li><b>What's New</b> I don't remember adding this</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div style=\"margin-bottom: 16px\">\r\n                    <p>TOASTS! Try them out!</p>\r\n                    <button id=\"test-button-1\">toast1</button>\r\n                    <button id=\"test-button-2\">toast2</button>\r\n                    <button id=\"test-button-3\">toast3</button>\r\n                    <button id=\"test-button-4\">toast4</button>\r\n                </div>\r\n\r\n                <div style=\"margin-bottom: 16px\">\r\n                    <p><i>Keyboard shortcuts</i>!</p>\r\n                    <ul>\r\n                        <li><b>Alt+Q</b> Close an active window</li>\r\n                        <li><b>Alt+W</b> Toast an active window's rect info</li>\r\n                        <li><b>Alt+A</b> Open a blank window</li>\r\n                        <li><b>Alt+S</b> Toast the UNIX time</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div>\r\n                    <p>Desktop features!</p>\r\n                    <ul>\r\n                        <li>Desktop apps that launch their respective app! (revolutionary technological advancement)</li>\r\n                        <li>You can move the desktop apps</li>\r\n                        <li>Desktop apps locations are saved after refresh for your own customizable desktop experience!</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <h1 style=\"margin-top: 16px\">Fixed</h1>\r\n                <p>Fixed a few bugs :)</p>\r\n\r\n            </div>\r\n        `,\n        center: true,\n        width: 500\n    });\n    windowDiv.querySelector(\"#test-button-1\").onclick = ()=>(0, $c44c686fb5be00f3$export$1290c4a291d31c79)(\"this is toast NUMBER ONE!!!\");\n    windowDiv.querySelector(\"#test-button-2\").onclick = ()=>(0, $c44c686fb5be00f3$export$1290c4a291d31c79)(\"successful toast number too B)\", 2000, \"success\");\n    windowDiv.querySelector(\"#test-button-3\").onclick = ()=>(0, $c44c686fb5be00f3$export$1290c4a291d31c79)(\"umm this is toast 3\", 2000, \"warn\");\n    windowDiv.querySelector(\"#test-button-4\").onclick = ()=>(0, $c44c686fb5be00f3$export$1290c4a291d31c79)(\"THIS IS TOAST CODE FOUR RUN\", 2000, \"error\");\n}\n\n\nconst $ef9cf399f6b615c8$var$defaultLoadedApps = {\n    \"about\": [\n        100,\n        100\n    ],\n    \"editor\": [\n        200,\n        100\n    ],\n    \"twitch\": [\n        300,\n        100\n    ],\n    \"spotify\": [\n        400,\n        100\n    ],\n    \"whatsnew\": [\n        500,\n        100\n    ]\n};\nfunction $ef9cf399f6b615c8$export$88f4db132affe3f7() {\n    let loadedApps = localStorage.getItem(\"apps\");\n    if (loadedApps) loadedApps = JSON.parse(loadedApps);\n    else {\n        loadedApps = {};\n        localStorage.setItem(\"apps\", JSON.stringify(loadedApps));\n    }\n    loadedApps = (0, $22b2cacfb0e08dbc$export$2e2bcd8739ae039).defaults({}, (0, $22b2cacfb0e08dbc$export$2e2bcd8739ae039).clone(loadedApps), $ef9cf399f6b615c8$var$defaultLoadedApps);\n    (0, $555d7ff54d54d493$export$4e373c34abfa8c68)(\"about\", (0, $03d8b5c69b86b708$export$13c7b7ad60c806b8), loadedApps[\"about\"][0], loadedApps[\"about\"][1]);\n    (0, $555d7ff54d54d493$export$4e373c34abfa8c68)(\"editor\", (0, $cbf0d71c649045bc$export$425a30f9bf453cff), loadedApps[\"editor\"][0], loadedApps[\"editor\"][1]);\n    (0, $555d7ff54d54d493$export$4e373c34abfa8c68)(\"twitch\", (0, $23072682e9353204$export$1a21cdb782ed7a3f), loadedApps[\"twitch\"][0], loadedApps[\"twitch\"][1]);\n    (0, $555d7ff54d54d493$export$4e373c34abfa8c68)(\"spotify\", (0, $19def3d7a0d56989$export$80c4ddf803a798f8), loadedApps[\"spotify\"][0], loadedApps[\"spotify\"][1]);\n    (0, $555d7ff54d54d493$export$4e373c34abfa8c68)(\"whatsnew\", (0, $c03d508249cc52fb$export$4614aebee8fb9011), loadedApps[\"whatsnew\"][0], loadedApps[\"whatsnew\"][1]);\n}\n\n\n\n\nfunction $1438b6ef1ee10279$export$fac44ee5b035f737(obj) {\n    return JSON.stringify(obj).slice(1, -1).replaceAll('\"', \"\").replaceAll(\",\", \"<br>\").replaceAll(\":\", \": \");\n}\n\n\nfunction $e11e54808b18f94b$export$4496eebf5eaf1d6e() {\n    document.onkeydown = (e)=>{\n        if (e.key == \"a\" && e.altKey) (0, $278360e0666719fc$export$ba255020126e276e)();\n        if (e.key == \"q\" && e.altKey) {\n            if (window.activeWindow == null) return;\n            window.activeWindow.remove();\n            window.activeWindow = null;\n        }\n        if (e.key == \"s\" && e.altKey) (0, $c44c686fb5be00f3$export$1290c4a291d31c79)(Date.now());\n        if (e.key == \"w\" && e.altKey) {\n            if (window.activeWindow == null) {\n                (0, $c44c686fb5be00f3$export$1290c4a291d31c79)(\"No any active window!\", 1000, \"error\");\n                return;\n            }\n            (0, $c44c686fb5be00f3$export$1290c4a291d31c79)((0, $1438b6ef1ee10279$export$fac44ee5b035f737)(window.activeWindow.getBoundingClientRect()), 3000);\n        }\n    };\n}\n\n\n\nconsole.log(\"booting!\");\n(0, $c44c686fb5be00f3$export$1290c4a291d31c79)(\"successfully booted!\", 1000, \"success\");\nwindow.windows = [];\nwindow.zIndex = 10;\nwindow.activeWindow = null;\nwindow.activeApp = null;\n(0, $e11e54808b18f94b$export$4496eebf5eaf1d6e)();\nwindow.onerror = (_a, _b, _c, _d, err)=>{\n    (0, $c44c686fb5be00f3$export$1290c4a291d31c79)(`Uh oh! Seems like an error occured:<br>${err}<br>Check the console for more information...`, 5000, \"error\");\n};\n(0, $ef9cf399f6b615c8$export$88f4db132affe3f7)();\n\n\n//# sourceMappingURL=index.b5a8b255.js.map\n","import { loadApps } from \"./desktop/loadApps\";\r\nimport { shortcutHandler } from \"./shortcuts\";\r\nimport { createToast } from \"./toast/main\";\r\n\r\nconsole.log(\"booting!\");\r\ncreateToast(\"successfully booted!\", 1000, \"success\");\r\n\r\nwindow.windows = [];\r\nwindow.zIndex = 10;\r\nwindow.activeWindow = null;\r\nwindow.activeApp = null;\r\n\r\nshortcutHandler();\r\n\r\nwindow.onerror = (_a, _b, _c, _d, err) => {\r\n    createToast(`Uh oh! Seems like an error occured:<br>${err}<br>Check the console for more information...`, 5000, \"error\");\r\n};\r\n\r\nloadApps();","import _ from \"underscore\";\r\nimport { createApp } from \"./main\";\r\nimport { launchAbout } from \"../apps/about\";\r\nimport { launchEditor } from \"../apps/editor\";\r\nimport { launchTwitch } from \"../apps/twitch\";\r\nimport { launchSpotify } from \"../apps/spotify\";\r\nimport { launchWhatsNew } from \"../apps/whatsnew\";\r\n\r\nconst defaultLoadedApps = {\r\n    \"about\": [100, 100],\r\n    \"editor\": [200, 100],\r\n    \"twitch\": [300, 100],\r\n    \"spotify\": [400, 100],\r\n    \"whatsnew\": [500, 100],\r\n};\r\n\r\nexport function loadApps() {\r\n    let loadedApps = localStorage.getItem(\"apps\");\r\n\r\n    if (loadedApps) {\r\n        loadedApps = JSON.parse(loadedApps);\r\n    } else {\r\n        loadedApps = {};\r\n        localStorage.setItem(\"apps\", JSON.stringify(loadedApps));\r\n    }\r\n\r\n    loadedApps = _.defaults({}, _.clone(loadedApps), defaultLoadedApps);\r\n\r\n    createApp(\"about\", launchAbout, loadedApps[\"about\"][0], loadedApps[\"about\"][1]);\r\n    createApp(\"editor\", launchEditor, loadedApps[\"editor\"][0], loadedApps[\"editor\"][1]);\r\n    createApp(\"twitch\", launchTwitch, loadedApps[\"twitch\"][0], loadedApps[\"twitch\"][1]);\r\n    createApp(\"spotify\", launchSpotify, loadedApps[\"spotify\"][0], loadedApps[\"spotify\"][1]);\r\n    createApp(\"whatsnew\", launchWhatsNew, loadedApps[\"whatsnew\"][0], loadedApps[\"whatsnew\"][1]);\r\n}","// ESM Exports\n// ===========\n// This module is the package entry point for ES module users. In other words,\n// it is the module they are interfacing with when they import from the whole\n// package instead of from a submodule, like this:\n//\n// ```js\n// import { map } from 'underscore';\n// ```\n//\n// The difference with `./index-default`, which is the package entry point for\n// CommonJS, AMD and UMD users, is purely technical. In ES modules, named and\n// default exports are considered to be siblings, so when you have a default\n// export, its properties are not automatically available as named exports. For\n// this reason, we re-export the named exports in addition to providing the same\n// default export as in `./index-default`.\nexport { default } from './index-default.js';\nexport * from './index.js';\n","// Default Export\n// ==============\n// In this module, we mix our bundled exports into the `_` object and export\n// the result. This is analogous to setting `module.exports = _` in CommonJS.\n// Hence, this module is also the entry point of our UMD bundle and the package\n// entry point for CommonJS and AMD users. In other words, this is (the source\n// of) the module you are interfacing with when you do any of the following:\n//\n// ```js\n// // CommonJS\n// var _ = require('underscore');\n//\n// // AMD\n// define(['underscore'], function(_) {...});\n//\n// // UMD in the browser\n// // _ is available as a global variable\n// ```\nimport * as allExports from './index.js';\nimport { mixin } from './index.js';\n\n// Add all of the Underscore functions to the wrapper object.\nvar _ = mixin(allExports);\n// Legacy Node.js API.\n_._ = _;\n// Export the Underscore API.\nexport default _;\n","// Named Exports\n// =============\n\n//     Underscore.js 1.13.6\n//     https://underscorejs.org\n//     (c) 2009-2022 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n// Baseline setup.\nexport { VERSION } from './_setup.js';\nexport { default as restArguments } from './restArguments.js';\n\n// Object Functions\n// ----------------\n// Our most fundamental functions operate on any JavaScript object.\n// Most functions in Underscore depend on at least one function in this section.\n\n// A group of functions that check the types of core JavaScript values.\n// These are often informally referred to as the \"isType\" functions.\nexport { default as isObject } from './isObject.js';\nexport { default as isNull } from './isNull.js';\nexport { default as isUndefined } from './isUndefined.js';\nexport { default as isBoolean } from './isBoolean.js';\nexport { default as isElement } from './isElement.js';\nexport { default as isString } from './isString.js';\nexport { default as isNumber } from './isNumber.js';\nexport { default as isDate } from './isDate.js';\nexport { default as isRegExp } from './isRegExp.js';\nexport { default as isError } from './isError.js';\nexport { default as isSymbol } from './isSymbol.js';\nexport { default as isArrayBuffer } from './isArrayBuffer.js';\nexport { default as isDataView } from './isDataView.js';\nexport { default as isArray } from './isArray.js';\nexport { default as isFunction } from './isFunction.js';\nexport { default as isArguments } from './isArguments.js';\nexport { default as isFinite } from './isFinite.js';\nexport { default as isNaN } from './isNaN.js';\nexport { default as isTypedArray } from './isTypedArray.js';\nexport { default as isEmpty } from './isEmpty.js';\nexport { default as isMatch } from './isMatch.js';\nexport { default as isEqual } from './isEqual.js';\nexport { default as isMap } from './isMap.js';\nexport { default as isWeakMap } from './isWeakMap.js';\nexport { default as isSet } from './isSet.js';\nexport { default as isWeakSet } from './isWeakSet.js';\n\n// Functions that treat an object as a dictionary of key-value pairs.\nexport { default as keys } from './keys.js';\nexport { default as allKeys } from './allKeys.js';\nexport { default as values } from './values.js';\nexport { default as pairs } from './pairs.js';\nexport { default as invert } from './invert.js';\nexport { default as functions,\n         default as methods   } from './functions.js';\nexport { default as extend } from './extend.js';\nexport { default as extendOwn,\n         default as assign    } from './extendOwn.js';\nexport { default as defaults } from './defaults.js';\nexport { default as create } from './create.js';\nexport { default as clone } from './clone.js';\nexport { default as tap } from './tap.js';\nexport { default as get } from './get.js';\nexport { default as has } from './has.js';\nexport { default as mapObject } from './mapObject.js';\n\n// Utility Functions\n// -----------------\n// A bit of a grab bag: Predicate-generating functions for use with filters and\n// loops, string escaping and templating, create random numbers and unique ids,\n// and functions that facilitate Underscore's chaining and iteration conventions.\nexport { default as identity } from './identity.js';\nexport { default as constant } from './constant.js';\nexport { default as noop } from './noop.js';\nexport { default as toPath } from './toPath.js';\nexport { default as property } from './property.js';\nexport { default as propertyOf } from './propertyOf.js';\nexport { default as matcher,\n         default as matches } from './matcher.js';\nexport { default as times } from './times.js';\nexport { default as random } from './random.js';\nexport { default as now } from './now.js';\nexport { default as escape } from './escape.js';\nexport { default as unescape } from './unescape.js';\nexport { default as templateSettings } from './templateSettings.js';\nexport { default as template } from './template.js';\nexport { default as result } from './result.js';\nexport { default as uniqueId } from './uniqueId.js';\nexport { default as chain } from './chain.js';\nexport { default as iteratee } from './iteratee.js';\n\n// Function (ahem) Functions\n// -------------------------\n// These functions take a function as an argument and return a new function\n// as the result. Also known as higher-order functions.\nexport { default as partial } from './partial.js';\nexport { default as bind } from './bind.js';\nexport { default as bindAll } from './bindAll.js';\nexport { default as memoize } from './memoize.js';\nexport { default as delay } from './delay.js';\nexport { default as defer } from './defer.js';\nexport { default as throttle } from './throttle.js';\nexport { default as debounce } from './debounce.js';\nexport { default as wrap } from './wrap.js';\nexport { default as negate } from './negate.js';\nexport { default as compose } from './compose.js';\nexport { default as after } from './after.js';\nexport { default as before } from './before.js';\nexport { default as once } from './once.js';\n\n// Finders\n// -------\n// Functions that extract (the position of) a single element from an object\n// or array based on some criterion.\nexport { default as findKey } from './findKey.js';\nexport { default as findIndex } from './findIndex.js';\nexport { default as findLastIndex } from './findLastIndex.js';\nexport { default as sortedIndex } from './sortedIndex.js';\nexport { default as indexOf } from './indexOf.js';\nexport { default as lastIndexOf } from './lastIndexOf.js';\nexport { default as find,\n         default as detect } from './find.js';\nexport { default as findWhere } from './findWhere.js';\n\n// Collection Functions\n// --------------------\n// Functions that work on any collection of elements: either an array, or\n// an object of key-value pairs.\nexport { default as each,\n         default as forEach } from './each.js';\nexport { default as map,\n         default as collect } from './map.js';\nexport { default as reduce,\n         default as foldl,\n         default as inject } from './reduce.js';\nexport { default as reduceRight,\n         default as foldr       } from './reduceRight.js';\nexport { default as filter,\n         default as select } from './filter.js';\nexport { default as reject } from './reject.js';\nexport { default as every,\n         default as all   } from './every.js';\nexport { default as some,\n         default as any  } from './some.js';\nexport { default as contains,\n         default as includes,\n         default as include  } from './contains.js';\nexport { default as invoke } from './invoke.js';\nexport { default as pluck } from './pluck.js';\nexport { default as where } from './where.js';\nexport { default as max } from './max.js';\nexport { default as min } from './min.js';\nexport { default as shuffle } from './shuffle.js';\nexport { default as sample } from './sample.js';\nexport { default as sortBy } from './sortBy.js';\nexport { default as groupBy } from './groupBy.js';\nexport { default as indexBy } from './indexBy.js';\nexport { default as countBy } from './countBy.js';\nexport { default as partition } from './partition.js';\nexport { default as toArray } from './toArray.js';\nexport { default as size } from './size.js';\n\n// `_.pick` and `_.omit` are actually object functions, but we put\n// them here in order to create a more natural reading order in the\n// monolithic build as they depend on `_.contains`.\nexport { default as pick } from './pick.js';\nexport { default as omit } from './omit.js';\n\n// Array Functions\n// ---------------\n// Functions that operate on arrays (and array-likes) only, because they’re\n// expressed in terms of operations on an ordered list of values.\nexport { default as first,\n         default as head,\n         default as take  } from './first.js';\nexport { default as initial } from './initial.js';\nexport { default as last } from './last.js';\nexport { default as rest,\n         default as tail,\n         default as drop } from './rest.js';\nexport { default as compact } from './compact.js';\nexport { default as flatten } from './flatten.js';\nexport { default as without } from './without.js';\nexport { default as uniq,\n         default as unique } from './uniq.js';\nexport { default as union } from './union.js';\nexport { default as intersection } from './intersection.js';\nexport { default as difference } from './difference.js';\nexport { default as unzip,\n         default as transpose } from './unzip.js';\nexport { default as zip } from './zip.js';\nexport { default as object } from './object.js';\nexport { default as range } from './range.js';\nexport { default as chunk } from './chunk.js';\n\n// OOP\n// ---\n// These modules support the \"object-oriented\" calling style. See also\n// `underscore.js` and `index-default.js`.\nexport { default as mixin } from './mixin.js';\nexport { default } from './underscore-array-methods.js';\n","// Current version.\nexport var VERSION = '1.13.6';\n\n// Establish the root object, `window` (`self`) in the browser, `global`\n// on the server, or `this` in some virtual machines. We use `self`\n// instead of `window` for `WebWorker` support.\nexport var root = (typeof self == 'object' && self.self === self && self) ||\n          (typeof global == 'object' && global.global === global && global) ||\n          Function('return this')() ||\n          {};\n\n// Save bytes in the minified (but not gzipped) version:\nexport var ArrayProto = Array.prototype, ObjProto = Object.prototype;\nexport var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n// Create quick reference variables for speed access to core prototypes.\nexport var push = ArrayProto.push,\n    slice = ArrayProto.slice,\n    toString = ObjProto.toString,\n    hasOwnProperty = ObjProto.hasOwnProperty;\n\n// Modern feature detection.\nexport var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',\n    supportsDataView = typeof DataView !== 'undefined';\n\n// All **ECMAScript 5+** native function implementations that we hope to use\n// are declared here.\nexport var nativeIsArray = Array.isArray,\n    nativeKeys = Object.keys,\n    nativeCreate = Object.create,\n    nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;\n\n// Create references to these builtin functions because we override them.\nexport var _isNaN = isNaN,\n    _isFinite = isFinite;\n\n// Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\nexport var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\nexport var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n  'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n// The largest integer that can be represented exactly.\nexport var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n","// Some functions take a variable number of arguments, or a few expected\n// arguments at the beginning and then a variable number of values to operate\n// on. This helper accumulates all remaining arguments past the function’s\n// argument length (or an explicit `startIndex`), into an array that becomes\n// the last argument. Similar to ES6’s \"rest parameter\".\nexport default function restArguments(func, startIndex) {\n  startIndex = startIndex == null ? func.length - 1 : +startIndex;\n  return function() {\n    var length = Math.max(arguments.length - startIndex, 0),\n        rest = Array(length),\n        index = 0;\n    for (; index < length; index++) {\n      rest[index] = arguments[index + startIndex];\n    }\n    switch (startIndex) {\n      case 0: return func.call(this, rest);\n      case 1: return func.call(this, arguments[0], rest);\n      case 2: return func.call(this, arguments[0], arguments[1], rest);\n    }\n    var args = Array(startIndex + 1);\n    for (index = 0; index < startIndex; index++) {\n      args[index] = arguments[index];\n    }\n    args[startIndex] = rest;\n    return func.apply(this, args);\n  };\n}\n","// Is a given variable an object?\nexport default function isObject(obj) {\n  var type = typeof obj;\n  return type === 'function' || (type === 'object' && !!obj);\n}\n","// Is a given value equal to null?\nexport default function isNull(obj) {\n  return obj === null;\n}\n","// Is a given variable undefined?\nexport default function isUndefined(obj) {\n  return obj === void 0;\n}\n","import { toString } from './_setup.js';\n\n// Is a given value a boolean?\nexport default function isBoolean(obj) {\n  return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n}\n","// Is a given value a DOM element?\nexport default function isElement(obj) {\n  return !!(obj && obj.nodeType === 1);\n}\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('String');\n","import { toString } from './_setup.js';\n\n// Internal function for creating a `toString`-based type tester.\nexport default function tagTester(name) {\n  var tag = '[object ' + name + ']';\n  return function(obj) {\n    return toString.call(obj) === tag;\n  };\n}\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('Number');\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('Date');\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('RegExp');\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('Error');\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('Symbol');\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('ArrayBuffer');\n","import tagTester from './_tagTester.js';\nimport isFunction from './isFunction.js';\nimport isArrayBuffer from './isArrayBuffer.js';\nimport { hasStringTagBug } from './_stringTagBug.js';\n\nvar isDataView = tagTester('DataView');\n\n// In IE 10 - Edge 13, we need a different heuristic\n// to determine whether an object is a `DataView`.\nfunction ie10IsDataView(obj) {\n  return obj != null && isFunction(obj.getInt8) && isArrayBuffer(obj.buffer);\n}\n\nexport default (hasStringTagBug ? ie10IsDataView : isDataView);\n","import tagTester from './_tagTester.js';\nimport { root } from './_setup.js';\n\nvar isFunction = tagTester('Function');\n\n// Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old\n// v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\nvar nodelist = root.document && root.document.childNodes;\nif (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n  isFunction = function(obj) {\n    return typeof obj == 'function' || false;\n  };\n}\n\nexport default isFunction;\n","import { supportsDataView } from './_setup.js';\nimport hasObjectTag from './_hasObjectTag.js';\n\n// In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.\n// In IE 11, the most common among them, this problem also applies to\n// `Map`, `WeakMap` and `Set`.\nexport var hasStringTagBug = (\n      supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)))\n    ),\n    isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('Object');\n","import { nativeIsArray } from './_setup.js';\nimport tagTester from './_tagTester.js';\n\n// Is a given value an array?\n// Delegates to ECMA5's native `Array.isArray`.\nexport default nativeIsArray || tagTester('Array');\n","import tagTester from './_tagTester.js';\nimport has from './_has.js';\n\nvar isArguments = tagTester('Arguments');\n\n// Define a fallback version of the method in browsers (ahem, IE < 9), where\n// there isn't any inspectable \"Arguments\" type.\n(function() {\n  if (!isArguments(arguments)) {\n    isArguments = function(obj) {\n      return has(obj, 'callee');\n    };\n  }\n}());\n\nexport default isArguments;\n","import { hasOwnProperty } from './_setup.js';\n\n// Internal function to check whether `key` is an own property name of `obj`.\nexport default function has(obj, key) {\n  return obj != null && hasOwnProperty.call(obj, key);\n}\n","import { _isFinite } from './_setup.js';\nimport isSymbol from './isSymbol.js';\n\n// Is a given object a finite number?\nexport default function isFinite(obj) {\n  return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));\n}\n","import { _isNaN } from './_setup.js';\nimport isNumber from './isNumber.js';\n\n// Is the given value `NaN`?\nexport default function isNaN(obj) {\n  return isNumber(obj) && _isNaN(obj);\n}\n","import { supportsArrayBuffer, nativeIsView, toString } from './_setup.js';\nimport isDataView from './isDataView.js';\nimport constant from './constant.js';\nimport isBufferLike from './_isBufferLike.js';\n\n// Is a given value a typed array?\nvar typedArrayPattern = /\\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\\]/;\nfunction isTypedArray(obj) {\n  // `ArrayBuffer.isView` is the most future-proof, so use it when available.\n  // Otherwise, fall back on the above regular expression.\n  return nativeIsView ? (nativeIsView(obj) && !isDataView(obj)) :\n                isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));\n}\n\nexport default supportsArrayBuffer ? isTypedArray : constant(false);\n","// Predicate-generating function. Often useful outside of Underscore.\nexport default function constant(value) {\n  return function() {\n    return value;\n  };\n}\n","import createSizePropertyCheck from './_createSizePropertyCheck.js';\nimport getByteLength from './_getByteLength.js';\n\n// Internal helper to determine whether we should spend extensive checks against\n// `ArrayBuffer` et al.\nexport default createSizePropertyCheck(getByteLength);\n","import { MAX_ARRAY_INDEX } from './_setup.js';\n\n// Common internal logic for `isArrayLike` and `isBufferLike`.\nexport default function createSizePropertyCheck(getSizeProperty) {\n  return function(collection) {\n    var sizeProperty = getSizeProperty(collection);\n    return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;\n  }\n}\n","import shallowProperty from './_shallowProperty.js';\n\n// Internal helper to obtain the `byteLength` property of an object.\nexport default shallowProperty('byteLength');\n","// Internal helper to generate a function to obtain property `key` from `obj`.\nexport default function shallowProperty(key) {\n  return function(obj) {\n    return obj == null ? void 0 : obj[key];\n  };\n}\n","import getLength from './_getLength.js';\nimport isArray from './isArray.js';\nimport isString from './isString.js';\nimport isArguments from './isArguments.js';\nimport keys from './keys.js';\n\n// Is a given array, string, or object empty?\n// An \"empty\" object has no enumerable own-properties.\nexport default function isEmpty(obj) {\n  if (obj == null) return true;\n  // Skip the more expensive `toString`-based type checks if `obj` has no\n  // `.length`.\n  var length = getLength(obj);\n  if (typeof length == 'number' && (\n    isArray(obj) || isString(obj) || isArguments(obj)\n  )) return length === 0;\n  return getLength(keys(obj)) === 0;\n}\n","import shallowProperty from './_shallowProperty.js';\n\n// Internal helper to obtain the `length` property of an object.\nexport default shallowProperty('length');\n","import isObject from './isObject.js';\nimport { nativeKeys, hasEnumBug } from './_setup.js';\nimport has from './_has.js';\nimport collectNonEnumProps from './_collectNonEnumProps.js';\n\n// Retrieve the names of an object's own properties.\n// Delegates to **ECMAScript 5**'s native `Object.keys`.\nexport default function keys(obj) {\n  if (!isObject(obj)) return [];\n  if (nativeKeys) return nativeKeys(obj);\n  var keys = [];\n  for (var key in obj) if (has(obj, key)) keys.push(key);\n  // Ahem, IE < 9.\n  if (hasEnumBug) collectNonEnumProps(obj, keys);\n  return keys;\n}\n","import { nonEnumerableProps, ObjProto } from './_setup.js';\nimport isFunction from './isFunction.js';\nimport has from './_has.js';\n\n// Internal helper to create a simple lookup structure.\n// `collectNonEnumProps` used to depend on `_.contains`, but this led to\n// circular imports. `emulatedSet` is a one-off solution that only works for\n// arrays of strings.\nfunction emulatedSet(keys) {\n  var hash = {};\n  for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;\n  return {\n    contains: function(key) { return hash[key] === true; },\n    push: function(key) {\n      hash[key] = true;\n      return keys.push(key);\n    }\n  };\n}\n\n// Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't\n// be iterated by `for key in ...` and thus missed. Extends `keys` in place if\n// needed.\nexport default function collectNonEnumProps(obj, keys) {\n  keys = emulatedSet(keys);\n  var nonEnumIdx = nonEnumerableProps.length;\n  var constructor = obj.constructor;\n  var proto = (isFunction(constructor) && constructor.prototype) || ObjProto;\n\n  // Constructor is a special case.\n  var prop = 'constructor';\n  if (has(obj, prop) && !keys.contains(prop)) keys.push(prop);\n\n  while (nonEnumIdx--) {\n    prop = nonEnumerableProps[nonEnumIdx];\n    if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {\n      keys.push(prop);\n    }\n  }\n}\n","import keys from './keys.js';\n\n// Returns whether an object has a given set of `key:value` pairs.\nexport default function isMatch(object, attrs) {\n  var _keys = keys(attrs), length = _keys.length;\n  if (object == null) return !length;\n  var obj = Object(object);\n  for (var i = 0; i < length; i++) {\n    var key = _keys[i];\n    if (attrs[key] !== obj[key] || !(key in obj)) return false;\n  }\n  return true;\n}\n","import _ from './underscore.js';\nimport { toString, SymbolProto } from './_setup.js';\nimport getByteLength from './_getByteLength.js';\nimport isTypedArray from './isTypedArray.js';\nimport isFunction from './isFunction.js';\nimport { hasStringTagBug }  from './_stringTagBug.js';\nimport isDataView from './isDataView.js';\nimport keys from './keys.js';\nimport has from './_has.js';\nimport toBufferView from './_toBufferView.js';\n\n// We use this string twice, so give it a name for minification.\nvar tagDataView = '[object DataView]';\n\n// Internal recursive comparison function for `_.isEqual`.\nfunction eq(a, b, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren't identical.\n  // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  // `null` or `undefined` only equal to itself (strict comparison).\n  if (a == null || b == null) return false;\n  // `NaN`s are equivalent, but non-reflexive.\n  if (a !== a) return b !== b;\n  // Exhaust primitive checks\n  var type = typeof a;\n  if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n  return deepEq(a, b, aStack, bStack);\n}\n\n// Internal recursive comparison function for `_.isEqual`.\nfunction deepEq(a, b, aStack, bStack) {\n  // Unwrap any wrapped objects.\n  if (a instanceof _) a = a._wrapped;\n  if (b instanceof _) b = b._wrapped;\n  // Compare `[[Class]]` names.\n  var className = toString.call(a);\n  if (className !== toString.call(b)) return false;\n  // Work around a bug in IE 10 - Edge 13.\n  if (hasStringTagBug && className == '[object Object]' && isDataView(a)) {\n    if (!isDataView(b)) return false;\n    className = tagDataView;\n  }\n  switch (className) {\n    // These types are compared by value.\n    case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n    case '[object String]':\n      // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n      // equivalent to `new String(\"5\")`.\n      return '' + a === '' + b;\n    case '[object Number]':\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) return +b !== +b;\n      // An `egal` comparison is performed for other numeric values.\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n    case '[object Date]':\n    case '[object Boolean]':\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n    case '[object Symbol]':\n      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    case '[object ArrayBuffer]':\n    case tagDataView:\n      // Coerce to typed array so we can fall through.\n      return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);\n  }\n\n  var areArrays = className === '[object Array]';\n  if (!areArrays && isTypedArray(a)) {\n      var byteLength = getByteLength(a);\n      if (byteLength !== getByteLength(b)) return false;\n      if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;\n      areArrays = true;\n  }\n  if (!areArrays) {\n    if (typeof a != 'object' || typeof b != 'object') return false;\n\n    // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n    var aCtor = a.constructor, bCtor = b.constructor;\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\n                             isFunction(bCtor) && bCtor instanceof bCtor)\n                        && ('constructor' in a && 'constructor' in b)) {\n      return false;\n    }\n  }\n  // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n  // Initializing stack of traversed objects.\n  // It's done here since we only need them for objects and arrays comparison.\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) return bStack[length] === b;\n  }\n\n  // Add the first object to the stack of traversed objects.\n  aStack.push(a);\n  bStack.push(b);\n\n  // Recursively compare objects and arrays.\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) return false;\n    // Deep compare the contents, ignoring non-numeric properties.\n    while (length--) {\n      if (!eq(a[length], b[length], aStack, bStack)) return false;\n    }\n  } else {\n    // Deep compare objects.\n    var _keys = keys(a), key;\n    length = _keys.length;\n    // Ensure that both objects contain the same number of properties before comparing deep equality.\n    if (keys(b).length !== length) return false;\n    while (length--) {\n      // Deep compare each member\n      key = _keys[length];\n      if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n    }\n  }\n  // Remove the first object from the stack of traversed objects.\n  aStack.pop();\n  bStack.pop();\n  return true;\n}\n\n// Perform a deep comparison to check if two objects are equal.\nexport default function isEqual(a, b) {\n  return eq(a, b);\n}\n","import { VERSION } from './_setup.js';\n\n// If Underscore is called as a function, it returns a wrapped object that can\n// be used OO-style. This wrapper holds altered versions of all functions added\n// through `_.mixin`. Wrapped objects may be chained.\nexport default function _(obj) {\n  if (obj instanceof _) return obj;\n  if (!(this instanceof _)) return new _(obj);\n  this._wrapped = obj;\n}\n\n_.VERSION = VERSION;\n\n// Extracts the result from a wrapped and chained object.\n_.prototype.value = function() {\n  return this._wrapped;\n};\n\n// Provide unwrapping proxies for some methods used in engine operations\n// such as arithmetic and JSON stringification.\n_.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n_.prototype.toString = function() {\n  return String(this._wrapped);\n};\n","import getByteLength from './_getByteLength.js';\n\n// Internal function to wrap or shallow-copy an ArrayBuffer,\n// typed array or DataView to a new view, reusing the buffer.\nexport default function toBufferView(bufferSource) {\n  return new Uint8Array(\n    bufferSource.buffer || bufferSource,\n    bufferSource.byteOffset || 0,\n    getByteLength(bufferSource)\n  );\n}\n","import tagTester from './_tagTester.js';\nimport { isIE11 } from './_stringTagBug.js';\nimport { ie11fingerprint, mapMethods }  from './_methodFingerprint.js';\n\nexport default isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');\n","import getLength from './_getLength.js';\nimport isFunction from './isFunction.js';\nimport allKeys from './allKeys.js';\n\n// Since the regular `Object.prototype.toString` type tests don't work for\n// some types in IE 11, we use a fingerprinting heuristic instead, based\n// on the methods. It's not great, but it's the best we got.\n// The fingerprint method lists are defined below.\nexport function ie11fingerprint(methods) {\n  var length = getLength(methods);\n  return function(obj) {\n    if (obj == null) return false;\n    // `Map`, `WeakMap` and `Set` have no enumerable keys.\n    var keys = allKeys(obj);\n    if (getLength(keys)) return false;\n    for (var i = 0; i < length; i++) {\n      if (!isFunction(obj[methods[i]])) return false;\n    }\n    // If we are testing against `WeakMap`, we need to ensure that\n    // `obj` doesn't have a `forEach` method in order to distinguish\n    // it from a regular `Map`.\n    return methods !== weakMapMethods || !isFunction(obj[forEachName]);\n  };\n}\n\n// In the interest of compact minification, we write\n// each string in the fingerprints only once.\nvar forEachName = 'forEach',\n    hasName = 'has',\n    commonInit = ['clear', 'delete'],\n    mapTail = ['get', hasName, 'set'];\n\n// `Map`, `WeakMap` and `Set` each have slightly different\n// combinations of the above sublists.\nexport var mapMethods = commonInit.concat(forEachName, mapTail),\n    weakMapMethods = commonInit.concat(mapTail),\n    setMethods = ['add'].concat(commonInit, forEachName, hasName);\n","import isObject from './isObject.js';\nimport { hasEnumBug } from './_setup.js';\nimport collectNonEnumProps from './_collectNonEnumProps.js';\n\n// Retrieve all the enumerable property names of an object.\nexport default function allKeys(obj) {\n  if (!isObject(obj)) return [];\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  // Ahem, IE < 9.\n  if (hasEnumBug) collectNonEnumProps(obj, keys);\n  return keys;\n}\n","import tagTester from './_tagTester.js';\nimport { isIE11 } from './_stringTagBug.js';\nimport { ie11fingerprint, weakMapMethods }  from './_methodFingerprint.js';\n\nexport default isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');\n","import tagTester from './_tagTester.js';\nimport { isIE11 } from './_stringTagBug.js';\nimport { ie11fingerprint, setMethods }  from './_methodFingerprint.js';\n\nexport default isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('WeakSet');\n","import keys from './keys.js';\n\n// Retrieve the values of an object's properties.\nexport default function values(obj) {\n  var _keys = keys(obj);\n  var length = _keys.length;\n  var values = Array(length);\n  for (var i = 0; i < length; i++) {\n    values[i] = obj[_keys[i]];\n  }\n  return values;\n}\n","import keys from './keys.js';\n\n// Convert an object into a list of `[key, value]` pairs.\n// The opposite of `_.object` with one argument.\nexport default function pairs(obj) {\n  var _keys = keys(obj);\n  var length = _keys.length;\n  var pairs = Array(length);\n  for (var i = 0; i < length; i++) {\n    pairs[i] = [_keys[i], obj[_keys[i]]];\n  }\n  return pairs;\n}\n","import keys from './keys.js';\n\n// Invert the keys and values of an object. The values must be serializable.\nexport default function invert(obj) {\n  var result = {};\n  var _keys = keys(obj);\n  for (var i = 0, length = _keys.length; i < length; i++) {\n    result[obj[_keys[i]]] = _keys[i];\n  }\n  return result;\n}\n","import isFunction from './isFunction.js';\n\n// Return a sorted list of the function names available on the object.\nexport default function functions(obj) {\n  var names = [];\n  for (var key in obj) {\n    if (isFunction(obj[key])) names.push(key);\n  }\n  return names.sort();\n}\n","import createAssigner from './_createAssigner.js';\nimport allKeys from './allKeys.js';\n\n// Extend a given object with all the properties in passed-in object(s).\nexport default createAssigner(allKeys);\n","// An internal function for creating assigner functions.\nexport default function createAssigner(keysFunc, defaults) {\n  return function(obj) {\n    var length = arguments.length;\n    if (defaults) obj = Object(obj);\n    if (length < 2 || obj == null) return obj;\n    for (var index = 1; index < length; index++) {\n      var source = arguments[index],\n          keys = keysFunc(source),\n          l = keys.length;\n      for (var i = 0; i < l; i++) {\n        var key = keys[i];\n        if (!defaults || obj[key] === void 0) obj[key] = source[key];\n      }\n    }\n    return obj;\n  };\n}\n","import createAssigner from './_createAssigner.js';\nimport keys from './keys.js';\n\n// Assigns a given object with all the own properties in the passed-in\n// object(s).\n// (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\nexport default createAssigner(keys);\n","import createAssigner from './_createAssigner.js';\nimport allKeys from './allKeys.js';\n\n// Fill in a given object with default properties.\nexport default createAssigner(allKeys, true);\n","import baseCreate from './_baseCreate.js';\nimport extendOwn from './extendOwn.js';\n\n// Creates an object that inherits from the given prototype object.\n// If additional properties are provided then they will be added to the\n// created object.\nexport default function create(prototype, props) {\n  var result = baseCreate(prototype);\n  if (props) extendOwn(result, props);\n  return result;\n}\n","import isObject from './isObject.js';\nimport { nativeCreate } from './_setup.js';\n\n// Create a naked function reference for surrogate-prototype-swapping.\nfunction ctor() {\n  return function(){};\n}\n\n// An internal function for creating a new object that inherits from another.\nexport default function baseCreate(prototype) {\n  if (!isObject(prototype)) return {};\n  if (nativeCreate) return nativeCreate(prototype);\n  var Ctor = ctor();\n  Ctor.prototype = prototype;\n  var result = new Ctor;\n  Ctor.prototype = null;\n  return result;\n}\n","import isObject from './isObject.js';\nimport isArray from './isArray.js';\nimport extend from './extend.js';\n\n// Create a (shallow-cloned) duplicate of an object.\nexport default function clone(obj) {\n  if (!isObject(obj)) return obj;\n  return isArray(obj) ? obj.slice() : extend({}, obj);\n}\n","// Invokes `interceptor` with the `obj` and then returns `obj`.\n// The primary purpose of this method is to \"tap into\" a method chain, in\n// order to perform operations on intermediate results within the chain.\nexport default function tap(obj, interceptor) {\n  interceptor(obj);\n  return obj;\n}\n","import toPath from './_toPath.js';\nimport deepGet from './_deepGet.js';\nimport isUndefined from './isUndefined.js';\n\n// Get the value of the (deep) property on `path` from `object`.\n// If any property in `path` does not exist or if the value is\n// `undefined`, return `defaultValue` instead.\n// The `path` is normalized through `_.toPath`.\nexport default function get(object, path, defaultValue) {\n  var value = deepGet(object, toPath(path));\n  return isUndefined(value) ? defaultValue : value;\n}\n","import _ from './underscore.js';\nimport './toPath.js';\n\n// Internal wrapper for `_.toPath` to enable minification.\n// Similar to `cb` for `_.iteratee`.\nexport default function toPath(path) {\n  return _.toPath(path);\n}\n","import _ from './underscore.js';\nimport isArray from './isArray.js';\n\n// Normalize a (deep) property `path` to array.\n// Like `_.iteratee`, this function can be customized.\nexport default function toPath(path) {\n  return isArray(path) ? path : [path];\n}\n_.toPath = toPath;\n","// Internal function to obtain a nested property in `obj` along `path`.\nexport default function deepGet(obj, path) {\n  var length = path.length;\n  for (var i = 0; i < length; i++) {\n    if (obj == null) return void 0;\n    obj = obj[path[i]];\n  }\n  return length ? obj : void 0;\n}\n","import _has from './_has.js';\nimport toPath from './_toPath.js';\n\n// Shortcut function for checking if an object has a given property directly on\n// itself (in other words, not on a prototype). Unlike the internal `has`\n// function, this public version can also traverse nested properties.\nexport default function has(obj, path) {\n  path = toPath(path);\n  var length = path.length;\n  for (var i = 0; i < length; i++) {\n    var key = path[i];\n    if (!_has(obj, key)) return false;\n    obj = obj[key];\n  }\n  return !!length;\n}\n","import cb from './_cb.js';\nimport keys from './keys.js';\n\n// Returns the results of applying the `iteratee` to each element of `obj`.\n// In contrast to `_.map` it returns an object.\nexport default function mapObject(obj, iteratee, context) {\n  iteratee = cb(iteratee, context);\n  var _keys = keys(obj),\n      length = _keys.length,\n      results = {};\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys[index];\n    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n  }\n  return results;\n}\n","import _ from './underscore.js';\nimport baseIteratee from './_baseIteratee.js';\nimport iteratee from './iteratee.js';\n\n// The function we call internally to generate a callback. It invokes\n// `_.iteratee` if overridden, otherwise `baseIteratee`.\nexport default function cb(value, context, argCount) {\n  if (_.iteratee !== iteratee) return _.iteratee(value, context);\n  return baseIteratee(value, context, argCount);\n}\n","import identity from './identity.js';\nimport isFunction from './isFunction.js';\nimport isObject from './isObject.js';\nimport isArray from './isArray.js';\nimport matcher from './matcher.js';\nimport property from './property.js';\nimport optimizeCb from './_optimizeCb.js';\n\n// An internal function to generate callbacks that can be applied to each\n// element in a collection, returning the desired result — either `_.identity`,\n// an arbitrary callback, a property matcher, or a property accessor.\nexport default function baseIteratee(value, context, argCount) {\n  if (value == null) return identity;\n  if (isFunction(value)) return optimizeCb(value, context, argCount);\n  if (isObject(value) && !isArray(value)) return matcher(value);\n  return property(value);\n}\n","// Keep the identity function around for default iteratees.\nexport default function identity(value) {\n  return value;\n}\n","import extendOwn from './extendOwn.js';\nimport isMatch from './isMatch.js';\n\n// Returns a predicate for checking whether an object has a given set of\n// `key:value` pairs.\nexport default function matcher(attrs) {\n  attrs = extendOwn({}, attrs);\n  return function(obj) {\n    return isMatch(obj, attrs);\n  };\n}\n","import deepGet from './_deepGet.js';\nimport toPath from './_toPath.js';\n\n// Creates a function that, when passed an object, will traverse that object’s\n// properties down the given `path`, specified as an array of keys or indices.\nexport default function property(path) {\n  path = toPath(path);\n  return function(obj) {\n    return deepGet(obj, path);\n  };\n}\n","// Internal function that returns an efficient (for current engines) version\n// of the passed-in callback, to be repeatedly applied in other Underscore\n// functions.\nexport default function optimizeCb(func, context, argCount) {\n  if (context === void 0) return func;\n  switch (argCount == null ? 3 : argCount) {\n    case 1: return function(value) {\n      return func.call(context, value);\n    };\n    // The 2-argument case is omitted because we’re not using it.\n    case 3: return function(value, index, collection) {\n      return func.call(context, value, index, collection);\n    };\n    case 4: return function(accumulator, value, index, collection) {\n      return func.call(context, accumulator, value, index, collection);\n    };\n  }\n  return function() {\n    return func.apply(context, arguments);\n  };\n}\n","import _ from './underscore.js';\nimport baseIteratee from './_baseIteratee.js';\n\n// External wrapper for our callback generator. Users may customize\n// `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n// This abstraction hides the internal-only `argCount` argument.\nexport default function iteratee(value, context) {\n  return baseIteratee(value, context, Infinity);\n}\n_.iteratee = iteratee;\n","// Predicate-generating function. Often useful outside of Underscore.\nexport default function noop(){}\n","import noop from './noop.js';\nimport get from './get.js';\n\n// Generates a function for a given object that returns a given property.\nexport default function propertyOf(obj) {\n  if (obj == null) return noop;\n  return function(path) {\n    return get(obj, path);\n  };\n}\n","import optimizeCb from './_optimizeCb.js';\n\n// Run a function **n** times.\nexport default function times(n, iteratee, context) {\n  var accum = Array(Math.max(0, n));\n  iteratee = optimizeCb(iteratee, context, 1);\n  for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n  return accum;\n}\n","// Return a random integer between `min` and `max` (inclusive).\nexport default function random(min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n  return min + Math.floor(Math.random() * (max - min + 1));\n}\n","// A (possibly faster) way to get the current timestamp as an integer.\nexport default Date.now || function() {\n  return new Date().getTime();\n};\n","import createEscaper from './_createEscaper.js';\nimport escapeMap from './_escapeMap.js';\n\n// Function for escaping strings to HTML interpolation.\nexport default createEscaper(escapeMap);\n","import keys from './keys.js';\n\n// Internal helper to generate functions for escaping and unescaping strings\n// to/from HTML interpolation.\nexport default function createEscaper(map) {\n  var escaper = function(match) {\n    return map[match];\n  };\n  // Regexes for identifying a key that needs to be escaped.\n  var source = '(?:' + keys(map).join('|') + ')';\n  var testRegexp = RegExp(source);\n  var replaceRegexp = RegExp(source, 'g');\n  return function(string) {\n    string = string == null ? '' : '' + string;\n    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n  };\n}\n","// Internal list of HTML entities for escaping.\nexport default {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;'\n};\n","import createEscaper from './_createEscaper.js';\nimport unescapeMap from './_unescapeMap.js';\n\n// Function for unescaping strings from HTML interpolation.\nexport default createEscaper(unescapeMap);\n","import invert from './invert.js';\nimport escapeMap from './_escapeMap.js';\n\n// Internal list of HTML entities for unescaping.\nexport default invert(escapeMap);\n","import _ from './underscore.js';\n\n// By default, Underscore uses ERB-style template delimiters. Change the\n// following template settings to use alternative delimiters.\nexport default _.templateSettings = {\n  evaluate: /<%([\\s\\S]+?)%>/g,\n  interpolate: /<%=([\\s\\S]+?)%>/g,\n  escape: /<%-([\\s\\S]+?)%>/g\n};\n","import defaults from './defaults.js';\nimport _ from './underscore.js';\nimport './templateSettings.js';\n\n// When customizing `_.templateSettings`, if you don't want to define an\n// interpolation, evaluation or escaping regex, we need one that is\n// guaranteed not to match.\nvar noMatch = /(.)^/;\n\n// Certain characters need to be escaped so that they can be put into a\n// string literal.\nvar escapes = {\n  \"'\": \"'\",\n  '\\\\': '\\\\',\n  '\\r': 'r',\n  '\\n': 'n',\n  '\\u2028': 'u2028',\n  '\\u2029': 'u2029'\n};\n\nvar escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\nfunction escapeChar(match) {\n  return '\\\\' + escapes[match];\n}\n\n// In order to prevent third-party code injection through\n// `_.templateSettings.variable`, we test it against the following regular\n// expression. It is intentionally a bit more liberal than just matching valid\n// identifiers, but still prevents possible loopholes through defaults or\n// destructuring assignment.\nvar bareIdentifier = /^\\s*(\\w|\\$)+\\s*$/;\n\n// JavaScript micro-templating, similar to John Resig's implementation.\n// Underscore templating handles arbitrary delimiters, preserves whitespace,\n// and correctly escapes quotes within interpolated code.\n// NB: `oldSettings` only exists for backwards compatibility.\nexport default function template(text, settings, oldSettings) {\n  if (!settings && oldSettings) settings = oldSettings;\n  settings = defaults({}, settings, _.templateSettings);\n\n  // Combine delimiters into one regular expression via alternation.\n  var matcher = RegExp([\n    (settings.escape || noMatch).source,\n    (settings.interpolate || noMatch).source,\n    (settings.evaluate || noMatch).source\n  ].join('|') + '|$', 'g');\n\n  // Compile the template source, escaping string literals appropriately.\n  var index = 0;\n  var source = \"__p+='\";\n  text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n    source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n    index = offset + match.length;\n\n    if (escape) {\n      source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n    } else if (interpolate) {\n      source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n    } else if (evaluate) {\n      source += \"';\\n\" + evaluate + \"\\n__p+='\";\n    }\n\n    // Adobe VMs need the match returned to produce the correct offset.\n    return match;\n  });\n  source += \"';\\n\";\n\n  var argument = settings.variable;\n  if (argument) {\n    // Insure against third-party code injection. (CVE-2021-23358)\n    if (!bareIdentifier.test(argument)) throw new Error(\n      'variable is not a bare identifier: ' + argument\n    );\n  } else {\n    // If a variable is not specified, place data values in local scope.\n    source = 'with(obj||{}){\\n' + source + '}\\n';\n    argument = 'obj';\n  }\n\n  source = \"var __t,__p='',__j=Array.prototype.join,\" +\n    \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n    source + 'return __p;\\n';\n\n  var render;\n  try {\n    render = new Function(argument, '_', source);\n  } catch (e) {\n    e.source = source;\n    throw e;\n  }\n\n  var template = function(data) {\n    return render.call(this, data, _);\n  };\n\n  // Provide the compiled source as a convenience for precompilation.\n  template.source = 'function(' + argument + '){\\n' + source + '}';\n\n  return template;\n}\n","import isFunction from './isFunction.js';\nimport toPath from './_toPath.js';\n\n// Traverses the children of `obj` along `path`. If a child is a function, it\n// is invoked with its parent as context. Returns the value of the final\n// child, or `fallback` if any child is undefined.\nexport default function result(obj, path, fallback) {\n  path = toPath(path);\n  var length = path.length;\n  if (!length) {\n    return isFunction(fallback) ? fallback.call(obj) : fallback;\n  }\n  for (var i = 0; i < length; i++) {\n    var prop = obj == null ? void 0 : obj[path[i]];\n    if (prop === void 0) {\n      prop = fallback;\n      i = length; // Ensure we don't continue iterating.\n    }\n    obj = isFunction(prop) ? prop.call(obj) : prop;\n  }\n  return obj;\n}\n","// Generate a unique integer id (unique within the entire client session).\n// Useful for temporary DOM ids.\nvar idCounter = 0;\nexport default function uniqueId(prefix) {\n  var id = ++idCounter + '';\n  return prefix ? prefix + id : id;\n}\n","import _ from './underscore.js';\n\n// Start chaining a wrapped Underscore object.\nexport default function chain(obj) {\n  var instance = _(obj);\n  instance._chain = true;\n  return instance;\n}\n","import restArguments from './restArguments.js';\nimport executeBound from './_executeBound.js';\nimport _ from './underscore.js';\n\n// Partially apply a function by creating a version that has had some of its\n// arguments pre-filled, without changing its dynamic `this` context. `_` acts\n// as a placeholder by default, allowing any combination of arguments to be\n// pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\nvar partial = restArguments(function(func, boundArgs) {\n  var placeholder = partial.placeholder;\n  var bound = function() {\n    var position = 0, length = boundArgs.length;\n    var args = Array(length);\n    for (var i = 0; i < length; i++) {\n      args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n    }\n    while (position < arguments.length) args.push(arguments[position++]);\n    return executeBound(func, bound, this, this, args);\n  };\n  return bound;\n});\n\npartial.placeholder = _;\nexport default partial;\n","import baseCreate from './_baseCreate.js';\nimport isObject from './isObject.js';\n\n// Internal function to execute `sourceFunc` bound to `context` with optional\n// `args`. Determines whether to execute a function as a constructor or as a\n// normal function.\nexport default function executeBound(sourceFunc, boundFunc, context, callingContext, args) {\n  if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n  var self = baseCreate(sourceFunc.prototype);\n  var result = sourceFunc.apply(self, args);\n  if (isObject(result)) return result;\n  return self;\n}\n","import restArguments from './restArguments.js';\nimport isFunction from './isFunction.js';\nimport executeBound from './_executeBound.js';\n\n// Create a function bound to a given object (assigning `this`, and arguments,\n// optionally).\nexport default restArguments(function(func, context, args) {\n  if (!isFunction(func)) throw new TypeError('Bind must be called on a function');\n  var bound = restArguments(function(callArgs) {\n    return executeBound(func, bound, context, this, args.concat(callArgs));\n  });\n  return bound;\n});\n","import restArguments from './restArguments.js';\nimport flatten from './_flatten.js';\nimport bind from './bind.js';\n\n// Bind a number of an object's methods to that object. Remaining arguments\n// are the method names to be bound. Useful for ensuring that all callbacks\n// defined on an object belong to it.\nexport default restArguments(function(obj, keys) {\n  keys = flatten(keys, false, false);\n  var index = keys.length;\n  if (index < 1) throw new Error('bindAll must be passed function names');\n  while (index--) {\n    var key = keys[index];\n    obj[key] = bind(obj[key], obj);\n  }\n  return obj;\n});\n","import getLength from './_getLength.js';\nimport isArrayLike from './_isArrayLike.js';\nimport isArray from './isArray.js';\nimport isArguments from './isArguments.js';\n\n// Internal implementation of a recursive `flatten` function.\nexport default function flatten(input, depth, strict, output) {\n  output = output || [];\n  if (!depth && depth !== 0) {\n    depth = Infinity;\n  } else if (depth <= 0) {\n    return output.concat(input);\n  }\n  var idx = output.length;\n  for (var i = 0, length = getLength(input); i < length; i++) {\n    var value = input[i];\n    if (isArrayLike(value) && (isArray(value) || isArguments(value))) {\n      // Flatten current level of array or arguments object.\n      if (depth > 1) {\n        flatten(value, depth - 1, strict, output);\n        idx = output.length;\n      } else {\n        var j = 0, len = value.length;\n        while (j < len) output[idx++] = value[j++];\n      }\n    } else if (!strict) {\n      output[idx++] = value;\n    }\n  }\n  return output;\n}\n","import createSizePropertyCheck from './_createSizePropertyCheck.js';\nimport getLength from './_getLength.js';\n\n// Internal helper for collection methods to determine whether a collection\n// should be iterated as an array or as an object.\n// Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n// Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\nexport default createSizePropertyCheck(getLength);\n","import has from './_has.js';\n\n// Memoize an expensive function by storing its results.\nexport default function memoize(func, hasher) {\n  var memoize = function(key) {\n    var cache = memoize.cache;\n    var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n    if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n    return cache[address];\n  };\n  memoize.cache = {};\n  return memoize;\n}\n","import restArguments from './restArguments.js';\n\n// Delays a function for the given number of milliseconds, and then calls\n// it with the arguments supplied.\nexport default restArguments(function(func, wait, args) {\n  return setTimeout(function() {\n    return func.apply(null, args);\n  }, wait);\n});\n","import partial from './partial.js';\nimport delay from './delay.js';\nimport _ from './underscore.js';\n\n// Defers a function, scheduling it to run after the current call stack has\n// cleared.\nexport default partial(delay, _, 1);\n","import now from './now.js';\n\n// Returns a function, that, when invoked, will only be triggered at most once\n// during a given window of time. Normally, the throttled function will run\n// as much as it can, without ever going more than once per `wait` duration;\n// but if you'd like to disable the execution on the leading edge, pass\n// `{leading: false}`. To disable execution on the trailing edge, ditto.\nexport default function throttle(func, wait, options) {\n  var timeout, context, args, result;\n  var previous = 0;\n  if (!options) options = {};\n\n  var later = function() {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n\n  var throttled = function() {\n    var _now = now();\n    if (!previous && options.leading === false) previous = _now;\n    var remaining = wait - (_now - previous);\n    context = this;\n    args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = _now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n\n  throttled.cancel = function() {\n    clearTimeout(timeout);\n    previous = 0;\n    timeout = context = args = null;\n  };\n\n  return throttled;\n}\n","import restArguments from './restArguments.js';\nimport now from './now.js';\n\n// When a sequence of calls of the returned function ends, the argument\n// function is triggered. The end of a sequence is defined by the `wait`\n// parameter. If `immediate` is passed, the argument function will be\n// triggered at the beginning of the sequence instead of at the end.\nexport default function debounce(func, wait, immediate) {\n  var timeout, previous, args, result, context;\n\n  var later = function() {\n    var passed = now() - previous;\n    if (wait > passed) {\n      timeout = setTimeout(later, wait - passed);\n    } else {\n      timeout = null;\n      if (!immediate) result = func.apply(context, args);\n      // This check is needed because `func` can recursively invoke `debounced`.\n      if (!timeout) args = context = null;\n    }\n  };\n\n  var debounced = restArguments(function(_args) {\n    context = this;\n    args = _args;\n    previous = now();\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n      if (immediate) result = func.apply(context, args);\n    }\n    return result;\n  });\n\n  debounced.cancel = function() {\n    clearTimeout(timeout);\n    timeout = args = context = null;\n  };\n\n  return debounced;\n}\n","import partial from './partial.js';\n\n// Returns the first function passed as an argument to the second,\n// allowing you to adjust arguments, run code before and after, and\n// conditionally execute the original function.\nexport default function wrap(func, wrapper) {\n  return partial(wrapper, func);\n}\n","// Returns a negated version of the passed-in predicate.\nexport default function negate(predicate) {\n  return function() {\n    return !predicate.apply(this, arguments);\n  };\n}\n","// Returns a function that is the composition of a list of functions, each\n// consuming the return value of the function that follows.\nexport default function compose() {\n  var args = arguments;\n  var start = args.length - 1;\n  return function() {\n    var i = start;\n    var result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n","// Returns a function that will only be executed on and after the Nth call.\nexport default function after(times, func) {\n  return function() {\n    if (--times < 1) {\n      return func.apply(this, arguments);\n    }\n  };\n}\n","// Returns a function that will only be executed up to (but not including) the\n// Nth call.\nexport default function before(times, func) {\n  var memo;\n  return function() {\n    if (--times > 0) {\n      memo = func.apply(this, arguments);\n    }\n    if (times <= 1) func = null;\n    return memo;\n  };\n}\n","import partial from './partial.js';\nimport before from './before.js';\n\n// Returns a function that will be executed at most one time, no matter how\n// often you call it. Useful for lazy initialization.\nexport default partial(before, 2);\n","import cb from './_cb.js';\nimport keys from './keys.js';\n\n// Returns the first key on an object that passes a truth test.\nexport default function findKey(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  var _keys = keys(obj), key;\n  for (var i = 0, length = _keys.length; i < length; i++) {\n    key = _keys[i];\n    if (predicate(obj[key], key, obj)) return key;\n  }\n}\n","import createPredicateIndexFinder from './_createPredicateIndexFinder.js';\n\n// Returns the first index on an array-like that passes a truth test.\nexport default createPredicateIndexFinder(1);\n","import cb from './_cb.js';\nimport getLength from './_getLength.js';\n\n// Internal function to generate `_.findIndex` and `_.findLastIndex`.\nexport default function createPredicateIndexFinder(dir) {\n  return function(array, predicate, context) {\n    predicate = cb(predicate, context);\n    var length = getLength(array);\n    var index = dir > 0 ? 0 : length - 1;\n    for (; index >= 0 && index < length; index += dir) {\n      if (predicate(array[index], index, array)) return index;\n    }\n    return -1;\n  };\n}\n","import createPredicateIndexFinder from './_createPredicateIndexFinder.js';\n\n// Returns the last index on an array-like that passes a truth test.\nexport default createPredicateIndexFinder(-1);\n","import cb from './_cb.js';\nimport getLength from './_getLength.js';\n\n// Use a comparator function to figure out the smallest index at which\n// an object should be inserted so as to maintain order. Uses binary search.\nexport default function sortedIndex(array, obj, iteratee, context) {\n  iteratee = cb(iteratee, context, 1);\n  var value = iteratee(obj);\n  var low = 0, high = getLength(array);\n  while (low < high) {\n    var mid = Math.floor((low + high) / 2);\n    if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n  }\n  return low;\n}\n","import sortedIndex from './sortedIndex.js';\nimport findIndex from './findIndex.js';\nimport createIndexFinder from './_createIndexFinder.js';\n\n// Return the position of the first occurrence of an item in an array,\n// or -1 if the item is not included in the array.\n// If the array is large and already in sort order, pass `true`\n// for **isSorted** to use binary search.\nexport default createIndexFinder(1, findIndex, sortedIndex);\n","import getLength from './_getLength.js';\nimport { slice } from './_setup.js';\nimport isNaN from './isNaN.js';\n\n// Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.\nexport default function createIndexFinder(dir, predicateFind, sortedIndex) {\n  return function(array, item, idx) {\n    var i = 0, length = getLength(array);\n    if (typeof idx == 'number') {\n      if (dir > 0) {\n        i = idx >= 0 ? idx : Math.max(idx + length, i);\n      } else {\n        length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n      }\n    } else if (sortedIndex && idx && length) {\n      idx = sortedIndex(array, item);\n      return array[idx] === item ? idx : -1;\n    }\n    if (item !== item) {\n      idx = predicateFind(slice.call(array, i, length), isNaN);\n      return idx >= 0 ? idx + i : -1;\n    }\n    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n      if (array[idx] === item) return idx;\n    }\n    return -1;\n  };\n}\n","import findLastIndex from './findLastIndex.js';\nimport createIndexFinder from './_createIndexFinder.js';\n\n// Return the position of the last occurrence of an item in an array,\n// or -1 if the item is not included in the array.\nexport default createIndexFinder(-1, findLastIndex);\n","import isArrayLike from './_isArrayLike.js';\nimport findIndex from './findIndex.js';\nimport findKey from './findKey.js';\n\n// Return the first value which passes a truth test.\nexport default function find(obj, predicate, context) {\n  var keyFinder = isArrayLike(obj) ? findIndex : findKey;\n  var key = keyFinder(obj, predicate, context);\n  if (key !== void 0 && key !== -1) return obj[key];\n}\n","import find from './find.js';\nimport matcher from './matcher.js';\n\n// Convenience version of a common use case of `_.find`: getting the first\n// object containing specific `key:value` pairs.\nexport default function findWhere(obj, attrs) {\n  return find(obj, matcher(attrs));\n}\n","import optimizeCb from './_optimizeCb.js';\nimport isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\n\n// The cornerstone for collection functions, an `each`\n// implementation, aka `forEach`.\n// Handles raw objects in addition to array-likes. Treats all\n// sparse array-likes as if they were dense.\nexport default function each(obj, iteratee, context) {\n  iteratee = optimizeCb(iteratee, context);\n  var i, length;\n  if (isArrayLike(obj)) {\n    for (i = 0, length = obj.length; i < length; i++) {\n      iteratee(obj[i], i, obj);\n    }\n  } else {\n    var _keys = keys(obj);\n    for (i = 0, length = _keys.length; i < length; i++) {\n      iteratee(obj[_keys[i]], _keys[i], obj);\n    }\n  }\n  return obj;\n}\n","import cb from './_cb.js';\nimport isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\n\n// Return the results of applying the iteratee to each element.\nexport default function map(obj, iteratee, context) {\n  iteratee = cb(iteratee, context);\n  var _keys = !isArrayLike(obj) && keys(obj),\n      length = (_keys || obj).length,\n      results = Array(length);\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys ? _keys[index] : index;\n    results[index] = iteratee(obj[currentKey], currentKey, obj);\n  }\n  return results;\n}\n","import createReduce from './_createReduce.js';\n\n// **Reduce** builds up a single result from a list of values, aka `inject`,\n// or `foldl`.\nexport default createReduce(1);\n","import isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\nimport optimizeCb from './_optimizeCb.js';\n\n// Internal helper to create a reducing function, iterating left or right.\nexport default function createReduce(dir) {\n  // Wrap code that reassigns argument variables in a separate function than\n  // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n  var reducer = function(obj, iteratee, memo, initial) {\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length,\n        index = dir > 0 ? 0 : length - 1;\n    if (!initial) {\n      memo = obj[_keys ? _keys[index] : index];\n      index += dir;\n    }\n    for (; index >= 0 && index < length; index += dir) {\n      var currentKey = _keys ? _keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n    }\n    return memo;\n  };\n\n  return function(obj, iteratee, memo, context) {\n    var initial = arguments.length >= 3;\n    return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n  };\n}\n","import createReduce from './_createReduce.js';\n\n// The right-associative version of reduce, also known as `foldr`.\nexport default createReduce(-1);\n","import cb from './_cb.js';\nimport each from './each.js';\n\n// Return all the elements that pass a truth test.\nexport default function filter(obj, predicate, context) {\n  var results = [];\n  predicate = cb(predicate, context);\n  each(obj, function(value, index, list) {\n    if (predicate(value, index, list)) results.push(value);\n  });\n  return results;\n}\n","import filter from './filter.js';\nimport negate from './negate.js';\nimport cb from './_cb.js';\n\n// Return all the elements for which a truth test fails.\nexport default function reject(obj, predicate, context) {\n  return filter(obj, negate(cb(predicate)), context);\n}\n","import cb from './_cb.js';\nimport isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\n\n// Determine whether all of the elements pass a truth test.\nexport default function every(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  var _keys = !isArrayLike(obj) && keys(obj),\n      length = (_keys || obj).length;\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys ? _keys[index] : index;\n    if (!predicate(obj[currentKey], currentKey, obj)) return false;\n  }\n  return true;\n}\n","import cb from './_cb.js';\nimport isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\n\n// Determine if at least one element in the object passes a truth test.\nexport default function some(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  var _keys = !isArrayLike(obj) && keys(obj),\n      length = (_keys || obj).length;\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys ? _keys[index] : index;\n    if (predicate(obj[currentKey], currentKey, obj)) return true;\n  }\n  return false;\n}\n","import isArrayLike from './_isArrayLike.js';\nimport values from './values.js';\nimport indexOf from './indexOf.js';\n\n// Determine if the array or object contains a given item (using `===`).\nexport default function contains(obj, item, fromIndex, guard) {\n  if (!isArrayLike(obj)) obj = values(obj);\n  if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n  return indexOf(obj, item, fromIndex) >= 0;\n}\n","import restArguments from './restArguments.js';\nimport isFunction from './isFunction.js';\nimport map from './map.js';\nimport deepGet from './_deepGet.js';\nimport toPath from './_toPath.js';\n\n// Invoke a method (with arguments) on every item in a collection.\nexport default restArguments(function(obj, path, args) {\n  var contextPath, func;\n  if (isFunction(path)) {\n    func = path;\n  } else {\n    path = toPath(path);\n    contextPath = path.slice(0, -1);\n    path = path[path.length - 1];\n  }\n  return map(obj, function(context) {\n    var method = func;\n    if (!method) {\n      if (contextPath && contextPath.length) {\n        context = deepGet(context, contextPath);\n      }\n      if (context == null) return void 0;\n      method = context[path];\n    }\n    return method == null ? method : method.apply(context, args);\n  });\n});\n","import map from './map.js';\nimport property from './property.js';\n\n// Convenience version of a common use case of `_.map`: fetching a property.\nexport default function pluck(obj, key) {\n  return map(obj, property(key));\n}\n","import filter from './filter.js';\nimport matcher from './matcher.js';\n\n// Convenience version of a common use case of `_.filter`: selecting only\n// objects containing specific `key:value` pairs.\nexport default function where(obj, attrs) {\n  return filter(obj, matcher(attrs));\n}\n","import isArrayLike from './_isArrayLike.js';\nimport values from './values.js';\nimport cb from './_cb.js';\nimport each from './each.js';\n\n// Return the maximum element (or element-based computation).\nexport default function max(obj, iteratee, context) {\n  var result = -Infinity, lastComputed = -Infinity,\n      value, computed;\n  if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {\n    obj = isArrayLike(obj) ? obj : values(obj);\n    for (var i = 0, length = obj.length; i < length; i++) {\n      value = obj[i];\n      if (value != null && value > result) {\n        result = value;\n      }\n    }\n  } else {\n    iteratee = cb(iteratee, context);\n    each(obj, function(v, index, list) {\n      computed = iteratee(v, index, list);\n      if (computed > lastComputed || (computed === -Infinity && result === -Infinity)) {\n        result = v;\n        lastComputed = computed;\n      }\n    });\n  }\n  return result;\n}\n","import isArrayLike from './_isArrayLike.js';\nimport values from './values.js';\nimport cb from './_cb.js';\nimport each from './each.js';\n\n// Return the minimum element (or element-based computation).\nexport default function min(obj, iteratee, context) {\n  var result = Infinity, lastComputed = Infinity,\n      value, computed;\n  if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {\n    obj = isArrayLike(obj) ? obj : values(obj);\n    for (var i = 0, length = obj.length; i < length; i++) {\n      value = obj[i];\n      if (value != null && value < result) {\n        result = value;\n      }\n    }\n  } else {\n    iteratee = cb(iteratee, context);\n    each(obj, function(v, index, list) {\n      computed = iteratee(v, index, list);\n      if (computed < lastComputed || (computed === Infinity && result === Infinity)) {\n        result = v;\n        lastComputed = computed;\n      }\n    });\n  }\n  return result;\n}\n","import sample from './sample.js';\n\n// Shuffle a collection.\nexport default function shuffle(obj) {\n  return sample(obj, Infinity);\n}\n","import isArrayLike from './_isArrayLike.js';\nimport values from './values.js';\nimport getLength from './_getLength.js';\nimport random from './random.js';\nimport toArray from './toArray.js';\n\n// Sample **n** random values from a collection using the modern version of the\n// [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n// If **n** is not specified, returns a single random element.\n// The internal `guard` argument allows it to work with `_.map`.\nexport default function sample(obj, n, guard) {\n  if (n == null || guard) {\n    if (!isArrayLike(obj)) obj = values(obj);\n    return obj[random(obj.length - 1)];\n  }\n  var sample = toArray(obj);\n  var length = getLength(sample);\n  n = Math.max(Math.min(n, length), 0);\n  var last = length - 1;\n  for (var index = 0; index < n; index++) {\n    var rand = random(index, last);\n    var temp = sample[index];\n    sample[index] = sample[rand];\n    sample[rand] = temp;\n  }\n  return sample.slice(0, n);\n}\n","import isArray from './isArray.js';\nimport { slice } from './_setup.js';\nimport isString from './isString.js';\nimport isArrayLike from './_isArrayLike.js';\nimport map from './map.js';\nimport identity from './identity.js';\nimport values from './values.js';\n\n// Safely create a real, live array from anything iterable.\nvar reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\nexport default function toArray(obj) {\n  if (!obj) return [];\n  if (isArray(obj)) return slice.call(obj);\n  if (isString(obj)) {\n    // Keep surrogate pair characters together.\n    return obj.match(reStrSymbol);\n  }\n  if (isArrayLike(obj)) return map(obj, identity);\n  return values(obj);\n}\n","import cb from './_cb.js';\nimport pluck from './pluck.js';\nimport map from './map.js';\n\n// Sort the object's values by a criterion produced by an iteratee.\nexport default function sortBy(obj, iteratee, context) {\n  var index = 0;\n  iteratee = cb(iteratee, context);\n  return pluck(map(obj, function(value, key, list) {\n    return {\n      value: value,\n      index: index++,\n      criteria: iteratee(value, key, list)\n    };\n  }).sort(function(left, right) {\n    var a = left.criteria;\n    var b = right.criteria;\n    if (a !== b) {\n      if (a > b || a === void 0) return 1;\n      if (a < b || b === void 0) return -1;\n    }\n    return left.index - right.index;\n  }), 'value');\n}\n","import group from './_group.js';\nimport has from './_has.js';\n\n// Groups the object's values by a criterion. Pass either a string attribute\n// to group by, or a function that returns the criterion.\nexport default group(function(result, value, key) {\n  if (has(result, key)) result[key].push(value); else result[key] = [value];\n});\n","import cb from './_cb.js';\nimport each from './each.js';\n\n// An internal function used for aggregate \"group by\" operations.\nexport default function group(behavior, partition) {\n  return function(obj, iteratee, context) {\n    var result = partition ? [[], []] : {};\n    iteratee = cb(iteratee, context);\n    each(obj, function(value, index) {\n      var key = iteratee(value, index, obj);\n      behavior(result, value, key);\n    });\n    return result;\n  };\n}\n","import group from './_group.js';\n\n// Indexes the object's values by a criterion, similar to `_.groupBy`, but for\n// when you know that your index values will be unique.\nexport default group(function(result, value, key) {\n  result[key] = value;\n});\n","import group from './_group.js';\nimport has from './_has.js';\n\n// Counts instances of an object that group by a certain criterion. Pass\n// either a string attribute to count by, or a function that returns the\n// criterion.\nexport default group(function(result, value, key) {\n  if (has(result, key)) result[key]++; else result[key] = 1;\n});\n","import group from './_group.js';\n\n// Split a collection into two arrays: one whose elements all pass the given\n// truth test, and one whose elements all do not pass the truth test.\nexport default group(function(result, value, pass) {\n  result[pass ? 0 : 1].push(value);\n}, true);\n","import isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\n\n// Return the number of elements in a collection.\nexport default function size(obj) {\n  if (obj == null) return 0;\n  return isArrayLike(obj) ? obj.length : keys(obj).length;\n}\n","import restArguments from './restArguments.js';\nimport isFunction from './isFunction.js';\nimport optimizeCb from './_optimizeCb.js';\nimport allKeys from './allKeys.js';\nimport keyInObj from './_keyInObj.js';\nimport flatten from './_flatten.js';\n\n// Return a copy of the object only containing the allowed properties.\nexport default restArguments(function(obj, keys) {\n  var result = {}, iteratee = keys[0];\n  if (obj == null) return result;\n  if (isFunction(iteratee)) {\n    if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n    keys = allKeys(obj);\n  } else {\n    iteratee = keyInObj;\n    keys = flatten(keys, false, false);\n    obj = Object(obj);\n  }\n  for (var i = 0, length = keys.length; i < length; i++) {\n    var key = keys[i];\n    var value = obj[key];\n    if (iteratee(value, key, obj)) result[key] = value;\n  }\n  return result;\n});\n","// Internal `_.pick` helper function to determine whether `key` is an enumerable\n// property name of `obj`.\nexport default function keyInObj(value, key, obj) {\n  return key in obj;\n}\n","import restArguments from './restArguments.js';\nimport isFunction from './isFunction.js';\nimport negate from './negate.js';\nimport map from './map.js';\nimport flatten from './_flatten.js';\nimport contains from './contains.js';\nimport pick from './pick.js';\n\n// Return a copy of the object without the disallowed properties.\nexport default restArguments(function(obj, keys) {\n  var iteratee = keys[0], context;\n  if (isFunction(iteratee)) {\n    iteratee = negate(iteratee);\n    if (keys.length > 1) context = keys[1];\n  } else {\n    keys = map(flatten(keys, false, false), String);\n    iteratee = function(value, key) {\n      return !contains(keys, key);\n    };\n  }\n  return pick(obj, iteratee, context);\n});\n","import initial from './initial.js';\n\n// Get the first element of an array. Passing **n** will return the first N\n// values in the array. The **guard** check allows it to work with `_.map`.\nexport default function first(array, n, guard) {\n  if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n  if (n == null || guard) return array[0];\n  return initial(array, array.length - n);\n}\n","import { slice } from './_setup.js';\n\n// Returns everything but the last entry of the array. Especially useful on\n// the arguments object. Passing **n** will return all the values in\n// the array, excluding the last N.\nexport default function initial(array, n, guard) {\n  return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n}\n","import rest from './rest.js';\n\n// Get the last element of an array. Passing **n** will return the last N\n// values in the array.\nexport default function last(array, n, guard) {\n  if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n  if (n == null || guard) return array[array.length - 1];\n  return rest(array, Math.max(0, array.length - n));\n}\n","import { slice } from './_setup.js';\n\n// Returns everything but the first entry of the `array`. Especially useful on\n// the `arguments` object. Passing an **n** will return the rest N values in the\n// `array`.\nexport default function rest(array, n, guard) {\n  return slice.call(array, n == null || guard ? 1 : n);\n}\n","import filter from './filter.js';\n\n// Trim out all falsy values from an array.\nexport default function compact(array) {\n  return filter(array, Boolean);\n}\n","import _flatten from './_flatten.js';\n\n// Flatten out an array, either recursively (by default), or up to `depth`.\n// Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.\nexport default function flatten(array, depth) {\n  return _flatten(array, depth, false);\n}\n","import restArguments from './restArguments.js';\nimport difference from './difference.js';\n\n// Return a version of the array that does not contain the specified value(s).\nexport default restArguments(function(array, otherArrays) {\n  return difference(array, otherArrays);\n});\n","import restArguments from './restArguments.js';\nimport flatten from './_flatten.js';\nimport filter from './filter.js';\nimport contains from './contains.js';\n\n// Take the difference between one array and a number of other arrays.\n// Only the elements present in just the first array will remain.\nexport default restArguments(function(array, rest) {\n  rest = flatten(rest, true, true);\n  return filter(array, function(value){\n    return !contains(rest, value);\n  });\n});\n","import isBoolean from './isBoolean.js';\nimport cb from './_cb.js';\nimport getLength from './_getLength.js';\nimport contains from './contains.js';\n\n// Produce a duplicate-free version of the array. If the array has already\n// been sorted, you have the option of using a faster algorithm.\n// The faster algorithm will not work with an iteratee if the iteratee\n// is not a one-to-one function, so providing an iteratee will disable\n// the faster algorithm.\nexport default function uniq(array, isSorted, iteratee, context) {\n  if (!isBoolean(isSorted)) {\n    context = iteratee;\n    iteratee = isSorted;\n    isSorted = false;\n  }\n  if (iteratee != null) iteratee = cb(iteratee, context);\n  var result = [];\n  var seen = [];\n  for (var i = 0, length = getLength(array); i < length; i++) {\n    var value = array[i],\n        computed = iteratee ? iteratee(value, i, array) : value;\n    if (isSorted && !iteratee) {\n      if (!i || seen !== computed) result.push(value);\n      seen = computed;\n    } else if (iteratee) {\n      if (!contains(seen, computed)) {\n        seen.push(computed);\n        result.push(value);\n      }\n    } else if (!contains(result, value)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n","import restArguments from './restArguments.js';\nimport uniq from './uniq.js';\nimport flatten from './_flatten.js';\n\n// Produce an array that contains the union: each distinct element from all of\n// the passed-in arrays.\nexport default restArguments(function(arrays) {\n  return uniq(flatten(arrays, true, true));\n});\n","import getLength from './_getLength.js';\nimport contains from './contains.js';\n\n// Produce an array that contains every item shared between all the\n// passed-in arrays.\nexport default function intersection(array) {\n  var result = [];\n  var argsLength = arguments.length;\n  for (var i = 0, length = getLength(array); i < length; i++) {\n    var item = array[i];\n    if (contains(result, item)) continue;\n    var j;\n    for (j = 1; j < argsLength; j++) {\n      if (!contains(arguments[j], item)) break;\n    }\n    if (j === argsLength) result.push(item);\n  }\n  return result;\n}\n","import max from './max.js';\nimport getLength from './_getLength.js';\nimport pluck from './pluck.js';\n\n// Complement of zip. Unzip accepts an array of arrays and groups\n// each array's elements on shared indices.\nexport default function unzip(array) {\n  var length = (array && max(array, getLength).length) || 0;\n  var result = Array(length);\n\n  for (var index = 0; index < length; index++) {\n    result[index] = pluck(array, index);\n  }\n  return result;\n}\n","import restArguments from './restArguments.js';\nimport unzip from './unzip.js';\n\n// Zip together multiple lists into a single array -- elements that share\n// an index go together.\nexport default restArguments(unzip);\n","import getLength  from './_getLength.js';\n\n// Converts lists into objects. Pass either a single array of `[key, value]`\n// pairs, or two parallel arrays of the same length -- one of keys, and one of\n// the corresponding values. Passing by pairs is the reverse of `_.pairs`.\nexport default function object(list, values) {\n  var result = {};\n  for (var i = 0, length = getLength(list); i < length; i++) {\n    if (values) {\n      result[list[i]] = values[i];\n    } else {\n      result[list[i][0]] = list[i][1];\n    }\n  }\n  return result;\n}\n","// Generate an integer Array containing an arithmetic progression. A port of\n// the native Python `range()` function. See\n// [the Python documentation](https://docs.python.org/library/functions.html#range).\nexport default function range(start, stop, step) {\n  if (stop == null) {\n    stop = start || 0;\n    start = 0;\n  }\n  if (!step) {\n    step = stop < start ? -1 : 1;\n  }\n\n  var length = Math.max(Math.ceil((stop - start) / step), 0);\n  var range = Array(length);\n\n  for (var idx = 0; idx < length; idx++, start += step) {\n    range[idx] = start;\n  }\n\n  return range;\n}\n","import { slice } from './_setup.js';\n\n// Chunk a single array into multiple arrays, each containing `count` or fewer\n// items.\nexport default function chunk(array, count) {\n  if (count == null || count < 1) return [];\n  var result = [];\n  var i = 0, length = array.length;\n  while (i < length) {\n    result.push(slice.call(array, i, i += count));\n  }\n  return result;\n}\n","import _ from './underscore.js';\nimport each from './each.js';\nimport functions from './functions.js';\nimport { push } from './_setup.js';\nimport chainResult from './_chainResult.js';\n\n// Add your own custom functions to the Underscore object.\nexport default function mixin(obj) {\n  each(functions(obj), function(name) {\n    var func = _[name] = obj[name];\n    _.prototype[name] = function() {\n      var args = [this._wrapped];\n      push.apply(args, arguments);\n      return chainResult(this, func.apply(_, args));\n    };\n  });\n  return _;\n}\n","import _ from './underscore.js';\n\n// Helper function to continue chaining intermediate results.\nexport default function chainResult(instance, obj) {\n  return instance._chain ? _(obj).chain() : obj;\n}\n","import _ from './underscore.js';\nimport each from './each.js';\nimport { ArrayProto } from './_setup.js';\nimport chainResult from './_chainResult.js';\n\n// Add all mutator `Array` functions to the wrapper.\neach(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n  var method = ArrayProto[name];\n  _.prototype[name] = function() {\n    var obj = this._wrapped;\n    if (obj != null) {\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) {\n        delete obj[0];\n      }\n    }\n    return chainResult(this, obj);\n  };\n});\n\n// Add all accessor `Array` functions to the wrapper.\neach(['concat', 'join', 'slice'], function(name) {\n  var method = ArrayProto[name];\n  _.prototype[name] = function() {\n    var obj = this._wrapped;\n    if (obj != null) obj = method.apply(obj, arguments);\n    return chainResult(this, obj);\n  };\n});\n\nexport default _;\n","import image from \"../../static/nft.png\";\r\nimport { appMoveHandler } from \"./move\";\r\n\r\nexport function createApp(text, launcher, x = 0, y = 0, icon = image) {\r\n    let appDiv = document.createElement(\"div\");\r\n    appDiv.classList.add(\"app\");\r\n    appDiv.onmousedown = appMoveHandler;\r\n    appDiv.ondblclick = launcher;\r\n\r\n    appDiv.innerHTML = /*html*/`\r\n        <img src=\"${icon}\" alt=\"icon\" width=\"48\" draggable=\"false\">\r\n        <span>${text}</span>\r\n    `;\r\n\r\n    appDiv.style.left = `${x}px`;\r\n    appDiv.style.top = `${y}px`;\r\n\r\n    document.getElementById(\"desktop\").append(appDiv);\r\n}","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"krwP2\")).toString();","let [x, y] = [0, 0];\r\n\r\nexport function appMoveHandler(e) {\r\n    window.activeApp = e.target.closest(\".app\");\r\n\r\n    x = e.clientX;\r\n    y = e.clientY;\r\n\r\n    document.addEventListener(\"mousemove\", appMoveHandler2);\r\n    document.addEventListener(\"mouseup\", appUpHandler);\r\n}\r\n\r\nfunction appMoveHandler2(e) {\r\n    const dx = e.clientX - x;\r\n    const dy = e.clientY - y;\r\n\r\n    window.activeApp.style.top = `${Math.min(Math.max(window.activeApp.offsetTop + dy, 0), window.innerHeight - window.activeApp.offsetHeight)}px`;\r\n    window.activeApp.style.left = `${Math.min(Math.max(window.activeApp.offsetLeft + dx, 0), window.innerWidth - window.activeApp.offsetWidth)}px`;\r\n\r\n    x = e.clientX;\r\n    y = e.clientY;\r\n}\r\n\r\nfunction appUpHandler() {\r\n    let name = window.activeApp.querySelector(\"span\").innerText;\r\n    let loadedApps = JSON.parse(localStorage.getItem(\"apps\"));\r\n    loadedApps[name] = [window.activeApp.offsetLeft, window.activeApp.offsetTop];\r\n    localStorage.setItem(\"apps\", JSON.stringify(loadedApps));\r\n\r\n    document.removeEventListener(\"mousemove\", appMoveHandler2);\r\n    document.removeEventListener(\"mouseup\", appUpHandler);\r\n}","import { createWindow } from \"../window/main\";\r\nimport image from \"../../static/nft.png\";\r\n\r\nexport function launchAbout() {\r\n    createWindow({\r\n        title: \"about lumOS\",\r\n        icon: image,\r\n        center: true,\r\n        minimize: false,\r\n        flexCenter: true,\r\n        body: /*html*/`\r\n            <div class=\"df fdc g8\">    \r\n                <div class=\"df aic g8\">\r\n                    <img src=${image} alt=\"lumos\" width=\"48\">\r\n                    <div class=\"div\">\r\n                        <h1>lumOS</h1>\r\n                        <span>version 0.2</span>\r\n                    </div>\r\n                </div>\r\n                <p>really cool operating system</p>\r\n                <button class=\"asc\">ok</button>\r\n            </div>\r\n        `\r\n    });\r\n}","import _ from \"underscore\";\r\nimport { windowMoveHandler } from \"./move\";\r\nimport { windowResizeHandler } from \"./resize\";\r\n\r\nconst createWindowDefaultOptions = {\r\n    title: \"untitled window\",\r\n    icon: \"\",\r\n    body: \"\",\r\n    resize: true,\r\n    move: true,\r\n    close: true,\r\n    minimize: true,\r\n    center: false,\r\n    x: 0,\r\n    y: 0,\r\n    width: 300,\r\n    height: 300,\r\n    hideOverflow: false,\r\n    flexCenter: false\r\n};\r\n\r\nexport function createWindow(options) {\r\n    options = _.defaults({}, _.clone(options), createWindowDefaultOptions);\r\n\r\n    let id = Math.random();\r\n    let windowDiv = document.createElement(\"div\");\r\n    windowDiv.classList.add(\"window\");\r\n\r\n    windowDiv.innerHTML = /*html*/`\r\n        <div class=\"head\">\r\n            <div class=\"title\">\r\n                ${options.icon ? `<img src=\"${options.icon}\" alt=\"icon\" draggable=\"false\">` : \"\"}\r\n                <span>${options.title}</span>\r\n            </div>\r\n            <div class=\"controls\">\r\n                ${options.minimize ? `<button class=\"minimize\">_</button>` : \"\"}\r\n                ${options.close ? `<button class=\"close\">x</button>` : \"\"}\r\n            </div>\r\n        </div>\r\n        <div class=\"body ${options.flexCenter ? \"body-center\" : \"\"}\">${options.body}</div>\r\n\r\n        ${options.resize ? /*html*/`\r\n        <div class=\"resize top-resize\"></div>\r\n        <div class=\"resize top-right-resize\"></div>\r\n        <div class=\"resize right-resize\"></div>\r\n        <div class=\"resize bottom-right-resize\"></div>\r\n        <div class=\"resize bottom-resize\"></div>\r\n        <div class=\"resize bottom-left-resize\"></div>\r\n        <div class=\"resize left-resize\"></div>\r\n        <div class=\"resize top-left-resize\"></div>\r\n        ` : \"\"}\r\n    `;\r\n\r\n    windowDiv.onclick = () => {\r\n        window.activeWindow = windowDiv;\r\n        window.activeWindow.style.zIndex = ++window.zIndex;\r\n    };\r\n    windowDiv.querySelector(\".head\").onmousedown = windowMoveHandler;\r\n    windowDiv.querySelectorAll(\".resize\").forEach(r => r.onmousedown = windowResizeHandler);\r\n    windowDiv.querySelector(\".close\").onclick = closeWindow;\r\n\r\n    document.getElementById(\"window-container\").append(windowDiv);\r\n\r\n    windowDiv.style.zIndex = ++window.zIndex;\r\n    windowDiv.style.left = `${options.x}px`;\r\n    windowDiv.style.top = `${options.y}px`;\r\n    windowDiv.style.width = `${options.width}px`;\r\n    windowDiv.style.height = `${options.height}px`;\r\n\r\n    if (options.hideOverflow) {\r\n        windowDiv.querySelector(\".body\").style.overflow = \"hidden\";\r\n    }\r\n\r\n    if (options.center) {\r\n        windowDiv.style.left = `${~~(window.innerWidth / 2 - windowDiv.offsetWidth / 2)}px`;\r\n        windowDiv.style.top = `${~~(window.innerHeight / 2 - windowDiv.offsetHeight / 2)}px`;\r\n    }\r\n\r\n    window.windows.push(id);\r\n    window.activeWindow = windowDiv;\r\n\r\n    return windowDiv;\r\n}\r\n\r\nfunction closeWindow(e) {\r\n    let windowDiv = e.target.closest(\".window\");\r\n    windowDiv.remove();\r\n    window.activeWindow = null;\r\n}","let [x, y] = [0, 0];\r\n\r\nexport function windowMoveHandler(e) {\r\n    if (e.target.closest(\".controls\")) return;\r\n    window.activeWindow = e.target.closest(\".window\");\r\n\r\n    x = e.clientX;\r\n    y = e.clientY;\r\n\r\n    window.activeWindow.style.zIndex = ++window.zIndex;\r\n\r\n    document.addEventListener(\"mousemove\", mouseMoveHandler);\r\n    document.addEventListener(\"mouseup\", mouseUpHandler);\r\n}\r\n\r\nfunction mouseMoveHandler(e) {\r\n    const dx = e.clientX - x;\r\n    const dy = e.clientY - y;\r\n\r\n    window.activeWindow.style.top = `${Math.min(Math.max(window.activeWindow.offsetTop + dy, 0), window.innerHeight - window.activeWindow.offsetHeight)}px`;\r\n    window.activeWindow.style.left = `${Math.min(Math.max(window.activeWindow.offsetLeft + dx, 0), window.innerWidth - window.activeWindow.offsetWidth)}px`;\r\n\r\n    x = e.clientX;\r\n    y = e.clientY;\r\n}\r\n\r\nfunction mouseUpHandler() {\r\n    // window.activeWindow = null;\r\n    document.removeEventListener(\"mousemove\", mouseMoveHandler);\r\n    document.removeEventListener(\"mouseup\", mouseUpHandler);\r\n}","let selectedWindowResize = null;\r\nlet [x, y] = [0, 0];\r\n\r\nexport function windowResizeHandler(e) {\r\n    window.activeWindow = e.target.parentElement;\r\n    selectedWindowResize = e.target;\r\n\r\n    x = e.clientX;\r\n    y = e.clientY;\r\n\r\n    window.activeWindow.style.zIndex = ++window.zIndex;\r\n\r\n    document.addEventListener(\"mousemove\", windowResizeMouseMoveHandler);\r\n    document.addEventListener(\"mouseup\", windowResizeMouseUpHandler);\r\n}\r\n\r\nfunction windowResizeMouseMoveHandler(e) {\r\n    const dx = e.clientX - x;\r\n    const dy = e.clientY - y;\r\n\r\n    if (selectedWindowResize.classList.contains(\"top-resize\") ||\r\n        selectedWindowResize.classList.contains(\"top-left-resize\") ||\r\n        selectedWindowResize.classList.contains(\"top-right-resize\")) {\r\n        window.activeWindow.style.height = `${window.activeWindow.offsetHeight - dy}px`;\r\n        if (window.activeWindow.offsetHeight - dy > 99) {\r\n            window.activeWindow.style.top = `${window.activeWindow.offsetTop + dy}px`;\r\n        }\r\n    }\r\n    if (selectedWindowResize.classList.contains(\"right-resize\") ||\r\n        selectedWindowResize.classList.contains(\"top-right-resize\") ||\r\n        selectedWindowResize.classList.contains(\"bottom-right-resize\")) {\r\n        window.activeWindow.style.width = `${window.activeWindow.offsetWidth + dx}px`;\r\n    }\r\n    if (selectedWindowResize.classList.contains(\"bottom-resize\") ||\r\n        selectedWindowResize.classList.contains(\"bottom-left-resize\") ||\r\n        selectedWindowResize.classList.contains(\"bottom-right-resize\")) {\r\n        window.activeWindow.style.height = `${window.activeWindow.offsetHeight + dy}px`;\r\n    }\r\n    if (selectedWindowResize.classList.contains(\"left-resize\") ||\r\n        selectedWindowResize.classList.contains(\"top-left-resize\") ||\r\n        selectedWindowResize.classList.contains(\"bottom-left-resize\")) {\r\n        window.activeWindow.style.width = `${window.activeWindow.offsetWidth - dx}px`;\r\n        if (window.activeWindow.offsetWidth - dx > 99) {\r\n            window.activeWindow.style.left = `${window.activeWindow.offsetLeft + dx}px`;\r\n        }\r\n    }\r\n\r\n    x = e.clientX;\r\n    y = e.clientY;\r\n}\r\n\r\nfunction windowResizeMouseUpHandler() {\r\n    if (window.activeWindow.offsetWidth % 2 == 1) {\r\n        window.activeWindow.style.width = `${window.activeWindow.offsetWidth + 1}px`;\r\n    }\r\n\r\n    selectedWindowResize = null;\r\n    document.removeEventListener(\"mousemove\", windowResizeMouseMoveHandler);\r\n    document.removeEventListener(\"mouseup\", windowResizeMouseUpHandler);\r\n}","import { createWindow } from \"../window/main\";\r\nimport { EditorView, basicSetup } from \"codemirror\"\r\n\r\nexport function launchEditor() {\r\n    let windowDiv = createWindow({\r\n        title: \"editor!\",\r\n    });\r\n\r\n    let editor = new EditorView({\r\n        extensions: [\r\n            basicSetup,\r\n            EditorView.theme({\r\n                \".cm-content\": {fontFamily: \"unifont\"},\r\n            })\r\n        ],\r\n        parent: windowDiv.querySelector(\".body\")\r\n    });\r\n}","import { EditorState, Text, RangeSet, MapMode, RangeValue, Facet, StateEffect, ChangeSet, findClusterBreak, EditorSelection, findColumn, CharCategory, Annotation, Prec, Transaction, codePointAt, codePointSize, combineConfig, StateField, RangeSetBuilder, countColumn } from '@codemirror/state';\nimport { StyleModule } from 'style-mod';\nimport { keyName, base, shift } from 'w3c-keyname';\n\nfunction getSelection(root) {\n    let target;\n    // Browsers differ on whether shadow roots have a getSelection\n    // method. If it exists, use that, otherwise, call it on the\n    // document.\n    if (root.nodeType == 11) { // Shadow root\n        target = root.getSelection ? root : root.ownerDocument;\n    }\n    else {\n        target = root;\n    }\n    return target.getSelection();\n}\nfunction contains(dom, node) {\n    return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;\n}\nfunction deepActiveElement(doc) {\n    let elt = doc.activeElement;\n    while (elt && elt.shadowRoot)\n        elt = elt.shadowRoot.activeElement;\n    return elt;\n}\nfunction hasSelection(dom, selection) {\n    if (!selection.anchorNode)\n        return false;\n    try {\n        // Firefox will raise 'permission denied' errors when accessing\n        // properties of `sel.anchorNode` when it's in a generated CSS\n        // element.\n        return contains(dom, selection.anchorNode);\n    }\n    catch (_) {\n        return false;\n    }\n}\nfunction clientRectsFor(dom) {\n    if (dom.nodeType == 3)\n        return textRange(dom, 0, dom.nodeValue.length).getClientRects();\n    else if (dom.nodeType == 1)\n        return dom.getClientRects();\n    else\n        return [];\n}\n// Scans forward and backward through DOM positions equivalent to the\n// given one to see if the two are in the same place (i.e. after a\n// text node vs at the end of that text node)\nfunction isEquivalentPosition(node, off, targetNode, targetOff) {\n    return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||\n        scanFor(node, off, targetNode, targetOff, 1)) : false;\n}\nfunction domIndex(node) {\n    for (var index = 0;; index++) {\n        node = node.previousSibling;\n        if (!node)\n            return index;\n    }\n}\nfunction scanFor(node, off, targetNode, targetOff, dir) {\n    for (;;) {\n        if (node == targetNode && off == targetOff)\n            return true;\n        if (off == (dir < 0 ? 0 : maxOffset(node))) {\n            if (node.nodeName == \"DIV\")\n                return false;\n            let parent = node.parentNode;\n            if (!parent || parent.nodeType != 1)\n                return false;\n            off = domIndex(node) + (dir < 0 ? 0 : 1);\n            node = parent;\n        }\n        else if (node.nodeType == 1) {\n            node = node.childNodes[off + (dir < 0 ? -1 : 0)];\n            if (node.nodeType == 1 && node.contentEditable == \"false\")\n                return false;\n            off = dir < 0 ? maxOffset(node) : 0;\n        }\n        else {\n            return false;\n        }\n    }\n}\nfunction maxOffset(node) {\n    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;\n}\nfunction flattenRect(rect, left) {\n    let x = left ? rect.left : rect.right;\n    return { left: x, right: x, top: rect.top, bottom: rect.bottom };\n}\nfunction windowRect(win) {\n    return { left: 0, right: win.innerWidth,\n        top: 0, bottom: win.innerHeight };\n}\nfunction scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {\n    let doc = dom.ownerDocument, win = doc.defaultView || window;\n    for (let cur = dom, stop = false; cur && !stop;) {\n        if (cur.nodeType == 1) { // Element\n            let bounding, top = cur == doc.body;\n            if (top) {\n                bounding = windowRect(win);\n            }\n            else {\n                if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position))\n                    stop = true;\n                if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {\n                    cur = cur.assignedSlot || cur.parentNode;\n                    continue;\n                }\n                let rect = cur.getBoundingClientRect();\n                // Make sure scrollbar width isn't included in the rectangle\n                bounding = { left: rect.left, right: rect.left + cur.clientWidth,\n                    top: rect.top, bottom: rect.top + cur.clientHeight };\n            }\n            let moveX = 0, moveY = 0;\n            if (y == \"nearest\") {\n                if (rect.top < bounding.top) {\n                    moveY = -(bounding.top - rect.top + yMargin);\n                    if (side > 0 && rect.bottom > bounding.bottom + moveY)\n                        moveY = rect.bottom - bounding.bottom + moveY + yMargin;\n                }\n                else if (rect.bottom > bounding.bottom) {\n                    moveY = rect.bottom - bounding.bottom + yMargin;\n                    if (side < 0 && (rect.top - moveY) < bounding.top)\n                        moveY = -(bounding.top + moveY - rect.top + yMargin);\n                }\n            }\n            else {\n                let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;\n                let targetTop = y == \"center\" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :\n                    y == \"start\" || y == \"center\" && side < 0 ? rect.top - yMargin :\n                        rect.bottom - boundingHeight + yMargin;\n                moveY = targetTop - bounding.top;\n            }\n            if (x == \"nearest\") {\n                if (rect.left < bounding.left) {\n                    moveX = -(bounding.left - rect.left + xMargin);\n                    if (side > 0 && rect.right > bounding.right + moveX)\n                        moveX = rect.right - bounding.right + moveX + xMargin;\n                }\n                else if (rect.right > bounding.right) {\n                    moveX = rect.right - bounding.right + xMargin;\n                    if (side < 0 && rect.left < bounding.left + moveX)\n                        moveX = -(bounding.left + moveX - rect.left + xMargin);\n                }\n            }\n            else {\n                let targetLeft = x == \"center\" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :\n                    (x == \"start\") == ltr ? rect.left - xMargin :\n                        rect.right - (bounding.right - bounding.left) + xMargin;\n                moveX = targetLeft - bounding.left;\n            }\n            if (moveX || moveY) {\n                if (top) {\n                    win.scrollBy(moveX, moveY);\n                }\n                else {\n                    let movedX = 0, movedY = 0;\n                    if (moveY) {\n                        let start = cur.scrollTop;\n                        cur.scrollTop += moveY;\n                        movedY = cur.scrollTop - start;\n                    }\n                    if (moveX) {\n                        let start = cur.scrollLeft;\n                        cur.scrollLeft += moveX;\n                        movedX = cur.scrollLeft - start;\n                    }\n                    rect = { left: rect.left - movedX, top: rect.top - movedY,\n                        right: rect.right - movedX, bottom: rect.bottom - movedY };\n                    if (movedX && Math.abs(movedX - moveX) < 1)\n                        x = \"nearest\";\n                    if (movedY && Math.abs(movedY - moveY) < 1)\n                        y = \"nearest\";\n                }\n            }\n            if (top)\n                break;\n            cur = cur.assignedSlot || cur.parentNode;\n        }\n        else if (cur.nodeType == 11) { // A shadow root\n            cur = cur.host;\n        }\n        else {\n            break;\n        }\n    }\n}\nfunction scrollableParent(dom) {\n    let doc = dom.ownerDocument;\n    for (let cur = dom.parentNode; cur;) {\n        if (cur == doc.body) {\n            break;\n        }\n        else if (cur.nodeType == 1) {\n            if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth)\n                return cur;\n            cur = cur.assignedSlot || cur.parentNode;\n        }\n        else if (cur.nodeType == 11) {\n            cur = cur.host;\n        }\n        else {\n            break;\n        }\n    }\n    return null;\n}\nclass DOMSelectionState {\n    constructor() {\n        this.anchorNode = null;\n        this.anchorOffset = 0;\n        this.focusNode = null;\n        this.focusOffset = 0;\n    }\n    eq(domSel) {\n        return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&\n            this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;\n    }\n    setRange(range) {\n        let { anchorNode, focusNode } = range;\n        // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)\n        this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));\n    }\n    set(anchorNode, anchorOffset, focusNode, focusOffset) {\n        this.anchorNode = anchorNode;\n        this.anchorOffset = anchorOffset;\n        this.focusNode = focusNode;\n        this.focusOffset = focusOffset;\n    }\n}\nlet preventScrollSupported = null;\n// Feature-detects support for .focus({preventScroll: true}), and uses\n// a fallback kludge when not supported.\nfunction focusPreventScroll(dom) {\n    if (dom.setActive)\n        return dom.setActive(); // in IE\n    if (preventScrollSupported)\n        return dom.focus(preventScrollSupported);\n    let stack = [];\n    for (let cur = dom; cur; cur = cur.parentNode) {\n        stack.push(cur, cur.scrollTop, cur.scrollLeft);\n        if (cur == cur.ownerDocument)\n            break;\n    }\n    dom.focus(preventScrollSupported == null ? {\n        get preventScroll() {\n            preventScrollSupported = { preventScroll: true };\n            return true;\n        }\n    } : undefined);\n    if (!preventScrollSupported) {\n        preventScrollSupported = false;\n        for (let i = 0; i < stack.length;) {\n            let elt = stack[i++], top = stack[i++], left = stack[i++];\n            if (elt.scrollTop != top)\n                elt.scrollTop = top;\n            if (elt.scrollLeft != left)\n                elt.scrollLeft = left;\n        }\n    }\n}\nlet scratchRange;\nfunction textRange(node, from, to = from) {\n    let range = scratchRange || (scratchRange = document.createRange());\n    range.setEnd(node, to);\n    range.setStart(node, from);\n    return range;\n}\nfunction dispatchKey(elt, name, code) {\n    let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };\n    let down = new KeyboardEvent(\"keydown\", options);\n    down.synthetic = true;\n    elt.dispatchEvent(down);\n    let up = new KeyboardEvent(\"keyup\", options);\n    up.synthetic = true;\n    elt.dispatchEvent(up);\n    return down.defaultPrevented || up.defaultPrevented;\n}\nfunction getRoot(node) {\n    while (node) {\n        if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))\n            return node;\n        node = node.assignedSlot || node.parentNode;\n    }\n    return null;\n}\nfunction clearAttributes(node) {\n    while (node.attributes.length)\n        node.removeAttributeNode(node.attributes[0]);\n}\nfunction atElementStart(doc, selection) {\n    let node = selection.focusNode, offset = selection.focusOffset;\n    if (!node || selection.anchorNode != node || selection.anchorOffset != offset)\n        return false;\n    // Safari can report bogus offsets (#1152)\n    offset = Math.min(offset, maxOffset(node));\n    for (;;) {\n        if (offset) {\n            if (node.nodeType != 1)\n                return false;\n            let prev = node.childNodes[offset - 1];\n            if (prev.contentEditable == \"false\")\n                offset--;\n            else {\n                node = prev;\n                offset = maxOffset(node);\n            }\n        }\n        else if (node == doc) {\n            return true;\n        }\n        else {\n            offset = domIndex(node);\n            node = node.parentNode;\n        }\n    }\n}\nfunction isScrolledToBottom(elt) {\n    return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);\n}\n\nclass DOMPos {\n    constructor(node, offset, precise = true) {\n        this.node = node;\n        this.offset = offset;\n        this.precise = precise;\n    }\n    static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }\n    static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }\n}\nconst noChildren = [];\nclass ContentView {\n    constructor() {\n        this.parent = null;\n        this.dom = null;\n        this.flags = 2 /* NodeDirty */;\n    }\n    get overrideDOMText() { return null; }\n    get posAtStart() {\n        return this.parent ? this.parent.posBefore(this) : 0;\n    }\n    get posAtEnd() {\n        return this.posAtStart + this.length;\n    }\n    posBefore(view) {\n        let pos = this.posAtStart;\n        for (let child of this.children) {\n            if (child == view)\n                return pos;\n            pos += child.length + child.breakAfter;\n        }\n        throw new RangeError(\"Invalid child in posBefore\");\n    }\n    posAfter(view) {\n        return this.posBefore(view) + view.length;\n    }\n    sync(view, track) {\n        if (this.flags & 2 /* NodeDirty */) {\n            let parent = this.dom;\n            let prev = null, next;\n            for (let child of this.children) {\n                if (child.flags & 7 /* Dirty */) {\n                    if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {\n                        let contentView = ContentView.get(next);\n                        if (!contentView || !contentView.parent && contentView.canReuseDOM(child))\n                            child.reuseDOM(next);\n                    }\n                    child.sync(view, track);\n                    child.flags &= ~7 /* Dirty */;\n                }\n                next = prev ? prev.nextSibling : parent.firstChild;\n                if (track && !track.written && track.node == parent && next != child.dom)\n                    track.written = true;\n                if (child.dom.parentNode == parent) {\n                    while (next && next != child.dom)\n                        next = rm$1(next);\n                }\n                else {\n                    parent.insertBefore(child.dom, next);\n                }\n                prev = child.dom;\n            }\n            next = prev ? prev.nextSibling : parent.firstChild;\n            if (next && track && track.node == parent)\n                track.written = true;\n            while (next)\n                next = rm$1(next);\n        }\n        else if (this.flags & 1 /* ChildDirty */) {\n            for (let child of this.children)\n                if (child.flags & 7 /* Dirty */) {\n                    child.sync(view, track);\n                    child.flags &= ~7 /* Dirty */;\n                }\n        }\n    }\n    reuseDOM(_dom) { }\n    localPosFromDOM(node, offset) {\n        let after;\n        if (node == this.dom) {\n            after = this.dom.childNodes[offset];\n        }\n        else {\n            let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;\n            for (;;) {\n                let parent = node.parentNode;\n                if (parent == this.dom)\n                    break;\n                if (bias == 0 && parent.firstChild != parent.lastChild) {\n                    if (node == parent.firstChild)\n                        bias = -1;\n                    else\n                        bias = 1;\n                }\n                node = parent;\n            }\n            if (bias < 0)\n                after = node;\n            else\n                after = node.nextSibling;\n        }\n        if (after == this.dom.firstChild)\n            return 0;\n        while (after && !ContentView.get(after))\n            after = after.nextSibling;\n        if (!after)\n            return this.length;\n        for (let i = 0, pos = 0;; i++) {\n            let child = this.children[i];\n            if (child.dom == after)\n                return pos;\n            pos += child.length + child.breakAfter;\n        }\n    }\n    domBoundsAround(from, to, offset = 0) {\n        let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;\n        for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {\n            let child = this.children[i], end = pos + child.length;\n            if (pos < from && end > to)\n                return child.domBoundsAround(from, to, pos);\n            if (end >= from && fromI == -1) {\n                fromI = i;\n                fromStart = pos;\n            }\n            if (pos > to && child.dom.parentNode == this.dom) {\n                toI = i;\n                toEnd = prevEnd;\n                break;\n            }\n            prevEnd = end;\n            pos = end + child.breakAfter;\n        }\n        return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,\n            startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,\n            endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };\n    }\n    markDirty(andParent = false) {\n        this.flags |= 2 /* NodeDirty */;\n        this.markParentsDirty(andParent);\n    }\n    markParentsDirty(childList) {\n        for (let parent = this.parent; parent; parent = parent.parent) {\n            if (childList)\n                parent.flags |= 2 /* NodeDirty */;\n            if (parent.flags & 1 /* ChildDirty */)\n                return;\n            parent.flags |= 1 /* ChildDirty */;\n            childList = false;\n        }\n    }\n    setParent(parent) {\n        if (this.parent != parent) {\n            this.parent = parent;\n            if (this.flags & 7 /* Dirty */)\n                this.markParentsDirty(true);\n        }\n    }\n    setDOM(dom) {\n        if (this.dom)\n            this.dom.cmView = null;\n        this.dom = dom;\n        dom.cmView = this;\n    }\n    get rootView() {\n        for (let v = this;;) {\n            let parent = v.parent;\n            if (!parent)\n                return v;\n            v = parent;\n        }\n    }\n    replaceChildren(from, to, children = noChildren) {\n        this.markDirty();\n        for (let i = from; i < to; i++) {\n            let child = this.children[i];\n            if (child.parent == this)\n                child.destroy();\n        }\n        this.children.splice(from, to - from, ...children);\n        for (let i = 0; i < children.length; i++)\n            children[i].setParent(this);\n    }\n    ignoreMutation(_rec) { return false; }\n    ignoreEvent(_event) { return false; }\n    childCursor(pos = this.length) {\n        return new ChildCursor(this.children, pos, this.children.length);\n    }\n    childPos(pos, bias = 1) {\n        return this.childCursor().findPos(pos, bias);\n    }\n    toString() {\n        let name = this.constructor.name.replace(\"View\", \"\");\n        return name + (this.children.length ? \"(\" + this.children.join() + \")\" :\n            this.length ? \"[\" + (name == \"Text\" ? this.text : this.length) + \"]\" : \"\") +\n            (this.breakAfter ? \"#\" : \"\");\n    }\n    static get(node) { return node.cmView; }\n    get isEditable() { return true; }\n    get isWidget() { return false; }\n    get isHidden() { return false; }\n    merge(from, to, source, hasStart, openStart, openEnd) {\n        return false;\n    }\n    become(other) { return false; }\n    canReuseDOM(other) {\n        return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* Composition */);\n    }\n    // When this is a zero-length view with a side, this should return a\n    // number <= 0 to indicate it is before its position, or a\n    // number > 0 when after its position.\n    getSide() { return 0; }\n    destroy() {\n        this.parent = null;\n    }\n}\nContentView.prototype.breakAfter = 0;\n// Remove a DOM node and return its next sibling.\nfunction rm$1(dom) {\n    let next = dom.nextSibling;\n    dom.parentNode.removeChild(dom);\n    return next;\n}\nclass ChildCursor {\n    constructor(children, pos, i) {\n        this.children = children;\n        this.pos = pos;\n        this.i = i;\n        this.off = 0;\n    }\n    findPos(pos, bias = 1) {\n        for (;;) {\n            if (pos > this.pos || pos == this.pos &&\n                (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {\n                this.off = pos - this.pos;\n                return this;\n            }\n            let next = this.children[--this.i];\n            this.pos -= next.length + next.breakAfter;\n        }\n    }\n}\nfunction replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {\n    let { children } = parent;\n    let before = children.length ? children[fromI] : null;\n    let last = insert.length ? insert[insert.length - 1] : null;\n    let breakAtEnd = last ? last.breakAfter : breakAtStart;\n    // Change within a single child\n    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&\n        before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))\n        return;\n    if (toI < children.length) {\n        let after = children[toI];\n        // Make sure the end of the child after the update is preserved in `after`\n        if (after && toOff < after.length) {\n            // If we're splitting a child, separate part of it to avoid that\n            // being mangled when updating the child before the update.\n            if (fromI == toI) {\n                after = after.split(toOff);\n                toOff = 0;\n            }\n            // If the element after the replacement should be merged with\n            // the last replacing element, update `content`\n            if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {\n                insert[insert.length - 1] = after;\n            }\n            else {\n                // Remove the start of the after element, if necessary, and\n                // add it to `content`.\n                if (toOff)\n                    after.merge(0, toOff, null, false, 0, openEnd);\n                insert.push(after);\n            }\n        }\n        else if (after === null || after === void 0 ? void 0 : after.breakAfter) {\n            // The element at `toI` is entirely covered by this range.\n            // Preserve its line break, if any.\n            if (last)\n                last.breakAfter = 1;\n            else\n                breakAtStart = 1;\n        }\n        // Since we've handled the next element from the current elements\n        // now, make sure `toI` points after that.\n        toI++;\n    }\n    if (before) {\n        before.breakAfter = breakAtStart;\n        if (fromOff > 0) {\n            if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {\n                before.breakAfter = insert.shift().breakAfter;\n            }\n            else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {\n                before.merge(fromOff, before.length, null, false, openStart, 0);\n            }\n            fromI++;\n        }\n    }\n    // Try to merge widgets on the boundaries of the replacement\n    while (fromI < toI && insert.length) {\n        if (children[toI - 1].become(insert[insert.length - 1])) {\n            toI--;\n            insert.pop();\n            openEnd = insert.length ? 0 : openStart;\n        }\n        else if (children[fromI].become(insert[0])) {\n            fromI++;\n            insert.shift();\n            openStart = insert.length ? 0 : openEnd;\n        }\n        else {\n            break;\n        }\n    }\n    if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&\n        children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))\n        fromI--;\n    if (fromI < toI || insert.length)\n        parent.replaceChildren(fromI, toI, insert);\n}\nfunction mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {\n    let cur = parent.childCursor();\n    let { i: toI, off: toOff } = cur.findPos(to, 1);\n    let { i: fromI, off: fromOff } = cur.findPos(from, -1);\n    let dLen = from - to;\n    for (let view of insert)\n        dLen += view.length;\n    parent.length += dLen;\n    replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);\n}\n\nconst LineBreakPlaceholder = \"\\uffff\";\nclass DOMReader {\n    constructor(points, state) {\n        this.points = points;\n        this.text = \"\";\n        this.lineSeparator = state.facet(EditorState.lineSeparator);\n    }\n    append(text) {\n        this.text += text;\n    }\n    lineBreak() {\n        this.text += LineBreakPlaceholder;\n    }\n    readRange(start, end) {\n        if (!start)\n            return this;\n        let parent = start.parentNode;\n        for (let cur = start;;) {\n            this.findPointBefore(parent, cur);\n            let oldLen = this.text.length;\n            this.readNode(cur);\n            let next = cur.nextSibling;\n            if (next == end)\n                break;\n            let view = ContentView.get(cur), nextView = ContentView.get(next);\n            if (view && nextView ? view.breakAfter :\n                (view ? view.breakAfter : isBlockElement(cur)) ||\n                    (isBlockElement(next) && (cur.nodeName != \"BR\" || cur.cmIgnore) && this.text.length > oldLen))\n                this.lineBreak();\n            cur = next;\n        }\n        this.findPointBefore(parent, end);\n        return this;\n    }\n    readTextNode(node) {\n        let text = node.nodeValue;\n        for (let point of this.points)\n            if (point.node == node)\n                point.pos = this.text.length + Math.min(point.offset, text.length);\n        for (let off = 0, re = this.lineSeparator ? null : /\\r\\n?|\\n/g;;) {\n            let nextBreak = -1, breakSize = 1, m;\n            if (this.lineSeparator) {\n                nextBreak = text.indexOf(this.lineSeparator, off);\n                breakSize = this.lineSeparator.length;\n            }\n            else if (m = re.exec(text)) {\n                nextBreak = m.index;\n                breakSize = m[0].length;\n            }\n            this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));\n            if (nextBreak < 0)\n                break;\n            this.lineBreak();\n            if (breakSize > 1)\n                for (let point of this.points)\n                    if (point.node == node && point.pos > this.text.length)\n                        point.pos -= breakSize - 1;\n            off = nextBreak + breakSize;\n        }\n    }\n    readNode(node) {\n        if (node.cmIgnore)\n            return;\n        let view = ContentView.get(node);\n        let fromView = view && view.overrideDOMText;\n        if (fromView != null) {\n            this.findPointInside(node, fromView.length);\n            for (let i = fromView.iter(); !i.next().done;) {\n                if (i.lineBreak)\n                    this.lineBreak();\n                else\n                    this.append(i.value);\n            }\n        }\n        else if (node.nodeType == 3) {\n            this.readTextNode(node);\n        }\n        else if (node.nodeName == \"BR\") {\n            if (node.nextSibling)\n                this.lineBreak();\n        }\n        else if (node.nodeType == 1) {\n            this.readRange(node.firstChild, null);\n        }\n    }\n    findPointBefore(node, next) {\n        for (let point of this.points)\n            if (point.node == node && node.childNodes[point.offset] == next)\n                point.pos = this.text.length;\n    }\n    findPointInside(node, maxLen) {\n        for (let point of this.points)\n            if (node.nodeType == 3 ? point.node == node : node.contains(point.node))\n                point.pos = this.text.length + Math.min(maxLen, point.offset);\n    }\n}\nfunction isBlockElement(node) {\n    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\\d|SECTION|PRE)$/.test(node.nodeName);\n}\nclass DOMPoint {\n    constructor(node, offset) {\n        this.node = node;\n        this.offset = offset;\n        this.pos = -1;\n    }\n}\n\nlet nav = typeof navigator != \"undefined\" ? navigator : { userAgent: \"\", vendor: \"\", platform: \"\" };\nlet doc = typeof document != \"undefined\" ? document : { documentElement: { style: {} } };\nconst ie_edge = /*@__PURE__*//Edge\\/(\\d+)/.exec(nav.userAgent);\nconst ie_upto10 = /*@__PURE__*//MSIE \\d/.test(nav.userAgent);\nconst ie_11up = /*@__PURE__*//Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(nav.userAgent);\nconst ie = !!(ie_upto10 || ie_11up || ie_edge);\nconst gecko = !ie && /*@__PURE__*//gecko\\/(\\d+)/i.test(nav.userAgent);\nconst chrome = !ie && /*@__PURE__*//Chrome\\/(\\d+)/.exec(nav.userAgent);\nconst webkit = \"webkitFontSmoothing\" in doc.documentElement.style;\nconst safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);\nconst ios = safari && (/*@__PURE__*//Mobile\\/\\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);\nvar browser = {\n    mac: ios || /*@__PURE__*//Mac/.test(nav.platform),\n    windows: /*@__PURE__*//Win/.test(nav.platform),\n    linux: /*@__PURE__*//Linux|X11/.test(nav.platform),\n    ie,\n    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,\n    gecko,\n    gecko_version: gecko ? +(/*@__PURE__*//Firefox\\/(\\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,\n    chrome: !!chrome,\n    chrome_version: chrome ? +chrome[1] : 0,\n    ios,\n    android: /*@__PURE__*//Android\\b/.test(nav.userAgent),\n    webkit,\n    safari,\n    webkit_version: webkit ? +(/*@__PURE__*//\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,\n    tabSize: doc.documentElement.style.tabSize != null ? \"tab-size\" : \"-moz-tab-size\"\n};\n\nconst MaxJoinLen = 256;\nclass TextView extends ContentView {\n    constructor(text) {\n        super();\n        this.text = text;\n    }\n    get length() { return this.text.length; }\n    createDOM(textDOM) {\n        this.setDOM(textDOM || document.createTextNode(this.text));\n    }\n    sync(view, track) {\n        if (!this.dom)\n            this.createDOM();\n        if (this.dom.nodeValue != this.text) {\n            if (track && track.node == this.dom)\n                track.written = true;\n            this.dom.nodeValue = this.text;\n        }\n    }\n    reuseDOM(dom) {\n        if (dom.nodeType == 3)\n            this.createDOM(dom);\n    }\n    merge(from, to, source) {\n        if ((this.flags & 8 /* Composition */) ||\n            source && (!(source instanceof TextView) ||\n                this.length - (to - from) + source.length > MaxJoinLen ||\n                (source.flags & 8 /* Composition */)))\n            return false;\n        this.text = this.text.slice(0, from) + (source ? source.text : \"\") + this.text.slice(to);\n        this.markDirty();\n        return true;\n    }\n    split(from) {\n        let result = new TextView(this.text.slice(from));\n        this.text = this.text.slice(0, from);\n        this.markDirty();\n        result.flags |= this.flags & 8 /* Composition */;\n        return result;\n    }\n    localPosFromDOM(node, offset) {\n        return node == this.dom ? offset : offset ? this.text.length : 0;\n    }\n    domAtPos(pos) { return new DOMPos(this.dom, pos); }\n    domBoundsAround(_from, _to, offset) {\n        return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };\n    }\n    coordsAt(pos, side) {\n        return textCoords(this.dom, pos, side);\n    }\n}\nclass MarkView extends ContentView {\n    constructor(mark, children = [], length = 0) {\n        super();\n        this.mark = mark;\n        this.children = children;\n        this.length = length;\n        for (let ch of children)\n            ch.setParent(this);\n    }\n    setAttrs(dom) {\n        clearAttributes(dom);\n        if (this.mark.class)\n            dom.className = this.mark.class;\n        if (this.mark.attrs)\n            for (let name in this.mark.attrs)\n                dom.setAttribute(name, this.mark.attrs[name]);\n        return dom;\n    }\n    canReuseDOM(other) {\n        return super.canReuseDOM(other) && !((this.flags | other.flags) & 8 /* Composition */);\n    }\n    reuseDOM(node) {\n        if (node.nodeName == this.mark.tagName.toUpperCase()) {\n            this.setDOM(node);\n            this.flags |= 4 /* AttrsDirty */ | 2 /* NodeDirty */;\n        }\n    }\n    sync(view, track) {\n        if (!this.dom)\n            this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));\n        else if (this.flags & 4 /* AttrsDirty */)\n            this.setAttrs(this.dom);\n        super.sync(view, track);\n    }\n    merge(from, to, source, _hasStart, openStart, openEnd) {\n        if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||\n            (from && openStart <= 0) || (to < this.length && openEnd <= 0)))\n            return false;\n        mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);\n        this.markDirty();\n        return true;\n    }\n    split(from) {\n        let result = [], off = 0, detachFrom = -1, i = 0;\n        for (let elt of this.children) {\n            let end = off + elt.length;\n            if (end > from)\n                result.push(off < from ? elt.split(from - off) : elt);\n            if (detachFrom < 0 && off >= from)\n                detachFrom = i;\n            off = end;\n            i++;\n        }\n        let length = this.length - from;\n        this.length = from;\n        if (detachFrom > -1) {\n            this.children.length = detachFrom;\n            this.markDirty();\n        }\n        return new MarkView(this.mark, result, length);\n    }\n    domAtPos(pos) {\n        return inlineDOMAtPos(this, pos);\n    }\n    coordsAt(pos, side) {\n        return coordsInChildren(this, pos, side);\n    }\n}\nfunction textCoords(text, pos, side) {\n    let length = text.nodeValue.length;\n    if (pos > length)\n        pos = length;\n    let from = pos, to = pos, flatten = 0;\n    if (pos == 0 && side < 0 || pos == length && side >= 0) {\n        if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges\n            if (pos) {\n                from--;\n                flatten = 1;\n            } // FIXME this is wrong in RTL text\n            else if (to < length) {\n                to++;\n                flatten = -1;\n            }\n        }\n    }\n    else {\n        if (side < 0)\n            from--;\n        else if (to < length)\n            to++;\n    }\n    let rects = textRange(text, from, to).getClientRects();\n    if (!rects.length)\n        return null;\n    let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];\n    if (browser.safari && !flatten && rect.width == 0)\n        rect = Array.prototype.find.call(rects, r => r.width) || rect;\n    return flatten ? flattenRect(rect, flatten < 0) : rect || null;\n}\n// Also used for collapsed ranges that don't have a placeholder widget!\nclass WidgetView extends ContentView {\n    constructor(widget, length, side) {\n        super();\n        this.widget = widget;\n        this.length = length;\n        this.side = side;\n        this.prevWidget = null;\n    }\n    static create(widget, length, side) {\n        return new WidgetView(widget, length, side);\n    }\n    split(from) {\n        let result = WidgetView.create(this.widget, this.length - from, this.side);\n        this.length -= from;\n        return result;\n    }\n    sync(view) {\n        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {\n            if (this.dom && this.prevWidget)\n                this.prevWidget.destroy(this.dom);\n            this.prevWidget = null;\n            this.setDOM(this.widget.toDOM(view));\n            this.dom.contentEditable = \"false\";\n        }\n    }\n    getSide() { return this.side; }\n    merge(from, to, source, hasStart, openStart, openEnd) {\n        if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||\n            from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))\n            return false;\n        this.length = from + (source ? source.length : 0) + (this.length - to);\n        return true;\n    }\n    become(other) {\n        if (other instanceof WidgetView && other.side == this.side &&\n            this.widget.constructor == other.widget.constructor) {\n            if (!this.widget.compare(other.widget))\n                this.markDirty(true);\n            if (this.dom && !this.prevWidget)\n                this.prevWidget = this.widget;\n            this.widget = other.widget;\n            this.length = other.length;\n            return true;\n        }\n        return false;\n    }\n    ignoreMutation() { return true; }\n    ignoreEvent(event) { return this.widget.ignoreEvent(event); }\n    get overrideDOMText() {\n        if (this.length == 0)\n            return Text.empty;\n        let top = this;\n        while (top.parent)\n            top = top.parent;\n        let { view } = top, text = view && view.state.doc, start = this.posAtStart;\n        return text ? text.slice(start, start + this.length) : Text.empty;\n    }\n    domAtPos(pos) {\n        return (this.length ? pos == 0 : this.side > 0)\n            ? DOMPos.before(this.dom)\n            : DOMPos.after(this.dom, pos == this.length);\n    }\n    domBoundsAround() { return null; }\n    coordsAt(pos, side) {\n        let custom = this.widget.coordsAt(this.dom, pos, side);\n        if (custom)\n            return custom;\n        let rects = this.dom.getClientRects(), rect = null;\n        if (!rects.length)\n            return null;\n        let fromBack = this.side ? this.side < 0 : pos > 0;\n        for (let i = fromBack ? rects.length - 1 : 0;; i += (fromBack ? -1 : 1)) {\n            rect = rects[i];\n            if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)\n                break;\n        }\n        return flattenRect(rect, !fromBack);\n    }\n    get isEditable() { return false; }\n    get isWidget() { return true; }\n    get isHidden() { return this.widget.isHidden; }\n    destroy() {\n        super.destroy();\n        if (this.dom)\n            this.widget.destroy(this.dom);\n    }\n}\n// These are drawn around uneditable widgets to avoid a number of\n// browser bugs that show up when the cursor is directly next to\n// uneditable inline content.\nclass WidgetBufferView extends ContentView {\n    constructor(side) {\n        super();\n        this.side = side;\n    }\n    get length() { return 0; }\n    merge() { return false; }\n    become(other) {\n        return other instanceof WidgetBufferView && other.side == this.side;\n    }\n    split() { return new WidgetBufferView(this.side); }\n    sync() {\n        if (!this.dom) {\n            let dom = document.createElement(\"img\");\n            dom.className = \"cm-widgetBuffer\";\n            dom.setAttribute(\"aria-hidden\", \"true\");\n            this.setDOM(dom);\n        }\n    }\n    getSide() { return this.side; }\n    domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }\n    localPosFromDOM() { return 0; }\n    domBoundsAround() { return null; }\n    coordsAt(pos) {\n        return this.dom.getBoundingClientRect();\n    }\n    get overrideDOMText() {\n        return Text.empty;\n    }\n    get isHidden() { return true; }\n}\nTextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;\nfunction inlineDOMAtPos(parent, pos) {\n    let dom = parent.dom, { children } = parent, i = 0;\n    for (let off = 0; i < children.length; i++) {\n        let child = children[i], end = off + child.length;\n        if (end == off && child.getSide() <= 0)\n            continue;\n        if (pos > off && pos < end && child.dom.parentNode == dom)\n            return child.domAtPos(pos - off);\n        if (pos <= off)\n            break;\n        off = end;\n    }\n    for (let j = i; j > 0; j--) {\n        let prev = children[j - 1];\n        if (prev.dom.parentNode == dom)\n            return prev.domAtPos(prev.length);\n    }\n    for (let j = i; j < children.length; j++) {\n        let next = children[j];\n        if (next.dom.parentNode == dom)\n            return next.domAtPos(0);\n    }\n    return new DOMPos(dom, 0);\n}\n// Assumes `view`, if a mark view, has precisely 1 child.\nfunction joinInlineInto(parent, view, open) {\n    let last, { children } = parent;\n    if (open > 0 && view instanceof MarkView && children.length &&\n        (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {\n        joinInlineInto(last, view.children[0], open - 1);\n    }\n    else {\n        children.push(view);\n        view.setParent(parent);\n    }\n    parent.length += view.length;\n}\nfunction coordsInChildren(view, pos, side) {\n    let before = null, beforePos = -1, after = null, afterPos = -1;\n    function scan(view, pos) {\n        for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {\n            let child = view.children[i], end = off + child.length;\n            if (end >= pos) {\n                if (child.children.length) {\n                    scan(child, pos - off);\n                }\n                else if ((!after || after.isHidden && side > 0) &&\n                    (end > pos || off == end && child.getSide() > 0)) {\n                    after = child;\n                    afterPos = pos - off;\n                }\n                else if (off < pos || (off == end && child.getSide() < 0) && !child.isHidden) {\n                    before = child;\n                    beforePos = pos - off;\n                }\n            }\n            off = end;\n        }\n    }\n    scan(view, pos);\n    let target = (side < 0 ? before : after) || before || after;\n    if (target)\n        return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);\n    return fallbackRect(view);\n}\nfunction fallbackRect(view) {\n    let last = view.dom.lastChild;\n    if (!last)\n        return view.dom.getBoundingClientRect();\n    let rects = clientRectsFor(last);\n    return rects[rects.length - 1] || null;\n}\n\nfunction combineAttrs(source, target) {\n    for (let name in source) {\n        if (name == \"class\" && target.class)\n            target.class += \" \" + source.class;\n        else if (name == \"style\" && target.style)\n            target.style += \";\" + source.style;\n        else\n            target[name] = source[name];\n    }\n    return target;\n}\nconst noAttrs = /*@__PURE__*/Object.create(null);\nfunction attrsEq(a, b, ignore) {\n    if (a == b)\n        return true;\n    if (!a)\n        a = noAttrs;\n    if (!b)\n        b = noAttrs;\n    let keysA = Object.keys(a), keysB = Object.keys(b);\n    if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) !=\n        keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))\n        return false;\n    for (let key of keysA) {\n        if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))\n            return false;\n    }\n    return true;\n}\nfunction updateAttrs(dom, prev, attrs) {\n    let changed = null;\n    if (prev)\n        for (let name in prev)\n            if (!(attrs && name in attrs))\n                dom.removeAttribute(changed = name);\n    if (attrs)\n        for (let name in attrs)\n            if (!(prev && prev[name] == attrs[name]))\n                dom.setAttribute(changed = name, attrs[name]);\n    return !!changed;\n}\nfunction getAttrs(dom) {\n    let attrs = Object.create(null);\n    for (let i = 0; i < dom.attributes.length; i++) {\n        let attr = dom.attributes[i];\n        attrs[attr.name] = attr.value;\n    }\n    return attrs;\n}\n\n/**\nWidgets added to the content are described by subclasses of this\nclass. Using a description object like that makes it possible to\ndelay creating of the DOM structure for a widget until it is\nneeded, and to avoid redrawing widgets even if the decorations\nthat define them are recreated.\n*/\nclass WidgetType {\n    /**\n    Compare this instance to another instance of the same type.\n    (TypeScript can't express this, but only instances of the same\n    specific class will be passed to this method.) This is used to\n    avoid redrawing widgets when they are replaced by a new\n    decoration of the same type. The default implementation just\n    returns `false`, which will cause new instances of the widget to\n    always be redrawn.\n    */\n    eq(widget) { return false; }\n    /**\n    Update a DOM element created by a widget of the same type (but\n    different, non-`eq` content) to reflect this widget. May return\n    true to indicate that it could update, false to indicate it\n    couldn't (in which case the widget will be redrawn). The default\n    implementation just returns false.\n    */\n    updateDOM(dom, view) { return false; }\n    /**\n    @internal\n    */\n    compare(other) {\n        return this == other || this.constructor == other.constructor && this.eq(other);\n    }\n    /**\n    The estimated height this widget will have, to be used when\n    estimating the height of content that hasn't been drawn. May\n    return -1 to indicate you don't know. The default implementation\n    returns -1.\n    */\n    get estimatedHeight() { return -1; }\n    /**\n    For inline widgets that are displayed inline (as opposed to\n    `inline-block`) and introduce line breaks (through `<br>` tags\n    or textual newlines), this must indicate the amount of line\n    breaks they introduce. Defaults to 0.\n    */\n    get lineBreaks() { return 0; }\n    /**\n    Can be used to configure which kinds of events inside the widget\n    should be ignored by the editor. The default is to ignore all\n    events.\n    */\n    ignoreEvent(event) { return true; }\n    /**\n    Override the way screen coordinates for positions at/in the\n    widget are found. `pos` will be the offset into the widget, and\n    `side` the side of the position that is being queried—less than\n    zero for before, greater than zero for after, and zero for\n    directly at that position.\n    */\n    coordsAt(dom, pos, side) { return null; }\n    /**\n    @internal\n    */\n    get isHidden() { return false; }\n    /**\n    This is called when the an instance of the widget is removed\n    from the editor view.\n    */\n    destroy(dom) { }\n}\n/**\nThe different types of blocks that can occur in an editor view.\n*/\nvar BlockType = /*@__PURE__*/(function (BlockType) {\n    /**\n    A line of text.\n    */\n    BlockType[BlockType[\"Text\"] = 0] = \"Text\";\n    /**\n    A block widget associated with the position after it.\n    */\n    BlockType[BlockType[\"WidgetBefore\"] = 1] = \"WidgetBefore\";\n    /**\n    A block widget associated with the position before it.\n    */\n    BlockType[BlockType[\"WidgetAfter\"] = 2] = \"WidgetAfter\";\n    /**\n    A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.\n    */\n    BlockType[BlockType[\"WidgetRange\"] = 3] = \"WidgetRange\";\nreturn BlockType})(BlockType || (BlockType = {}));\n/**\nA decoration provides information on how to draw or style a piece\nof content. You'll usually use it wrapped in a\n[`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.\n@nonabstract\n*/\nclass Decoration extends RangeValue {\n    constructor(\n    /**\n    @internal\n    */\n    startSide, \n    /**\n    @internal\n    */\n    endSide, \n    /**\n    @internal\n    */\n    widget, \n    /**\n    The config object used to create this decoration. You can\n    include additional properties in there to store metadata about\n    your decoration.\n    */\n    spec) {\n        super();\n        this.startSide = startSide;\n        this.endSide = endSide;\n        this.widget = widget;\n        this.spec = spec;\n    }\n    /**\n    @internal\n    */\n    get heightRelevant() { return false; }\n    /**\n    Create a mark decoration, which influences the styling of the\n    content in its range. Nested mark decorations will cause nested\n    DOM elements to be created. Nesting order is determined by\n    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with\n    the higher-precedence decorations creating the inner DOM nodes.\n    Such elements are split on line boundaries and on the boundaries\n    of lower-precedence decorations.\n    */\n    static mark(spec) {\n        return new MarkDecoration(spec);\n    }\n    /**\n    Create a widget decoration, which displays a DOM element at the\n    given position.\n    */\n    static widget(spec) {\n        let side = Math.max(-10000, Math.min(10000, spec.side || 0)), block = !!spec.block;\n        side += (block && !spec.inlineOrder)\n            ? (side > 0 ? 300000000 /* BlockAfter */ : -400000000 /* BlockBefore */)\n            : (side > 0 ? 100000000 /* InlineAfter */ : -100000000 /* InlineBefore */);\n        return new PointDecoration(spec, side, side, block, spec.widget || null, false);\n    }\n    /**\n    Create a replace decoration which replaces the given range with\n    a widget, or simply hides it.\n    */\n    static replace(spec) {\n        let block = !!spec.block, startSide, endSide;\n        if (spec.isBlockGap) {\n            startSide = -500000000 /* GapStart */;\n            endSide = 400000000 /* GapEnd */;\n        }\n        else {\n            let { start, end } = getInclusive(spec, block);\n            startSide = (start ? (block ? -300000000 /* BlockIncStart */ : -1 /* InlineIncStart */) : 500000000 /* NonIncStart */) - 1;\n            endSide = (end ? (block ? 200000000 /* BlockIncEnd */ : 1 /* InlineIncEnd */) : -600000000 /* NonIncEnd */) + 1;\n        }\n        return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);\n    }\n    /**\n    Create a line decoration, which can add DOM attributes to the\n    line starting at the given position.\n    */\n    static line(spec) {\n        return new LineDecoration(spec);\n    }\n    /**\n    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given\n    decorated range or ranges. If the ranges aren't already sorted,\n    pass `true` for `sort` to make the library sort them for you.\n    */\n    static set(of, sort = false) {\n        return RangeSet.of(of, sort);\n    }\n    /**\n    @internal\n    */\n    hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }\n}\n/**\nThe empty set of decorations.\n*/\nDecoration.none = RangeSet.empty;\nclass MarkDecoration extends Decoration {\n    constructor(spec) {\n        let { start, end } = getInclusive(spec);\n        super(start ? -1 /* InlineIncStart */ : 500000000 /* NonIncStart */, end ? 1 /* InlineIncEnd */ : -600000000 /* NonIncEnd */, null, spec);\n        this.tagName = spec.tagName || \"span\";\n        this.class = spec.class || \"\";\n        this.attrs = spec.attributes || null;\n    }\n    eq(other) {\n        var _a, _b;\n        return this == other ||\n            other instanceof MarkDecoration &&\n                this.tagName == other.tagName &&\n                (this.class || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) &&\n                attrsEq(this.attrs, other.attrs, \"class\");\n    }\n    range(from, to = from) {\n        if (from >= to)\n            throw new RangeError(\"Mark decorations may not be empty\");\n        return super.range(from, to);\n    }\n}\nMarkDecoration.prototype.point = false;\nclass LineDecoration extends Decoration {\n    constructor(spec) {\n        super(-200000000 /* Line */, -200000000 /* Line */, null, spec);\n    }\n    eq(other) {\n        return other instanceof LineDecoration &&\n            this.spec.class == other.spec.class &&\n            attrsEq(this.spec.attributes, other.spec.attributes);\n    }\n    range(from, to = from) {\n        if (to != from)\n            throw new RangeError(\"Line decoration ranges must be zero-length\");\n        return super.range(from, to);\n    }\n}\nLineDecoration.prototype.mapMode = MapMode.TrackBefore;\nLineDecoration.prototype.point = true;\nclass PointDecoration extends Decoration {\n    constructor(spec, startSide, endSide, block, widget, isReplace) {\n        super(startSide, endSide, widget, spec);\n        this.block = block;\n        this.isReplace = isReplace;\n        this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;\n    }\n    // Only relevant when this.block == true\n    get type() {\n        return this.startSide < this.endSide ? BlockType.WidgetRange\n            : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;\n    }\n    get heightRelevant() {\n        return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);\n    }\n    eq(other) {\n        return other instanceof PointDecoration &&\n            widgetsEq(this.widget, other.widget) &&\n            this.block == other.block &&\n            this.startSide == other.startSide && this.endSide == other.endSide;\n    }\n    range(from, to = from) {\n        if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))\n            throw new RangeError(\"Invalid range for replacement decoration\");\n        if (!this.isReplace && to != from)\n            throw new RangeError(\"Widget decorations can only have zero-length ranges\");\n        return super.range(from, to);\n    }\n}\nPointDecoration.prototype.point = true;\nfunction getInclusive(spec, block = false) {\n    let { inclusiveStart: start, inclusiveEnd: end } = spec;\n    if (start == null)\n        start = spec.inclusive;\n    if (end == null)\n        end = spec.inclusive;\n    return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };\n}\nfunction widgetsEq(a, b) {\n    return a == b || !!(a && b && a.compare(b));\n}\nfunction addRange(from, to, ranges, margin = 0) {\n    let last = ranges.length - 1;\n    if (last >= 0 && ranges[last] + margin >= from)\n        ranges[last] = Math.max(ranges[last], to);\n    else\n        ranges.push(from, to);\n}\n\nclass LineView extends ContentView {\n    constructor() {\n        super(...arguments);\n        this.children = [];\n        this.length = 0;\n        this.prevAttrs = undefined;\n        this.attrs = null;\n        this.breakAfter = 0;\n    }\n    // Consumes source\n    merge(from, to, source, hasStart, openStart, openEnd) {\n        if (source) {\n            if (!(source instanceof LineView))\n                return false;\n            if (!this.dom)\n                source.transferDOM(this); // Reuse source.dom when appropriate\n        }\n        if (hasStart)\n            this.setDeco(source ? source.attrs : null);\n        mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);\n        return true;\n    }\n    split(at) {\n        let end = new LineView;\n        end.breakAfter = this.breakAfter;\n        if (this.length == 0)\n            return end;\n        let { i, off } = this.childPos(at);\n        if (off) {\n            end.append(this.children[i].split(off), 0);\n            this.children[i].merge(off, this.children[i].length, null, false, 0, 0);\n            i++;\n        }\n        for (let j = i; j < this.children.length; j++)\n            end.append(this.children[j], 0);\n        while (i > 0 && this.children[i - 1].length == 0)\n            this.children[--i].destroy();\n        this.children.length = i;\n        this.markDirty();\n        this.length = at;\n        return end;\n    }\n    transferDOM(other) {\n        if (!this.dom)\n            return;\n        this.markDirty();\n        other.setDOM(this.dom);\n        other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;\n        this.prevAttrs = undefined;\n        this.dom = null;\n    }\n    setDeco(attrs) {\n        if (!attrsEq(this.attrs, attrs)) {\n            if (this.dom) {\n                this.prevAttrs = this.attrs;\n                this.markDirty();\n            }\n            this.attrs = attrs;\n        }\n    }\n    append(child, openStart) {\n        joinInlineInto(this, child, openStart);\n    }\n    // Only called when building a line view in ContentBuilder\n    addLineDeco(deco) {\n        let attrs = deco.spec.attributes, cls = deco.spec.class;\n        if (attrs)\n            this.attrs = combineAttrs(attrs, this.attrs || {});\n        if (cls)\n            this.attrs = combineAttrs({ class: cls }, this.attrs || {});\n    }\n    domAtPos(pos) {\n        return inlineDOMAtPos(this, pos);\n    }\n    reuseDOM(node) {\n        if (node.nodeName == \"DIV\") {\n            this.setDOM(node);\n            this.flags |= 4 /* AttrsDirty */ | 2 /* NodeDirty */;\n        }\n    }\n    sync(view, track) {\n        var _a;\n        if (!this.dom) {\n            this.setDOM(document.createElement(\"div\"));\n            this.dom.className = \"cm-line\";\n            this.prevAttrs = this.attrs ? null : undefined;\n        }\n        else if (this.flags & 4 /* AttrsDirty */) {\n            clearAttributes(this.dom);\n            this.dom.className = \"cm-line\";\n            this.prevAttrs = this.attrs ? null : undefined;\n        }\n        if (this.prevAttrs !== undefined) {\n            updateAttrs(this.dom, this.prevAttrs, this.attrs);\n            this.dom.classList.add(\"cm-line\");\n            this.prevAttrs = undefined;\n        }\n        super.sync(view, track);\n        let last = this.dom.lastChild;\n        while (last && ContentView.get(last) instanceof MarkView)\n            last = last.lastChild;\n        if (!last || !this.length ||\n            last.nodeName != \"BR\" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&\n                (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {\n            let hack = document.createElement(\"BR\");\n            hack.cmIgnore = true;\n            this.dom.appendChild(hack);\n        }\n    }\n    measureTextSize() {\n        if (this.children.length == 0 || this.length > 20)\n            return null;\n        let totalWidth = 0, textHeight;\n        for (let child of this.children) {\n            if (!(child instanceof TextView) || /[^ -~]/.test(child.text))\n                return null;\n            let rects = clientRectsFor(child.dom);\n            if (rects.length != 1)\n                return null;\n            totalWidth += rects[0].width;\n            textHeight = rects[0].height;\n        }\n        return !totalWidth ? null : {\n            lineHeight: this.dom.getBoundingClientRect().height,\n            charWidth: totalWidth / this.length,\n            textHeight\n        };\n    }\n    coordsAt(pos, side) {\n        let rect = coordsInChildren(this, pos, side);\n        // Correct rectangle height for empty lines when the returned\n        // height is larger than the text height.\n        if (!this.children.length && rect && this.parent) {\n            let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;\n            if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {\n                let dist = (height - heightOracle.textHeight) / 2;\n                return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };\n            }\n        }\n        return rect;\n    }\n    become(_other) { return false; }\n    get type() { return BlockType.Text; }\n    static find(docView, pos) {\n        for (let i = 0, off = 0; i < docView.children.length; i++) {\n            let block = docView.children[i], end = off + block.length;\n            if (end >= pos) {\n                if (block instanceof LineView)\n                    return block;\n                if (end > pos)\n                    break;\n            }\n            off = end + block.breakAfter;\n        }\n        return null;\n    }\n}\nclass BlockWidgetView extends ContentView {\n    constructor(widget, length, type) {\n        super();\n        this.widget = widget;\n        this.length = length;\n        this.type = type;\n        this.breakAfter = 0;\n        this.prevWidget = null;\n    }\n    merge(from, to, source, _takeDeco, openStart, openEnd) {\n        if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||\n            from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))\n            return false;\n        this.length = from + (source ? source.length : 0) + (this.length - to);\n        return true;\n    }\n    domAtPos(pos) {\n        return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);\n    }\n    split(at) {\n        let len = this.length - at;\n        this.length = at;\n        let end = new BlockWidgetView(this.widget, len, this.type);\n        end.breakAfter = this.breakAfter;\n        return end;\n    }\n    get children() { return noChildren; }\n    sync(view) {\n        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {\n            if (this.dom && this.prevWidget)\n                this.prevWidget.destroy(this.dom);\n            this.prevWidget = null;\n            this.setDOM(this.widget.toDOM(view));\n            this.dom.contentEditable = \"false\";\n        }\n    }\n    get overrideDOMText() {\n        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;\n    }\n    domBoundsAround() { return null; }\n    become(other) {\n        if (other instanceof BlockWidgetView &&\n            other.widget.constructor == this.widget.constructor) {\n            if (!other.widget.compare(this.widget))\n                this.markDirty(true);\n            if (this.dom && !this.prevWidget)\n                this.prevWidget = this.widget;\n            this.widget = other.widget;\n            this.length = other.length;\n            this.type = other.type;\n            this.breakAfter = other.breakAfter;\n            return true;\n        }\n        return false;\n    }\n    ignoreMutation() { return true; }\n    ignoreEvent(event) { return this.widget.ignoreEvent(event); }\n    get isEditable() { return false; }\n    get isWidget() { return true; }\n    coordsAt(pos, side) {\n        return this.widget.coordsAt(this.dom, pos, side);\n    }\n    destroy() {\n        super.destroy();\n        if (this.dom)\n            this.widget.destroy(this.dom);\n    }\n}\n\nclass ContentBuilder {\n    constructor(doc, pos, end, disallowBlockEffectsFor) {\n        this.doc = doc;\n        this.pos = pos;\n        this.end = end;\n        this.disallowBlockEffectsFor = disallowBlockEffectsFor;\n        this.content = [];\n        this.curLine = null;\n        this.breakAtStart = 0;\n        this.pendingBuffer = 0 /* No */;\n        this.bufferMarks = [];\n        // Set to false directly after a widget that covers the position after it\n        this.atCursorPos = true;\n        this.openStart = -1;\n        this.openEnd = -1;\n        this.text = \"\";\n        this.textOff = 0;\n        this.cursor = doc.iter();\n        this.skip = pos;\n    }\n    posCovered() {\n        if (this.content.length == 0)\n            return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;\n        let last = this.content[this.content.length - 1];\n        return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);\n    }\n    getLine() {\n        if (!this.curLine) {\n            this.content.push(this.curLine = new LineView);\n            this.atCursorPos = true;\n        }\n        return this.curLine;\n    }\n    flushBuffer(active = this.bufferMarks) {\n        if (this.pendingBuffer) {\n            this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);\n            this.pendingBuffer = 0 /* No */;\n        }\n    }\n    addBlockWidget(view) {\n        this.flushBuffer();\n        this.curLine = null;\n        this.content.push(view);\n    }\n    finish(openEnd) {\n        if (this.pendingBuffer && openEnd <= this.bufferMarks.length)\n            this.flushBuffer();\n        else\n            this.pendingBuffer = 0 /* No */;\n        if (!this.posCovered())\n            this.getLine();\n    }\n    buildText(length, active, openStart) {\n        while (length > 0) {\n            if (this.textOff == this.text.length) {\n                let { value, lineBreak, done } = this.cursor.next(this.skip);\n                this.skip = 0;\n                if (done)\n                    throw new Error(\"Ran out of text content when drawing inline views\");\n                if (lineBreak) {\n                    if (!this.posCovered())\n                        this.getLine();\n                    if (this.content.length)\n                        this.content[this.content.length - 1].breakAfter = 1;\n                    else\n                        this.breakAtStart = 1;\n                    this.flushBuffer();\n                    this.curLine = null;\n                    this.atCursorPos = true;\n                    length--;\n                    continue;\n                }\n                else {\n                    this.text = value;\n                    this.textOff = 0;\n                }\n            }\n            let take = Math.min(this.text.length - this.textOff, length, 512 /* Chunk */);\n            this.flushBuffer(active.slice(active.length - openStart));\n            this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);\n            this.atCursorPos = true;\n            this.textOff += take;\n            length -= take;\n            openStart = 0;\n        }\n    }\n    span(from, to, active, openStart) {\n        this.buildText(to - from, active, openStart);\n        this.pos = to;\n        if (this.openStart < 0)\n            this.openStart = openStart;\n    }\n    point(from, to, deco, active, openStart, index) {\n        if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {\n            if (deco.block)\n                throw new RangeError(\"Block decorations may not be specified via plugins\");\n            if (to > this.doc.lineAt(this.pos).to)\n                throw new RangeError(\"Decorations that replace line breaks may not be specified via plugins\");\n        }\n        let len = to - from;\n        if (deco instanceof PointDecoration) {\n            if (deco.block) {\n                let { type } = deco;\n                if (type == BlockType.WidgetAfter && !this.posCovered())\n                    this.getLine();\n                this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget(\"div\"), len, type));\n            }\n            else {\n                let view = WidgetView.create(deco.widget || new NullWidget(\"span\"), len, len ? 0 : deco.startSide);\n                let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&\n                    (from < to || deco.startSide > 0);\n                let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);\n                let line = this.getLine();\n                if (this.pendingBuffer == 2 /* IfCursor */ && !cursorBefore && !view.isEditable)\n                    this.pendingBuffer = 0 /* No */;\n                this.flushBuffer(active);\n                if (cursorBefore) {\n                    line.append(wrapMarks(new WidgetBufferView(1), active), openStart);\n                    openStart = active.length + Math.max(0, openStart - active.length);\n                }\n                line.append(wrapMarks(view, active), openStart);\n                this.atCursorPos = cursorAfter;\n                this.pendingBuffer = !cursorAfter ? 0 /* No */ : from < to || openStart > active.length ? 1 /* Yes */ : 2 /* IfCursor */;\n                if (this.pendingBuffer)\n                    this.bufferMarks = active.slice();\n            }\n        }\n        else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration\n            this.getLine().addLineDeco(deco);\n        }\n        if (len) {\n            // Advance the iterator past the replaced content\n            if (this.textOff + len <= this.text.length) {\n                this.textOff += len;\n            }\n            else {\n                this.skip += len - (this.text.length - this.textOff);\n                this.text = \"\";\n                this.textOff = 0;\n            }\n            this.pos = to;\n        }\n        if (this.openStart < 0)\n            this.openStart = openStart;\n    }\n    static build(text, from, to, decorations, dynamicDecorationMap) {\n        let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);\n        builder.openEnd = RangeSet.spans(decorations, from, to, builder);\n        if (builder.openStart < 0)\n            builder.openStart = builder.openEnd;\n        builder.finish(builder.openEnd);\n        return builder;\n    }\n}\nfunction wrapMarks(view, active) {\n    for (let mark of active)\n        view = new MarkView(mark, [view], view.length);\n    return view;\n}\nclass NullWidget extends WidgetType {\n    constructor(tag) {\n        super();\n        this.tag = tag;\n    }\n    eq(other) { return other.tag == this.tag; }\n    toDOM() { return document.createElement(this.tag); }\n    updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }\n    get isHidden() { return true; }\n}\n\nconst clickAddsSelectionRange = /*@__PURE__*/Facet.define();\nconst dragMovesSelection$1 = /*@__PURE__*/Facet.define();\nconst mouseSelectionStyle = /*@__PURE__*/Facet.define();\nconst exceptionSink = /*@__PURE__*/Facet.define();\nconst updateListener = /*@__PURE__*/Facet.define();\nconst inputHandler = /*@__PURE__*/Facet.define();\nconst focusChangeEffect = /*@__PURE__*/Facet.define();\nconst perLineTextDirection = /*@__PURE__*/Facet.define({\n    combine: values => values.some(x => x)\n});\nconst nativeSelectionHidden = /*@__PURE__*/Facet.define({\n    combine: values => values.some(x => x)\n});\nclass ScrollTarget {\n    constructor(range, y = \"nearest\", x = \"nearest\", yMargin = 5, xMargin = 5) {\n        this.range = range;\n        this.y = y;\n        this.x = x;\n        this.yMargin = yMargin;\n        this.xMargin = xMargin;\n    }\n    map(changes) {\n        return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);\n    }\n}\nconst scrollIntoView = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });\n/**\nLog or report an unhandled exception in client code. Should\nprobably only be used by extension code that allows client code to\nprovide functions, and calls those functions in a context where an\nexception can't be propagated to calling code in a reasonable way\n(for example when in an event handler).\n\nEither calls a handler registered with\n[`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),\n`window.onerror`, if defined, or `console.error` (in which case\nit'll pass `context`, when given, as first argument).\n*/\nfunction logException(state, exception, context) {\n    let handler = state.facet(exceptionSink);\n    if (handler.length)\n        handler[0](exception);\n    else if (window.onerror)\n        window.onerror(String(exception), context, undefined, undefined, exception);\n    else if (context)\n        console.error(context + \":\", exception);\n    else\n        console.error(exception);\n}\nconst editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });\nlet nextPluginID = 0;\nconst viewPlugin = /*@__PURE__*/Facet.define();\n/**\nView plugins associate stateful values with a view. They can\ninfluence the way the content is drawn, and are notified of things\nthat happen in the view.\n*/\nclass ViewPlugin {\n    constructor(\n    /**\n    @internal\n    */\n    id, \n    /**\n    @internal\n    */\n    create, \n    /**\n    @internal\n    */\n    domEventHandlers, buildExtensions) {\n        this.id = id;\n        this.create = create;\n        this.domEventHandlers = domEventHandlers;\n        this.extension = buildExtensions(this);\n    }\n    /**\n    Define a plugin from a constructor function that creates the\n    plugin's value, given an editor view.\n    */\n    static define(create, spec) {\n        const { eventHandlers, provide, decorations: deco } = spec || {};\n        return new ViewPlugin(nextPluginID++, create, eventHandlers, plugin => {\n            let ext = [viewPlugin.of(plugin)];\n            if (deco)\n                ext.push(decorations.of(view => {\n                    let pluginInst = view.plugin(plugin);\n                    return pluginInst ? deco(pluginInst) : Decoration.none;\n                }));\n            if (provide)\n                ext.push(provide(plugin));\n            return ext;\n        });\n    }\n    /**\n    Create a plugin for a class whose constructor takes a single\n    editor view as argument.\n    */\n    static fromClass(cls, spec) {\n        return ViewPlugin.define(view => new cls(view), spec);\n    }\n}\nclass PluginInstance {\n    constructor(spec) {\n        this.spec = spec;\n        // When starting an update, all plugins have this field set to the\n        // update object, indicating they need to be updated. When finished\n        // updating, it is set to `false`. Retrieving a plugin that needs to\n        // be updated with `view.plugin` forces an eager update.\n        this.mustUpdate = null;\n        // This is null when the plugin is initially created, but\n        // initialized on the first update.\n        this.value = null;\n    }\n    update(view) {\n        if (!this.value) {\n            if (this.spec) {\n                try {\n                    this.value = this.spec.create(view);\n                }\n                catch (e) {\n                    logException(view.state, e, \"CodeMirror plugin crashed\");\n                    this.deactivate();\n                }\n            }\n        }\n        else if (this.mustUpdate) {\n            let update = this.mustUpdate;\n            this.mustUpdate = null;\n            if (this.value.update) {\n                try {\n                    this.value.update(update);\n                }\n                catch (e) {\n                    logException(update.state, e, \"CodeMirror plugin crashed\");\n                    if (this.value.destroy)\n                        try {\n                            this.value.destroy();\n                        }\n                        catch (_) { }\n                    this.deactivate();\n                }\n            }\n        }\n        return this;\n    }\n    destroy(view) {\n        var _a;\n        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {\n            try {\n                this.value.destroy();\n            }\n            catch (e) {\n                logException(view.state, e, \"CodeMirror plugin crashed\");\n            }\n        }\n    }\n    deactivate() {\n        this.spec = this.value = null;\n    }\n}\nconst editorAttributes = /*@__PURE__*/Facet.define();\nconst contentAttributes = /*@__PURE__*/Facet.define();\n// Provide decorations\nconst decorations = /*@__PURE__*/Facet.define();\nconst atomicRanges = /*@__PURE__*/Facet.define();\nconst scrollMargins = /*@__PURE__*/Facet.define();\nfunction getScrollMargins(view) {\n    let left = 0, right = 0, top = 0, bottom = 0;\n    for (let source of view.state.facet(scrollMargins)) {\n        let m = source(view);\n        if (m) {\n            if (m.left != null)\n                left = Math.max(left, m.left);\n            if (m.right != null)\n                right = Math.max(right, m.right);\n            if (m.top != null)\n                top = Math.max(top, m.top);\n            if (m.bottom != null)\n                bottom = Math.max(bottom, m.bottom);\n        }\n    }\n    return { left, right, top, bottom };\n}\nconst styleModule = /*@__PURE__*/Facet.define();\nclass ChangedRange {\n    constructor(fromA, toA, fromB, toB) {\n        this.fromA = fromA;\n        this.toA = toA;\n        this.fromB = fromB;\n        this.toB = toB;\n    }\n    join(other) {\n        return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));\n    }\n    addToSet(set) {\n        let i = set.length, me = this;\n        for (; i > 0; i--) {\n            let range = set[i - 1];\n            if (range.fromA > me.toA)\n                continue;\n            if (range.toA < me.fromA)\n                break;\n            me = me.join(range);\n            set.splice(i - 1, 1);\n        }\n        set.splice(i, 0, me);\n        return set;\n    }\n    static extendWithRanges(diff, ranges) {\n        if (ranges.length == 0)\n            return diff;\n        let result = [];\n        for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {\n            let next = dI == diff.length ? null : diff[dI], off = posA - posB;\n            let end = next ? next.fromB : 1e9;\n            while (rI < ranges.length && ranges[rI] < end) {\n                let from = ranges[rI], to = ranges[rI + 1];\n                let fromB = Math.max(posB, from), toB = Math.min(end, to);\n                if (fromB <= toB)\n                    new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);\n                if (to > end)\n                    break;\n                else\n                    rI += 2;\n            }\n            if (!next)\n                return result;\n            new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);\n            posA = next.toA;\n            posB = next.toB;\n        }\n    }\n}\n/**\nView [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this\nclass, which describe what happened, whenever the view is updated.\n*/\nclass ViewUpdate {\n    constructor(\n    /**\n    The editor view that the update is associated with.\n    */\n    view, \n    /**\n    The new editor state.\n    */\n    state, \n    /**\n    The transactions involved in the update. May be empty.\n    */\n    transactions) {\n        this.view = view;\n        this.state = state;\n        this.transactions = transactions;\n        /**\n        @internal\n        */\n        this.flags = 0;\n        this.startState = view.state;\n        this.changes = ChangeSet.empty(this.startState.doc.length);\n        for (let tr of transactions)\n            this.changes = this.changes.compose(tr.changes);\n        let changedRanges = [];\n        this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));\n        this.changedRanges = changedRanges;\n    }\n    /**\n    @internal\n    */\n    static create(view, state, transactions) {\n        return new ViewUpdate(view, state, transactions);\n    }\n    /**\n    Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or\n    [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this\n    update.\n    */\n    get viewportChanged() {\n        return (this.flags & 4 /* Viewport */) > 0;\n    }\n    /**\n    Indicates whether the height of a block element in the editor\n    changed in this update.\n    */\n    get heightChanged() {\n        return (this.flags & 2 /* Height */) > 0;\n    }\n    /**\n    Returns true when the document was modified or the size of the\n    editor, or elements within the editor, changed.\n    */\n    get geometryChanged() {\n        return this.docChanged || (this.flags & (8 /* Geometry */ | 2 /* Height */)) > 0;\n    }\n    /**\n    True when this update indicates a focus change.\n    */\n    get focusChanged() {\n        return (this.flags & 1 /* Focus */) > 0;\n    }\n    /**\n    Whether the document changed in this update.\n    */\n    get docChanged() {\n        return !this.changes.empty;\n    }\n    /**\n    Whether the selection was explicitly set in this update.\n    */\n    get selectionSet() {\n        return this.transactions.some(tr => tr.selection);\n    }\n    /**\n    @internal\n    */\n    get empty() { return this.flags == 0 && this.transactions.length == 0; }\n}\n\n/**\nUsed to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).\n*/\nvar Direction = /*@__PURE__*/(function (Direction) {\n    // (These are chosen to match the base levels, in bidi algorithm\n    // terms, of spans in that direction.)\n    /**\n    Left-to-right.\n    */\n    Direction[Direction[\"LTR\"] = 0] = \"LTR\";\n    /**\n    Right-to-left.\n    */\n    Direction[Direction[\"RTL\"] = 1] = \"RTL\";\nreturn Direction})(Direction || (Direction = {}));\nconst LTR = Direction.LTR, RTL = Direction.RTL;\n// Decode a string with each type encoded as log2(type)\nfunction dec(str) {\n    let result = [];\n    for (let i = 0; i < str.length; i++)\n        result.push(1 << +str[i]);\n    return result;\n}\n// Character types for codepoints 0 to 0xf8\nconst LowTypes = /*@__PURE__*/dec(\"88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008\");\n// Character types for codepoints 0x600 to 0x6f9\nconst ArabicTypes = /*@__PURE__*/dec(\"4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333\");\nconst Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];\n// There's a lot more in\n// https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,\n// which are left out to keep code size down.\nfor (let p of [\"()\", \"[]\", \"{}\"]) {\n    let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);\n    Brackets[l] = r;\n    Brackets[r] = -l;\n}\nfunction charType(ch) {\n    return ch <= 0xf7 ? LowTypes[ch] :\n        0x590 <= ch && ch <= 0x5f4 ? 2 /* R */ :\n            0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :\n                0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */ :\n                    0x2000 <= ch && ch <= 0x200b ? 256 /* NI */ :\n                        0xfb50 <= ch && ch <= 0xfdff ? 4 /* AL */ :\n                            ch == 0x200c ? 256 /* NI */ : 1 /* L */;\n}\nconst BidiRE = /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac\\ufb50-\\ufdff]/;\n/**\nRepresents a contiguous range of text that has a single direction\n(as in left-to-right or right-to-left).\n*/\nclass BidiSpan {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The start of the span (relative to the start of the line).\n    */\n    from, \n    /**\n    The end of the span.\n    */\n    to, \n    /**\n    The [\"bidi\n    level\"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)\n    of the span (in this context, 0 means\n    left-to-right, 1 means right-to-left, 2 means left-to-right\n    number inside right-to-left text).\n    */\n    level) {\n        this.from = from;\n        this.to = to;\n        this.level = level;\n    }\n    /**\n    The direction of this span.\n    */\n    get dir() { return this.level % 2 ? RTL : LTR; }\n    /**\n    @internal\n    */\n    side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }\n    /**\n    @internal\n    */\n    static find(order, index, level, assoc) {\n        let maybe = -1;\n        for (let i = 0; i < order.length; i++) {\n            let span = order[i];\n            if (span.from <= index && span.to >= index) {\n                if (span.level == level)\n                    return i;\n                // When multiple spans match, if assoc != 0, take the one that\n                // covers that side, otherwise take the one with the minimum\n                // level.\n                if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))\n                    maybe = i;\n            }\n        }\n        if (maybe < 0)\n            throw new RangeError(\"Index out of range\");\n        return maybe;\n    }\n}\n// Reused array of character types\nconst types = [];\nfunction computeOrder(line, direction) {\n    let len = line.length, outerType = direction == LTR ? 1 /* L */ : 2 /* R */, oppositeType = direction == LTR ? 2 /* R */ : 1 /* L */;\n    if (!line || outerType == 1 /* L */ && !BidiRE.test(line))\n        return trivialOrder(len);\n    // W1. Examine each non-spacing mark (NSM) in the level run, and\n    // change the type of the NSM to the type of the previous\n    // character. If the NSM is at the start of the level run, it will\n    // get the type of sor.\n    // W2. Search backwards from each instance of a European number\n    // until the first strong type (R, L, AL, or sor) is found. If an\n    // AL is found, change the type of the European number to Arabic\n    // number.\n    // W3. Change all ALs to R.\n    // (Left after this: L, R, EN, AN, ET, CS, NI)\n    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {\n        let type = charType(line.charCodeAt(i));\n        if (type == 512 /* NSM */)\n            type = prev;\n        else if (type == 8 /* EN */ && prevStrong == 4 /* AL */)\n            type = 16 /* AN */;\n        types[i] = type == 4 /* AL */ ? 2 /* R */ : type;\n        if (type & 7 /* Strong */)\n            prevStrong = type;\n        prev = type;\n    }\n    // W5. A sequence of European terminators adjacent to European\n    // numbers changes to all European numbers.\n    // W6. Otherwise, separators and terminators change to Other\n    // Neutral.\n    // W7. Search backwards from each instance of a European number\n    // until the first strong type (R, L, or sor) is found. If an L is\n    // found, then change the type of the European number to L.\n    // (Left after this: L, R, EN+AN, NI)\n    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {\n        let type = types[i];\n        if (type == 128 /* CS */) {\n            if (i < len - 1 && prev == types[i + 1] && (prev & 24 /* Num */))\n                type = types[i] = prev;\n            else\n                types[i] = 256 /* NI */;\n        }\n        else if (type == 64 /* ET */) {\n            let end = i + 1;\n            while (end < len && types[end] == 64 /* ET */)\n                end++;\n            let replace = (i && prev == 8 /* EN */) || (end < len && types[end] == 8 /* EN */) ? (prevStrong == 1 /* L */ ? 1 /* L */ : 8 /* EN */) : 256 /* NI */;\n            for (let j = i; j < end; j++)\n                types[j] = replace;\n            i = end - 1;\n        }\n        else if (type == 8 /* EN */ && prevStrong == 1 /* L */) {\n            types[i] = 1 /* L */;\n        }\n        prev = type;\n        if (type & 7 /* Strong */)\n            prevStrong = type;\n    }\n    // N0. Process bracket pairs in an isolating run sequence\n    // sequentially in the logical order of the text positions of the\n    // opening paired brackets using the logic given below. Within this\n    // scope, bidirectional types EN and AN are treated as R.\n    for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {\n        // Keeps [startIndex, type, strongSeen] triples for each open\n        // bracket on BracketStack.\n        if (br = Brackets[ch = line.charCodeAt(i)]) {\n            if (br < 0) { // Closing bracket\n                for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {\n                    if (BracketStack[sJ + 1] == -br) {\n                        let flags = BracketStack[sJ + 2];\n                        let type = (flags & 2 /* EmbedInside */) ? outerType :\n                            !(flags & 4 /* OppositeInside */) ? 0 :\n                                (flags & 1 /* OppositeBefore */) ? oppositeType : outerType;\n                        if (type)\n                            types[i] = types[BracketStack[sJ]] = type;\n                        sI = sJ;\n                        break;\n                    }\n                }\n            }\n            else if (BracketStack.length == 189 /* MaxDepth */) {\n                break;\n            }\n            else {\n                BracketStack[sI++] = i;\n                BracketStack[sI++] = ch;\n                BracketStack[sI++] = context;\n            }\n        }\n        else if ((type = types[i]) == 2 /* R */ || type == 1 /* L */) {\n            let embed = type == outerType;\n            context = embed ? 0 : 1 /* OppositeBefore */;\n            for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {\n                let cur = BracketStack[sJ + 2];\n                if (cur & 2 /* EmbedInside */)\n                    break;\n                if (embed) {\n                    BracketStack[sJ + 2] |= 2 /* EmbedInside */;\n                }\n                else {\n                    if (cur & 4 /* OppositeInside */)\n                        break;\n                    BracketStack[sJ + 2] |= 4 /* OppositeInside */;\n                }\n            }\n        }\n    }\n    // N1. A sequence of neutrals takes the direction of the\n    // surrounding strong text if the text on both sides has the same\n    // direction. European and Arabic numbers act as if they were R in\n    // terms of their influence on neutrals. Start-of-level-run (sor)\n    // and end-of-level-run (eor) are used at level run boundaries.\n    // N2. Any remaining neutrals take the embedding direction.\n    // (Left after this: L, R, EN+AN)\n    for (let i = 0; i < len; i++) {\n        if (types[i] == 256 /* NI */) {\n            let end = i + 1;\n            while (end < len && types[end] == 256 /* NI */)\n                end++;\n            let beforeL = (i ? types[i - 1] : outerType) == 1 /* L */;\n            let afterL = (end < len ? types[end] : outerType) == 1 /* L */;\n            let replace = beforeL == afterL ? (beforeL ? 1 /* L */ : 2 /* R */) : outerType;\n            for (let j = i; j < end; j++)\n                types[j] = replace;\n            i = end - 1;\n        }\n    }\n    // Here we depart from the documented algorithm, in order to avoid\n    // building up an actual levels array. Since there are only three\n    // levels (0, 1, 2) in an implementation that doesn't take\n    // explicit embedding into account, we can build up the order on\n    // the fly, without following the level-based algorithm.\n    let order = [];\n    if (outerType == 1 /* L */) {\n        for (let i = 0; i < len;) {\n            let start = i, rtl = types[i++] != 1 /* L */;\n            while (i < len && rtl == (types[i] != 1 /* L */))\n                i++;\n            if (rtl) {\n                for (let j = i; j > start;) {\n                    let end = j, l = types[--j] != 2 /* R */;\n                    while (j > start && l == (types[j - 1] != 2 /* R */))\n                        j--;\n                    order.push(new BidiSpan(j, end, l ? 2 : 1));\n                }\n            }\n            else {\n                order.push(new BidiSpan(start, i, 0));\n            }\n        }\n    }\n    else {\n        for (let i = 0; i < len;) {\n            let start = i, rtl = types[i++] == 2 /* R */;\n            while (i < len && rtl == (types[i] == 2 /* R */))\n                i++;\n            order.push(new BidiSpan(start, i, rtl ? 1 : 2));\n        }\n    }\n    return order;\n}\nfunction trivialOrder(length) {\n    return [new BidiSpan(0, length, 0)];\n}\nlet movedOver = \"\";\nfunction moveVisually(line, order, dir, start, forward) {\n    var _a;\n    let startIndex = start.head - line.from, spanI = -1;\n    if (startIndex == 0) {\n        if (!forward || !line.length)\n            return null;\n        if (order[0].level != dir) {\n            startIndex = order[0].side(false, dir);\n            spanI = 0;\n        }\n    }\n    else if (startIndex == line.length) {\n        if (forward)\n            return null;\n        let last = order[order.length - 1];\n        if (last.level != dir) {\n            startIndex = last.side(true, dir);\n            spanI = order.length - 1;\n        }\n    }\n    if (spanI < 0)\n        spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);\n    let span = order[spanI];\n    // End of span. (But not end of line--that was checked for above.)\n    if (startIndex == span.side(forward, dir)) {\n        span = order[spanI += forward ? 1 : -1];\n        startIndex = span.side(!forward, dir);\n    }\n    let indexForward = forward == (span.dir == dir);\n    let nextIndex = findClusterBreak(line.text, startIndex, indexForward);\n    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));\n    if (nextIndex != span.side(forward, dir))\n        return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);\n    let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];\n    if (!nextSpan && span.level != dir)\n        return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);\n    if (nextSpan && nextSpan.level < span.level)\n        return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);\n    return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);\n}\n\nclass DocView extends ContentView {\n    constructor(view) {\n        super();\n        this.view = view;\n        this.decorations = [];\n        this.dynamicDecorationMap = [];\n        this.hasComposition = null;\n        this.markedForComposition = new Set;\n        // Track a minimum width for the editor. When measuring sizes in\n        // measureVisibleLineHeights, this is updated to point at the width\n        // of a given element and its extent in the document. When a change\n        // happens in that range, these are reset. That way, once we've seen\n        // a line/element of a given length, we keep the editor wide enough\n        // to fit at least that element, until it is changed, at which point\n        // we forget it again.\n        this.minWidth = 0;\n        this.minWidthFrom = 0;\n        this.minWidthTo = 0;\n        // Track whether the DOM selection was set in a lossy way, so that\n        // we don't mess it up when reading it back it\n        this.impreciseAnchor = null;\n        this.impreciseHead = null;\n        this.forceSelection = false;\n        // Used by the resize observer to ignore resizes that we caused\n        // ourselves\n        this.lastUpdate = Date.now();\n        this.setDOM(view.contentDOM);\n        this.children = [new LineView];\n        this.children[0].setParent(this);\n        this.updateDeco();\n        this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);\n    }\n    get length() { return this.view.state.doc.length; }\n    // Update the document view to a given state.\n    update(update) {\n        let changedRanges = update.changedRanges;\n        if (this.minWidth > 0 && changedRanges.length) {\n            if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {\n                this.minWidth = this.minWidthFrom = this.minWidthTo = 0;\n            }\n            else {\n                this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);\n                this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);\n            }\n        }\n        let composition = this.view.inputState.composing < 0 ? null : findCompositionRange(this.view, update.changes);\n        if (this.hasComposition) {\n            this.markedForComposition.clear();\n            let { from, to } = this.hasComposition;\n            changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1))\n                .addToSet(changedRanges.slice());\n        }\n        this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;\n        // When the DOM nodes around the selection are moved to another\n        // parent, Chrome sometimes reports a different selection through\n        // getSelection than the one that it actually shows to the user.\n        // This forces a selection update when lines are joined to work\n        // around that. Issue #54\n        if ((browser.ie || browser.chrome) && !composition && update &&\n            update.state.doc.lines != update.startState.doc.lines)\n            this.forceSelection = true;\n        let prevDeco = this.decorations, deco = this.updateDeco();\n        let decoDiff = findChangedDeco(prevDeco, deco, update.changes);\n        changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);\n        if (!(this.flags & 7 /* Dirty */) && changedRanges.length == 0) {\n            return false;\n        }\n        else {\n            this.updateInner(changedRanges, update.startState.doc.length, composition);\n            if (update.transactions.length)\n                this.lastUpdate = Date.now();\n            return true;\n        }\n    }\n    // Used by update and the constructor do perform the actual DOM\n    // update\n    updateInner(changes, oldLength, composition) {\n        this.view.viewState.mustMeasureContent = true;\n        this.updateChildren(changes, oldLength, composition);\n        let { observer } = this.view;\n        observer.ignore(() => {\n            // Lock the height during redrawing, since Chrome sometimes\n            // messes with the scroll position during DOM mutation (though\n            // no relayout is triggered and I cannot imagine how it can\n            // recompute the scroll position without a layout)\n            this.dom.style.height = this.view.viewState.contentHeight + \"px\";\n            this.dom.style.flexBasis = this.minWidth ? this.minWidth + \"px\" : \"\";\n            // Chrome will sometimes, when DOM mutations occur directly\n            // around the selection, get confused and report a different\n            // selection from the one it displays (issue #218). This tries\n            // to detect that situation.\n            let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;\n            this.sync(this.view, track);\n            this.flags &= ~7 /* Dirty */;\n            if (track && (track.written || observer.selectionRange.focusNode != track.node))\n                this.forceSelection = true;\n            this.dom.style.height = \"\";\n        });\n        this.markedForComposition.forEach(cView => cView.flags &= ~8 /* Composition */);\n        let gaps = [];\n        if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)\n            for (let child of this.children)\n                if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)\n                    gaps.push(child.dom);\n        observer.updateGaps(gaps);\n    }\n    updateChildren(changes, oldLength, composition) {\n        let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;\n        let cursor = this.childCursor(oldLength);\n        for (let i = ranges.length - 1;; i--) {\n            let next = i >= 0 ? ranges[i] : null;\n            if (!next)\n                break;\n            let { fromA, toA, fromB, toB } = next, content, breakAtStart, openStart, openEnd;\n            if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {\n                let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);\n                let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);\n                breakAtStart = before.breakAtStart;\n                openStart = before.openStart;\n                openEnd = after.openEnd;\n                let compLine = this.compositionView(composition);\n                if (after.breakAtStart) {\n                    compLine.breakAfter = 1;\n                }\n                else if (after.content.length &&\n                    compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {\n                    compLine.breakAfter = after.content[0].breakAfter;\n                    after.content.shift();\n                }\n                if (before.content.length &&\n                    compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {\n                    before.content.pop();\n                }\n                content = before.content.concat(compLine).concat(after.content);\n            }\n            else {\n                ({ content, breakAtStart, openStart, openEnd } =\n                    ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));\n            }\n            let { i: toI, off: toOff } = cursor.findPos(toA, 1);\n            let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);\n            replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);\n        }\n        if (composition)\n            this.fixCompositionDOM(composition);\n    }\n    compositionView(composition) {\n        let cur = new TextView(composition.text.nodeValue);\n        cur.flags |= 8 /* Composition */;\n        for (let { deco } of composition.marks)\n            cur = new MarkView(deco, [cur], cur.length);\n        let line = new LineView;\n        line.append(cur, 0);\n        return line;\n    }\n    fixCompositionDOM(composition) {\n        let fix = (dom, cView) => {\n            cView.flags |= 8 /* Composition */;\n            this.markedForComposition.add(cView);\n            let prev = ContentView.get(dom);\n            if (prev != cView) {\n                if (prev)\n                    prev.dom = null;\n                cView.setDOM(dom);\n            }\n        };\n        let pos = this.childPos(composition.range.fromB, 1);\n        let cView = this.children[pos.i];\n        fix(composition.line, cView);\n        for (let i = composition.marks.length - 1; i >= -1; i--) {\n            pos = cView.childPos(pos.off, 1);\n            cView = cView.children[pos.i];\n            fix(i >= 0 ? composition.marks[i].node : composition.text, cView);\n        }\n    }\n    // Sync the DOM selection to this.state.selection\n    updateSelection(mustRead = false, fromPointer = false) {\n        if (mustRead || !this.view.observer.selectionRange.focusNode)\n            this.view.observer.readSelectionRange();\n        let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;\n        let selectionNotFocus = !focused &&\n            hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));\n        if (!(focused || fromPointer || selectionNotFocus))\n            return;\n        let force = this.forceSelection;\n        this.forceSelection = false;\n        let main = this.view.state.selection.main;\n        // FIXME need to handle the case where the selection falls inside a block range\n        let anchor = this.domAtPos(main.anchor);\n        let head = main.empty ? anchor : this.domAtPos(main.head);\n        // Always reset on Firefox when next to an uneditable node to\n        // avoid invisible cursor bugs (#111)\n        if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {\n            let dummy = document.createTextNode(\"\");\n            this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));\n            anchor = head = new DOMPos(dummy, 0);\n            force = true;\n        }\n        let domSel = this.view.observer.selectionRange;\n        // If the selection is already here, or in an equivalent position, don't touch it\n        if (force || !domSel.focusNode ||\n            !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||\n            !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {\n            this.view.observer.ignore(() => {\n                // Chrome Android will hide the virtual keyboard when tapping\n                // inside an uneditable node, and not bring it back when we\n                // move the cursor to its proper position. This tries to\n                // restore the keyboard by cycling focus.\n                if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&\n                    inUneditable(domSel.focusNode, this.dom)) {\n                    this.dom.blur();\n                    this.dom.focus({ preventScroll: true });\n                }\n                let rawSel = getSelection(this.view.root);\n                if (!rawSel) ;\n                else if (main.empty) {\n                    // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076\n                    if (browser.gecko) {\n                        let nextTo = nextToUneditable(anchor.node, anchor.offset);\n                        if (nextTo && nextTo != (1 /* Before */ | 2 /* After */)) {\n                            let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* Before */ ? 1 : -1);\n                            if (text)\n                                anchor = new DOMPos(text, nextTo == 1 /* Before */ ? 0 : text.nodeValue.length);\n                        }\n                    }\n                    rawSel.collapse(anchor.node, anchor.offset);\n                    if (main.bidiLevel != null && domSel.cursorBidiLevel != null)\n                        domSel.cursorBidiLevel = main.bidiLevel;\n                }\n                else if (rawSel.extend) {\n                    // Selection.extend can be used to create an 'inverted' selection\n                    // (one where the focus is before the anchor), but not all\n                    // browsers support it yet.\n                    rawSel.collapse(anchor.node, anchor.offset);\n                    // Safari will ignore the call above when the editor is\n                    // hidden, and then raise an error on the call to extend\n                    // (#940).\n                    try {\n                        rawSel.extend(head.node, head.offset);\n                    }\n                    catch (_) { }\n                }\n                else {\n                    // Primitive (IE) way\n                    let range = document.createRange();\n                    if (main.anchor > main.head)\n                        [anchor, head] = [head, anchor];\n                    range.setEnd(head.node, head.offset);\n                    range.setStart(anchor.node, anchor.offset);\n                    rawSel.removeAllRanges();\n                    rawSel.addRange(range);\n                }\n                if (selectionNotFocus && this.view.root.activeElement == this.dom) {\n                    this.dom.blur();\n                    if (activeElt)\n                        activeElt.focus();\n                }\n            });\n            this.view.observer.setSelectionRange(anchor, head);\n        }\n        this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);\n        this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);\n    }\n    enforceCursorAssoc() {\n        if (this.hasComposition)\n            return;\n        let { view } = this, cursor = view.state.selection.main;\n        let sel = getSelection(view.root);\n        let { anchorNode, anchorOffset } = view.observer.selectionRange;\n        if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)\n            return;\n        let line = LineView.find(this, cursor.head);\n        if (!line)\n            return;\n        let lineStart = line.posAtStart;\n        if (cursor.head == lineStart || cursor.head == lineStart + line.length)\n            return;\n        let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);\n        if (!before || !after || before.bottom > after.top)\n            return;\n        let dom = this.domAtPos(cursor.head + cursor.assoc);\n        sel.collapse(dom.node, dom.offset);\n        sel.modify(\"move\", cursor.assoc < 0 ? \"forward\" : \"backward\", \"lineboundary\");\n        // This can go wrong in corner cases like single-character lines,\n        // so check and reset if necessary.\n        view.observer.readSelectionRange();\n        let newRange = view.observer.selectionRange;\n        if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)\n            sel.collapse(anchorNode, anchorOffset);\n    }\n    nearest(dom) {\n        for (let cur = dom; cur;) {\n            let domView = ContentView.get(cur);\n            if (domView && domView.rootView == this)\n                return domView;\n            cur = cur.parentNode;\n        }\n        return null;\n    }\n    posFromDOM(node, offset) {\n        let view = this.nearest(node);\n        if (!view)\n            throw new RangeError(\"Trying to find position for a DOM position outside of the document\");\n        return view.localPosFromDOM(node, offset) + view.posAtStart;\n    }\n    domAtPos(pos) {\n        let { i, off } = this.childCursor().findPos(pos, -1);\n        for (; i < this.children.length - 1;) {\n            let child = this.children[i];\n            if (off < child.length || child instanceof LineView)\n                break;\n            i++;\n            off = 0;\n        }\n        return this.children[i].domAtPos(off);\n    }\n    coordsAt(pos, side) {\n        for (let off = this.length, i = this.children.length - 1;; i--) {\n            let child = this.children[i], start = off - child.breakAfter - child.length;\n            if (pos > start ||\n                (pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter &&\n                    (!i || side == 2 || this.children[i - 1].breakAfter ||\n                        (this.children[i - 1].type == BlockType.WidgetBefore && side > -2))))\n                return child.coordsAt(pos - start, side);\n            off = start;\n        }\n    }\n    coordsForChar(pos) {\n        let { i, off } = this.childPos(pos, 1), child = this.children[i];\n        if (!(child instanceof LineView))\n            return null;\n        while (child.children.length) {\n            let { i, off: childOff } = child.childPos(off, 1);\n            for (;; i++) {\n                if (i == child.children.length)\n                    return null;\n                if ((child = child.children[i]).length)\n                    break;\n            }\n            off = childOff;\n        }\n        if (!(child instanceof TextView))\n            return null;\n        let end = findClusterBreak(child.text, off);\n        if (end == off)\n            return null;\n        let rects = textRange(child.dom, off, end).getClientRects();\n        return !rects.length || rects[0].top >= rects[0].bottom ? null : rects[0];\n    }\n    measureVisibleLineHeights(viewport) {\n        let result = [], { from, to } = viewport;\n        let contentWidth = this.view.contentDOM.clientWidth;\n        let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;\n        let widest = -1, ltr = this.view.textDirection == Direction.LTR;\n        for (let pos = 0, i = 0; i < this.children.length; i++) {\n            let child = this.children[i], end = pos + child.length;\n            if (end > to)\n                break;\n            if (pos >= from) {\n                let childRect = child.dom.getBoundingClientRect();\n                result.push(childRect.height);\n                if (isWider) {\n                    let last = child.dom.lastChild;\n                    let rects = last ? clientRectsFor(last) : [];\n                    if (rects.length) {\n                        let rect = rects[rects.length - 1];\n                        let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;\n                        if (width > widest) {\n                            widest = width;\n                            this.minWidth = contentWidth;\n                            this.minWidthFrom = pos;\n                            this.minWidthTo = end;\n                        }\n                    }\n                }\n            }\n            pos = end + child.breakAfter;\n        }\n        return result;\n    }\n    textDirectionAt(pos) {\n        let { i } = this.childPos(pos, 1);\n        return getComputedStyle(this.children[i].dom).direction == \"rtl\" ? Direction.RTL : Direction.LTR;\n    }\n    measureTextSize() {\n        for (let child of this.children) {\n            if (child instanceof LineView) {\n                let measure = child.measureTextSize();\n                if (measure)\n                    return measure;\n            }\n        }\n        // If no workable line exists, force a layout of a measurable element\n        let dummy = document.createElement(\"div\"), lineHeight, charWidth, textHeight;\n        dummy.className = \"cm-line\";\n        dummy.style.width = \"99999px\";\n        dummy.style.position = \"absolute\";\n        dummy.textContent = \"abc def ghi jkl mno pqr stu\";\n        this.view.observer.ignore(() => {\n            this.dom.appendChild(dummy);\n            let rect = clientRectsFor(dummy.firstChild)[0];\n            lineHeight = dummy.getBoundingClientRect().height;\n            charWidth = rect ? rect.width / 27 : 7;\n            textHeight = rect ? rect.height : lineHeight;\n            dummy.remove();\n        });\n        return { lineHeight, charWidth, textHeight };\n    }\n    childCursor(pos = this.length) {\n        // Move back to start of last element when possible, so that\n        // `ChildCursor.findPos` doesn't have to deal with the edge case\n        // of being after the last element.\n        let i = this.children.length;\n        if (i)\n            pos -= this.children[--i].length;\n        return new ChildCursor(this.children, pos, i);\n    }\n    computeBlockGapDeco() {\n        let deco = [], vs = this.view.viewState;\n        for (let pos = 0, i = 0;; i++) {\n            let next = i == vs.viewports.length ? null : vs.viewports[i];\n            let end = next ? next.from - 1 : this.length;\n            if (end > pos) {\n                let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;\n                deco.push(Decoration.replace({\n                    widget: new BlockGapWidget(height),\n                    block: true,\n                    inclusive: true,\n                    isBlockGap: true,\n                }).range(pos, end));\n            }\n            if (!next)\n                break;\n            pos = next.to + 1;\n        }\n        return Decoration.set(deco);\n    }\n    updateDeco() {\n        let allDeco = this.view.state.facet(decorations).map((d, i) => {\n            let dynamic = this.dynamicDecorationMap[i] = typeof d == \"function\";\n            return dynamic ? d(this.view) : d;\n        });\n        for (let i = allDeco.length; i < allDeco.length + 3; i++)\n            this.dynamicDecorationMap[i] = false;\n        return this.decorations = [\n            ...allDeco,\n            this.computeBlockGapDeco(),\n            this.view.viewState.lineGapDeco\n        ];\n    }\n    scrollIntoView(target) {\n        let { range } = target;\n        let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;\n        if (!rect)\n            return;\n        if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))\n            rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),\n                right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };\n        let margins = getScrollMargins(this.view);\n        let targetRect = {\n            left: rect.left - margins.left, top: rect.top - margins.top,\n            right: rect.right + margins.right, bottom: rect.bottom + margins.bottom\n        };\n        scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);\n    }\n}\nfunction betweenUneditable(pos) {\n    return pos.node.nodeType == 1 && pos.node.firstChild &&\n        (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == \"false\") &&\n        (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == \"false\");\n}\nclass BlockGapWidget extends WidgetType {\n    constructor(height) {\n        super();\n        this.height = height;\n    }\n    toDOM() {\n        let elt = document.createElement(\"div\");\n        this.updateDOM(elt);\n        return elt;\n    }\n    eq(other) { return other.height == this.height; }\n    updateDOM(elt) {\n        elt.style.height = this.height + \"px\";\n        return true;\n    }\n    get estimatedHeight() { return this.height; }\n}\nfunction findCompositionNode(view) {\n    let sel = view.observer.selectionRange;\n    let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);\n    if (!textNode)\n        return null;\n    let cView = ContentView.get(textNode);\n    let from, to;\n    if (cView instanceof TextView) {\n        from = cView.posAtStart;\n        to = from + cView.length;\n    }\n    else {\n        up: for (let offset = 0, node = textNode;;) {\n            for (let sibling = node.previousSibling, cView; sibling; sibling = sibling.previousSibling) {\n                if (cView = ContentView.get(sibling)) {\n                    from = to = cView.posAtEnd + offset;\n                    break up;\n                }\n                let reader = new DOMReader([], view.state);\n                reader.readNode(sibling);\n                if (reader.text.indexOf(LineBreakPlaceholder) > -1)\n                    return null;\n                offset += reader.text.length;\n            }\n            node = node.parentNode;\n            if (!node)\n                return null;\n            let parentView = ContentView.get(node);\n            if (parentView) {\n                from = to = parentView.posAtStart + offset;\n                break;\n            }\n        }\n    }\n    return { from, to, node: textNode };\n}\nfunction findCompositionRange(view, changes) {\n    let found = findCompositionNode(view);\n    if (!found)\n        return null;\n    let { from: fromA, to: toA, node: textNode } = found;\n    let fromB = changes.mapPos(fromA, -1), toB = changes.mapPos(toA, 1);\n    let text = textNode.nodeValue;\n    // Don't try to preserve multi-line compositions\n    if (/[\\n\\r]/.test(text))\n        return null;\n    if (toB - fromB != text.length) {\n        // If there is a length mismatch, see if mapping non-inclusively helps\n        let fromB2 = changes.mapPos(fromA, 1), toB2 = changes.mapPos(toA, -1);\n        if (toB2 - fromB2 == text.length)\n            fromB = fromB2, toB = toB2;\n        // See if we can find an instance of the text at either side\n        else if (view.state.doc.sliceString(toB - text.length, toB) == text)\n            fromB = toB - text.length;\n        else if (view.state.doc.sliceString(fromB, fromB + text.length) == text)\n            toB = fromB + text.length;\n        // Not found\n        else\n            return null;\n    }\n    let { main } = view.state.selection;\n    if (view.state.doc.sliceString(fromB, toB) != text || fromB > main.head || toB < main.head)\n        return null;\n    let marks = [];\n    let range = new ChangedRange(fromA, toA, fromB, toB);\n    for (let parent = textNode.parentNode;; parent = parent.parentNode) {\n        let parentView = ContentView.get(parent);\n        if (parentView instanceof MarkView)\n            marks.push({ node: parent, deco: parentView.mark });\n        else if (parentView instanceof LineView || parent.nodeName == \"DIV\" && parent.parentNode == view.contentDOM)\n            return { range, text: textNode, marks, line: parent };\n        else if (parent != view.contentDOM)\n            marks.push({ node: parent, deco: new MarkDecoration({\n                    inclusive: true,\n                    attributes: getAttrs(parent),\n                    tagName: parent.tagName.toLowerCase()\n                }) });\n        else\n            return null;\n    }\n}\nfunction nearbyTextNode(startNode, startOffset, side) {\n    if (side <= 0)\n        for (let node = startNode, offset = startOffset;;) {\n            if (node.nodeType == 3)\n                return node;\n            if (node.nodeType == 1 && offset > 0) {\n                node = node.childNodes[offset - 1];\n                offset = maxOffset(node);\n            }\n            else {\n                break;\n            }\n        }\n    if (side >= 0)\n        for (let node = startNode, offset = startOffset;;) {\n            if (node.nodeType == 3)\n                return node;\n            if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {\n                node = node.childNodes[offset];\n                offset = 0;\n            }\n            else {\n                break;\n            }\n        }\n    return null;\n}\nfunction nextToUneditable(node, offset) {\n    if (node.nodeType != 1)\n        return 0;\n    return (offset && node.childNodes[offset - 1].contentEditable == \"false\" ? 1 /* Before */ : 0) |\n        (offset < node.childNodes.length && node.childNodes[offset].contentEditable == \"false\" ? 2 /* After */ : 0);\n}\nclass DecorationComparator$1 {\n    constructor() {\n        this.changes = [];\n    }\n    compareRange(from, to) { addRange(from, to, this.changes); }\n    comparePoint(from, to) { addRange(from, to, this.changes); }\n}\nfunction findChangedDeco(a, b, diff) {\n    let comp = new DecorationComparator$1;\n    RangeSet.compare(a, b, diff, comp);\n    return comp.changes;\n}\nfunction inUneditable(node, inside) {\n    for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {\n        if (cur.nodeType == 1 && cur.contentEditable == 'false') {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction groupAt(state, pos, bias = 1) {\n    let categorize = state.charCategorizer(pos);\n    let line = state.doc.lineAt(pos), linePos = pos - line.from;\n    if (line.length == 0)\n        return EditorSelection.cursor(pos);\n    if (linePos == 0)\n        bias = 1;\n    else if (linePos == line.length)\n        bias = -1;\n    let from = linePos, to = linePos;\n    if (bias < 0)\n        from = findClusterBreak(line.text, linePos, false);\n    else\n        to = findClusterBreak(line.text, linePos);\n    let cat = categorize(line.text.slice(from, to));\n    while (from > 0) {\n        let prev = findClusterBreak(line.text, from, false);\n        if (categorize(line.text.slice(prev, from)) != cat)\n            break;\n        from = prev;\n    }\n    while (to < line.length) {\n        let next = findClusterBreak(line.text, to);\n        if (categorize(line.text.slice(to, next)) != cat)\n            break;\n        to = next;\n    }\n    return EditorSelection.range(from + line.from, to + line.from);\n}\n// Search the DOM for the {node, offset} position closest to the given\n// coordinates. Very inefficient and crude, but can usually be avoided\n// by calling caret(Position|Range)FromPoint instead.\nfunction getdx(x, rect) {\n    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);\n}\nfunction getdy(y, rect) {\n    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);\n}\nfunction yOverlap(a, b) {\n    return a.top < b.bottom - 1 && a.bottom > b.top + 1;\n}\nfunction upTop(rect, top) {\n    return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;\n}\nfunction upBot(rect, bottom) {\n    return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;\n}\nfunction domPosAtCoords(parent, x, y) {\n    let closest, closestRect, closestX, closestY, closestOverlap = false;\n    let above, below, aboveRect, belowRect;\n    for (let child = parent.firstChild; child; child = child.nextSibling) {\n        let rects = clientRectsFor(child);\n        for (let i = 0; i < rects.length; i++) {\n            let rect = rects[i];\n            if (closestRect && yOverlap(closestRect, rect))\n                rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);\n            let dx = getdx(x, rect), dy = getdy(y, rect);\n            if (dx == 0 && dy == 0)\n                return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);\n            if (!closest || closestY > dy || closestY == dy && closestX > dx) {\n                closest = child;\n                closestRect = rect;\n                closestX = dx;\n                closestY = dy;\n                let side = dy ? (y < rect.top ? -1 : 1) : dx ? (x < rect.left ? -1 : 1) : 0;\n                closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);\n            }\n            if (dx == 0) {\n                if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {\n                    above = child;\n                    aboveRect = rect;\n                }\n                else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {\n                    below = child;\n                    belowRect = rect;\n                }\n            }\n            else if (aboveRect && yOverlap(aboveRect, rect)) {\n                aboveRect = upBot(aboveRect, rect.bottom);\n            }\n            else if (belowRect && yOverlap(belowRect, rect)) {\n                belowRect = upTop(belowRect, rect.top);\n            }\n        }\n    }\n    if (aboveRect && aboveRect.bottom >= y) {\n        closest = above;\n        closestRect = aboveRect;\n    }\n    else if (belowRect && belowRect.top <= y) {\n        closest = below;\n        closestRect = belowRect;\n    }\n    if (!closest)\n        return { node: parent, offset: 0 };\n    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));\n    if (closest.nodeType == 3)\n        return domPosInText(closest, clipX, y);\n    if (closestOverlap && closest.contentEditable != \"false\")\n        return domPosAtCoords(closest, clipX, y);\n    let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +\n        (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);\n    return { node: parent, offset };\n}\nfunction domPosInText(node, x, y) {\n    let len = node.nodeValue.length;\n    let closestOffset = -1, closestDY = 1e9, generalSide = 0;\n    for (let i = 0; i < len; i++) {\n        let rects = textRange(node, i, i + 1).getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n            let rect = rects[j];\n            if (rect.top == rect.bottom)\n                continue;\n            if (!generalSide)\n                generalSide = x - rect.left;\n            let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;\n            if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {\n                let right = x >= (rect.left + rect.right) / 2, after = right;\n                if (browser.chrome || browser.gecko) {\n                    // Check for RTL on browsers that support getting client\n                    // rects for empty ranges.\n                    let rectBefore = textRange(node, i).getBoundingClientRect();\n                    if (rectBefore.left == rect.right)\n                        after = !right;\n                }\n                if (dy <= 0)\n                    return { node, offset: i + (after ? 1 : 0) };\n                closestOffset = i + (after ? 1 : 0);\n                closestDY = dy;\n            }\n        }\n    }\n    return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };\n}\nfunction posAtCoords(view, coords, precise, bias = -1) {\n    var _a, _b;\n    let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;\n    let block, { docHeight } = view.viewState;\n    let { x, y } = coords, yOffset = y - docTop;\n    if (yOffset < 0)\n        return 0;\n    if (yOffset > docHeight)\n        return view.state.doc.length;\n    // Scan for a text block near the queried y position\n    for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {\n        block = view.elementAtHeight(yOffset);\n        if (block.type == BlockType.Text)\n            break;\n        for (;;) {\n            // Move the y position out of this block\n            yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;\n            if (yOffset >= 0 && yOffset <= docHeight)\n                break;\n            // If the document consists entirely of replaced widgets, we\n            // won't find a text block, so return 0\n            if (bounced)\n                return precise ? null : 0;\n            bounced = true;\n            bias = -bias;\n        }\n    }\n    y = docTop + yOffset;\n    let lineStart = block.from;\n    // If this is outside of the rendered viewport, we can't determine a position\n    if (lineStart < view.viewport.from)\n        return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);\n    if (lineStart > view.viewport.to)\n        return view.viewport.to == view.state.doc.length ? view.state.doc.length :\n            precise ? null : posAtCoordsImprecise(view, content, block, x, y);\n    // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not\n    let doc = view.dom.ownerDocument;\n    let root = view.root.elementFromPoint ? view.root : doc;\n    let element = root.elementFromPoint(x, y);\n    if (element && !view.contentDOM.contains(element))\n        element = null;\n    // If the element is unexpected, clip x at the sides of the content area and try again\n    if (!element) {\n        x = Math.max(content.left + 1, Math.min(content.right - 1, x));\n        element = root.elementFromPoint(x, y);\n        if (element && !view.contentDOM.contains(element))\n            element = null;\n    }\n    // There's visible editor content under the point, so we can try\n    // using caret(Position|Range)FromPoint as a shortcut\n    let node, offset = -1;\n    if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {\n        if (doc.caretPositionFromPoint) {\n            let pos = doc.caretPositionFromPoint(x, y);\n            if (pos)\n                ({ offsetNode: node, offset } = pos);\n        }\n        else if (doc.caretRangeFromPoint) {\n            let range = doc.caretRangeFromPoint(x, y);\n            if (range) {\n                ({ startContainer: node, startOffset: offset } = range);\n                if (!view.contentDOM.contains(node) ||\n                    browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||\n                    browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))\n                    node = undefined;\n            }\n        }\n    }\n    // No luck, do our own (potentially expensive) search\n    if (!node || !view.docView.dom.contains(node)) {\n        let line = LineView.find(view.docView, lineStart);\n        if (!line)\n            return yOffset > block.top + block.height / 2 ? block.to : block.from;\n        ({ node, offset } = domPosAtCoords(line.dom, x, y));\n    }\n    let nearest = view.docView.nearest(node);\n    if (!nearest)\n        return null;\n    if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {\n        let rect = nearest.dom.getBoundingClientRect();\n        return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2\n            ? nearest.posAtStart : nearest.posAtEnd;\n    }\n    else {\n        return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;\n    }\n}\nfunction posAtCoordsImprecise(view, contentRect, block, x, y) {\n    let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);\n    if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {\n        let textHeight = view.viewState.heightOracle.textHeight;\n        let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);\n        into += line * view.viewState.heightOracle.lineLength;\n    }\n    let content = view.state.sliceDoc(block.from, block.to);\n    return block.from + findColumn(content, into, view.state.tabSize);\n}\n// In case of a high line height, Safari's caretRangeFromPoint treats\n// the space between lines as belonging to the last character of the\n// line before. This is used to detect such a result so that it can be\n// ignored (issue #401).\nfunction isSuspiciousSafariCaretResult(node, offset, x) {\n    let len;\n    if (node.nodeType != 3 || offset != (len = node.nodeValue.length))\n        return false;\n    for (let next = node.nextSibling; next; next = next.nextSibling)\n        if (next.nodeType != 1 || next.nodeName != \"BR\")\n            return false;\n    return textRange(node, len - 1, len).getBoundingClientRect().left > x;\n}\n// Chrome will move positions between lines to the start of the next line\nfunction isSuspiciousChromeCaretResult(node, offset, x) {\n    if (offset != 0)\n        return false;\n    for (let cur = node;;) {\n        let parent = cur.parentNode;\n        if (!parent || parent.nodeType != 1 || parent.firstChild != cur)\n            return false;\n        if (parent.classList.contains(\"cm-line\"))\n            break;\n        cur = parent;\n    }\n    let rect = node.nodeType == 1 ? node.getBoundingClientRect()\n        : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();\n    return x - rect.left > 5;\n}\nfunction blockAt(view, pos) {\n    let line = view.lineBlockAt(pos);\n    if (Array.isArray(line.type))\n        for (let l of line.type) {\n            if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))\n                return l;\n        }\n    return line;\n}\nfunction moveToLineBoundary(view, start, forward, includeWrap) {\n    let line = blockAt(view, start.head);\n    let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null\n        : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);\n    if (coords) {\n        let editorRect = view.dom.getBoundingClientRect();\n        let direction = view.textDirectionAt(line.from);\n        let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,\n            y: (coords.top + coords.bottom) / 2 });\n        if (pos != null)\n            return EditorSelection.cursor(pos, forward ? -1 : 1);\n    }\n    return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);\n}\nfunction moveByChar(view, start, forward, by) {\n    let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);\n    let direction = view.textDirectionAt(line.from);\n    for (let cur = start, check = null;;) {\n        let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;\n        if (!next) {\n            if (line.number == (forward ? view.state.doc.lines : 1))\n                return cur;\n            char = \"\\n\";\n            line = view.state.doc.line(line.number + (forward ? 1 : -1));\n            spans = view.bidiSpans(line);\n            next = EditorSelection.cursor(forward ? line.from : line.to);\n        }\n        if (!check) {\n            if (!by)\n                return next;\n            check = by(char);\n        }\n        else if (!check(char)) {\n            return cur;\n        }\n        cur = next;\n    }\n}\nfunction byGroup(view, pos, start) {\n    let categorize = view.state.charCategorizer(pos);\n    let cat = categorize(start);\n    return (next) => {\n        let nextCat = categorize(next);\n        if (cat == CharCategory.Space)\n            cat = nextCat;\n        return cat == nextCat;\n    };\n}\nfunction moveVertically(view, start, forward, distance) {\n    let startPos = start.head, dir = forward ? 1 : -1;\n    if (startPos == (forward ? view.state.doc.length : 0))\n        return EditorSelection.cursor(startPos, start.assoc);\n    let goal = start.goalColumn, startY;\n    let rect = view.contentDOM.getBoundingClientRect();\n    let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;\n    if (startCoords) {\n        if (goal == null)\n            goal = startCoords.left - rect.left;\n        startY = dir < 0 ? startCoords.top : startCoords.bottom;\n    }\n    else {\n        let line = view.viewState.lineBlockAt(startPos);\n        if (goal == null)\n            goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));\n        startY = (dir < 0 ? line.top : line.bottom) + docTop;\n    }\n    let resolvedGoal = rect.left + goal;\n    let dist = distance !== null && distance !== void 0 ? distance : (view.viewState.heightOracle.textHeight >> 1);\n    for (let extra = 0;; extra += 10) {\n        let curY = startY + (dist + extra) * dir;\n        let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);\n        if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))\n            return EditorSelection.cursor(pos, start.assoc, undefined, goal);\n    }\n}\nfunction skipAtomicRanges(atoms, pos, bias) {\n    for (;;) {\n        let moved = 0;\n        for (let set of atoms) {\n            set.between(pos - 1, pos + 1, (from, to, value) => {\n                if (pos > from && pos < to) {\n                    let side = moved || bias || (pos - from < to - pos ? -1 : 1);\n                    pos = side < 0 ? from : to;\n                    moved = side;\n                }\n            });\n        }\n        if (!moved)\n            return pos;\n    }\n}\nfunction skipAtoms(view, oldPos, pos) {\n    let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(f => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);\n    return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);\n}\n\n// This will also be where dragging info and such goes\nclass InputState {\n    constructor(view) {\n        this.lastKeyCode = 0;\n        this.lastKeyTime = 0;\n        this.lastTouchTime = 0;\n        this.lastFocusTime = 0;\n        this.lastScrollTop = 0;\n        this.lastScrollLeft = 0;\n        this.chromeScrollHack = -1;\n        // On iOS, some keys need to have their default behavior happen\n        // (after which we retroactively handle them and reset the DOM) to\n        // avoid messing up the virtual keyboard state.\n        this.pendingIOSKey = undefined;\n        this.lastSelectionOrigin = null;\n        this.lastSelectionTime = 0;\n        this.lastEscPress = 0;\n        this.lastContextMenu = 0;\n        this.scrollHandlers = [];\n        this.registeredEvents = [];\n        this.customHandlers = [];\n        // -1 means not in a composition. Otherwise, this counts the number\n        // of changes made during the composition. The count is used to\n        // avoid treating the start state of the composition, before any\n        // changes have been made, as part of the composition.\n        this.composing = -1;\n        // Tracks whether the next change should be marked as starting the\n        // composition (null means no composition, true means next is the\n        // first, false means first has already been marked for this\n        // composition)\n        this.compositionFirstChange = null;\n        // End time of the previous composition\n        this.compositionEndedAt = 0;\n        // Used in a kludge to detect when an Enter keypress should be\n        // considered part of the composition on Safari, which fires events\n        // in the wrong order\n        this.compositionPendingKey = false;\n        // Used to categorize changes as part of a composition, even when\n        // the mutation events fire shortly after the compositionend event\n        this.compositionPendingChange = false;\n        this.mouseSelection = null;\n        let handleEvent = (handler, event) => {\n            if (this.ignoreDuringComposition(event))\n                return;\n            if (event.type == \"keydown\" && this.keydown(view, event))\n                return;\n            if (this.mustFlushObserver(event))\n                view.observer.forceFlush();\n            if (this.runCustomHandlers(event.type, view, event))\n                event.preventDefault();\n            else\n                handler(view, event);\n        };\n        for (let type in handlers) {\n            let handler = handlers[type];\n            view.contentDOM.addEventListener(type, event => {\n                if (eventBelongsToEditor(view, event))\n                    handleEvent(handler, event);\n            }, handlerOptions[type]);\n            this.registeredEvents.push(type);\n        }\n        view.scrollDOM.addEventListener(\"mousedown\", (event) => {\n            if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom) {\n                handleEvent(handlers.mousedown, event);\n                if (!event.defaultPrevented && event.button == 2) {\n                    // Make sure the content covers the entire scroller height, in order\n                    // to catch a native context menu click below it\n                    let start = view.contentDOM.style.minHeight;\n                    view.contentDOM.style.minHeight = \"100%\";\n                    setTimeout(() => view.contentDOM.style.minHeight = start, 200);\n                }\n            }\n        });\n        view.scrollDOM.addEventListener(\"drop\", (event) => {\n            if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom)\n                handleEvent(handlers.drop, event);\n        });\n        if (browser.chrome && browser.chrome_version == 102) { // FIXME remove at some point\n            // On Chrome 102, viewport updates somehow stop wheel-based\n            // scrolling. Turning off pointer events during the scroll seems\n            // to avoid the issue.\n            view.scrollDOM.addEventListener(\"wheel\", () => {\n                if (this.chromeScrollHack < 0)\n                    view.contentDOM.style.pointerEvents = \"none\";\n                else\n                    window.clearTimeout(this.chromeScrollHack);\n                this.chromeScrollHack = setTimeout(() => {\n                    this.chromeScrollHack = -1;\n                    view.contentDOM.style.pointerEvents = \"\";\n                }, 100);\n            }, { passive: true });\n        }\n        this.notifiedFocused = view.hasFocus;\n        // On Safari adding an input event handler somehow prevents an\n        // issue where the composition vanishes when you press enter.\n        if (browser.safari)\n            view.contentDOM.addEventListener(\"input\", () => null);\n    }\n    setSelectionOrigin(origin) {\n        this.lastSelectionOrigin = origin;\n        this.lastSelectionTime = Date.now();\n    }\n    ensureHandlers(view, plugins) {\n        var _a;\n        let handlers;\n        this.customHandlers = [];\n        for (let plugin of plugins)\n            if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {\n                this.customHandlers.push({ plugin: plugin.value, handlers });\n                for (let type in handlers)\n                    if (this.registeredEvents.indexOf(type) < 0 && type != \"scroll\") {\n                        this.registeredEvents.push(type);\n                        view.contentDOM.addEventListener(type, (event) => {\n                            if (!eventBelongsToEditor(view, event))\n                                return;\n                            if (this.runCustomHandlers(type, view, event))\n                                event.preventDefault();\n                        });\n                    }\n            }\n    }\n    runCustomHandlers(type, view, event) {\n        for (let set of this.customHandlers) {\n            let handler = set.handlers[type];\n            if (handler) {\n                try {\n                    if (handler.call(set.plugin, event, view) || event.defaultPrevented)\n                        return true;\n                }\n                catch (e) {\n                    logException(view.state, e);\n                }\n            }\n        }\n        return false;\n    }\n    runScrollHandlers(view, event) {\n        this.lastScrollTop = view.scrollDOM.scrollTop;\n        this.lastScrollLeft = view.scrollDOM.scrollLeft;\n        for (let set of this.customHandlers) {\n            let handler = set.handlers.scroll;\n            if (handler) {\n                try {\n                    handler.call(set.plugin, event, view);\n                }\n                catch (e) {\n                    logException(view.state, e);\n                }\n            }\n        }\n    }\n    keydown(view, event) {\n        // Must always run, even if a custom handler handled the event\n        this.lastKeyCode = event.keyCode;\n        this.lastKeyTime = Date.now();\n        if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)\n            return true;\n        if (event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)\n            view.inputState.lastEscPress = 0;\n        // Chrome for Android usually doesn't fire proper key events, but\n        // occasionally does, usually surrounded by a bunch of complicated\n        // composition changes. When an enter or backspace key event is\n        // seen, hold off on handling DOM events for a bit, and then\n        // dispatch it.\n        if (browser.android && browser.chrome && !event.synthetic &&\n            (event.keyCode == 13 || event.keyCode == 8)) {\n            view.observer.delayAndroidKey(event.key, event.keyCode);\n            return true;\n        }\n        // Prevent the default behavior of Enter on iOS makes the\n        // virtual keyboard get stuck in the wrong (lowercase)\n        // state. So we let it go through, and then, in\n        // applyDOMChange, notify key handlers of it and reset to\n        // the state they produce.\n        let pending;\n        if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&\n            ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||\n                EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {\n            this.pendingIOSKey = pending || event;\n            setTimeout(() => this.flushIOSKey(view), 250);\n            return true;\n        }\n        return false;\n    }\n    flushIOSKey(view) {\n        let key = this.pendingIOSKey;\n        if (!key)\n            return false;\n        this.pendingIOSKey = undefined;\n        return dispatchKey(view.contentDOM, key.key, key.keyCode);\n    }\n    ignoreDuringComposition(event) {\n        if (!/^key/.test(event.type))\n            return false;\n        if (this.composing > 0)\n            return true;\n        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.\n        // On some input method editors (IMEs), the Enter key is used to\n        // confirm character selection. On Safari, when Enter is pressed,\n        // compositionend and keydown events are sometimes emitted in the\n        // wrong order. The key event should still be ignored, even when\n        // it happens after the compositionend event.\n        if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {\n            this.compositionPendingKey = false;\n            return true;\n        }\n        return false;\n    }\n    mustFlushObserver(event) {\n        return event.type == \"keydown\" && event.keyCode != 229;\n    }\n    startMouseSelection(mouseSelection) {\n        if (this.mouseSelection)\n            this.mouseSelection.destroy();\n        this.mouseSelection = mouseSelection;\n    }\n    update(update) {\n        if (this.mouseSelection)\n            this.mouseSelection.update(update);\n        if (update.transactions.length)\n            this.lastKeyCode = this.lastSelectionTime = 0;\n    }\n    destroy() {\n        if (this.mouseSelection)\n            this.mouseSelection.destroy();\n    }\n}\nconst PendingKeys = [\n    { key: \"Backspace\", keyCode: 8, inputType: \"deleteContentBackward\" },\n    { key: \"Enter\", keyCode: 13, inputType: \"insertParagraph\" },\n    { key: \"Enter\", keyCode: 13, inputType: \"insertLineBreak\" },\n    { key: \"Delete\", keyCode: 46, inputType: \"deleteContentForward\" }\n];\nconst EmacsyPendingKeys = \"dthko\";\n// Key codes for modifier keys\nconst modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];\nconst dragScrollMargin = 6;\nfunction dragScrollSpeed(dist) {\n    return Math.max(0, dist) * 0.7 + 8;\n}\nfunction dist(a, b) {\n    return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));\n}\nclass MouseSelection {\n    constructor(view, startEvent, style, mustSelect) {\n        this.view = view;\n        this.startEvent = startEvent;\n        this.style = style;\n        this.mustSelect = mustSelect;\n        this.scrollSpeed = { x: 0, y: 0 };\n        this.scrolling = -1;\n        this.lastEvent = startEvent;\n        this.scrollParent = scrollableParent(view.contentDOM);\n        this.atoms = view.state.facet(atomicRanges).map(f => f(view));\n        let doc = view.contentDOM.ownerDocument;\n        doc.addEventListener(\"mousemove\", this.move = this.move.bind(this));\n        doc.addEventListener(\"mouseup\", this.up = this.up.bind(this));\n        this.extend = startEvent.shiftKey;\n        this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);\n        this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;\n    }\n    start(event) {\n        // When clicking outside of the selection, immediately apply the\n        // effect of starting the selection\n        if (this.dragging === false) {\n            event.preventDefault();\n            this.select(event);\n        }\n    }\n    move(event) {\n        var _a;\n        if (event.buttons == 0)\n            return this.destroy();\n        if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)\n            return;\n        this.select(this.lastEvent = event);\n        let sx = 0, sy = 0;\n        let rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect())\n            || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };\n        let margins = getScrollMargins(this.view);\n        if (event.clientX - margins.left <= rect.left + dragScrollMargin)\n            sx = -dragScrollSpeed(rect.left - event.clientX);\n        else if (event.clientX + margins.right >= rect.right - dragScrollMargin)\n            sx = dragScrollSpeed(event.clientX - rect.right);\n        if (event.clientY - margins.top <= rect.top + dragScrollMargin)\n            sy = -dragScrollSpeed(rect.top - event.clientY);\n        else if (event.clientY + margins.bottom >= rect.bottom - dragScrollMargin)\n            sy = dragScrollSpeed(event.clientY - rect.bottom);\n        this.setScrollSpeed(sx, sy);\n    }\n    up(event) {\n        if (this.dragging == null)\n            this.select(this.lastEvent);\n        if (!this.dragging)\n            event.preventDefault();\n        this.destroy();\n    }\n    destroy() {\n        this.setScrollSpeed(0, 0);\n        let doc = this.view.contentDOM.ownerDocument;\n        doc.removeEventListener(\"mousemove\", this.move);\n        doc.removeEventListener(\"mouseup\", this.up);\n        this.view.inputState.mouseSelection = null;\n    }\n    setScrollSpeed(sx, sy) {\n        this.scrollSpeed = { x: sx, y: sy };\n        if (sx || sy) {\n            if (this.scrolling < 0)\n                this.scrolling = setInterval(() => this.scroll(), 50);\n        }\n        else if (this.scrolling > -1) {\n            clearInterval(this.scrolling);\n            this.scrolling = -1;\n        }\n    }\n    scroll() {\n        if (this.scrollParent) {\n            this.scrollParent.scrollLeft += this.scrollSpeed.x;\n            this.scrollParent.scrollTop += this.scrollSpeed.y;\n        }\n        else {\n            this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);\n        }\n        if (this.dragging === false)\n            this.select(this.lastEvent);\n    }\n    skipAtoms(sel) {\n        let ranges = null;\n        for (let i = 0; i < sel.ranges.length; i++) {\n            let range = sel.ranges[i], updated = null;\n            if (range.empty) {\n                let pos = skipAtomicRanges(this.atoms, range.from, 0);\n                if (pos != range.from)\n                    updated = EditorSelection.cursor(pos, -1);\n            }\n            else {\n                let from = skipAtomicRanges(this.atoms, range.from, -1);\n                let to = skipAtomicRanges(this.atoms, range.to, 1);\n                if (from != range.from || to != range.to)\n                    updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);\n            }\n            if (updated) {\n                if (!ranges)\n                    ranges = sel.ranges.slice();\n                ranges[i] = updated;\n            }\n        }\n        return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;\n    }\n    select(event) {\n        let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));\n        if (this.mustSelect || !selection.eq(view.state.selection) ||\n            selection.main.assoc != view.state.selection.main.assoc && this.dragging === false)\n            this.view.dispatch({\n                selection,\n                userEvent: \"select.pointer\"\n            });\n        this.mustSelect = false;\n    }\n    update(update) {\n        if (update.docChanged && this.dragging)\n            this.dragging = this.dragging.map(update.changes);\n        if (this.style.update(update))\n            setTimeout(() => this.select(this.lastEvent), 20);\n    }\n}\nfunction addsSelectionRange(view, event) {\n    let facet = view.state.facet(clickAddsSelectionRange);\n    return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;\n}\nfunction dragMovesSelection(view, event) {\n    let facet = view.state.facet(dragMovesSelection$1);\n    return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;\n}\nfunction isInPrimarySelection(view, event) {\n    let { main } = view.state.selection;\n    if (main.empty)\n        return false;\n    // On boundary clicks, check whether the coordinates are inside the\n    // selection's client rectangles\n    let sel = getSelection(view.root);\n    if (!sel || sel.rangeCount == 0)\n        return true;\n    let rects = sel.getRangeAt(0).getClientRects();\n    for (let i = 0; i < rects.length; i++) {\n        let rect = rects[i];\n        if (rect.left <= event.clientX && rect.right >= event.clientX &&\n            rect.top <= event.clientY && rect.bottom >= event.clientY)\n            return true;\n    }\n    return false;\n}\nfunction eventBelongsToEditor(view, event) {\n    if (!event.bubbles)\n        return true;\n    if (event.defaultPrevented)\n        return false;\n    for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)\n        if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))\n            return false;\n    return true;\n}\nconst handlers = /*@__PURE__*/Object.create(null);\nconst handlerOptions = /*@__PURE__*/Object.create(null);\n// This is very crude, but unfortunately both these browsers _pretend_\n// that they have a clipboard API—all the objects and methods are\n// there, they just don't work, and they are hard to test.\nconst brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||\n    (browser.ios && browser.webkit_version < 604);\nfunction capturePaste(view) {\n    let parent = view.dom.parentNode;\n    if (!parent)\n        return;\n    let target = parent.appendChild(document.createElement(\"textarea\"));\n    target.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\n    target.focus();\n    setTimeout(() => {\n        view.focus();\n        target.remove();\n        doPaste(view, target.value);\n    }, 50);\n}\nfunction doPaste(view, input) {\n    let { state } = view, changes, i = 1, text = state.toText(input);\n    let byLine = text.lines == state.selection.ranges.length;\n    let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();\n    if (linewise) {\n        let lastLine = -1;\n        changes = state.changeByRange(range => {\n            let line = state.doc.lineAt(range.from);\n            if (line.from == lastLine)\n                return { range };\n            lastLine = line.from;\n            let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);\n            return { changes: { from: line.from, insert },\n                range: EditorSelection.cursor(range.from + insert.length) };\n        });\n    }\n    else if (byLine) {\n        changes = state.changeByRange(range => {\n            let line = text.line(i++);\n            return { changes: { from: range.from, to: range.to, insert: line.text },\n                range: EditorSelection.cursor(range.from + line.length) };\n        });\n    }\n    else {\n        changes = state.replaceSelection(text);\n    }\n    view.dispatch(changes, {\n        userEvent: \"input.paste\",\n        scrollIntoView: true\n    });\n}\nhandlers.keydown = (view, event) => {\n    view.inputState.setSelectionOrigin(\"select\");\n    if (event.keyCode == 27)\n        view.inputState.lastEscPress = Date.now();\n};\nhandlers.touchstart = (view, e) => {\n    view.inputState.lastTouchTime = Date.now();\n    view.inputState.setSelectionOrigin(\"select.pointer\");\n};\nhandlers.touchmove = view => {\n    view.inputState.setSelectionOrigin(\"select.pointer\");\n};\nhandlerOptions.touchstart = handlerOptions.touchmove = { passive: true };\nhandlers.mousedown = (view, event) => {\n    view.observer.flush();\n    if (view.inputState.lastTouchTime > Date.now() - 2000)\n        return; // Ignore touch interaction\n    let style = null;\n    for (let makeStyle of view.state.facet(mouseSelectionStyle)) {\n        style = makeStyle(view, event);\n        if (style)\n            break;\n    }\n    if (!style && event.button == 0)\n        style = basicMouseSelection(view, event);\n    if (style) {\n        let mustFocus = !view.hasFocus;\n        view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));\n        if (mustFocus)\n            view.observer.ignore(() => focusPreventScroll(view.contentDOM));\n        if (view.inputState.mouseSelection)\n            view.inputState.mouseSelection.start(event);\n    }\n};\nfunction rangeForClick(view, pos, bias, type) {\n    if (type == 1) { // Single click\n        return EditorSelection.cursor(pos, bias);\n    }\n    else if (type == 2) { // Double click\n        return groupAt(view.state, pos, bias);\n    }\n    else { // Triple click\n        let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);\n        let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;\n        if (to < view.state.doc.length && to == line.to)\n            to++;\n        return EditorSelection.range(from, to);\n    }\n}\nlet insideY = (y, rect) => y >= rect.top && y <= rect.bottom;\nlet inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;\n// Try to determine, for the given coordinates, associated with the\n// given position, whether they are related to the element before or\n// the element after the position.\nfunction findPositionSide(view, pos, x, y) {\n    let line = LineView.find(view.docView, pos);\n    if (!line)\n        return 1;\n    let off = pos - line.posAtStart;\n    // Line boundaries point into the line\n    if (off == 0)\n        return 1;\n    if (off == line.length)\n        return -1;\n    // Positions on top of an element point at that element\n    let before = line.coordsAt(off, -1);\n    if (before && inside(x, y, before))\n        return -1;\n    let after = line.coordsAt(off, 1);\n    if (after && inside(x, y, after))\n        return 1;\n    // This is probably a line wrap point. Pick before if the point is\n    // beside it.\n    return before && insideY(y, before) ? -1 : 1;\n}\nfunction queryPos(view, event) {\n    let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);\n    return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };\n}\nconst BadMouseDetail = browser.ie && browser.ie_version <= 11;\nlet lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;\nfunction getClickType(event) {\n    if (!BadMouseDetail)\n        return event.detail;\n    let last = lastMouseDown, lastTime = lastMouseDownTime;\n    lastMouseDown = event;\n    lastMouseDownTime = Date.now();\n    return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&\n        Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;\n}\nfunction basicMouseSelection(view, event) {\n    let start = queryPos(view, event), type = getClickType(event);\n    let startSel = view.state.selection;\n    return {\n        update(update) {\n            if (update.docChanged) {\n                start.pos = update.changes.mapPos(start.pos);\n                startSel = startSel.map(update.changes);\n            }\n        },\n        get(event, extend, multiple) {\n            let cur = queryPos(view, event), removed;\n            let range = rangeForClick(view, cur.pos, cur.bias, type);\n            if (start.pos != cur.pos && !extend) {\n                let startRange = rangeForClick(view, start.pos, start.bias, type);\n                let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);\n                range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);\n            }\n            if (extend)\n                return startSel.replaceRange(startSel.main.extend(range.from, range.to));\n            else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))\n                return removed;\n            else if (multiple)\n                return startSel.addRange(range);\n            else\n                return EditorSelection.create([range]);\n        }\n    };\n}\nfunction removeRangeAround(sel, pos) {\n    for (let i = 0; i < sel.ranges.length; i++) {\n        let { from, to } = sel.ranges[i];\n        if (from <= pos && to >= pos)\n            return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));\n    }\n    return null;\n}\nhandlers.dragstart = (view, event) => {\n    let { selection: { main } } = view.state;\n    let { mouseSelection } = view.inputState;\n    if (mouseSelection)\n        mouseSelection.dragging = main;\n    if (event.dataTransfer) {\n        event.dataTransfer.setData(\"Text\", view.state.sliceDoc(main.from, main.to));\n        event.dataTransfer.effectAllowed = \"copyMove\";\n    }\n};\nfunction dropText(view, event, text, direct) {\n    if (!text)\n        return;\n    let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);\n    event.preventDefault();\n    let { mouseSelection } = view.inputState;\n    let del = direct && mouseSelection && mouseSelection.dragging && dragMovesSelection(view, event) ?\n        { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;\n    let ins = { from: dropPos, insert: text };\n    let changes = view.state.changes(del ? [del, ins] : ins);\n    view.focus();\n    view.dispatch({\n        changes,\n        selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },\n        userEvent: del ? \"move.drop\" : \"input.drop\"\n    });\n}\nhandlers.drop = (view, event) => {\n    if (!event.dataTransfer)\n        return;\n    if (view.state.readOnly)\n        return event.preventDefault();\n    let files = event.dataTransfer.files;\n    if (files && files.length) { // For a file drop, read the file's text.\n        event.preventDefault();\n        let text = Array(files.length), read = 0;\n        let finishFile = () => {\n            if (++read == files.length)\n                dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);\n        };\n        for (let i = 0; i < files.length; i++) {\n            let reader = new FileReader;\n            reader.onerror = finishFile;\n            reader.onload = () => {\n                if (!/[\\x00-\\x08\\x0e-\\x1f]{2}/.test(reader.result))\n                    text[i] = reader.result;\n                finishFile();\n            };\n            reader.readAsText(files[i]);\n        }\n    }\n    else {\n        dropText(view, event, event.dataTransfer.getData(\"Text\"), true);\n    }\n};\nhandlers.paste = (view, event) => {\n    if (view.state.readOnly)\n        return event.preventDefault();\n    view.observer.flush();\n    let data = brokenClipboardAPI ? null : event.clipboardData;\n    if (data) {\n        doPaste(view, data.getData(\"text/plain\") || data.getData(\"text/uri-text\"));\n        event.preventDefault();\n    }\n    else {\n        capturePaste(view);\n    }\n};\nfunction captureCopy(view, text) {\n    // The extra wrapper is somehow necessary on IE/Edge to prevent the\n    // content from being mangled when it is put onto the clipboard\n    let parent = view.dom.parentNode;\n    if (!parent)\n        return;\n    let target = parent.appendChild(document.createElement(\"textarea\"));\n    target.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\n    target.value = text;\n    target.focus();\n    target.selectionEnd = text.length;\n    target.selectionStart = 0;\n    setTimeout(() => {\n        target.remove();\n        view.focus();\n    }, 50);\n}\nfunction copiedRange(state) {\n    let content = [], ranges = [], linewise = false;\n    for (let range of state.selection.ranges)\n        if (!range.empty) {\n            content.push(state.sliceDoc(range.from, range.to));\n            ranges.push(range);\n        }\n    if (!content.length) {\n        // Nothing selected, do a line-wise copy\n        let upto = -1;\n        for (let { from } of state.selection.ranges) {\n            let line = state.doc.lineAt(from);\n            if (line.number > upto) {\n                content.push(line.text);\n                ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });\n            }\n            upto = line.number;\n        }\n        linewise = true;\n    }\n    return { text: content.join(state.lineBreak), ranges, linewise };\n}\nlet lastLinewiseCopy = null;\nhandlers.copy = handlers.cut = (view, event) => {\n    let { text, ranges, linewise } = copiedRange(view.state);\n    if (!text && !linewise)\n        return;\n    lastLinewiseCopy = linewise ? text : null;\n    let data = brokenClipboardAPI ? null : event.clipboardData;\n    if (data) {\n        event.preventDefault();\n        data.clearData();\n        data.setData(\"text/plain\", text);\n    }\n    else {\n        captureCopy(view, text);\n    }\n    if (event.type == \"cut\" && !view.state.readOnly)\n        view.dispatch({\n            changes: ranges,\n            scrollIntoView: true,\n            userEvent: \"delete.cut\"\n        });\n};\nconst isFocusChange = /*@__PURE__*/Annotation.define();\nfunction focusChangeTransaction(state, focus) {\n    let effects = [];\n    for (let getEffect of state.facet(focusChangeEffect)) {\n        let effect = getEffect(state, focus);\n        if (effect)\n            effects.push(effect);\n    }\n    return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;\n}\nfunction updateForFocusChange(view) {\n    setTimeout(() => {\n        let focus = view.hasFocus;\n        if (focus != view.inputState.notifiedFocused) {\n            let tr = focusChangeTransaction(view.state, focus);\n            if (tr)\n                view.dispatch(tr);\n            else\n                view.update([]);\n        }\n    }, 10);\n}\nhandlers.focus = view => {\n    view.inputState.lastFocusTime = Date.now();\n    // When focusing reset the scroll position, move it back to where it was\n    if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {\n        view.scrollDOM.scrollTop = view.inputState.lastScrollTop;\n        view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;\n    }\n    updateForFocusChange(view);\n};\nhandlers.blur = view => {\n    view.observer.clearSelectionRange();\n    updateForFocusChange(view);\n};\nhandlers.compositionstart = handlers.compositionupdate = view => {\n    if (view.inputState.compositionFirstChange == null)\n        view.inputState.compositionFirstChange = true;\n    if (view.inputState.composing < 0) {\n        // FIXME possibly set a timeout to clear it again on Android\n        view.inputState.composing = 0;\n    }\n};\nhandlers.compositionend = view => {\n    view.inputState.composing = -1;\n    view.inputState.compositionEndedAt = Date.now();\n    view.inputState.compositionPendingKey = true;\n    view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;\n    view.inputState.compositionFirstChange = null;\n    if (browser.chrome && browser.android) {\n        // Delay flushing for a bit on Android because it'll often fire a\n        // bunch of contradictory changes in a row at end of compositon\n        view.observer.flushSoon();\n    }\n    else if (view.inputState.compositionPendingChange) {\n        // If we found pending records, schedule a flush.\n        Promise.resolve().then(() => view.observer.flush());\n    }\n    else {\n        // Otherwise, make sure that, if no changes come in soon, the\n        // composition view is cleared.\n        setTimeout(() => {\n            if (view.inputState.composing < 0 && view.docView.hasComposition)\n                view.update([]);\n        }, 50);\n    }\n};\nhandlers.contextmenu = view => {\n    view.inputState.lastContextMenu = Date.now();\n};\nhandlers.beforeinput = (view, event) => {\n    var _a;\n    // Because Chrome Android doesn't fire useful key events, use\n    // beforeinput to detect backspace (and possibly enter and delete,\n    // but those usually don't even seem to fire beforeinput events at\n    // the moment) and fake a key event for it.\n    //\n    // (preventDefault on beforeinput, though supported in the spec,\n    // seems to do nothing at all on Chrome).\n    let pending;\n    if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {\n        view.observer.delayAndroidKey(pending.key, pending.keyCode);\n        if (pending.key == \"Backspace\" || pending.key == \"Delete\") {\n            let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;\n            setTimeout(() => {\n                var _a;\n                // Backspacing near uneditable nodes on Chrome Android sometimes\n                // closes the virtual keyboard. This tries to crudely detect\n                // that and refocus to get it back.\n                if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {\n                    view.contentDOM.blur();\n                    view.focus();\n                }\n            }, 100);\n        }\n    }\n};\n\nconst wrappingWhiteSpace = [\"pre-wrap\", \"normal\", \"pre-line\", \"break-spaces\"];\nclass HeightOracle {\n    constructor(lineWrapping) {\n        this.lineWrapping = lineWrapping;\n        this.doc = Text.empty;\n        this.heightSamples = {};\n        this.lineHeight = 14; // The height of an entire line (line-height)\n        this.charWidth = 7;\n        this.textHeight = 14; // The height of the actual font (font-size)\n        this.lineLength = 30;\n        // Used to track, during updateHeight, if any actual heights changed\n        this.heightChanged = false;\n    }\n    heightForGap(from, to) {\n        let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;\n        if (this.lineWrapping)\n            lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));\n        return this.lineHeight * lines;\n    }\n    heightForLine(length) {\n        if (!this.lineWrapping)\n            return this.lineHeight;\n        let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));\n        return lines * this.lineHeight;\n    }\n    setDoc(doc) { this.doc = doc; return this; }\n    mustRefreshForWrapping(whiteSpace) {\n        return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;\n    }\n    mustRefreshForHeights(lineHeights) {\n        let newHeight = false;\n        for (let i = 0; i < lineHeights.length; i++) {\n            let h = lineHeights[i];\n            if (h < 0) {\n                i++;\n            }\n            else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels\n                newHeight = true;\n                this.heightSamples[Math.floor(h * 10)] = true;\n            }\n        }\n        return newHeight;\n    }\n    refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {\n        let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;\n        let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;\n        this.lineWrapping = lineWrapping;\n        this.lineHeight = lineHeight;\n        this.charWidth = charWidth;\n        this.textHeight = textHeight;\n        this.lineLength = lineLength;\n        if (changed) {\n            this.heightSamples = {};\n            for (let i = 0; i < knownHeights.length; i++) {\n                let h = knownHeights[i];\n                if (h < 0)\n                    i++;\n                else\n                    this.heightSamples[Math.floor(h * 10)] = true;\n            }\n        }\n        return changed;\n    }\n}\n// This object is used by `updateHeight` to make DOM measurements\n// arrive at the right nides. The `heights` array is a sequence of\n// block heights, starting from position `from`.\nclass MeasuredHeights {\n    constructor(from, heights) {\n        this.from = from;\n        this.heights = heights;\n        this.index = 0;\n    }\n    get more() { return this.index < this.heights.length; }\n}\n/**\nRecord used to represent information about a block-level element\nin the editor view.\n*/\nclass BlockInfo {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The start of the element in the document.\n    */\n    from, \n    /**\n    The length of the element.\n    */\n    length, \n    /**\n    The top position of the element (relative to the top of the\n    document).\n    */\n    top, \n    /**\n    Its height.\n    */\n    height, \n    /**\n    @internal Weird packed field that holds an array of children\n    for composite blocks, a decoration for block widgets, and a\n    number indicating the amount of widget-create line breaks for\n    text blocks.\n    */\n    _content) {\n        this.from = from;\n        this.length = length;\n        this.top = top;\n        this.height = height;\n        this._content = _content;\n    }\n    /**\n    The type of element this is. When querying lines, this may be\n    an array of all the blocks that make up the line.\n    */\n    get type() {\n        return typeof this._content == \"number\" ? BlockType.Text :\n            Array.isArray(this._content) ? this._content : this._content.type;\n    }\n    /**\n    The end of the element as a document position.\n    */\n    get to() { return this.from + this.length; }\n    /**\n    The bottom position of the element.\n    */\n    get bottom() { return this.top + this.height; }\n    /**\n    If this is a widget block, this will return the widget\n    associated with it.\n    */\n    get widget() {\n        return this._content instanceof PointDecoration ? this._content.widget : null;\n    }\n    /**\n    If this is a textblock, this holds the number of line breaks\n    that appear in widgets inside the block.\n    */\n    get widgetLineBreaks() {\n        return typeof this._content == \"number\" ? this._content : 0;\n    }\n    /**\n    @internal\n    */\n    join(other) {\n        let content = (Array.isArray(this._content) ? this._content : [this])\n            .concat(Array.isArray(other._content) ? other._content : [other]);\n        return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);\n    }\n}\nvar QueryType = /*@__PURE__*/(function (QueryType) {\n    QueryType[QueryType[\"ByPos\"] = 0] = \"ByPos\";\n    QueryType[QueryType[\"ByHeight\"] = 1] = \"ByHeight\";\n    QueryType[QueryType[\"ByPosNoHeight\"] = 2] = \"ByPosNoHeight\";\nreturn QueryType})(QueryType || (QueryType = {}));\nconst Epsilon = 1e-3;\nclass HeightMap {\n    constructor(length, // The number of characters covered\n    height, // Height of this part of the document\n    flags = 2 /* Outdated */) {\n        this.length = length;\n        this.height = height;\n        this.flags = flags;\n    }\n    get outdated() { return (this.flags & 2 /* Outdated */) > 0; }\n    set outdated(value) { this.flags = (value ? 2 /* Outdated */ : 0) | (this.flags & ~2 /* Outdated */); }\n    setHeight(oracle, height) {\n        if (this.height != height) {\n            if (Math.abs(this.height - height) > Epsilon)\n                oracle.heightChanged = true;\n            this.height = height;\n        }\n    }\n    // Base case is to replace a leaf node, which simply builds a tree\n    // from the new nodes and returns that (HeightMapBranch and\n    // HeightMapGap override this to actually use from/to)\n    replace(_from, _to, nodes) {\n        return HeightMap.of(nodes);\n    }\n    // Again, these are base cases, and are overridden for branch and gap nodes.\n    decomposeLeft(_to, result) { result.push(this); }\n    decomposeRight(_from, result) { result.push(this); }\n    applyChanges(decorations, oldDoc, oracle, changes) {\n        let me = this, doc = oracle.doc;\n        for (let i = changes.length - 1; i >= 0; i--) {\n            let { fromA, toA, fromB, toB } = changes[i];\n            let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);\n            let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);\n            toB += end.to - toA;\n            toA = end.to;\n            while (i > 0 && start.from <= changes[i - 1].toA) {\n                fromA = changes[i - 1].fromA;\n                fromB = changes[i - 1].fromB;\n                i--;\n                if (fromA < start.from)\n                    start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);\n            }\n            fromB += start.from - fromA;\n            fromA = start.from;\n            let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);\n            me = me.replace(fromA, toA, nodes);\n        }\n        return me.updateHeight(oracle, 0);\n    }\n    static empty() { return new HeightMapText(0, 0); }\n    // nodes uses null values to indicate the position of line breaks.\n    // There are never line breaks at the start or end of the array, or\n    // two line breaks next to each other, and the array isn't allowed\n    // to be empty (same restrictions as return value from the builder).\n    static of(nodes) {\n        if (nodes.length == 1)\n            return nodes[0];\n        let i = 0, j = nodes.length, before = 0, after = 0;\n        for (;;) {\n            if (i == j) {\n                if (before > after * 2) {\n                    let split = nodes[i - 1];\n                    if (split.break)\n                        nodes.splice(--i, 1, split.left, null, split.right);\n                    else\n                        nodes.splice(--i, 1, split.left, split.right);\n                    j += 1 + split.break;\n                    before -= split.size;\n                }\n                else if (after > before * 2) {\n                    let split = nodes[j];\n                    if (split.break)\n                        nodes.splice(j, 1, split.left, null, split.right);\n                    else\n                        nodes.splice(j, 1, split.left, split.right);\n                    j += 2 + split.break;\n                    after -= split.size;\n                }\n                else {\n                    break;\n                }\n            }\n            else if (before < after) {\n                let next = nodes[i++];\n                if (next)\n                    before += next.size;\n            }\n            else {\n                let next = nodes[--j];\n                if (next)\n                    after += next.size;\n            }\n        }\n        let brk = 0;\n        if (nodes[i - 1] == null) {\n            brk = 1;\n            i--;\n        }\n        else if (nodes[i] == null) {\n            brk = 1;\n            j++;\n        }\n        return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));\n    }\n}\nHeightMap.prototype.size = 1;\nclass HeightMapBlock extends HeightMap {\n    constructor(length, height, deco) {\n        super(length, height);\n        this.deco = deco;\n    }\n    blockAt(_height, _oracle, top, offset) {\n        return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);\n    }\n    lineAt(_value, _type, oracle, top, offset) {\n        return this.blockAt(0, oracle, top, offset);\n    }\n    forEachLine(from, to, oracle, top, offset, f) {\n        if (from <= offset + this.length && to >= offset)\n            f(this.blockAt(0, oracle, top, offset));\n    }\n    updateHeight(oracle, offset = 0, _force = false, measured) {\n        if (measured && measured.from <= offset && measured.more)\n            this.setHeight(oracle, measured.heights[measured.index++]);\n        this.outdated = false;\n        return this;\n    }\n    toString() { return `block(${this.length})`; }\n}\nclass HeightMapText extends HeightMapBlock {\n    constructor(length, height) {\n        super(length, height, null);\n        this.collapsed = 0; // Amount of collapsed content in the line\n        this.widgetHeight = 0; // Maximum inline widget height\n        this.breaks = 0; // Number of widget-introduced line breaks on the line\n    }\n    blockAt(_height, _oracle, top, offset) {\n        return new BlockInfo(offset, this.length, top, this.height, this.breaks);\n    }\n    replace(_from, _to, nodes) {\n        let node = nodes[0];\n        if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* SingleLine */)) &&\n            Math.abs(this.length - node.length) < 10) {\n            if (node instanceof HeightMapGap)\n                node = new HeightMapText(node.length, this.height);\n            else\n                node.height = this.height;\n            if (!this.outdated)\n                node.outdated = false;\n            return node;\n        }\n        else {\n            return HeightMap.of(nodes);\n        }\n    }\n    updateHeight(oracle, offset = 0, force = false, measured) {\n        if (measured && measured.from <= offset && measured.more)\n            this.setHeight(oracle, measured.heights[measured.index++]);\n        else if (force || this.outdated)\n            this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) +\n                this.breaks * oracle.lineHeight);\n        this.outdated = false;\n        return this;\n    }\n    toString() {\n        return `line(${this.length}${this.collapsed ? -this.collapsed : \"\"}${this.widgetHeight ? \":\" + this.widgetHeight : \"\"})`;\n    }\n}\nclass HeightMapGap extends HeightMap {\n    constructor(length) { super(length, 0); }\n    heightMetrics(oracle, offset) {\n        let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;\n        let lines = lastLine - firstLine + 1;\n        let perLine, perChar = 0;\n        if (oracle.lineWrapping) {\n            let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);\n            perLine = totalPerLine / lines;\n            if (this.length > lines + 1)\n                perChar = (this.height - totalPerLine) / (this.length - lines - 1);\n        }\n        else {\n            perLine = this.height / lines;\n        }\n        return { firstLine, lastLine, perLine, perChar };\n    }\n    blockAt(height, oracle, top, offset) {\n        let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);\n        if (oracle.lineWrapping) {\n            let guess = offset + Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length);\n            let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;\n            let lineTop = Math.max(top, height - lineHeight / 2);\n            return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);\n        }\n        else {\n            let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));\n            let { from, length } = oracle.doc.line(firstLine + line);\n            return new BlockInfo(from, length, top + perLine * line, perLine, 0);\n        }\n    }\n    lineAt(value, type, oracle, top, offset) {\n        if (type == QueryType.ByHeight)\n            return this.blockAt(value, oracle, top, offset);\n        if (type == QueryType.ByPosNoHeight) {\n            let { from, to } = oracle.doc.lineAt(value);\n            return new BlockInfo(from, to - from, 0, 0, 0);\n        }\n        let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);\n        let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;\n        let linesAbove = line.number - firstLine;\n        let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);\n        return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);\n    }\n    forEachLine(from, to, oracle, top, offset, f) {\n        from = Math.max(from, offset);\n        to = Math.min(to, offset + this.length);\n        let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);\n        for (let pos = from, lineTop = top; pos <= to;) {\n            let line = oracle.doc.lineAt(pos);\n            if (pos == from) {\n                let linesAbove = line.number - firstLine;\n                lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);\n            }\n            let lineHeight = perLine + perChar * line.length;\n            f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));\n            lineTop += lineHeight;\n            pos = line.to + 1;\n        }\n    }\n    replace(from, to, nodes) {\n        let after = this.length - to;\n        if (after > 0) {\n            let last = nodes[nodes.length - 1];\n            if (last instanceof HeightMapGap)\n                nodes[nodes.length - 1] = new HeightMapGap(last.length + after);\n            else\n                nodes.push(null, new HeightMapGap(after - 1));\n        }\n        if (from > 0) {\n            let first = nodes[0];\n            if (first instanceof HeightMapGap)\n                nodes[0] = new HeightMapGap(from + first.length);\n            else\n                nodes.unshift(new HeightMapGap(from - 1), null);\n        }\n        return HeightMap.of(nodes);\n    }\n    decomposeLeft(to, result) {\n        result.push(new HeightMapGap(to - 1), null);\n    }\n    decomposeRight(from, result) {\n        result.push(null, new HeightMapGap(this.length - from - 1));\n    }\n    updateHeight(oracle, offset = 0, force = false, measured) {\n        let end = offset + this.length;\n        if (measured && measured.from <= offset + this.length && measured.more) {\n            // Fill in part of this gap with measured lines. We know there\n            // can't be widgets or collapsed ranges in those lines, because\n            // they would already have been added to the heightmap (gaps\n            // only contain plain text).\n            let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;\n            if (measured.from > offset)\n                nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));\n            while (pos <= end && measured.more) {\n                let len = oracle.doc.lineAt(pos).length;\n                if (nodes.length)\n                    nodes.push(null);\n                let height = measured.heights[measured.index++];\n                if (singleHeight == -1)\n                    singleHeight = height;\n                else if (Math.abs(height - singleHeight) >= Epsilon)\n                    singleHeight = -2;\n                let line = new HeightMapText(len, height);\n                line.outdated = false;\n                nodes.push(line);\n                pos += len + 1;\n            }\n            if (pos <= end)\n                nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));\n            let result = HeightMap.of(nodes);\n            if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||\n                Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)\n                oracle.heightChanged = true;\n            return result;\n        }\n        else if (force || this.outdated) {\n            this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));\n            this.outdated = false;\n        }\n        return this;\n    }\n    toString() { return `gap(${this.length})`; }\n}\nclass HeightMapBranch extends HeightMap {\n    constructor(left, brk, right) {\n        super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */ : 0));\n        this.left = left;\n        this.right = right;\n        this.size = left.size + right.size;\n    }\n    get break() { return this.flags & 1 /* Break */; }\n    blockAt(height, oracle, top, offset) {\n        let mid = top + this.left.height;\n        return height < mid ? this.left.blockAt(height, oracle, top, offset)\n            : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);\n    }\n    lineAt(value, type, oracle, top, offset) {\n        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;\n        let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;\n        let base = left ? this.left.lineAt(value, type, oracle, top, offset)\n            : this.right.lineAt(value, type, oracle, rightTop, rightOffset);\n        if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))\n            return base;\n        let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;\n        if (left)\n            return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));\n        else\n            return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);\n    }\n    forEachLine(from, to, oracle, top, offset, f) {\n        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;\n        if (this.break) {\n            if (from < rightOffset)\n                this.left.forEachLine(from, to, oracle, top, offset, f);\n            if (to >= rightOffset)\n                this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);\n        }\n        else {\n            let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top, offset);\n            if (from < mid.from)\n                this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);\n            if (mid.to >= from && mid.from <= to)\n                f(mid);\n            if (to > mid.to)\n                this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);\n        }\n    }\n    replace(from, to, nodes) {\n        let rightStart = this.left.length + this.break;\n        if (to < rightStart)\n            return this.balanced(this.left.replace(from, to, nodes), this.right);\n        if (from > this.left.length)\n            return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));\n        let result = [];\n        if (from > 0)\n            this.decomposeLeft(from, result);\n        let left = result.length;\n        for (let node of nodes)\n            result.push(node);\n        if (from > 0)\n            mergeGaps(result, left - 1);\n        if (to < this.length) {\n            let right = result.length;\n            this.decomposeRight(to, result);\n            mergeGaps(result, right);\n        }\n        return HeightMap.of(result);\n    }\n    decomposeLeft(to, result) {\n        let left = this.left.length;\n        if (to <= left)\n            return this.left.decomposeLeft(to, result);\n        result.push(this.left);\n        if (this.break) {\n            left++;\n            if (to >= left)\n                result.push(null);\n        }\n        if (to > left)\n            this.right.decomposeLeft(to - left, result);\n    }\n    decomposeRight(from, result) {\n        let left = this.left.length, right = left + this.break;\n        if (from >= right)\n            return this.right.decomposeRight(from - right, result);\n        if (from < left)\n            this.left.decomposeRight(from, result);\n        if (this.break && from < right)\n            result.push(null);\n        result.push(this.right);\n    }\n    balanced(left, right) {\n        if (left.size > 2 * right.size || right.size > 2 * left.size)\n            return HeightMap.of(this.break ? [left, null, right] : [left, right]);\n        this.left = left;\n        this.right = right;\n        this.height = left.height + right.height;\n        this.outdated = left.outdated || right.outdated;\n        this.size = left.size + right.size;\n        this.length = left.length + this.break + right.length;\n        return this;\n    }\n    updateHeight(oracle, offset = 0, force = false, measured) {\n        let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;\n        if (measured && measured.from <= offset + left.length && measured.more)\n            rebalance = left = left.updateHeight(oracle, offset, force, measured);\n        else\n            left.updateHeight(oracle, offset, force);\n        if (measured && measured.from <= rightStart + right.length && measured.more)\n            rebalance = right = right.updateHeight(oracle, rightStart, force, measured);\n        else\n            right.updateHeight(oracle, rightStart, force);\n        if (rebalance)\n            return this.balanced(left, right);\n        this.height = this.left.height + this.right.height;\n        this.outdated = false;\n        return this;\n    }\n    toString() { return this.left + (this.break ? \" \" : \"-\") + this.right; }\n}\nfunction mergeGaps(nodes, around) {\n    let before, after;\n    if (nodes[around] == null &&\n        (before = nodes[around - 1]) instanceof HeightMapGap &&\n        (after = nodes[around + 1]) instanceof HeightMapGap)\n        nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));\n}\nconst relevantWidgetHeight = 5;\nclass NodeBuilder {\n    constructor(pos, oracle) {\n        this.pos = pos;\n        this.oracle = oracle;\n        this.nodes = [];\n        this.lineStart = -1;\n        this.lineEnd = -1;\n        this.covering = null;\n        this.writtenTo = pos;\n    }\n    get isCovered() {\n        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;\n    }\n    span(_from, to) {\n        if (this.lineStart > -1) {\n            let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];\n            if (last instanceof HeightMapText)\n                last.length += end - this.pos;\n            else if (end > this.pos || !this.isCovered)\n                this.nodes.push(new HeightMapText(end - this.pos, -1));\n            this.writtenTo = end;\n            if (to > end) {\n                this.nodes.push(null);\n                this.writtenTo++;\n                this.lineStart = -1;\n            }\n        }\n        this.pos = to;\n    }\n    point(from, to, deco) {\n        if (from < to || deco.heightRelevant) {\n            let height = deco.widget ? deco.widget.estimatedHeight : 0;\n            let breaks = deco.widget ? deco.widget.lineBreaks : 0;\n            if (height < 0)\n                height = this.oracle.lineHeight;\n            let len = to - from;\n            if (deco.block) {\n                this.addBlock(new HeightMapBlock(len, height, deco));\n            }\n            else if (len || breaks || height >= relevantWidgetHeight) {\n                this.addLineDeco(height, breaks, len);\n            }\n        }\n        else if (to > from) {\n            this.span(from, to);\n        }\n        if (this.lineEnd > -1 && this.lineEnd < this.pos)\n            this.lineEnd = this.oracle.doc.lineAt(this.pos).to;\n    }\n    enterLine() {\n        if (this.lineStart > -1)\n            return;\n        let { from, to } = this.oracle.doc.lineAt(this.pos);\n        this.lineStart = from;\n        this.lineEnd = to;\n        if (this.writtenTo < from) {\n            if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)\n                this.nodes.push(this.blankContent(this.writtenTo, from - 1));\n            this.nodes.push(null);\n        }\n        if (this.pos > from)\n            this.nodes.push(new HeightMapText(this.pos - from, -1));\n        this.writtenTo = this.pos;\n    }\n    blankContent(from, to) {\n        let gap = new HeightMapGap(to - from);\n        if (this.oracle.doc.lineAt(from).to == to)\n            gap.flags |= 4 /* SingleLine */;\n        return gap;\n    }\n    ensureLine() {\n        this.enterLine();\n        let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;\n        if (last instanceof HeightMapText)\n            return last;\n        let line = new HeightMapText(0, -1);\n        this.nodes.push(line);\n        return line;\n    }\n    addBlock(block) {\n        var _a;\n        this.enterLine();\n        let type = (_a = block.deco) === null || _a === void 0 ? void 0 : _a.type;\n        if (type == BlockType.WidgetAfter && !this.isCovered)\n            this.ensureLine();\n        this.nodes.push(block);\n        this.writtenTo = this.pos = this.pos + block.length;\n        if (type != BlockType.WidgetBefore)\n            this.covering = block;\n    }\n    addLineDeco(height, breaks, length) {\n        let line = this.ensureLine();\n        line.length += length;\n        line.collapsed += length;\n        line.widgetHeight = Math.max(line.widgetHeight, height);\n        line.breaks += breaks;\n        this.writtenTo = this.pos = this.pos + length;\n    }\n    finish(from) {\n        let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];\n        if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)\n            this.nodes.push(new HeightMapText(0, -1));\n        else if (this.writtenTo < this.pos || last == null)\n            this.nodes.push(this.blankContent(this.writtenTo, this.pos));\n        let pos = from;\n        for (let node of this.nodes) {\n            if (node instanceof HeightMapText)\n                node.updateHeight(this.oracle, pos);\n            pos += node ? node.length : 1;\n        }\n        return this.nodes;\n    }\n    // Always called with a region that on both sides either stretches\n    // to a line break or the end of the document.\n    // The returned array uses null to indicate line breaks, but never\n    // starts or ends in a line break, or has multiple line breaks next\n    // to each other.\n    static build(oracle, decorations, from, to) {\n        let builder = new NodeBuilder(from, oracle);\n        RangeSet.spans(decorations, from, to, builder, 0);\n        return builder.finish(from);\n    }\n}\nfunction heightRelevantDecoChanges(a, b, diff) {\n    let comp = new DecorationComparator;\n    RangeSet.compare(a, b, diff, comp, 0);\n    return comp.changes;\n}\nclass DecorationComparator {\n    constructor() {\n        this.changes = [];\n    }\n    compareRange() { }\n    comparePoint(from, to, a, b) {\n        if (from < to || a && a.heightRelevant || b && b.heightRelevant)\n            addRange(from, to, this.changes, 5);\n    }\n}\n\nfunction visiblePixelRange(dom, paddingTop) {\n    let rect = dom.getBoundingClientRect();\n    let doc = dom.ownerDocument, win = doc.defaultView || window;\n    let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);\n    let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);\n    for (let parent = dom.parentNode; parent && parent != doc.body;) {\n        if (parent.nodeType == 1) {\n            let elt = parent;\n            let style = window.getComputedStyle(elt);\n            if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&\n                style.overflow != \"visible\") {\n                let parentRect = elt.getBoundingClientRect();\n                left = Math.max(left, parentRect.left);\n                right = Math.min(right, parentRect.right);\n                top = Math.max(top, parentRect.top);\n                bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);\n            }\n            parent = style.position == \"absolute\" || style.position == \"fixed\" ? elt.offsetParent : elt.parentNode;\n        }\n        else if (parent.nodeType == 11) { // Shadow root\n            parent = parent.host;\n        }\n        else {\n            break;\n        }\n    }\n    return { left: left - rect.left, right: Math.max(left, right) - rect.left,\n        top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };\n}\nfunction fullPixelRange(dom, paddingTop) {\n    let rect = dom.getBoundingClientRect();\n    return { left: 0, right: rect.right - rect.left,\n        top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };\n}\n// Line gaps are placeholder widgets used to hide pieces of overlong\n// lines within the viewport, as a kludge to keep the editor\n// responsive when a ridiculously long line is loaded into it.\nclass LineGap {\n    constructor(from, to, size) {\n        this.from = from;\n        this.to = to;\n        this.size = size;\n    }\n    static same(a, b) {\n        if (a.length != b.length)\n            return false;\n        for (let i = 0; i < a.length; i++) {\n            let gA = a[i], gB = b[i];\n            if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)\n                return false;\n        }\n        return true;\n    }\n    draw(wrapping) {\n        return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);\n    }\n}\nclass LineGapWidget extends WidgetType {\n    constructor(size, vertical) {\n        super();\n        this.size = size;\n        this.vertical = vertical;\n    }\n    eq(other) { return other.size == this.size && other.vertical == this.vertical; }\n    toDOM() {\n        let elt = document.createElement(\"div\");\n        if (this.vertical) {\n            elt.style.height = this.size + \"px\";\n        }\n        else {\n            elt.style.width = this.size + \"px\";\n            elt.style.height = \"2px\";\n            elt.style.display = \"inline-block\";\n        }\n        return elt;\n    }\n    get estimatedHeight() { return this.vertical ? this.size : -1; }\n}\nclass ViewState {\n    constructor(state) {\n        this.state = state;\n        // These are contentDOM-local coordinates\n        this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };\n        this.inView = true;\n        this.paddingTop = 0;\n        this.paddingBottom = 0;\n        this.contentDOMWidth = 0;\n        this.contentDOMHeight = 0;\n        this.editorHeight = 0;\n        this.editorWidth = 0;\n        this.scrollTop = 0;\n        this.scrolledToBottom = true;\n        // The vertical position (document-relative) to which to anchor the\n        // scroll position. -1 means anchor to the end of the document.\n        this.scrollAnchorPos = 0;\n        // The height at the anchor position. Set by the DOM update phase.\n        // -1 means no height available.\n        this.scrollAnchorHeight = -1;\n        // See VP.MaxDOMHeight\n        this.scaler = IdScaler;\n        this.scrollTarget = null;\n        // Briefly set to true when printing, to disable viewport limiting\n        this.printing = false;\n        // Flag set when editor content was redrawn, so that the next\n        // measure stage knows it must read DOM layout\n        this.mustMeasureContent = true;\n        this.defaultTextDirection = Direction.LTR;\n        this.visibleRanges = [];\n        // Cursor 'assoc' is only significant when the cursor is on a line\n        // wrap point, where it must stick to the character that it is\n        // associated with. Since browsers don't provide a reasonable\n        // interface to set or query this, when a selection is set that\n        // might cause this to be significant, this flag is set. The next\n        // measure phase will check whether the cursor is on a line-wrapping\n        // boundary and, if so, reset it to make sure it is positioned in\n        // the right place.\n        this.mustEnforceCursorAssoc = false;\n        let guessWrapping = state.facet(contentAttributes).some(v => typeof v != \"function\" && v.class == \"cm-lineWrapping\");\n        this.heightOracle = new HeightOracle(guessWrapping);\n        this.stateDeco = state.facet(decorations).filter(d => typeof d != \"function\");\n        this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);\n        this.viewport = this.getViewport(0, null);\n        this.updateViewportLines();\n        this.updateForViewport();\n        this.lineGaps = this.ensureLineGaps([]);\n        this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));\n        this.computeVisibleRanges();\n    }\n    updateForViewport() {\n        let viewports = [this.viewport], { main } = this.state.selection;\n        for (let i = 0; i <= 1; i++) {\n            let pos = i ? main.head : main.anchor;\n            if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {\n                let { from, to } = this.lineBlockAt(pos);\n                viewports.push(new Viewport(from, to));\n            }\n        }\n        this.viewports = viewports.sort((a, b) => a.from - b.from);\n        this.scaler = this.heightMap.height <= 7000000 /* MaxDOMHeight */ ? IdScaler :\n            new BigScaler(this.heightOracle, this.heightMap, this.viewports);\n    }\n    updateViewportLines() {\n        this.viewportLines = [];\n        this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {\n            this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));\n        });\n    }\n    update(update, scrollTarget = null) {\n        this.state = update.state;\n        let prevDeco = this.stateDeco;\n        this.stateDeco = this.state.facet(decorations).filter(d => typeof d != \"function\");\n        let contentChanges = update.changedRanges;\n        let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));\n        let prevHeight = this.heightMap.height;\n        let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);\n        this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);\n        if (this.heightMap.height != prevHeight)\n            update.flags |= 2 /* Height */;\n        if (scrollAnchor) {\n            this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);\n            this.scrollAnchorHeight = scrollAnchor.top;\n        }\n        else {\n            this.scrollAnchorPos = -1;\n            this.scrollAnchorHeight = this.heightMap.height;\n        }\n        let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;\n        if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||\n            !this.viewportIsAppropriate(viewport))\n            viewport = this.getViewport(0, scrollTarget);\n        let updateLines = !update.changes.empty || (update.flags & 2 /* Height */) ||\n            viewport.from != this.viewport.from || viewport.to != this.viewport.to;\n        this.viewport = viewport;\n        this.updateForViewport();\n        if (updateLines)\n            this.updateViewportLines();\n        if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* Margin */ << 1))\n            this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));\n        update.flags |= this.computeVisibleRanges();\n        if (scrollTarget)\n            this.scrollTarget = scrollTarget;\n        if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&\n            update.state.selection.main.empty && update.state.selection.main.assoc &&\n            !update.state.facet(nativeSelectionHidden))\n            this.mustEnforceCursorAssoc = true;\n    }\n    measure(view) {\n        let dom = view.contentDOM, style = window.getComputedStyle(dom);\n        let oracle = this.heightOracle;\n        let whiteSpace = style.whiteSpace;\n        this.defaultTextDirection = style.direction == \"rtl\" ? Direction.RTL : Direction.LTR;\n        let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);\n        let domRect = dom.getBoundingClientRect();\n        let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;\n        this.contentDOMHeight = domRect.height;\n        this.mustMeasureContent = false;\n        let result = 0, bias = 0;\n        // Vertical padding\n        let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;\n        if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {\n            this.paddingTop = paddingTop;\n            this.paddingBottom = paddingBottom;\n            result |= 8 /* Geometry */ | 2 /* Height */;\n        }\n        if (this.editorWidth != view.scrollDOM.clientWidth) {\n            if (oracle.lineWrapping)\n                measureContent = true;\n            this.editorWidth = view.scrollDOM.clientWidth;\n            result |= 8 /* Geometry */;\n        }\n        if (this.scrollTop != view.scrollDOM.scrollTop) {\n            this.scrollAnchorHeight = -1;\n            this.scrollTop = view.scrollDOM.scrollTop;\n        }\n        this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);\n        // Pixel viewport\n        let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);\n        let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;\n        this.pixelViewport = pixelViewport;\n        let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;\n        if (inView != this.inView) {\n            this.inView = inView;\n            if (inView)\n                measureContent = true;\n        }\n        if (!this.inView && !this.scrollTarget)\n            return 0;\n        let contentWidth = domRect.width;\n        if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {\n            this.contentDOMWidth = domRect.width;\n            this.editorHeight = view.scrollDOM.clientHeight;\n            result |= 8 /* Geometry */;\n        }\n        if (measureContent) {\n            let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);\n            if (oracle.mustRefreshForHeights(lineHeights))\n                refresh = true;\n            if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {\n                let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();\n                refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);\n                if (refresh) {\n                    view.docView.minWidth = 0;\n                    result |= 8 /* Geometry */;\n                }\n            }\n            if (dTop > 0 && dBottom > 0)\n                bias = Math.max(dTop, dBottom);\n            else if (dTop < 0 && dBottom < 0)\n                bias = Math.min(dTop, dBottom);\n            oracle.heightChanged = false;\n            for (let vp of this.viewports) {\n                let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);\n                this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));\n            }\n            if (oracle.heightChanged)\n                result |= 2 /* Height */;\n        }\n        let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||\n            this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||\n                this.scrollTarget.range.head > this.viewport.to);\n        if (viewportChange)\n            this.viewport = this.getViewport(bias, this.scrollTarget);\n        this.updateForViewport();\n        if ((result & 2 /* Height */) || viewportChange)\n            this.updateViewportLines();\n        if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* Margin */ << 1))\n            this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));\n        result |= this.computeVisibleRanges();\n        if (this.mustEnforceCursorAssoc) {\n            this.mustEnforceCursorAssoc = false;\n            // This is done in the read stage, because moving the selection\n            // to a line end is going to trigger a layout anyway, so it\n            // can't be a pure write. It should be rare that it does any\n            // writing.\n            view.docView.enforceCursorAssoc();\n        }\n        return result;\n    }\n    get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }\n    get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }\n    getViewport(bias, scrollTarget) {\n        // This will divide VP.Margin between the top and the\n        // bottom, depending on the bias (the change in viewport position\n        // since the last update). It'll hold a number between 0 and 1\n        let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */ / 2));\n        let map = this.heightMap, oracle = this.heightOracle;\n        let { visibleTop, visibleBottom } = this;\n        let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* Margin */, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* Margin */, QueryType.ByHeight, oracle, 0, 0).to);\n        // If scrollTarget is given, make sure the viewport includes that position\n        if (scrollTarget) {\n            let { head } = scrollTarget.range;\n            if (head < viewport.from || head > viewport.to) {\n                let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);\n                let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;\n                if (scrollTarget.y == \"center\")\n                    topPos = (block.top + block.bottom) / 2 - viewHeight / 2;\n                else if (scrollTarget.y == \"start\" || scrollTarget.y == \"nearest\" && head < viewport.from)\n                    topPos = block.top;\n                else\n                    topPos = block.bottom - viewHeight;\n                viewport = new Viewport(map.lineAt(topPos - 1000 /* Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).to);\n            }\n        }\n        return viewport;\n    }\n    mapViewport(viewport, changes) {\n        let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);\n        return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);\n    }\n    // Checks if a given viewport covers the visible part of the\n    // document and not too much beyond that.\n    viewportIsAppropriate({ from, to }, bias = 0) {\n        if (!this.inView)\n            return true;\n        let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);\n        let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);\n        let { visibleTop, visibleBottom } = this;\n        return (from == 0 || top <= visibleTop - Math.max(10 /* MinCoverMargin */, Math.min(-bias, 250 /* MaxCoverMargin */))) &&\n            (to == this.state.doc.length ||\n                bottom >= visibleBottom + Math.max(10 /* MinCoverMargin */, Math.min(bias, 250 /* MaxCoverMargin */))) &&\n            (top > visibleTop - 2 * 1000 /* Margin */ && bottom < visibleBottom + 2 * 1000 /* Margin */);\n    }\n    mapLineGaps(gaps, changes) {\n        if (!gaps.length || changes.empty)\n            return gaps;\n        let mapped = [];\n        for (let gap of gaps)\n            if (!changes.touchesRange(gap.from, gap.to))\n                mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));\n        return mapped;\n    }\n    // Computes positions in the viewport where the start or end of a\n    // line should be hidden, trying to reuse existing line gaps when\n    // appropriate to avoid unneccesary redraws.\n    // Uses crude character-counting for the positioning and sizing,\n    // since actual DOM coordinates aren't always available and\n    // predictable. Relies on generous margins (see LG.Margin) to hide\n    // the artifacts this might produce from the user.\n    ensureLineGaps(current, mayMeasure) {\n        let wrapping = this.heightOracle.lineWrapping;\n        let margin = wrapping ? 10000 /* MarginWrap */ : 2000 /* Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;\n        // The non-wrapping logic won't work at all in predominantly right-to-left text.\n        if (this.defaultTextDirection != Direction.LTR && !wrapping)\n            return [];\n        let gaps = [];\n        let addGap = (from, to, line, structure) => {\n            if (to - from < halfMargin)\n                return;\n            let sel = this.state.selection.main, avoid = [sel.from];\n            if (!sel.empty)\n                avoid.push(sel.to);\n            for (let pos of avoid) {\n                if (pos > from && pos < to) {\n                    addGap(from, pos - 10 /* SelectionMargin */, line, structure);\n                    addGap(pos + 10 /* SelectionMargin */, to, line, structure);\n                    return;\n                }\n            }\n            let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&\n                Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&\n                !avoid.some(pos => gap.from < pos && gap.to > pos));\n            if (!gap) {\n                // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping\n                if (to < line.to && mayMeasure && wrapping &&\n                    mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {\n                    let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;\n                    if (lineStart > from)\n                        to = lineStart;\n                }\n                gap = new LineGap(from, to, this.gapSize(line, from, to, structure));\n            }\n            gaps.push(gap);\n        };\n        for (let line of this.viewportLines) {\n            if (line.length < doubleMargin)\n                continue;\n            let structure = lineStructure(line.from, line.to, this.stateDeco);\n            if (structure.total < doubleMargin)\n                continue;\n            let target = this.scrollTarget ? this.scrollTarget.range.head : null;\n            let viewFrom, viewTo;\n            if (wrapping) {\n                let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;\n                let top, bot;\n                if (target != null) {\n                    let targetFrac = findFraction(structure, target);\n                    let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;\n                    top = targetFrac - spaceFrac;\n                    bot = targetFrac + spaceFrac;\n                }\n                else {\n                    top = (this.visibleTop - line.top - marginHeight) / line.height;\n                    bot = (this.visibleBottom - line.top + marginHeight) / line.height;\n                }\n                viewFrom = findPosition(structure, top);\n                viewTo = findPosition(structure, bot);\n            }\n            else {\n                let totalWidth = structure.total * this.heightOracle.charWidth;\n                let marginWidth = margin * this.heightOracle.charWidth;\n                let left, right;\n                if (target != null) {\n                    let targetFrac = findFraction(structure, target);\n                    let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;\n                    left = targetFrac - spaceFrac;\n                    right = targetFrac + spaceFrac;\n                }\n                else {\n                    left = (this.pixelViewport.left - marginWidth) / totalWidth;\n                    right = (this.pixelViewport.right + marginWidth) / totalWidth;\n                }\n                viewFrom = findPosition(structure, left);\n                viewTo = findPosition(structure, right);\n            }\n            if (viewFrom > line.from)\n                addGap(line.from, viewFrom, line, structure);\n            if (viewTo < line.to)\n                addGap(viewTo, line.to, line, structure);\n        }\n        return gaps;\n    }\n    gapSize(line, from, to, structure) {\n        let fraction = findFraction(structure, to) - findFraction(structure, from);\n        if (this.heightOracle.lineWrapping) {\n            return line.height * fraction;\n        }\n        else {\n            return structure.total * this.heightOracle.charWidth * fraction;\n        }\n    }\n    updateLineGaps(gaps) {\n        if (!LineGap.same(gaps, this.lineGaps)) {\n            this.lineGaps = gaps;\n            this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));\n        }\n    }\n    computeVisibleRanges() {\n        let deco = this.stateDeco;\n        if (this.lineGaps.length)\n            deco = deco.concat(this.lineGapDeco);\n        let ranges = [];\n        RangeSet.spans(deco, this.viewport.from, this.viewport.to, {\n            span(from, to) { ranges.push({ from, to }); },\n            point() { }\n        }, 20);\n        let changed = ranges.length != this.visibleRanges.length ||\n            this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);\n        this.visibleRanges = ranges;\n        return changed ? 4 /* Viewport */ : 0;\n    }\n    lineBlockAt(pos) {\n        return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||\n            scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);\n    }\n    lineBlockAtHeight(height) {\n        return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);\n    }\n    scrollAnchorAt(scrollTop) {\n        let block = this.lineBlockAtHeight(scrollTop + 8);\n        return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];\n    }\n    elementAtHeight(height) {\n        return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);\n    }\n    get docHeight() {\n        return this.scaler.toDOM(this.heightMap.height);\n    }\n    get contentHeight() {\n        return this.docHeight + this.paddingTop + this.paddingBottom;\n    }\n}\nclass Viewport {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\nfunction lineStructure(from, to, stateDeco) {\n    let ranges = [], pos = from, total = 0;\n    RangeSet.spans(stateDeco, from, to, {\n        span() { },\n        point(from, to) {\n            if (from > pos) {\n                ranges.push({ from: pos, to: from });\n                total += from - pos;\n            }\n            pos = to;\n        }\n    }, 20); // We're only interested in collapsed ranges of a significant size\n    if (pos < to) {\n        ranges.push({ from: pos, to });\n        total += to - pos;\n    }\n    return { total, ranges };\n}\nfunction findPosition({ total, ranges }, ratio) {\n    if (ratio <= 0)\n        return ranges[0].from;\n    if (ratio >= 1)\n        return ranges[ranges.length - 1].to;\n    let dist = Math.floor(total * ratio);\n    for (let i = 0;; i++) {\n        let { from, to } = ranges[i], size = to - from;\n        if (dist <= size)\n            return from + dist;\n        dist -= size;\n    }\n}\nfunction findFraction(structure, pos) {\n    let counted = 0;\n    for (let { from, to } of structure.ranges) {\n        if (pos <= to) {\n            counted += pos - from;\n            break;\n        }\n        counted += to - from;\n    }\n    return counted / structure.total;\n}\nfunction find(array, f) {\n    for (let val of array)\n        if (f(val))\n            return val;\n    return undefined;\n}\n// Don't scale when the document height is within the range of what\n// the DOM can handle.\nconst IdScaler = {\n    toDOM(n) { return n; },\n    fromDOM(n) { return n; },\n    scale: 1\n};\n// When the height is too big (> VP.MaxDOMHeight), scale down the\n// regions outside the viewports so that the total height is\n// VP.MaxDOMHeight.\nclass BigScaler {\n    constructor(oracle, heightMap, viewports) {\n        let vpHeight = 0, base = 0, domBase = 0;\n        this.viewports = viewports.map(({ from, to }) => {\n            let top = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;\n            let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;\n            vpHeight += bottom - top;\n            return { from, to, top, bottom, domTop: 0, domBottom: 0 };\n        });\n        this.scale = (7000000 /* MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);\n        for (let obj of this.viewports) {\n            obj.domTop = domBase + (obj.top - base) * this.scale;\n            domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);\n            base = obj.bottom;\n        }\n    }\n    toDOM(n) {\n        for (let i = 0, base = 0, domBase = 0;; i++) {\n            let vp = i < this.viewports.length ? this.viewports[i] : null;\n            if (!vp || n < vp.top)\n                return domBase + (n - base) * this.scale;\n            if (n <= vp.bottom)\n                return vp.domTop + (n - vp.top);\n            base = vp.bottom;\n            domBase = vp.domBottom;\n        }\n    }\n    fromDOM(n) {\n        for (let i = 0, base = 0, domBase = 0;; i++) {\n            let vp = i < this.viewports.length ? this.viewports[i] : null;\n            if (!vp || n < vp.domTop)\n                return base + (n - domBase) / this.scale;\n            if (n <= vp.domBottom)\n                return vp.top + (n - vp.domTop);\n            base = vp.bottom;\n            domBase = vp.domBottom;\n        }\n    }\n}\nfunction scaleBlock(block, scaler) {\n    if (scaler.scale == 1)\n        return block;\n    let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);\n    return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(b => scaleBlock(b, scaler)) : block._content);\n}\n\nconst theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(\" \") });\nconst darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });\nconst baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();\nconst lightDarkIDs = { \"&light\": \".\" + baseLightID, \"&dark\": \".\" + baseDarkID };\nfunction buildTheme(main, spec, scopes) {\n    return new StyleModule(spec, {\n        finish(sel) {\n            return /&/.test(sel) ? sel.replace(/&\\w*/, m => {\n                if (m == \"&\")\n                    return main;\n                if (!scopes || !scopes[m])\n                    throw new RangeError(`Unsupported selector: ${m}`);\n                return scopes[m];\n            }) : main + \" \" + sel;\n        }\n    });\n}\nconst baseTheme$1 = /*@__PURE__*/buildTheme(\".\" + baseThemeID, {\n    \"&\": {\n        position: \"relative !important\",\n        boxSizing: \"border-box\",\n        \"&.cm-focused\": {\n            // Provide a simple default outline to make sure a focused\n            // editor is visually distinct. Can't leave the default behavior\n            // because that will apply to the content element, which is\n            // inside the scrollable container and doesn't include the\n            // gutters. We also can't use an 'auto' outline, since those\n            // are, for some reason, drawn behind the element content, which\n            // will cause things like the active line background to cover\n            // the outline (#297).\n            outline: \"1px dotted #212121\"\n        },\n        display: \"flex !important\",\n        flexDirection: \"column\"\n    },\n    \".cm-scroller\": {\n        display: \"flex !important\",\n        alignItems: \"flex-start !important\",\n        fontFamily: \"monospace\",\n        lineHeight: 1.4,\n        height: \"100%\",\n        overflowX: \"auto\",\n        position: \"relative\",\n        zIndex: 0\n    },\n    \".cm-content\": {\n        margin: 0,\n        flexGrow: 2,\n        flexShrink: 0,\n        display: \"block\",\n        whiteSpace: \"pre\",\n        wordWrap: \"normal\",\n        boxSizing: \"border-box\",\n        padding: \"4px 0\",\n        outline: \"none\",\n        \"&[contenteditable=true]\": {\n            WebkitUserModify: \"read-write-plaintext-only\",\n        }\n    },\n    \".cm-lineWrapping\": {\n        whiteSpace_fallback: \"pre-wrap\",\n        whiteSpace: \"break-spaces\",\n        wordBreak: \"break-word\",\n        overflowWrap: \"anywhere\",\n        flexShrink: 1\n    },\n    \"&light .cm-content\": { caretColor: \"black\" },\n    \"&dark .cm-content\": { caretColor: \"white\" },\n    \".cm-line\": {\n        display: \"block\",\n        padding: \"0 2px 0 6px\"\n    },\n    \".cm-layer\": {\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        contain: \"size style\",\n        \"& > *\": {\n            position: \"absolute\"\n        }\n    },\n    \"&light .cm-selectionBackground\": {\n        background: \"#d9d9d9\"\n    },\n    \"&dark .cm-selectionBackground\": {\n        background: \"#222\"\n    },\n    \"&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground\": {\n        background: \"#d7d4f0\"\n    },\n    \"&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground\": {\n        background: \"#233\"\n    },\n    \".cm-cursorLayer\": {\n        pointerEvents: \"none\"\n    },\n    \"&.cm-focused > .cm-scroller > .cm-cursorLayer\": {\n        animation: \"steps(1) cm-blink 1.2s infinite\"\n    },\n    // Two animations defined so that we can switch between them to\n    // restart the animation without forcing another style\n    // recomputation.\n    \"@keyframes cm-blink\": { \"0%\": {}, \"50%\": { opacity: 0 }, \"100%\": {} },\n    \"@keyframes cm-blink2\": { \"0%\": {}, \"50%\": { opacity: 0 }, \"100%\": {} },\n    \".cm-cursor, .cm-dropCursor\": {\n        borderLeft: \"1.2px solid black\",\n        marginLeft: \"-0.6px\",\n        pointerEvents: \"none\",\n    },\n    \".cm-cursor\": {\n        display: \"none\"\n    },\n    \"&dark .cm-cursor\": {\n        borderLeftColor: \"#444\"\n    },\n    \".cm-dropCursor\": {\n        position: \"absolute\"\n    },\n    \"&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor\": {\n        display: \"block\"\n    },\n    \"&light .cm-activeLine\": { backgroundColor: \"#cceeff44\" },\n    \"&dark .cm-activeLine\": { backgroundColor: \"#99eeff33\" },\n    \"&light .cm-specialChar\": { color: \"red\" },\n    \"&dark .cm-specialChar\": { color: \"#f78\" },\n    \".cm-gutters\": {\n        flexShrink: 0,\n        display: \"flex\",\n        height: \"100%\",\n        boxSizing: \"border-box\",\n        insetInlineStart: 0,\n        zIndex: 200\n    },\n    \"&light .cm-gutters\": {\n        backgroundColor: \"#f5f5f5\",\n        color: \"#6c6c6c\",\n        borderRight: \"1px solid #ddd\"\n    },\n    \"&dark .cm-gutters\": {\n        backgroundColor: \"#333338\",\n        color: \"#ccc\"\n    },\n    \".cm-gutter\": {\n        display: \"flex !important\",\n        flexDirection: \"column\",\n        flexShrink: 0,\n        boxSizing: \"border-box\",\n        minHeight: \"100%\",\n        overflow: \"hidden\"\n    },\n    \".cm-gutterElement\": {\n        boxSizing: \"border-box\"\n    },\n    \".cm-lineNumbers .cm-gutterElement\": {\n        padding: \"0 3px 0 5px\",\n        minWidth: \"20px\",\n        textAlign: \"right\",\n        whiteSpace: \"nowrap\"\n    },\n    \"&light .cm-activeLineGutter\": {\n        backgroundColor: \"#e2f2ff\"\n    },\n    \"&dark .cm-activeLineGutter\": {\n        backgroundColor: \"#222227\"\n    },\n    \".cm-panels\": {\n        boxSizing: \"border-box\",\n        position: \"sticky\",\n        left: 0,\n        right: 0\n    },\n    \"&light .cm-panels\": {\n        backgroundColor: \"#f5f5f5\",\n        color: \"black\"\n    },\n    \"&light .cm-panels-top\": {\n        borderBottom: \"1px solid #ddd\"\n    },\n    \"&light .cm-panels-bottom\": {\n        borderTop: \"1px solid #ddd\"\n    },\n    \"&dark .cm-panels\": {\n        backgroundColor: \"#333338\",\n        color: \"white\"\n    },\n    \".cm-tab\": {\n        display: \"inline-block\",\n        overflow: \"hidden\",\n        verticalAlign: \"bottom\"\n    },\n    \".cm-widgetBuffer\": {\n        verticalAlign: \"text-top\",\n        height: \"1em\",\n        width: 0,\n        display: \"inline\"\n    },\n    \".cm-placeholder\": {\n        color: \"#888\",\n        display: \"inline-block\",\n        verticalAlign: \"top\",\n    },\n    \".cm-highlightSpace:before\": {\n        content: \"attr(data-display)\",\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        color: \"#888\"\n    },\n    \".cm-highlightTab\": {\n        backgroundImage: `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"20\"><path stroke=\"%23888\" stroke-width=\"1\" fill=\"none\" d=\"M1 10H196L190 5M190 15L196 10M197 4L197 16\"/></svg>')`,\n        backgroundSize: \"auto 100%\",\n        backgroundPosition: \"right 90%\",\n        backgroundRepeat: \"no-repeat\"\n    },\n    \".cm-trailingSpace\": {\n        backgroundColor: \"#ff332255\"\n    },\n    \".cm-button\": {\n        verticalAlign: \"middle\",\n        color: \"inherit\",\n        fontSize: \"70%\",\n        padding: \".2em 1em\",\n        borderRadius: \"1px\"\n    },\n    \"&light .cm-button\": {\n        backgroundImage: \"linear-gradient(#eff1f5, #d9d9df)\",\n        border: \"1px solid #888\",\n        \"&:active\": {\n            backgroundImage: \"linear-gradient(#b4b4b4, #d0d3d6)\"\n        }\n    },\n    \"&dark .cm-button\": {\n        backgroundImage: \"linear-gradient(#393939, #111)\",\n        border: \"1px solid #888\",\n        \"&:active\": {\n            backgroundImage: \"linear-gradient(#111, #333)\"\n        }\n    },\n    \".cm-textfield\": {\n        verticalAlign: \"middle\",\n        color: \"inherit\",\n        fontSize: \"70%\",\n        border: \"1px solid silver\",\n        padding: \".2em .5em\"\n    },\n    \"&light .cm-textfield\": {\n        backgroundColor: \"white\"\n    },\n    \"&dark .cm-textfield\": {\n        border: \"1px solid #555\",\n        backgroundColor: \"inherit\"\n    }\n}, lightDarkIDs);\n\nclass DOMChange {\n    constructor(view, start, end, typeOver) {\n        this.typeOver = typeOver;\n        this.bounds = null;\n        this.text = \"\";\n        let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;\n        if (view.state.readOnly && start > -1) {\n            // Ignore changes when the editor is read-only\n            this.newSel = null;\n        }\n        else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {\n            let selPoints = iHead || iAnchor ? [] : selectionPoints(view);\n            let reader = new DOMReader(selPoints, view.state);\n            reader.readRange(this.bounds.startDOM, this.bounds.endDOM);\n            this.text = reader.text;\n            this.newSel = selectionFromPoints(selPoints, this.bounds.from);\n        }\n        else {\n            let domSel = view.observer.selectionRange;\n            let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||\n                !contains(view.contentDOM, domSel.focusNode)\n                ? view.state.selection.main.head\n                : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);\n            let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||\n                !contains(view.contentDOM, domSel.anchorNode)\n                ? view.state.selection.main.anchor\n                : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);\n            this.newSel = EditorSelection.single(anchor, head);\n        }\n    }\n}\nfunction applyDOMChange(view, domChange) {\n    let change;\n    let { newSel } = domChange, sel = view.state.selection.main;\n    let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;\n    if (domChange.bounds) {\n        let { from, to } = domChange.bounds;\n        let preferredPos = sel.from, preferredSide = null;\n        // Prefer anchoring to end when Backspace is pressed (or, on\n        // Android, when something was deleted)\n        if (lastKey === 8 || browser.android && domChange.text.length < to - from) {\n            preferredPos = sel.to;\n            preferredSide = \"end\";\n        }\n        let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);\n        if (diff) {\n            // Chrome inserts two newlines when pressing shift-enter at the\n            // end of a line. DomChange drops one of those.\n            if (browser.chrome && lastKey == 13 &&\n                diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)\n                diff.toB--;\n            change = { from: from + diff.from, to: from + diff.toA,\n                insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };\n        }\n    }\n    else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {\n        newSel = null;\n    }\n    if (!change && !newSel)\n        return false;\n    if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {\n        // Heuristic to notice typing over a selected character\n        change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };\n    }\n    else if (change && change.from >= sel.from && change.to <= sel.to &&\n        (change.from != sel.from || change.to != sel.to) &&\n        (sel.to - sel.from) - (change.to - change.from) <= 4) {\n        // If the change is inside the selection and covers most of it,\n        // assume it is a selection replace (with identical characters at\n        // the start/end not included in the diff)\n        change = {\n            from: sel.from, to: sel.to,\n            insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))\n        };\n    }\n    else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&\n        /^\\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute(\"autocorrect\") == \"off\") {\n        // Detect insert-period-on-double-space Mac and Android behavior,\n        // and transform it into a regular space insert.\n        if (newSel && change.insert.length == 2)\n            newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);\n        change = { from: sel.from, to: sel.to, insert: Text.of([\" \"]) };\n    }\n    else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&\n        change.insert.toString() == \"\\n \" && view.lineWrapping) {\n        // In Chrome, if you insert a space at the start of a wrapped\n        // line, it will actually insert a newline and a space, causing a\n        // bogus new line to be created in CodeMirror (#968)\n        if (newSel)\n            newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);\n        change = { from: sel.from, to: sel.to, insert: Text.of([\" \"]) };\n    }\n    if (change) {\n        let startState = view.state;\n        if (browser.ios && view.inputState.flushIOSKey(view))\n            return true;\n        // Android browsers don't fire reasonable key events for enter,\n        // backspace, or delete. So this detects changes that look like\n        // they're caused by those keys, and reinterprets them as key\n        // events. (Some of these keys are also handled by beforeinput\n        // events and the pendingAndroidKey mechanism, but that's not\n        // reliable in all situations.)\n        if (browser.android &&\n            ((change.from == sel.from && change.to == sel.to &&\n                change.insert.length == 1 && change.insert.lines == 2 &&\n                dispatchKey(view.contentDOM, \"Enter\", 13)) ||\n                ((change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 ||\n                    lastKey == 8 && change.insert.length < change.to - change.from) &&\n                    dispatchKey(view.contentDOM, \"Backspace\", 8)) ||\n                (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&\n                    dispatchKey(view.contentDOM, \"Delete\", 46))))\n            return true;\n        let text = change.insert.toString();\n        if (view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text)))\n            return true;\n        if (view.inputState.composing >= 0)\n            view.inputState.composing++;\n        let tr;\n        if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&\n            (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&\n            view.inputState.composing < 0) {\n            let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : \"\";\n            let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : \"\";\n            tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));\n        }\n        else {\n            let changes = startState.changes(change);\n            let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;\n            // Try to apply a composition change to all cursors\n            if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&\n                change.to <= sel.to && change.to >= sel.to - 10) {\n                let replaced = view.state.sliceDoc(change.from, change.to);\n                let composition = findCompositionNode(view) || view.state.doc.lineAt(sel.head);\n                let offset = sel.to - change.to, size = sel.to - sel.from;\n                tr = startState.changeByRange(range => {\n                    if (range.from == sel.from && range.to == sel.to)\n                        return { changes, range: mainSel || range.map(changes) };\n                    let to = range.to - offset, from = to - replaced.length;\n                    if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||\n                        // Unfortunately, there's no way to make multiple\n                        // changes in the same node work without aborting\n                        // composition, so cursors in the composition range are\n                        // ignored.\n                        composition && range.to >= composition.from && range.from <= composition.to)\n                        return { range };\n                    let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;\n                    return {\n                        changes: rangeChanges,\n                        range: !mainSel ? range.map(rangeChanges) :\n                            EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))\n                    };\n                });\n            }\n            else {\n                tr = {\n                    changes,\n                    selection: mainSel && startState.selection.replaceRange(mainSel)\n                };\n            }\n        }\n        let userEvent = \"input.type\";\n        if (view.composing ||\n            view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {\n            view.inputState.compositionPendingChange = false;\n            userEvent += \".compose\";\n            if (view.inputState.compositionFirstChange) {\n                userEvent += \".start\";\n                view.inputState.compositionFirstChange = false;\n            }\n        }\n        view.dispatch(tr, { scrollIntoView: true, userEvent });\n        return true;\n    }\n    else if (newSel && !newSel.main.eq(sel)) {\n        let scrollIntoView = false, userEvent = \"select\";\n        if (view.inputState.lastSelectionTime > Date.now() - 50) {\n            if (view.inputState.lastSelectionOrigin == \"select\")\n                scrollIntoView = true;\n            userEvent = view.inputState.lastSelectionOrigin;\n        }\n        view.dispatch({ selection: newSel, scrollIntoView, userEvent });\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction findDiff(a, b, preferredPos, preferredSide) {\n    let minLen = Math.min(a.length, b.length);\n    let from = 0;\n    while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))\n        from++;\n    if (from == minLen && a.length == b.length)\n        return null;\n    let toA = a.length, toB = b.length;\n    while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {\n        toA--;\n        toB--;\n    }\n    if (preferredSide == \"end\") {\n        let adjust = Math.max(0, from - Math.min(toA, toB));\n        preferredPos -= toA + adjust - from;\n    }\n    if (toA < from && a.length < b.length) {\n        let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;\n        from -= move;\n        toB = from + (toB - toA);\n        toA = from;\n    }\n    else if (toB < from) {\n        let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;\n        from -= move;\n        toA = from + (toA - toB);\n        toB = from;\n    }\n    return { from, toA, toB };\n}\nfunction selectionPoints(view) {\n    let result = [];\n    if (view.root.activeElement != view.contentDOM)\n        return result;\n    let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;\n    if (anchorNode) {\n        result.push(new DOMPoint(anchorNode, anchorOffset));\n        if (focusNode != anchorNode || focusOffset != anchorOffset)\n            result.push(new DOMPoint(focusNode, focusOffset));\n    }\n    return result;\n}\nfunction selectionFromPoints(points, base) {\n    if (points.length == 0)\n        return null;\n    let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;\n    return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;\n}\n\nconst observeOptions = {\n    childList: true,\n    characterData: true,\n    subtree: true,\n    attributes: true,\n    characterDataOldValue: true\n};\n// IE11 has very broken mutation observers, so we also listen to\n// DOMCharacterDataModified there\nconst useCharData = browser.ie && browser.ie_version <= 11;\nclass DOMObserver {\n    constructor(view) {\n        this.view = view;\n        this.active = false;\n        // The known selection. Kept in our own object, as opposed to just\n        // directly accessing the selection because:\n        //  - Safari doesn't report the right selection in shadow DOM\n        //  - Reading from the selection forces a DOM layout\n        //  - This way, we can ignore selectionchange events if we have\n        //    already seen the 'new' selection\n        this.selectionRange = new DOMSelectionState;\n        // Set when a selection change is detected, cleared on flush\n        this.selectionChanged = false;\n        this.delayedFlush = -1;\n        this.resizeTimeout = -1;\n        this.queue = [];\n        this.delayedAndroidKey = null;\n        this.flushingAndroidKey = -1;\n        this.lastChange = 0;\n        this.scrollTargets = [];\n        this.intersection = null;\n        this.resizeScroll = null;\n        this.resizeContent = null;\n        this.intersecting = false;\n        this.gapIntersection = null;\n        this.gaps = [];\n        // Timeout for scheduling check of the parents that need scroll handlers\n        this.parentCheck = -1;\n        this.dom = view.contentDOM;\n        this.observer = new MutationObserver(mutations => {\n            for (let mut of mutations)\n                this.queue.push(mut);\n            // IE11 will sometimes (on typing over a selection or\n            // backspacing out a single character text node) call the\n            // observer callback before actually updating the DOM.\n            //\n            // Unrelatedly, iOS Safari will, when ending a composition,\n            // sometimes first clear it, deliver the mutations, and then\n            // reinsert the finished text. CodeMirror's handling of the\n            // deletion will prevent the reinsertion from happening,\n            // breaking composition.\n            if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&\n                mutations.some(m => m.type == \"childList\" && m.removedNodes.length ||\n                    m.type == \"characterData\" && m.oldValue.length > m.target.nodeValue.length))\n                this.flushSoon();\n            else\n                this.flush();\n        });\n        if (useCharData)\n            this.onCharData = (event) => {\n                this.queue.push({ target: event.target,\n                    type: \"characterData\",\n                    oldValue: event.prevValue });\n                this.flushSoon();\n            };\n        this.onSelectionChange = this.onSelectionChange.bind(this);\n        this.onResize = this.onResize.bind(this);\n        this.onPrint = this.onPrint.bind(this);\n        this.onScroll = this.onScroll.bind(this);\n        if (typeof ResizeObserver == \"function\") {\n            this.resizeScroll = new ResizeObserver(() => {\n                var _a;\n                if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)\n                    this.onResize();\n            });\n            this.resizeScroll.observe(view.scrollDOM);\n            this.resizeContent = new ResizeObserver(() => this.view.requestMeasure());\n            this.resizeContent.observe(view.contentDOM);\n        }\n        this.addWindowListeners(this.win = view.win);\n        this.start();\n        if (typeof IntersectionObserver == \"function\") {\n            this.intersection = new IntersectionObserver(entries => {\n                if (this.parentCheck < 0)\n                    this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);\n                if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {\n                    this.intersecting = !this.intersecting;\n                    if (this.intersecting != this.view.inView)\n                        this.onScrollChanged(document.createEvent(\"Event\"));\n                }\n            }, { threshold: [0, .001] });\n            this.intersection.observe(this.dom);\n            this.gapIntersection = new IntersectionObserver(entries => {\n                if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)\n                    this.onScrollChanged(document.createEvent(\"Event\"));\n            }, {});\n        }\n        this.listenForScroll();\n        this.readSelectionRange();\n    }\n    onScrollChanged(e) {\n        this.view.inputState.runScrollHandlers(this.view, e);\n        if (this.intersecting)\n            this.view.measure();\n    }\n    onScroll(e) {\n        if (this.intersecting)\n            this.flush(false);\n        this.onScrollChanged(e);\n    }\n    onResize() {\n        if (this.resizeTimeout < 0)\n            this.resizeTimeout = setTimeout(() => {\n                this.resizeTimeout = -1;\n                this.view.requestMeasure();\n            }, 50);\n    }\n    onPrint() {\n        this.view.viewState.printing = true;\n        this.view.measure();\n        setTimeout(() => {\n            this.view.viewState.printing = false;\n            this.view.requestMeasure();\n        }, 500);\n    }\n    updateGaps(gaps) {\n        if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {\n            this.gapIntersection.disconnect();\n            for (let gap of gaps)\n                this.gapIntersection.observe(gap);\n            this.gaps = gaps;\n        }\n    }\n    onSelectionChange(event) {\n        let wasChanged = this.selectionChanged;\n        if (!this.readSelectionRange() || this.delayedAndroidKey)\n            return;\n        let { view } = this, sel = this.selectionRange;\n        if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))\n            return;\n        let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);\n        if (context && context.ignoreEvent(event)) {\n            if (!wasChanged)\n                this.selectionChanged = false;\n            return;\n        }\n        // Deletions on IE11 fire their events in the wrong order, giving\n        // us a selection change event before the DOM changes are\n        // reported.\n        // Chrome Android has a similar issue when backspacing out a\n        // selection (#645).\n        if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&\n            // (Selection.isCollapsed isn't reliable on IE)\n            sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))\n            this.flushSoon();\n        else\n            this.flush(false);\n    }\n    readSelectionRange() {\n        let { view } = this;\n        // The Selection object is broken in shadow roots in Safari. See\n        // https://github.com/codemirror/dev/issues/414\n        let range = browser.safari && view.root.nodeType == 11 &&\n            deepActiveElement(this.dom.ownerDocument) == this.dom &&\n            safariSelectionRangeHack(this.view) || getSelection(view.root);\n        if (!range || this.selectionRange.eq(range))\n            return false;\n        let local = hasSelection(this.dom, range);\n        // Detect the situation where the browser has, on focus, moved the\n        // selection to the start of the content element. Reset it to the\n        // position from the editor state.\n        if (local && !this.selectionChanged &&\n            view.inputState.lastFocusTime > Date.now() - 200 &&\n            view.inputState.lastTouchTime < Date.now() - 300 &&\n            atElementStart(this.dom, range)) {\n            this.view.inputState.lastFocusTime = 0;\n            view.docView.updateSelection();\n            return false;\n        }\n        this.selectionRange.setRange(range);\n        if (local)\n            this.selectionChanged = true;\n        return true;\n    }\n    setSelectionRange(anchor, head) {\n        this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);\n        this.selectionChanged = false;\n    }\n    clearSelectionRange() {\n        this.selectionRange.set(null, 0, null, 0);\n    }\n    listenForScroll() {\n        this.parentCheck = -1;\n        let i = 0, changed = null;\n        for (let dom = this.dom; dom;) {\n            if (dom.nodeType == 1) {\n                if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)\n                    i++;\n                else if (!changed)\n                    changed = this.scrollTargets.slice(0, i);\n                if (changed)\n                    changed.push(dom);\n                dom = dom.assignedSlot || dom.parentNode;\n            }\n            else if (dom.nodeType == 11) { // Shadow root\n                dom = dom.host;\n            }\n            else {\n                break;\n            }\n        }\n        if (i < this.scrollTargets.length && !changed)\n            changed = this.scrollTargets.slice(0, i);\n        if (changed) {\n            for (let dom of this.scrollTargets)\n                dom.removeEventListener(\"scroll\", this.onScroll);\n            for (let dom of this.scrollTargets = changed)\n                dom.addEventListener(\"scroll\", this.onScroll);\n        }\n    }\n    ignore(f) {\n        if (!this.active)\n            return f();\n        try {\n            this.stop();\n            return f();\n        }\n        finally {\n            this.start();\n            this.clear();\n        }\n    }\n    start() {\n        if (this.active)\n            return;\n        this.observer.observe(this.dom, observeOptions);\n        if (useCharData)\n            this.dom.addEventListener(\"DOMCharacterDataModified\", this.onCharData);\n        this.active = true;\n    }\n    stop() {\n        if (!this.active)\n            return;\n        this.active = false;\n        this.observer.disconnect();\n        if (useCharData)\n            this.dom.removeEventListener(\"DOMCharacterDataModified\", this.onCharData);\n    }\n    // Throw away any pending changes\n    clear() {\n        this.processRecords();\n        this.queue.length = 0;\n        this.selectionChanged = false;\n    }\n    // Chrome Android, especially in combination with GBoard, not only\n    // doesn't reliably fire regular key events, but also often\n    // surrounds the effect of enter or backspace with a bunch of\n    // composition events that, when interrupted, cause text duplication\n    // or other kinds of corruption. This hack makes the editor back off\n    // from handling DOM changes for a moment when such a key is\n    // detected (via beforeinput or keydown), and then tries to flush\n    // them or, if that has no effect, dispatches the given key.\n    delayAndroidKey(key, keyCode) {\n        var _a;\n        if (!this.delayedAndroidKey) {\n            let flush = () => {\n                let key = this.delayedAndroidKey;\n                if (key) {\n                    this.clearDelayedAndroidKey();\n                    this.view.inputState.lastKeyCode = key.keyCode;\n                    this.view.inputState.lastKeyTime = Date.now();\n                    let flushed = this.flush();\n                    if (!flushed && key.force)\n                        dispatchKey(this.dom, key.key, key.keyCode);\n                }\n            };\n            this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);\n        }\n        // Since backspace beforeinput is sometimes signalled spuriously,\n        // Enter always takes precedence.\n        if (!this.delayedAndroidKey || key == \"Enter\")\n            this.delayedAndroidKey = {\n                key, keyCode,\n                // Only run the key handler when no changes are detected if\n                // this isn't coming right after another change, in which case\n                // it is probably part of a weird chain of updates, and should\n                // be ignored if it returns the DOM to its previous state.\n                force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)\n            };\n    }\n    clearDelayedAndroidKey() {\n        this.win.cancelAnimationFrame(this.flushingAndroidKey);\n        this.delayedAndroidKey = null;\n        this.flushingAndroidKey = -1;\n    }\n    flushSoon() {\n        if (this.delayedFlush < 0)\n            this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });\n    }\n    forceFlush() {\n        if (this.delayedFlush >= 0) {\n            this.view.win.cancelAnimationFrame(this.delayedFlush);\n            this.delayedFlush = -1;\n        }\n        this.flush();\n    }\n    pendingRecords() {\n        for (let mut of this.observer.takeRecords())\n            this.queue.push(mut);\n        return this.queue;\n    }\n    processRecords() {\n        let records = this.pendingRecords();\n        if (records.length)\n            this.queue = [];\n        let from = -1, to = -1, typeOver = false;\n        for (let record of records) {\n            let range = this.readMutation(record);\n            if (!range)\n                continue;\n            if (range.typeOver)\n                typeOver = true;\n            if (from == -1) {\n                ({ from, to } = range);\n            }\n            else {\n                from = Math.min(range.from, from);\n                to = Math.max(range.to, to);\n            }\n        }\n        return { from, to, typeOver };\n    }\n    readChange() {\n        let { from, to, typeOver } = this.processRecords();\n        let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);\n        if (from < 0 && !newSel)\n            return null;\n        if (from > -1)\n            this.lastChange = Date.now();\n        this.view.inputState.lastFocusTime = 0;\n        this.selectionChanged = false;\n        return new DOMChange(this.view, from, to, typeOver);\n    }\n    // Apply pending changes, if any\n    flush(readSelection = true) {\n        // Completely hold off flushing when pending keys are set—the code\n        // managing those will make sure processRecords is called and the\n        // view is resynchronized after\n        if (this.delayedFlush >= 0 || this.delayedAndroidKey)\n            return false;\n        if (readSelection)\n            this.readSelectionRange();\n        let domChange = this.readChange();\n        if (!domChange)\n            return false;\n        let startState = this.view.state;\n        let handled = applyDOMChange(this.view, domChange);\n        // The view wasn't updated\n        if (this.view.state == startState)\n            this.view.update([]);\n        return handled;\n    }\n    readMutation(rec) {\n        let cView = this.view.docView.nearest(rec.target);\n        if (!cView || cView.ignoreMutation(rec))\n            return null;\n        cView.markDirty(rec.type == \"attributes\");\n        if (rec.type == \"attributes\")\n            cView.flags |= 4 /* AttrsDirty */;\n        if (rec.type == \"childList\") {\n            let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);\n            let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);\n            return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,\n                to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };\n        }\n        else if (rec.type == \"characterData\") {\n            return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };\n        }\n        else {\n            return null;\n        }\n    }\n    setWindow(win) {\n        if (win != this.win) {\n            this.removeWindowListeners(this.win);\n            this.win = win;\n            this.addWindowListeners(this.win);\n        }\n    }\n    addWindowListeners(win) {\n        win.addEventListener(\"resize\", this.onResize);\n        win.addEventListener(\"beforeprint\", this.onPrint);\n        win.addEventListener(\"scroll\", this.onScroll);\n        win.document.addEventListener(\"selectionchange\", this.onSelectionChange);\n    }\n    removeWindowListeners(win) {\n        win.removeEventListener(\"scroll\", this.onScroll);\n        win.removeEventListener(\"resize\", this.onResize);\n        win.removeEventListener(\"beforeprint\", this.onPrint);\n        win.document.removeEventListener(\"selectionchange\", this.onSelectionChange);\n    }\n    destroy() {\n        var _a, _b, _c, _d;\n        this.stop();\n        (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();\n        (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();\n        (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();\n        (_d = this.resizeContent) === null || _d === void 0 ? void 0 : _d.disconnect();\n        for (let dom of this.scrollTargets)\n            dom.removeEventListener(\"scroll\", this.onScroll);\n        this.removeWindowListeners(this.win);\n        clearTimeout(this.parentCheck);\n        clearTimeout(this.resizeTimeout);\n        this.win.cancelAnimationFrame(this.delayedFlush);\n        this.win.cancelAnimationFrame(this.flushingAndroidKey);\n    }\n}\nfunction findChild(cView, dom, dir) {\n    while (dom) {\n        let curView = ContentView.get(dom);\n        if (curView && curView.parent == cView)\n            return curView;\n        let parent = dom.parentNode;\n        dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;\n    }\n    return null;\n}\n// Used to work around a Safari Selection/shadow DOM bug (#414)\nfunction safariSelectionRangeHack(view) {\n    let found = null;\n    // Because Safari (at least in 2018-2021) doesn't provide regular\n    // access to the selection inside a shadowroot, we have to perform a\n    // ridiculous hack to get at it—using `execCommand` to trigger a\n    // `beforeInput` event so that we can read the target range from the\n    // event.\n    function read(event) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        found = event.getTargetRanges()[0];\n    }\n    view.contentDOM.addEventListener(\"beforeinput\", read, true);\n    view.dom.ownerDocument.execCommand(\"indent\");\n    view.contentDOM.removeEventListener(\"beforeinput\", read, true);\n    if (!found)\n        return null;\n    let anchorNode = found.startContainer, anchorOffset = found.startOffset;\n    let focusNode = found.endContainer, focusOffset = found.endOffset;\n    let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);\n    // Since such a range doesn't distinguish between anchor and head,\n    // use a heuristic that flips it around if its end matches the\n    // current anchor.\n    if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))\n        [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];\n    return { anchorNode, anchorOffset, focusNode, focusOffset };\n}\n\n// The editor's update state machine looks something like this:\n//\n//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle\n//                                         ↑      ↓\n//                                         Updating (measure)\n//\n// The difference between 'Idle' and 'Idle (unchecked)' lies in\n// whether a layout check has been scheduled. A regular update through\n// the `update` method updates the DOM in a write-only fashion, and\n// relies on a check (scheduled with `requestAnimationFrame`) to make\n// sure everything is where it should be and the viewport covers the\n// visible code. That check continues to measure and then optionally\n// update until it reaches a coherent state.\n/**\nAn editor view represents the editor's user interface. It holds\nthe editable DOM surface, and possibly other elements such as the\nline number gutter. It handles events and dispatches state\ntransactions for editing actions.\n*/\nclass EditorView {\n    /**\n    Construct a new view. You'll want to either provide a `parent`\n    option, or put `view.dom` into your document after creating a\n    view, so that the user can see the editor.\n    */\n    constructor(config = {}) {\n        this.plugins = [];\n        this.pluginMap = new Map;\n        this.editorAttrs = {};\n        this.contentAttrs = {};\n        this.bidiCache = [];\n        this.destroyed = false;\n        /**\n        @internal\n        */\n        this.updateState = 2 /* Updating */;\n        /**\n        @internal\n        */\n        this.measureScheduled = -1;\n        /**\n        @internal\n        */\n        this.measureRequests = [];\n        this.contentDOM = document.createElement(\"div\");\n        this.scrollDOM = document.createElement(\"div\");\n        this.scrollDOM.tabIndex = -1;\n        this.scrollDOM.className = \"cm-scroller\";\n        this.scrollDOM.appendChild(this.contentDOM);\n        this.announceDOM = document.createElement(\"div\");\n        this.announceDOM.style.cssText = \"position: fixed; top: -10000px\";\n        this.announceDOM.setAttribute(\"aria-live\", \"polite\");\n        this.dom = document.createElement(\"div\");\n        this.dom.appendChild(this.announceDOM);\n        this.dom.appendChild(this.scrollDOM);\n        this._dispatch = config.dispatch || ((tr) => this.update([tr]));\n        this.dispatch = this.dispatch.bind(this);\n        this._root = (config.root || getRoot(config.parent) || document);\n        this.viewState = new ViewState(config.state || EditorState.create(config));\n        this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));\n        for (let plugin of this.plugins)\n            plugin.update(this);\n        this.observer = new DOMObserver(this);\n        this.inputState = new InputState(this);\n        this.inputState.ensureHandlers(this, this.plugins);\n        this.docView = new DocView(this);\n        this.mountStyles();\n        this.updateAttrs();\n        this.updateState = 0 /* Idle */;\n        this.requestMeasure();\n        if (config.parent)\n            config.parent.appendChild(this.dom);\n    }\n    /**\n    The current editor state.\n    */\n    get state() { return this.viewState.state; }\n    /**\n    To be able to display large documents without consuming too much\n    memory or overloading the browser, CodeMirror only draws the\n    code that is visible (plus a margin around it) to the DOM. This\n    property tells you the extent of the current drawn viewport, in\n    document positions.\n    */\n    get viewport() { return this.viewState.viewport; }\n    /**\n    When there are, for example, large collapsed ranges in the\n    viewport, its size can be a lot bigger than the actual visible\n    content. Thus, if you are doing something like styling the\n    content in the viewport, it is preferable to only do so for\n    these ranges, which are the subset of the viewport that is\n    actually drawn.\n    */\n    get visibleRanges() { return this.viewState.visibleRanges; }\n    /**\n    Returns false when the editor is entirely scrolled out of view\n    or otherwise hidden.\n    */\n    get inView() { return this.viewState.inView; }\n    /**\n    Indicates whether the user is currently composing text via\n    [IME](https://en.wikipedia.org/wiki/Input_method), and at least\n    one change has been made in the current composition.\n    */\n    get composing() { return this.inputState.composing > 0; }\n    /**\n    Indicates whether the user is currently in composing state. Note\n    that on some platforms, like Android, this will be the case a\n    lot, since just putting the cursor on a word starts a\n    composition there.\n    */\n    get compositionStarted() { return this.inputState.composing >= 0; }\n    /**\n    The document or shadow root that the view lives in.\n    */\n    get root() { return this._root; }\n    /**\n    @internal\n    */\n    get win() { return this.dom.ownerDocument.defaultView || window; }\n    dispatch(...input) {\n        let tr = input.length == 1 && input[0] instanceof Transaction ? input[0]\n            : this.state.update(...input);\n        this._dispatch(tr, this);\n    }\n    /**\n    Update the view for the given array of transactions. This will\n    update the visible document and selection to match the state\n    produced by the transactions, and notify view plugins of the\n    change. You should usually call\n    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this\n    as a primitive.\n    */\n    update(transactions) {\n        if (this.updateState != 0 /* Idle */)\n            throw new Error(\"Calls to EditorView.update are not allowed while an update is in progress\");\n        let redrawn = false, attrsChanged = false, update;\n        let state = this.state;\n        for (let tr of transactions) {\n            if (tr.startState != state)\n                throw new RangeError(\"Trying to update state with a transaction that doesn't start from the previous state.\");\n            state = tr.state;\n        }\n        if (this.destroyed) {\n            this.viewState.state = state;\n            return;\n        }\n        let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;\n        if (transactions.some(tr => tr.annotation(isFocusChange))) {\n            this.inputState.notifiedFocused = focus;\n            // If a focus-change transaction is being dispatched, set this update flag.\n            focusFlag = 1 /* Focus */;\n        }\n        else if (focus != this.inputState.notifiedFocused) {\n            this.inputState.notifiedFocused = focus;\n            // Schedule a separate focus transaction if necessary, otherwise\n            // add a flag to this update\n            dispatchFocus = focusChangeTransaction(state, focus);\n            if (!dispatchFocus)\n                focusFlag = 1 /* Focus */;\n        }\n        // If there was a pending DOM change, eagerly read it and try to\n        // apply it after the given transactions.\n        let pendingKey = this.observer.delayedAndroidKey, domChange = null;\n        if (pendingKey) {\n            this.observer.clearDelayedAndroidKey();\n            domChange = this.observer.readChange();\n            // Only try to apply DOM changes if the transactions didn't\n            // change the doc or selection.\n            if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))\n                domChange = null;\n        }\n        else {\n            this.observer.clear();\n        }\n        // When the phrases change, redraw the editor\n        if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))\n            return this.setState(state);\n        update = ViewUpdate.create(this, state, transactions);\n        update.flags |= focusFlag;\n        let scrollTarget = this.viewState.scrollTarget;\n        try {\n            this.updateState = 2 /* Updating */;\n            for (let tr of transactions) {\n                if (scrollTarget)\n                    scrollTarget = scrollTarget.map(tr.changes);\n                if (tr.scrollIntoView) {\n                    let { main } = tr.state.selection;\n                    scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));\n                }\n                for (let e of tr.effects)\n                    if (e.is(scrollIntoView))\n                        scrollTarget = e.value;\n            }\n            this.viewState.update(update, scrollTarget);\n            this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);\n            if (!update.empty) {\n                this.updatePlugins(update);\n                this.inputState.update(update);\n            }\n            redrawn = this.docView.update(update);\n            if (this.state.facet(styleModule) != this.styleModules)\n                this.mountStyles();\n            attrsChanged = this.updateAttrs();\n            this.showAnnouncements(transactions);\n            this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent(\"select.pointer\")));\n        }\n        finally {\n            this.updateState = 0 /* Idle */;\n        }\n        if (update.startState.facet(theme) != update.state.facet(theme))\n            this.viewState.mustMeasureContent = true;\n        if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)\n            this.requestMeasure();\n        if (!update.empty)\n            for (let listener of this.state.facet(updateListener))\n                listener(update);\n        if (dispatchFocus || domChange)\n            Promise.resolve().then(() => {\n                if (dispatchFocus && this.state == dispatchFocus.startState)\n                    this.dispatch(dispatchFocus);\n                if (domChange) {\n                    if (!applyDOMChange(this, domChange) && pendingKey.force)\n                        dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);\n                }\n            });\n    }\n    /**\n    Reset the view to the given state. (This will cause the entire\n    document to be redrawn and all view plugins to be reinitialized,\n    so you should probably only use it when the new state isn't\n    derived from the old state. Otherwise, use\n    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)\n    */\n    setState(newState) {\n        if (this.updateState != 0 /* Idle */)\n            throw new Error(\"Calls to EditorView.setState are not allowed while an update is in progress\");\n        if (this.destroyed) {\n            this.viewState.state = newState;\n            return;\n        }\n        this.updateState = 2 /* Updating */;\n        let hadFocus = this.hasFocus;\n        try {\n            for (let plugin of this.plugins)\n                plugin.destroy(this);\n            this.viewState = new ViewState(newState);\n            this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));\n            this.pluginMap.clear();\n            for (let plugin of this.plugins)\n                plugin.update(this);\n            this.docView = new DocView(this);\n            this.inputState.ensureHandlers(this, this.plugins);\n            this.mountStyles();\n            this.updateAttrs();\n            this.bidiCache = [];\n        }\n        finally {\n            this.updateState = 0 /* Idle */;\n        }\n        if (hadFocus)\n            this.focus();\n        this.requestMeasure();\n    }\n    updatePlugins(update) {\n        let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);\n        if (prevSpecs != specs) {\n            let newPlugins = [];\n            for (let spec of specs) {\n                let found = prevSpecs.indexOf(spec);\n                if (found < 0) {\n                    newPlugins.push(new PluginInstance(spec));\n                }\n                else {\n                    let plugin = this.plugins[found];\n                    plugin.mustUpdate = update;\n                    newPlugins.push(plugin);\n                }\n            }\n            for (let plugin of this.plugins)\n                if (plugin.mustUpdate != update)\n                    plugin.destroy(this);\n            this.plugins = newPlugins;\n            this.pluginMap.clear();\n            this.inputState.ensureHandlers(this, this.plugins);\n        }\n        else {\n            for (let p of this.plugins)\n                p.mustUpdate = update;\n        }\n        for (let i = 0; i < this.plugins.length; i++)\n            this.plugins[i].update(this);\n    }\n    /**\n    @internal\n    */\n    measure(flush = true) {\n        if (this.destroyed)\n            return;\n        if (this.measureScheduled > -1)\n            this.win.cancelAnimationFrame(this.measureScheduled);\n        this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame\n        if (flush)\n            this.observer.forceFlush();\n        let updated = null;\n        let sDOM = this.scrollDOM, { scrollTop } = sDOM;\n        let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;\n        if (scrollTop != this.viewState.scrollTop)\n            scrollAnchorHeight = -1;\n        this.viewState.scrollAnchorHeight = -1;\n        try {\n            for (let i = 0;; i++) {\n                if (scrollAnchorHeight < 0) {\n                    if (isScrolledToBottom(sDOM)) {\n                        scrollAnchorPos = -1;\n                        scrollAnchorHeight = this.viewState.heightMap.height;\n                    }\n                    else {\n                        let block = this.viewState.scrollAnchorAt(scrollTop);\n                        scrollAnchorPos = block.from;\n                        scrollAnchorHeight = block.top;\n                    }\n                }\n                this.updateState = 1 /* Measuring */;\n                let changed = this.viewState.measure(this);\n                if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)\n                    break;\n                if (i > 5) {\n                    console.warn(this.measureRequests.length\n                        ? \"Measure loop restarted more than 5 times\"\n                        : \"Viewport failed to stabilize\");\n                    break;\n                }\n                let measuring = [];\n                // Only run measure requests in this cycle when the viewport didn't change\n                if (!(changed & 4 /* Viewport */))\n                    [this.measureRequests, measuring] = [measuring, this.measureRequests];\n                let measured = measuring.map(m => {\n                    try {\n                        return m.read(this);\n                    }\n                    catch (e) {\n                        logException(this.state, e);\n                        return BadMeasure;\n                    }\n                });\n                let update = ViewUpdate.create(this, this.state, []), redrawn = false;\n                update.flags |= changed;\n                if (!updated)\n                    updated = update;\n                else\n                    updated.flags |= changed;\n                this.updateState = 2 /* Updating */;\n                if (!update.empty) {\n                    this.updatePlugins(update);\n                    this.inputState.update(update);\n                    this.updateAttrs();\n                    redrawn = this.docView.update(update);\n                }\n                for (let i = 0; i < measuring.length; i++)\n                    if (measured[i] != BadMeasure) {\n                        try {\n                            let m = measuring[i];\n                            if (m.write)\n                                m.write(measured[i], this);\n                        }\n                        catch (e) {\n                            logException(this.state, e);\n                        }\n                    }\n                if (redrawn)\n                    this.docView.updateSelection(true);\n                if (!update.viewportChanged && this.measureRequests.length == 0) {\n                    if (this.viewState.editorHeight) {\n                        if (this.viewState.scrollTarget) {\n                            this.docView.scrollIntoView(this.viewState.scrollTarget);\n                            this.viewState.scrollTarget = null;\n                            continue;\n                        }\n                        else {\n                            let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height :\n                                this.viewState.lineBlockAt(scrollAnchorPos).top;\n                            let diff = newAnchorHeight - scrollAnchorHeight;\n                            if (diff > 1 || diff < -1) {\n                                scrollTop = sDOM.scrollTop = scrollTop + diff;\n                                scrollAnchorHeight = -1;\n                                continue;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        finally {\n            this.updateState = 0 /* Idle */;\n            this.measureScheduled = -1;\n        }\n        if (updated && !updated.empty)\n            for (let listener of this.state.facet(updateListener))\n                listener(updated);\n    }\n    /**\n    Get the CSS classes for the currently active editor themes.\n    */\n    get themeClasses() {\n        return baseThemeID + \" \" +\n            (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + \" \" +\n            this.state.facet(theme);\n    }\n    updateAttrs() {\n        let editorAttrs = attrsFromFacet(this, editorAttributes, {\n            class: \"cm-editor\" + (this.hasFocus ? \" cm-focused \" : \" \") + this.themeClasses\n        });\n        let contentAttrs = {\n            spellcheck: \"false\",\n            autocorrect: \"off\",\n            autocapitalize: \"off\",\n            translate: \"no\",\n            contenteditable: !this.state.facet(editable) ? \"false\" : \"true\",\n            class: \"cm-content\",\n            style: `${browser.tabSize}: ${this.state.tabSize}`,\n            role: \"textbox\",\n            \"aria-multiline\": \"true\"\n        };\n        if (this.state.readOnly)\n            contentAttrs[\"aria-readonly\"] = \"true\";\n        attrsFromFacet(this, contentAttributes, contentAttrs);\n        let changed = this.observer.ignore(() => {\n            let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);\n            let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);\n            return changedContent || changedEditor;\n        });\n        this.editorAttrs = editorAttrs;\n        this.contentAttrs = contentAttrs;\n        return changed;\n    }\n    showAnnouncements(trs) {\n        let first = true;\n        for (let tr of trs)\n            for (let effect of tr.effects)\n                if (effect.is(EditorView.announce)) {\n                    if (first)\n                        this.announceDOM.textContent = \"\";\n                    first = false;\n                    let div = this.announceDOM.appendChild(document.createElement(\"div\"));\n                    div.textContent = effect.value;\n                }\n    }\n    mountStyles() {\n        this.styleModules = this.state.facet(styleModule);\n        StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse());\n    }\n    readMeasured() {\n        if (this.updateState == 2 /* Updating */)\n            throw new Error(\"Reading the editor layout isn't allowed during an update\");\n        if (this.updateState == 0 /* Idle */ && this.measureScheduled > -1)\n            this.measure(false);\n    }\n    /**\n    Schedule a layout measurement, optionally providing callbacks to\n    do custom DOM measuring followed by a DOM write phase. Using\n    this is preferable reading DOM layout directly from, for\n    example, an event handler, because it'll make sure measuring and\n    drawing done by other components is synchronized, avoiding\n    unnecessary DOM layout computations.\n    */\n    requestMeasure(request) {\n        if (this.measureScheduled < 0)\n            this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());\n        if (request) {\n            if (this.measureRequests.indexOf(request) > -1)\n                return;\n            if (request.key != null)\n                for (let i = 0; i < this.measureRequests.length; i++) {\n                    if (this.measureRequests[i].key === request.key) {\n                        this.measureRequests[i] = request;\n                        return;\n                    }\n                }\n            this.measureRequests.push(request);\n        }\n    }\n    /**\n    Get the value of a specific plugin, if present. Note that\n    plugins that crash can be dropped from a view, so even when you\n    know you registered a given plugin, it is recommended to check\n    the return value of this method.\n    */\n    plugin(plugin) {\n        let known = this.pluginMap.get(plugin);\n        if (known === undefined || known && known.spec != plugin)\n            this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);\n        return known && known.update(this).value;\n    }\n    /**\n    The top position of the document, in screen coordinates. This\n    may be negative when the editor is scrolled down. Points\n    directly to the top of the first line, not above the padding.\n    */\n    get documentTop() {\n        return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;\n    }\n    /**\n    Reports the padding above and below the document.\n    */\n    get documentPadding() {\n        return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };\n    }\n    /**\n    Find the text line or block widget at the given vertical\n    position (which is interpreted as relative to the [top of the\n    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).\n    */\n    elementAtHeight(height) {\n        this.readMeasured();\n        return this.viewState.elementAtHeight(height);\n    }\n    /**\n    Find the line block (see\n    [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given\n    height, again interpreted relative to the [top of the\n    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).\n    */\n    lineBlockAtHeight(height) {\n        this.readMeasured();\n        return this.viewState.lineBlockAtHeight(height);\n    }\n    /**\n    Get the extent and vertical position of all [line\n    blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions\n    are relative to the [top of the\n    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);\n    */\n    get viewportLineBlocks() {\n        return this.viewState.viewportLines;\n    }\n    /**\n    Find the line block around the given document position. A line\n    block is a range delimited on both sides by either a\n    non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the\n    start/end of the document. It will usually just hold a line of\n    text, but may be broken into multiple textblocks by block\n    widgets.\n    */\n    lineBlockAt(pos) {\n        return this.viewState.lineBlockAt(pos);\n    }\n    /**\n    The editor's total content height.\n    */\n    get contentHeight() {\n        return this.viewState.contentHeight;\n    }\n    /**\n    Move a cursor position by [grapheme\n    cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether\n    the motion is away from the line start, or towards it. In\n    bidirectional text, the line is traversed in visual order, using\n    the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).\n    When the start position was the last one on the line, the\n    returned position will be across the line break. If there is no\n    further line, the original position is returned.\n    \n    By default, this method moves over a single cluster. The\n    optional `by` argument can be used to move across more. It will\n    be called with the first cluster as argument, and should return\n    a predicate that determines, for each subsequent cluster,\n    whether it should also be moved over.\n    */\n    moveByChar(start, forward, by) {\n        return skipAtoms(this, start, moveByChar(this, start, forward, by));\n    }\n    /**\n    Move a cursor position across the next group of either\n    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter\n    non-whitespace characters.\n    */\n    moveByGroup(start, forward) {\n        return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));\n    }\n    /**\n    Move to the next line boundary in the given direction. If\n    `includeWrap` is true, line wrapping is on, and there is a\n    further wrap point on the current line, the wrap point will be\n    returned. Otherwise this function will return the start or end\n    of the line.\n    */\n    moveToLineBoundary(start, forward, includeWrap = true) {\n        return moveToLineBoundary(this, start, forward, includeWrap);\n    }\n    /**\n    Move a cursor position vertically. When `distance` isn't given,\n    it defaults to moving to the next line (including wrapped\n    lines). Otherwise, `distance` should provide a positive distance\n    in pixels.\n    \n    When `start` has a\n    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical\n    motion will use that as a target horizontal position. Otherwise,\n    the cursor's own horizontal position is used. The returned\n    cursor will have its goal column set to whichever column was\n    used.\n    */\n    moveVertically(start, forward, distance) {\n        return skipAtoms(this, start, moveVertically(this, start, forward, distance));\n    }\n    /**\n    Find the DOM parent node and offset (child offset if `node` is\n    an element, character offset when it is a text node) at the\n    given document position.\n    \n    Note that for positions that aren't currently in\n    `visibleRanges`, the resulting DOM position isn't necessarily\n    meaningful (it may just point before or after a placeholder\n    element).\n    */\n    domAtPos(pos) {\n        return this.docView.domAtPos(pos);\n    }\n    /**\n    Find the document position at the given DOM node. Can be useful\n    for associating positions with DOM events. Will raise an error\n    when `node` isn't part of the editor content.\n    */\n    posAtDOM(node, offset = 0) {\n        return this.docView.posFromDOM(node, offset);\n    }\n    posAtCoords(coords, precise = true) {\n        this.readMeasured();\n        return posAtCoords(this, coords, precise);\n    }\n    /**\n    Get the screen coordinates at the given document position.\n    `side` determines whether the coordinates are based on the\n    element before (-1) or after (1) the position (if no element is\n    available on the given side, the method will transparently use\n    another strategy to get reasonable coordinates).\n    */\n    coordsAtPos(pos, side = 1) {\n        this.readMeasured();\n        let rect = this.docView.coordsAt(pos, side);\n        if (!rect || rect.left == rect.right)\n            return rect;\n        let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);\n        let span = order[BidiSpan.find(order, pos - line.from, -1, side)];\n        return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));\n    }\n    /**\n    Return the rectangle around a given character. If `pos` does not\n    point in front of a character that is in the viewport and\n    rendered (i.e. not replaced, not a line break), this will return\n    null. For space characters that are a line wrap point, this will\n    return the position before the line break.\n    */\n    coordsForChar(pos) {\n        this.readMeasured();\n        return this.docView.coordsForChar(pos);\n    }\n    /**\n    The default width of a character in the editor. May not\n    accurately reflect the width of all characters (given variable\n    width fonts or styling of invididual ranges).\n    */\n    get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }\n    /**\n    The default height of a line in the editor. May not be accurate\n    for all lines.\n    */\n    get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }\n    /**\n    The text direction\n    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)\n    CSS property) of the editor's content element.\n    */\n    get textDirection() { return this.viewState.defaultTextDirection; }\n    /**\n    Find the text direction of the block at the given position, as\n    assigned by CSS. If\n    [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)\n    isn't enabled, or the given position is outside of the viewport,\n    this will always return the same as\n    [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that\n    this may trigger a DOM layout.\n    */\n    textDirectionAt(pos) {\n        let perLine = this.state.facet(perLineTextDirection);\n        if (!perLine || pos < this.viewport.from || pos > this.viewport.to)\n            return this.textDirection;\n        this.readMeasured();\n        return this.docView.textDirectionAt(pos);\n    }\n    /**\n    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)\n    (as determined by the\n    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)\n    CSS property of its content element).\n    */\n    get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }\n    /**\n    Returns the bidirectional text structure of the given line\n    (which should be in the current document) as an array of span\n    objects. The order of these spans matches the [text\n    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is\n    left-to-right, the leftmost spans come first, otherwise the\n    rightmost spans come first.\n    */\n    bidiSpans(line) {\n        if (line.length > MaxBidiLine)\n            return trivialOrder(line.length);\n        let dir = this.textDirectionAt(line.from);\n        for (let entry of this.bidiCache)\n            if (entry.from == line.from && entry.dir == dir)\n                return entry.order;\n        let order = computeOrder(line.text, dir);\n        this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));\n        return order;\n    }\n    /**\n    Check whether the editor has focus.\n    */\n    get hasFocus() {\n        var _a;\n        // Safari return false for hasFocus when the context menu is open\n        // or closing, which leads us to ignore selection changes from the\n        // context menu because it looks like the editor isn't focused.\n        // This kludges around that.\n        return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&\n            this.root.activeElement == this.contentDOM;\n    }\n    /**\n    Put focus on the editor.\n    */\n    focus() {\n        this.observer.ignore(() => {\n            focusPreventScroll(this.contentDOM);\n            this.docView.updateSelection();\n        });\n    }\n    /**\n    Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only\n    necessary when moving the editor's existing DOM to a new window or shadow root.\n    */\n    setRoot(root) {\n        if (this._root != root) {\n            this._root = root;\n            this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);\n            this.mountStyles();\n        }\n    }\n    /**\n    Clean up this editor view, removing its element from the\n    document, unregistering event handlers, and notifying\n    plugins. The view instance can no longer be used after\n    calling this.\n    */\n    destroy() {\n        for (let plugin of this.plugins)\n            plugin.destroy(this);\n        this.plugins = [];\n        this.inputState.destroy();\n        this.dom.remove();\n        this.observer.destroy();\n        if (this.measureScheduled > -1)\n            this.win.cancelAnimationFrame(this.measureScheduled);\n        this.destroyed = true;\n    }\n    /**\n    Returns an effect that can be\n    [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to\n    cause it to scroll the given position or range into view.\n    */\n    static scrollIntoView(pos, options = {}) {\n        return scrollIntoView.of(new ScrollTarget(typeof pos == \"number\" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));\n    }\n    /**\n    Returns an extension that can be used to add DOM event handlers.\n    The value should be an object mapping event names to handler\n    functions. For any given event, such functions are ordered by\n    extension precedence, and the first handler to return true will\n    be assumed to have handled that event, and no other handlers or\n    built-in behavior will be activated for it. These are registered\n    on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except\n    for `scroll` handlers, which will be called any time the\n    editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of\n    its parent nodes is scrolled.\n    */\n    static domEventHandlers(handlers) {\n        return ViewPlugin.define(() => ({}), { eventHandlers: handlers });\n    }\n    /**\n    Create a theme extension. The first argument can be a\n    [`style-mod`](https://github.com/marijnh/style-mod#documentation)\n    style spec providing the styles for the theme. These will be\n    prefixed with a generated class for the style.\n    \n    Because the selectors will be prefixed with a scope class, rule\n    that directly match the editor's [wrapper\n    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be\n    added—need to be explicitly differentiated by adding an `&` to\n    the selector for that element—for example\n    `&.cm-focused`.\n    \n    When `dark` is set to true, the theme will be marked as dark,\n    which will cause the `&dark` rules from [base\n    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to\n    `&light` when a light theme is active).\n    */\n    static theme(spec, options) {\n        let prefix = StyleModule.newName();\n        let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];\n        if (options && options.dark)\n            result.push(darkTheme.of(true));\n        return result;\n    }\n    /**\n    Create an extension that adds styles to the base theme. Like\n    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the\n    place of the editor wrapper element when directly targeting\n    that. You can also use `&dark` or `&light` instead to only\n    target editors with a dark or light theme.\n    */\n    static baseTheme(spec) {\n        return Prec.lowest(styleModule.of(buildTheme(\".\" + baseThemeID, spec, lightDarkIDs)));\n    }\n    /**\n    Retrieve an editor view instance from the view's DOM\n    representation.\n    */\n    static findFromDOM(dom) {\n        var _a;\n        let content = dom.querySelector(\".cm-content\");\n        let cView = content && ContentView.get(content) || ContentView.get(dom);\n        return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;\n    }\n}\n/**\nFacet to add a [style\nmodule](https://github.com/marijnh/style-mod#documentation) to\nan editor view. The view will ensure that the module is\nmounted in its [document\nroot](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).\n*/\nEditorView.styleModule = styleModule;\n/**\nAn input handler can override the way changes to the editable\nDOM content are handled. Handlers are passed the document\npositions between which the change was found, and the new\ncontent. When one returns true, no further input handlers are\ncalled and the default behavior is prevented.\n*/\nEditorView.inputHandler = inputHandler;\n/**\nThis facet can be used to provide functions that create effects\nto be dispatched when the editor's focus state changes.\n*/\nEditorView.focusChangeEffect = focusChangeEffect;\n/**\nBy default, the editor assumes all its content has the same\n[text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`\nvalue to make it read the text direction of every (rendered)\nline separately.\n*/\nEditorView.perLineTextDirection = perLineTextDirection;\n/**\nAllows you to provide a function that should be called when the\nlibrary catches an exception from an extension (mostly from view\nplugins, but may be used by other extensions to route exceptions\nfrom user-code-provided callbacks). This is mostly useful for\ndebugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).\n*/\nEditorView.exceptionSink = exceptionSink;\n/**\nA facet that can be used to register a function to be called\nevery time the view updates.\n*/\nEditorView.updateListener = updateListener;\n/**\nFacet that controls whether the editor content DOM is editable.\nWhen its highest-precedence value is `false`, the element will\nnot have its `contenteditable` attribute set. (Note that this\ndoesn't affect API calls that change the editor content, even\nwhen those are bound to keys or buttons. See the\n[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)\n*/\nEditorView.editable = editable;\n/**\nAllows you to influence the way mouse selection happens. The\nfunctions in this facet will be called for a `mousedown` event\non the editor, and can return an object that overrides the way a\nselection is computed from that mouse click or drag.\n*/\nEditorView.mouseSelectionStyle = mouseSelectionStyle;\n/**\nFacet used to configure whether a given selection drag event\nshould move or copy the selection. The given predicate will be\ncalled with the `mousedown` event, and can return `true` when\nthe drag should move the content.\n*/\nEditorView.dragMovesSelection = dragMovesSelection$1;\n/**\nFacet used to configure whether a given selecting click adds a\nnew range to the existing selection or replaces it entirely. The\ndefault behavior is to check `event.metaKey` on macOS, and\n`event.ctrlKey` elsewhere.\n*/\nEditorView.clickAddsSelectionRange = clickAddsSelectionRange;\n/**\nA facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)\nare shown in the view. Decorations can be provided in two\nways—directly, or via a function that takes an editor view.\n\nOnly decoration sets provided directly are allowed to influence\nthe editor's vertical layout structure. The ones provided as\nfunctions are called _after_ the new viewport has been computed,\nand thus **must not** introduce block widgets or replacing\ndecorations that cover line breaks.\n\nIf you want decorated ranges to behave like atomic units for\ncursor motion and deletion purposes, also provide the range set\ncontaining the decorations to\n[`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).\n*/\nEditorView.decorations = decorations;\n/**\nUsed to provide ranges that should be treated as atoms as far as\ncursor motion is concerned. This causes methods like\n[`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and\n[`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the\ncommands built on top of them) to skip across such regions when\na selection endpoint would enter them. This does _not_ prevent\ndirect programmatic [selection\nupdates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such\nregions.\n*/\nEditorView.atomicRanges = atomicRanges;\n/**\nFacet that allows extensions to provide additional scroll\nmargins (space around the sides of the scrolling element that\nshould be considered invisible). This can be useful when the\nplugin introduces elements that cover part of that element (for\nexample a horizontally fixed gutter).\n*/\nEditorView.scrollMargins = scrollMargins;\n/**\nThis facet records whether a dark theme is active. The extension\nreturned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically\nincludes an instance of this when the `dark` option is set to\ntrue.\n*/\nEditorView.darkTheme = darkTheme;\n/**\nFacet that provides additional DOM attributes for the editor's\neditable DOM element.\n*/\nEditorView.contentAttributes = contentAttributes;\n/**\nFacet that provides DOM attributes for the editor's outer\nelement.\n*/\nEditorView.editorAttributes = editorAttributes;\n/**\nAn extension that enables line wrapping in the editor (by\nsetting CSS `white-space` to `pre-wrap` in the content).\n*/\nEditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ \"class\": \"cm-lineWrapping\" });\n/**\nState effect used to include screen reader announcements in a\ntransaction. These will be added to the DOM in a visually hidden\nelement with `aria-live=\"polite\"` set, and should be used to\ndescribe effects that are visually obvious but may not be\nnoticed by screen reader users (such as moving to the next\nsearch match).\n*/\nEditorView.announce = /*@__PURE__*/StateEffect.define();\n// Maximum line length for which we compute accurate bidi info\nconst MaxBidiLine = 4096;\nconst BadMeasure = {};\nclass CachedOrder {\n    constructor(from, to, dir, order) {\n        this.from = from;\n        this.to = to;\n        this.dir = dir;\n        this.order = order;\n    }\n    static update(cache, changes) {\n        if (changes.empty)\n            return cache;\n        let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;\n        for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {\n            let entry = cache[i];\n            if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))\n                result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));\n        }\n        return result;\n    }\n}\nfunction attrsFromFacet(view, facet, base) {\n    for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {\n        let source = sources[i], value = typeof source == \"function\" ? source(view) : source;\n        if (value)\n            combineAttrs(value, base);\n    }\n    return base;\n}\n\nconst currentPlatform = browser.mac ? \"mac\" : browser.windows ? \"win\" : browser.linux ? \"linux\" : \"key\";\nfunction normalizeKeyName(name, platform) {\n    const parts = name.split(/-(?!$)/);\n    let result = parts[parts.length - 1];\n    if (result == \"Space\")\n        result = \" \";\n    let alt, ctrl, shift, meta;\n    for (let i = 0; i < parts.length - 1; ++i) {\n        const mod = parts[i];\n        if (/^(cmd|meta|m)$/i.test(mod))\n            meta = true;\n        else if (/^a(lt)?$/i.test(mod))\n            alt = true;\n        else if (/^(c|ctrl|control)$/i.test(mod))\n            ctrl = true;\n        else if (/^s(hift)?$/i.test(mod))\n            shift = true;\n        else if (/^mod$/i.test(mod)) {\n            if (platform == \"mac\")\n                meta = true;\n            else\n                ctrl = true;\n        }\n        else\n            throw new Error(\"Unrecognized modifier name: \" + mod);\n    }\n    if (alt)\n        result = \"Alt-\" + result;\n    if (ctrl)\n        result = \"Ctrl-\" + result;\n    if (meta)\n        result = \"Meta-\" + result;\n    if (shift)\n        result = \"Shift-\" + result;\n    return result;\n}\nfunction modifiers(name, event, shift) {\n    if (event.altKey)\n        name = \"Alt-\" + name;\n    if (event.ctrlKey)\n        name = \"Ctrl-\" + name;\n    if (event.metaKey)\n        name = \"Meta-\" + name;\n    if (shift !== false && event.shiftKey)\n        name = \"Shift-\" + name;\n    return name;\n}\nconst handleKeyEvents = /*@__PURE__*/Prec.default(/*@__PURE__*/EditorView.domEventHandlers({\n    keydown(event, view) {\n        return runHandlers(getKeymap(view.state), event, view, \"editor\");\n    }\n}));\n/**\nFacet used for registering keymaps.\n\nYou can add multiple keymaps to an editor. Their priorities\ndetermine their precedence (the ones specified early or with high\npriority get checked first). When a handler has returned `true`\nfor a given key, no further handlers are called.\n*/\nconst keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });\nconst Keymaps = /*@__PURE__*/new WeakMap();\n// This is hidden behind an indirection, rather than directly computed\n// by the facet, to keep internal types out of the facet's type.\nfunction getKeymap(state) {\n    let bindings = state.facet(keymap);\n    let map = Keymaps.get(bindings);\n    if (!map)\n        Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));\n    return map;\n}\n/**\nRun the key handlers registered for a given scope. The event\nobject should be a `\"keydown\"` event. Returns true if any of the\nhandlers handled it.\n*/\nfunction runScopeHandlers(view, event, scope) {\n    return runHandlers(getKeymap(view.state), event, view, scope);\n}\nlet storedPrefix = null;\nconst PrefixTimeout = 4000;\nfunction buildKeymap(bindings, platform = currentPlatform) {\n    let bound = Object.create(null);\n    let isPrefix = Object.create(null);\n    let checkPrefix = (name, is) => {\n        let current = isPrefix[name];\n        if (current == null)\n            isPrefix[name] = is;\n        else if (current != is)\n            throw new Error(\"Key binding \" + name + \" is used both as a regular binding and as a multi-stroke prefix\");\n    };\n    let add = (scope, key, command, preventDefault, stopPropagation) => {\n        var _a, _b;\n        let scopeObj = bound[scope] || (bound[scope] = Object.create(null));\n        let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));\n        for (let i = 1; i < parts.length; i++) {\n            let prefix = parts.slice(0, i).join(\" \");\n            checkPrefix(prefix, true);\n            if (!scopeObj[prefix])\n                scopeObj[prefix] = {\n                    preventDefault: true,\n                    stopPropagation: false,\n                    run: [(view) => {\n                            let ourObj = storedPrefix = { view, prefix, scope };\n                            setTimeout(() => { if (storedPrefix == ourObj)\n                                storedPrefix = null; }, PrefixTimeout);\n                            return true;\n                        }]\n                };\n        }\n        let full = parts.join(\" \");\n        checkPrefix(full, false);\n        let binding = scopeObj[full] || (scopeObj[full] = {\n            preventDefault: false,\n            stopPropagation: false,\n            run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []\n        });\n        if (command)\n            binding.run.push(command);\n        if (preventDefault)\n            binding.preventDefault = true;\n        if (stopPropagation)\n            binding.stopPropagation = true;\n    };\n    for (let b of bindings) {\n        let scopes = b.scope ? b.scope.split(\" \") : [\"editor\"];\n        if (b.any)\n            for (let scope of scopes) {\n                let scopeObj = bound[scope] || (bound[scope] = Object.create(null));\n                if (!scopeObj._any)\n                    scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };\n                for (let key in scopeObj)\n                    scopeObj[key].run.push(b.any);\n            }\n        let name = b[platform] || b.key;\n        if (!name)\n            continue;\n        for (let scope of scopes) {\n            add(scope, name, b.run, b.preventDefault, b.stopPropagation);\n            if (b.shift)\n                add(scope, \"Shift-\" + name, b.shift, b.preventDefault, b.stopPropagation);\n        }\n    }\n    return bound;\n}\nfunction runHandlers(map, event, view, scope) {\n    let name = keyName(event);\n    let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != \" \";\n    let prefix = \"\", handled = false, prevented = false, stopPropagation = false;\n    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {\n        prefix = storedPrefix.prefix + \" \";\n        if (modifierCodes.indexOf(event.keyCode) < 0) {\n            prevented = true;\n            storedPrefix = null;\n        }\n    }\n    let ran = new Set;\n    let runFor = (binding) => {\n        if (binding) {\n            for (let cmd of binding.run)\n                if (!ran.has(cmd)) {\n                    ran.add(cmd);\n                    if (cmd(view, event)) {\n                        if (binding.stopPropagation)\n                            stopPropagation = true;\n                        return true;\n                    }\n                }\n            if (binding.preventDefault) {\n                if (binding.stopPropagation)\n                    stopPropagation = true;\n                prevented = true;\n            }\n        }\n        return false;\n    };\n    let scopeObj = map[scope], baseName, shiftName;\n    if (scopeObj) {\n        if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) {\n            handled = true;\n        }\n        else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&\n            // Ctrl-Alt may be used for AltGr on Windows\n            !(browser.windows && event.ctrlKey && event.altKey) &&\n            (baseName = base[event.keyCode]) && baseName != name) {\n            if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {\n                handled = true;\n            }\n            else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName &&\n                runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {\n                handled = true;\n            }\n        }\n        else if (isChar && event.shiftKey &&\n            runFor(scopeObj[prefix + modifiers(name, event, true)])) {\n            handled = true;\n        }\n        if (!handled && runFor(scopeObj._any))\n            handled = true;\n    }\n    if (prevented)\n        handled = true;\n    if (handled && stopPropagation)\n        event.stopPropagation();\n    return handled;\n}\n\n/**\nImplementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates\na rectangle at a given set of coordinates.\n*/\nclass RectangleMarker {\n    /**\n    Create a marker with the given class and dimensions. If `width`\n    is null, the DOM element will get no width style.\n    */\n    constructor(className, left, top, width, height) {\n        this.className = className;\n        this.left = left;\n        this.top = top;\n        this.width = width;\n        this.height = height;\n    }\n    draw() {\n        let elt = document.createElement(\"div\");\n        elt.className = this.className;\n        this.adjust(elt);\n        return elt;\n    }\n    update(elt, prev) {\n        if (prev.className != this.className)\n            return false;\n        this.adjust(elt);\n        return true;\n    }\n    adjust(elt) {\n        elt.style.left = this.left + \"px\";\n        elt.style.top = this.top + \"px\";\n        if (this.width != null)\n            elt.style.width = this.width + \"px\";\n        elt.style.height = this.height + \"px\";\n    }\n    eq(p) {\n        return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&\n            this.className == p.className;\n    }\n    /**\n    Create a set of rectangles for the given selection range,\n    assigning them theclass`className`. Will create a single\n    rectangle for empty ranges, and a set of selection-style\n    rectangles covering the range's content (in a bidi-aware\n    way) for non-empty ones.\n    */\n    static forRange(view, className, range) {\n        if (range.empty) {\n            let pos = view.coordsAtPos(range.head, range.assoc || 1);\n            if (!pos)\n                return [];\n            let base = getBase(view);\n            return [new RectangleMarker(className, pos.left - base.left, pos.top - base.top, null, pos.bottom - pos.top)];\n        }\n        else {\n            return rectanglesForRange(view, className, range);\n        }\n    }\n}\nfunction getBase(view) {\n    let rect = view.scrollDOM.getBoundingClientRect();\n    let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;\n    return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };\n}\nfunction wrappedLine(view, pos, inside) {\n    let range = EditorSelection.cursor(pos);\n    return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),\n        to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),\n        type: BlockType.Text };\n}\nfunction rectanglesForRange(view, className, range) {\n    if (range.to <= view.viewport.from || range.from >= view.viewport.to)\n        return [];\n    let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);\n    let ltr = view.textDirection == Direction.LTR;\n    let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);\n    let lineElt = content.querySelector(\".cm-line\"), lineStyle = lineElt && window.getComputedStyle(lineElt);\n    let leftSide = contentRect.left +\n        (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);\n    let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);\n    let startBlock = blockAt(view, from), endBlock = blockAt(view, to);\n    let visualStart = startBlock.type == BlockType.Text ? startBlock : null;\n    let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;\n    if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))\n        visualStart = wrappedLine(view, from, visualStart);\n    if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))\n        visualEnd = wrappedLine(view, to, visualEnd);\n    if (visualStart && visualEnd && visualStart.from == visualEnd.from) {\n        return pieces(drawForLine(range.from, range.to, visualStart));\n    }\n    else {\n        let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);\n        let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);\n        let between = [];\n        if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) ||\n            startBlock.widgetLineBreaks > 1 && top.bottom + view.defaultLineHeight / 2 < bottom.top)\n            between.push(piece(leftSide, top.bottom, rightSide, bottom.top));\n        else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text)\n            top.bottom = bottom.top = (top.bottom + bottom.top) / 2;\n        return pieces(top).concat(between).concat(pieces(bottom));\n    }\n    function piece(left, top, right, bottom) {\n        return new RectangleMarker(className, left - base.left, top - base.top - 0.01 /* Epsilon */, right - left, bottom - top + 0.01 /* Epsilon */);\n    }\n    function pieces({ top, bottom, horizontal }) {\n        let pieces = [];\n        for (let i = 0; i < horizontal.length; i += 2)\n            pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));\n        return pieces;\n    }\n    // Gets passed from/to in line-local positions\n    function drawForLine(from, to, line) {\n        let top = 1e9, bottom = -1e9, horizontal = [];\n        function addSpan(from, fromOpen, to, toOpen, dir) {\n            // Passing 2/-2 is a kludge to force the view to return\n            // coordinates on the proper side of block widgets, since\n            // normalizing the side there, though appropriate for most\n            // coordsAtPos queries, would break selection drawing.\n            let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));\n            let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));\n            if (!fromCoords || !toCoords)\n                return;\n            top = Math.min(fromCoords.top, toCoords.top, top);\n            bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);\n            if (dir == Direction.LTR)\n                horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);\n            else\n                horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);\n        }\n        let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;\n        // Split the range by visible range and document line\n        for (let r of view.visibleRanges)\n            if (r.to > start && r.from < end) {\n                for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {\n                    let docLine = view.state.doc.lineAt(pos);\n                    for (let span of view.bidiSpans(docLine)) {\n                        let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;\n                        if (spanFrom >= endPos)\n                            break;\n                        if (spanTo > pos)\n                            addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);\n                    }\n                    pos = docLine.to + 1;\n                    if (pos >= endPos)\n                        break;\n                }\n            }\n        if (horizontal.length == 0)\n            addSpan(start, from == null, end, to == null, view.textDirection);\n        return { top, bottom, horizontal };\n    }\n    function drawForWidget(block, top) {\n        let y = contentRect.top + (top ? block.top : block.bottom);\n        return { top: y, bottom: y, horizontal: [] };\n    }\n}\nfunction sameMarker(a, b) {\n    return a.constructor == b.constructor && a.eq(b);\n}\nclass LayerView {\n    constructor(view, layer) {\n        this.view = view;\n        this.layer = layer;\n        this.drawn = [];\n        this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };\n        this.dom = view.scrollDOM.appendChild(document.createElement(\"div\"));\n        this.dom.classList.add(\"cm-layer\");\n        if (layer.above)\n            this.dom.classList.add(\"cm-layer-above\");\n        if (layer.class)\n            this.dom.classList.add(layer.class);\n        this.dom.setAttribute(\"aria-hidden\", \"true\");\n        this.setOrder(view.state);\n        view.requestMeasure(this.measureReq);\n        if (layer.mount)\n            layer.mount(this.dom, view);\n    }\n    update(update) {\n        if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))\n            this.setOrder(update.state);\n        if (this.layer.update(update, this.dom) || update.geometryChanged)\n            update.view.requestMeasure(this.measureReq);\n    }\n    setOrder(state) {\n        let pos = 0, order = state.facet(layerOrder);\n        while (pos < order.length && order[pos] != this.layer)\n            pos++;\n        this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);\n    }\n    measure() {\n        return this.layer.markers(this.view);\n    }\n    draw(markers) {\n        if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {\n            let old = this.dom.firstChild, oldI = 0;\n            for (let marker of markers) {\n                if (marker.update && old && marker.constructor && this.drawn[oldI].constructor &&\n                    marker.update(old, this.drawn[oldI])) {\n                    old = old.nextSibling;\n                    oldI++;\n                }\n                else {\n                    this.dom.insertBefore(marker.draw(), old);\n                }\n            }\n            while (old) {\n                let next = old.nextSibling;\n                old.remove();\n                old = next;\n            }\n            this.drawn = markers;\n        }\n    }\n    destroy() {\n        if (this.layer.destroy)\n            this.layer.destroy(this.dom, this.view);\n        this.dom.remove();\n    }\n}\nconst layerOrder = /*@__PURE__*/Facet.define();\n/**\nDefine a layer.\n*/\nfunction layer(config) {\n    return [\n        ViewPlugin.define(v => new LayerView(v, config)),\n        layerOrder.of(config)\n    ];\n}\n\nconst CanHidePrimary = !browser.ios; // FIXME test IE\nconst selectionConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            cursorBlinkRate: 1200,\n            drawRangeCursor: true\n        }, {\n            cursorBlinkRate: (a, b) => Math.min(a, b),\n            drawRangeCursor: (a, b) => a || b\n        });\n    }\n});\n/**\nReturns an extension that hides the browser's native selection and\ncursor, replacing the selection with a background behind the text\n(with the `cm-selectionBackground` class), and the\ncursors with elements overlaid over the code (using\n`cm-cursor-primary` and `cm-cursor-secondary`).\n\nThis allows the editor to display secondary selection ranges, and\ntends to produce a type of selection more in line with that users\nexpect in a text editor (the native selection styling will often\nleave gaps between lines and won't fill the horizontal space after\na line when the selection continues past it).\n\nIt does have a performance cost, in that it requires an extra DOM\nlayout cycle for many updates (the selection is drawn based on DOM\nlayout information that's only available after laying out the\ncontent).\n*/\nfunction drawSelection(config = {}) {\n    return [\n        selectionConfig.of(config),\n        cursorLayer,\n        selectionLayer,\n        hideNativeSelection,\n        nativeSelectionHidden.of(true)\n    ];\n}\nfunction configChanged(update) {\n    return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);\n}\nconst cursorLayer = /*@__PURE__*/layer({\n    above: true,\n    markers(view) {\n        let { state } = view, conf = state.facet(selectionConfig);\n        let cursors = [];\n        for (let r of state.selection.ranges) {\n            let prim = r == state.selection.main;\n            if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {\n                let className = prim ? \"cm-cursor cm-cursor-primary\" : \"cm-cursor cm-cursor-secondary\";\n                let cursor = r.empty ? r : EditorSelection.cursor(r.head, r.head > r.anchor ? -1 : 1);\n                for (let piece of RectangleMarker.forRange(view, className, cursor))\n                    cursors.push(piece);\n            }\n        }\n        return cursors;\n    },\n    update(update, dom) {\n        if (update.transactions.some(tr => tr.selection))\n            dom.style.animationName = dom.style.animationName == \"cm-blink\" ? \"cm-blink2\" : \"cm-blink\";\n        let confChange = configChanged(update);\n        if (confChange)\n            setBlinkRate(update.state, dom);\n        return update.docChanged || update.selectionSet || confChange;\n    },\n    mount(dom, view) {\n        setBlinkRate(view.state, dom);\n    },\n    class: \"cm-cursorLayer\"\n});\nfunction setBlinkRate(state, dom) {\n    dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + \"ms\";\n}\nconst selectionLayer = /*@__PURE__*/layer({\n    above: false,\n    markers(view) {\n        return view.state.selection.ranges.map(r => r.empty ? [] : RectangleMarker.forRange(view, \"cm-selectionBackground\", r))\n            .reduce((a, b) => a.concat(b));\n    },\n    update(update, dom) {\n        return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);\n    },\n    class: \"cm-selectionLayer\"\n});\nconst themeSpec = {\n    \".cm-line\": {\n        \"& ::selection\": { backgroundColor: \"transparent !important\" },\n        \"&::selection\": { backgroundColor: \"transparent !important\" }\n    }\n};\nif (CanHidePrimary)\n    themeSpec[\".cm-line\"].caretColor = \"transparent !important\";\nconst hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme(themeSpec));\n\nconst setDropCursorPos = /*@__PURE__*/StateEffect.define({\n    map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }\n});\nconst dropCursorPos = /*@__PURE__*/StateField.define({\n    create() { return null; },\n    update(pos, tr) {\n        if (pos != null)\n            pos = tr.changes.mapPos(pos);\n        return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);\n    }\n});\nconst drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.cursor = null;\n        this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };\n    }\n    update(update) {\n        var _a;\n        let cursorPos = update.state.field(dropCursorPos);\n        if (cursorPos == null) {\n            if (this.cursor != null) {\n                (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();\n                this.cursor = null;\n            }\n        }\n        else {\n            if (!this.cursor) {\n                this.cursor = this.view.scrollDOM.appendChild(document.createElement(\"div\"));\n                this.cursor.className = \"cm-dropCursor\";\n            }\n            if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)\n                this.view.requestMeasure(this.measureReq);\n        }\n    }\n    readPos() {\n        let pos = this.view.state.field(dropCursorPos);\n        let rect = pos != null && this.view.coordsAtPos(pos);\n        if (!rect)\n            return null;\n        let outer = this.view.scrollDOM.getBoundingClientRect();\n        return {\n            left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,\n            top: rect.top - outer.top + this.view.scrollDOM.scrollTop,\n            height: rect.bottom - rect.top\n        };\n    }\n    drawCursor(pos) {\n        if (this.cursor) {\n            if (pos) {\n                this.cursor.style.left = pos.left + \"px\";\n                this.cursor.style.top = pos.top + \"px\";\n                this.cursor.style.height = pos.height + \"px\";\n            }\n            else {\n                this.cursor.style.left = \"-100000px\";\n            }\n        }\n    }\n    destroy() {\n        if (this.cursor)\n            this.cursor.remove();\n    }\n    setDropPos(pos) {\n        if (this.view.state.field(dropCursorPos) != pos)\n            this.view.dispatch({ effects: setDropCursorPos.of(pos) });\n    }\n}, {\n    eventHandlers: {\n        dragover(event) {\n            this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));\n        },\n        dragleave(event) {\n            if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))\n                this.setDropPos(null);\n        },\n        dragend() {\n            this.setDropPos(null);\n        },\n        drop() {\n            this.setDropPos(null);\n        }\n    }\n});\n/**\nDraws a cursor at the current drop position when something is\ndragged over the editor.\n*/\nfunction dropCursor() {\n    return [dropCursorPos, drawDropCursor];\n}\n\nfunction iterMatches(doc, re, from, to, f) {\n    re.lastIndex = 0;\n    for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {\n        if (!cursor.lineBreak)\n            while (m = re.exec(cursor.value))\n                f(pos + m.index, m);\n    }\n}\nfunction matchRanges(view, maxLength) {\n    let visible = view.visibleRanges;\n    if (visible.length == 1 && visible[0].from == view.viewport.from &&\n        visible[0].to == view.viewport.to)\n        return visible;\n    let result = [];\n    for (let { from, to } of visible) {\n        from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);\n        to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);\n        if (result.length && result[result.length - 1].to >= from)\n            result[result.length - 1].to = to;\n        else\n            result.push({ from, to });\n    }\n    return result;\n}\n/**\nHelper class used to make it easier to maintain decorations on\nvisible code that matches a given regular expression. To be used\nin a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object\nrepresent a matching configuration.\n*/\nclass MatchDecorator {\n    /**\n    Create a decorator.\n    */\n    constructor(config) {\n        const { regexp, decoration, decorate, boundary, maxLength = 1000 } = config;\n        if (!regexp.global)\n            throw new RangeError(\"The regular expression given to MatchDecorator should have its 'g' flag set\");\n        this.regexp = regexp;\n        if (decorate) {\n            this.addMatch = (match, view, from, add) => decorate(add, from, from + match[0].length, match, view);\n        }\n        else if (typeof decoration == \"function\") {\n            this.addMatch = (match, view, from, add) => {\n                let deco = decoration(match, view, from);\n                if (deco)\n                    add(from, from + match[0].length, deco);\n            };\n        }\n        else if (decoration) {\n            this.addMatch = (match, _view, from, add) => add(from, from + match[0].length, decoration);\n        }\n        else {\n            throw new RangeError(\"Either 'decorate' or 'decoration' should be provided to MatchDecorator\");\n        }\n        this.boundary = boundary;\n        this.maxLength = maxLength;\n    }\n    /**\n    Compute the full set of decorations for matches in the given\n    view's viewport. You'll want to call this when initializing your\n    plugin.\n    */\n    createDeco(view) {\n        let build = new RangeSetBuilder(), add = build.add.bind(build);\n        for (let { from, to } of matchRanges(view, this.maxLength))\n            iterMatches(view.state.doc, this.regexp, from, to, (from, m) => this.addMatch(m, view, from, add));\n        return build.finish();\n    }\n    /**\n    Update a set of decorations for a view update. `deco` _must_ be\n    the set of decorations produced by _this_ `MatchDecorator` for\n    the view state before the update.\n    */\n    updateDeco(update, deco) {\n        let changeFrom = 1e9, changeTo = -1;\n        if (update.docChanged)\n            update.changes.iterChanges((_f, _t, from, to) => {\n                if (to > update.view.viewport.from && from < update.view.viewport.to) {\n                    changeFrom = Math.min(from, changeFrom);\n                    changeTo = Math.max(to, changeTo);\n                }\n            });\n        if (update.viewportChanged || changeTo - changeFrom > 1000)\n            return this.createDeco(update.view);\n        if (changeTo > -1)\n            return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);\n        return deco;\n    }\n    updateRange(view, deco, updateFrom, updateTo) {\n        for (let r of view.visibleRanges) {\n            let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);\n            if (to > from) {\n                let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;\n                let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);\n                if (this.boundary) {\n                    for (; from > fromLine.from; from--)\n                        if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {\n                            start = from;\n                            break;\n                        }\n                    for (; to < toLine.to; to++)\n                        if (this.boundary.test(toLine.text[to - toLine.from])) {\n                            end = to;\n                            break;\n                        }\n                }\n                let ranges = [], m;\n                let add = (from, to, deco) => ranges.push(deco.range(from, to));\n                if (fromLine == toLine) {\n                    this.regexp.lastIndex = start - fromLine.from;\n                    while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)\n                        this.addMatch(m, view, m.index + fromLine.from, add);\n                }\n                else {\n                    iterMatches(view.state.doc, this.regexp, start, end, (from, m) => this.addMatch(m, view, from, add));\n                }\n                deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });\n            }\n        }\n        return deco;\n    }\n}\n\nconst UnicodeRegexpSupport = /x/.unicode != null ? \"gu\" : \"g\";\nconst Specials = /*@__PURE__*/new RegExp(\"[\\u0000-\\u0008\\u000a-\\u001f\\u007f-\\u009f\\u00ad\\u061c\\u200b\\u200e\\u200f\\u2028\\u2029\\u202d\\u202e\\u2066\\u2067\\u2069\\ufeff\\ufff9-\\ufffc]\", UnicodeRegexpSupport);\nconst Names = {\n    0: \"null\",\n    7: \"bell\",\n    8: \"backspace\",\n    10: \"newline\",\n    11: \"vertical tab\",\n    13: \"carriage return\",\n    27: \"escape\",\n    8203: \"zero width space\",\n    8204: \"zero width non-joiner\",\n    8205: \"zero width joiner\",\n    8206: \"left-to-right mark\",\n    8207: \"right-to-left mark\",\n    8232: \"line separator\",\n    8237: \"left-to-right override\",\n    8238: \"right-to-left override\",\n    8294: \"left-to-right isolate\",\n    8295: \"right-to-left isolate\",\n    8297: \"pop directional isolate\",\n    8233: \"paragraph separator\",\n    65279: \"zero width no-break space\",\n    65532: \"object replacement\"\n};\nlet _supportsTabSize = null;\nfunction supportsTabSize() {\n    var _a;\n    if (_supportsTabSize == null && typeof document != \"undefined\" && document.body) {\n        let styles = document.body.style;\n        _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;\n    }\n    return _supportsTabSize || false;\n}\nconst specialCharConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        let config = combineConfig(configs, {\n            render: null,\n            specialChars: Specials,\n            addSpecialChars: null\n        });\n        if (config.replaceTabs = !supportsTabSize())\n            config.specialChars = new RegExp(\"\\t|\" + config.specialChars.source, UnicodeRegexpSupport);\n        if (config.addSpecialChars)\n            config.specialChars = new RegExp(config.specialChars.source + \"|\" + config.addSpecialChars.source, UnicodeRegexpSupport);\n        return config;\n    }\n});\n/**\nReturns an extension that installs highlighting of special\ncharacters.\n*/\nfunction highlightSpecialChars(\n/**\nConfiguration options.\n*/\nconfig = {}) {\n    return [specialCharConfig.of(config), specialCharPlugin()];\n}\nlet _plugin = null;\nfunction specialCharPlugin() {\n    return _plugin || (_plugin = ViewPlugin.fromClass(class {\n        constructor(view) {\n            this.view = view;\n            this.decorations = Decoration.none;\n            this.decorationCache = Object.create(null);\n            this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));\n            this.decorations = this.decorator.createDeco(view);\n        }\n        makeDecorator(conf) {\n            return new MatchDecorator({\n                regexp: conf.specialChars,\n                decoration: (m, view, pos) => {\n                    let { doc } = view.state;\n                    let code = codePointAt(m[0], 0);\n                    if (code == 9) {\n                        let line = doc.lineAt(pos);\n                        let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);\n                        return Decoration.replace({ widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth) });\n                    }\n                    return this.decorationCache[code] ||\n                        (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));\n                },\n                boundary: conf.replaceTabs ? undefined : /[^]/\n            });\n        }\n        update(update) {\n            let conf = update.state.facet(specialCharConfig);\n            if (update.startState.facet(specialCharConfig) != conf) {\n                this.decorator = this.makeDecorator(conf);\n                this.decorations = this.decorator.createDeco(update.view);\n            }\n            else {\n                this.decorations = this.decorator.updateDeco(update, this.decorations);\n            }\n        }\n    }, {\n        decorations: v => v.decorations\n    }));\n}\nconst DefaultPlaceholder = \"\\u2022\";\n// Assigns placeholder characters from the Control Pictures block to\n// ASCII control characters\nfunction placeholder$1(code) {\n    if (code >= 32)\n        return DefaultPlaceholder;\n    if (code == 10)\n        return \"\\u2424\";\n    return String.fromCharCode(9216 + code);\n}\nclass SpecialCharWidget extends WidgetType {\n    constructor(options, code) {\n        super();\n        this.options = options;\n        this.code = code;\n    }\n    eq(other) { return other.code == this.code; }\n    toDOM(view) {\n        let ph = placeholder$1(this.code);\n        let desc = view.state.phrase(\"Control character\") + \" \" + (Names[this.code] || \"0x\" + this.code.toString(16));\n        let custom = this.options.render && this.options.render(this.code, desc, ph);\n        if (custom)\n            return custom;\n        let span = document.createElement(\"span\");\n        span.textContent = ph;\n        span.title = desc;\n        span.setAttribute(\"aria-label\", desc);\n        span.className = \"cm-specialChar\";\n        return span;\n    }\n    ignoreEvent() { return false; }\n}\nclass TabWidget extends WidgetType {\n    constructor(width) {\n        super();\n        this.width = width;\n    }\n    eq(other) { return other.width == this.width; }\n    toDOM() {\n        let span = document.createElement(\"span\");\n        span.textContent = \"\\t\";\n        span.className = \"cm-tab\";\n        span.style.width = this.width + \"px\";\n        return span;\n    }\n    ignoreEvent() { return false; }\n}\n\nconst plugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor() {\n        this.height = 1000;\n        this.attrs = { style: \"padding-bottom: 1000px\" };\n    }\n    update(update) {\n        let { view } = update;\n        let height = view.viewState.editorHeight - view.defaultLineHeight - view.documentPadding.top - 0.5;\n        if (height >= 0 && height != this.height) {\n            this.height = height;\n            this.attrs = { style: `padding-bottom: ${height}px` };\n        }\n    }\n});\n/**\nReturns an extension that makes sure the content has a bottom\nmargin equivalent to the height of the editor, minus one line\nheight, so that every line in the document can be scrolled to the\ntop of the editor.\n\nThis is only meaningful when the editor is scrollable, and should\nnot be enabled in editors that take the size of their content.\n*/\nfunction scrollPastEnd() {\n    return [plugin, contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.attrs) || null; })];\n}\n\n/**\nMark lines that have a cursor on them with the `\"cm-activeLine\"`\nDOM class.\n*/\nfunction highlightActiveLine() {\n    return activeLineHighlighter;\n}\nconst lineDeco = /*@__PURE__*/Decoration.line({ class: \"cm-activeLine\" });\nconst activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.docChanged || update.selectionSet)\n            this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let lastLineStart = -1, deco = [];\n        for (let r of view.state.selection.ranges) {\n            let line = view.lineBlockAt(r.head);\n            if (line.from > lastLineStart) {\n                deco.push(lineDeco.range(line.from));\n                lastLineStart = line.from;\n            }\n        }\n        return Decoration.set(deco);\n    }\n}, {\n    decorations: v => v.decorations\n});\n\nclass Placeholder extends WidgetType {\n    constructor(content) {\n        super();\n        this.content = content;\n    }\n    toDOM() {\n        let wrap = document.createElement(\"span\");\n        wrap.className = \"cm-placeholder\";\n        wrap.style.pointerEvents = \"none\";\n        wrap.appendChild(typeof this.content == \"string\" ? document.createTextNode(this.content) : this.content);\n        if (typeof this.content == \"string\")\n            wrap.setAttribute(\"aria-label\", \"placeholder \" + this.content);\n        else\n            wrap.setAttribute(\"aria-hidden\", \"true\");\n        return wrap;\n    }\n    coordsAt(dom) {\n        let rects = dom.firstChild ? clientRectsFor(dom.firstChild) : [];\n        if (!rects.length)\n            return null;\n        let style = window.getComputedStyle(dom.parentNode);\n        let rect = flattenRect(rects[0], style.direction != \"rtl\");\n        let lineHeight = parseInt(style.lineHeight);\n        if (rect.bottom - rect.top > lineHeight * 1.5)\n            return { left: rect.left, right: rect.right, top: rect.top, bottom: rect.top + lineHeight };\n        return rect;\n    }\n    ignoreEvent() { return false; }\n}\n/**\nExtension that enables a placeholder—a piece of example content\nto show when the editor is empty.\n*/\nfunction placeholder(content) {\n    return ViewPlugin.fromClass(class {\n        constructor(view) {\n            this.view = view;\n            this.placeholder = content\n                ? Decoration.set([Decoration.widget({ widget: new Placeholder(content), side: 1 }).range(0)])\n                : Decoration.none;\n        }\n        get decorations() { return this.view.state.doc.length ? Decoration.none : this.placeholder; }\n    }, { decorations: v => v.decorations });\n}\n\n// Don't compute precise column positions for line offsets above this\n// (since it could get expensive). Assume offset==column for them.\nconst MaxOff = 2000;\nfunction rectangleFor(state, a, b) {\n    let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);\n    let ranges = [];\n    if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {\n        let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);\n        for (let i = startLine; i <= endLine; i++) {\n            let line = state.doc.line(i);\n            if (line.length <= endOff)\n                ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));\n        }\n    }\n    else {\n        let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);\n        for (let i = startLine; i <= endLine; i++) {\n            let line = state.doc.line(i);\n            let start = findColumn(line.text, startCol, state.tabSize, true);\n            if (start < 0) {\n                ranges.push(EditorSelection.cursor(line.to));\n            }\n            else {\n                let end = findColumn(line.text, endCol, state.tabSize);\n                ranges.push(EditorSelection.range(line.from + start, line.from + end));\n            }\n        }\n    }\n    return ranges;\n}\nfunction absoluteColumn(view, x) {\n    let ref = view.coordsAtPos(view.viewport.from);\n    return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;\n}\nfunction getPos(view, event) {\n    let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);\n    let line = view.state.doc.lineAt(offset), off = offset - line.from;\n    let col = off > MaxOff ? -1\n        : off == line.length ? absoluteColumn(view, event.clientX)\n            : countColumn(line.text, view.state.tabSize, offset - line.from);\n    return { line: line.number, col, off };\n}\nfunction rectangleSelectionStyle(view, event) {\n    let start = getPos(view, event), startSel = view.state.selection;\n    if (!start)\n        return null;\n    return {\n        update(update) {\n            if (update.docChanged) {\n                let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);\n                let newLine = update.state.doc.lineAt(newStart);\n                start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };\n                startSel = startSel.map(update.changes);\n            }\n        },\n        get(event, _extend, multiple) {\n            let cur = getPos(view, event);\n            if (!cur)\n                return startSel;\n            let ranges = rectangleFor(view.state, start, cur);\n            if (!ranges.length)\n                return startSel;\n            if (multiple)\n                return EditorSelection.create(ranges.concat(startSel.ranges));\n            else\n                return EditorSelection.create(ranges);\n        }\n    };\n}\n/**\nCreate an extension that enables rectangular selections. By\ndefault, it will react to left mouse drag with the Alt key held\ndown. When such a selection occurs, the text within the rectangle\nthat was dragged over will be selected, as one selection\n[range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.\n*/\nfunction rectangularSelection(options) {\n    let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);\n    return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);\n}\nconst keys = {\n    Alt: [18, e => !!e.altKey],\n    Control: [17, e => !!e.ctrlKey],\n    Shift: [16, e => !!e.shiftKey],\n    Meta: [91, e => !!e.metaKey]\n};\nconst showCrosshair = { style: \"cursor: crosshair\" };\n/**\nReturns an extension that turns the pointer cursor into a\ncrosshair when a given modifier key, defaulting to Alt, is held\ndown. Can serve as a visual hint that rectangular selection is\ngoing to happen when paired with\n[`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).\n*/\nfunction crosshairCursor(options = {}) {\n    let [code, getter] = keys[options.key || \"Alt\"];\n    let plugin = ViewPlugin.fromClass(class {\n        constructor(view) {\n            this.view = view;\n            this.isDown = false;\n        }\n        set(isDown) {\n            if (this.isDown != isDown) {\n                this.isDown = isDown;\n                this.view.update([]);\n            }\n        }\n    }, {\n        eventHandlers: {\n            keydown(e) {\n                this.set(e.keyCode == code || getter(e));\n            },\n            keyup(e) {\n                if (e.keyCode == code || !getter(e))\n                    this.set(false);\n            },\n            mousemove(e) {\n                this.set(getter(e));\n            }\n        }\n    });\n    return [\n        plugin,\n        EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })\n    ];\n}\n\nconst Outside = \"-10000px\";\nclass TooltipViewManager {\n    constructor(view, facet, createTooltipView) {\n        this.facet = facet;\n        this.createTooltipView = createTooltipView;\n        this.input = view.state.facet(facet);\n        this.tooltips = this.input.filter(t => t);\n        this.tooltipViews = this.tooltips.map(createTooltipView);\n    }\n    update(update) {\n        var _a;\n        let input = update.state.facet(this.facet);\n        let tooltips = input.filter(x => x);\n        if (input === this.input) {\n            for (let t of this.tooltipViews)\n                if (t.update)\n                    t.update(update);\n            return false;\n        }\n        let tooltipViews = [];\n        for (let i = 0; i < tooltips.length; i++) {\n            let tip = tooltips[i], known = -1;\n            if (!tip)\n                continue;\n            for (let i = 0; i < this.tooltips.length; i++) {\n                let other = this.tooltips[i];\n                if (other && other.create == tip.create)\n                    known = i;\n            }\n            if (known < 0) {\n                tooltipViews[i] = this.createTooltipView(tip);\n            }\n            else {\n                let tooltipView = tooltipViews[i] = this.tooltipViews[known];\n                if (tooltipView.update)\n                    tooltipView.update(update);\n            }\n        }\n        for (let t of this.tooltipViews)\n            if (tooltipViews.indexOf(t) < 0) {\n                t.dom.remove();\n                (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);\n            }\n        this.input = input;\n        this.tooltips = tooltips;\n        this.tooltipViews = tooltipViews;\n        return true;\n    }\n}\n/**\nCreates an extension that configures tooltip behavior.\n*/\nfunction tooltips(config = {}) {\n    return tooltipConfig.of(config);\n}\nfunction windowSpace(view) {\n    let { win } = view;\n    return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };\n}\nconst tooltipConfig = /*@__PURE__*/Facet.define({\n    combine: values => {\n        var _a, _b, _c;\n        return ({\n            position: browser.ios ? \"absolute\" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || \"fixed\",\n            parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,\n            tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,\n        });\n    }\n});\nconst knownHeight = /*@__PURE__*/new WeakMap();\nconst tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.inView = true;\n        this.lastTransaction = 0;\n        this.measureTimeout = -1;\n        let config = view.state.facet(tooltipConfig);\n        this.position = config.position;\n        this.parent = config.parent;\n        this.classes = view.themeClasses;\n        this.createContainer();\n        this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };\n        this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));\n        this.intersectionObserver = typeof IntersectionObserver == \"function\" ? new IntersectionObserver(entries => {\n            if (Date.now() > this.lastTransaction - 50 &&\n                entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)\n                this.measureSoon();\n        }, { threshold: [1] }) : null;\n        this.observeIntersection();\n        view.win.addEventListener(\"resize\", this.measureSoon = this.measureSoon.bind(this));\n        this.maybeMeasure();\n    }\n    createContainer() {\n        if (this.parent) {\n            this.container = document.createElement(\"div\");\n            this.container.style.position = \"relative\";\n            this.container.className = this.view.themeClasses;\n            this.parent.appendChild(this.container);\n        }\n        else {\n            this.container = this.view.dom;\n        }\n    }\n    observeIntersection() {\n        if (this.intersectionObserver) {\n            this.intersectionObserver.disconnect();\n            for (let tooltip of this.manager.tooltipViews)\n                this.intersectionObserver.observe(tooltip.dom);\n        }\n    }\n    measureSoon() {\n        if (this.measureTimeout < 0)\n            this.measureTimeout = setTimeout(() => {\n                this.measureTimeout = -1;\n                this.maybeMeasure();\n            }, 50);\n    }\n    update(update) {\n        if (update.transactions.length)\n            this.lastTransaction = Date.now();\n        let updated = this.manager.update(update);\n        if (updated)\n            this.observeIntersection();\n        let shouldMeasure = updated || update.geometryChanged;\n        let newConfig = update.state.facet(tooltipConfig);\n        if (newConfig.position != this.position) {\n            this.position = newConfig.position;\n            for (let t of this.manager.tooltipViews)\n                t.dom.style.position = this.position;\n            shouldMeasure = true;\n        }\n        if (newConfig.parent != this.parent) {\n            if (this.parent)\n                this.container.remove();\n            this.parent = newConfig.parent;\n            this.createContainer();\n            for (let t of this.manager.tooltipViews)\n                this.container.appendChild(t.dom);\n            shouldMeasure = true;\n        }\n        else if (this.parent && this.view.themeClasses != this.classes) {\n            this.classes = this.container.className = this.view.themeClasses;\n        }\n        if (shouldMeasure)\n            this.maybeMeasure();\n    }\n    createTooltip(tooltip) {\n        let tooltipView = tooltip.create(this.view);\n        tooltipView.dom.classList.add(\"cm-tooltip\");\n        if (tooltip.arrow && !tooltipView.dom.querySelector(\".cm-tooltip > .cm-tooltip-arrow\")) {\n            let arrow = document.createElement(\"div\");\n            arrow.className = \"cm-tooltip-arrow\";\n            tooltipView.dom.appendChild(arrow);\n        }\n        tooltipView.dom.style.position = this.position;\n        tooltipView.dom.style.top = Outside;\n        this.container.appendChild(tooltipView.dom);\n        if (tooltipView.mount)\n            tooltipView.mount(this.view);\n        return tooltipView;\n    }\n    destroy() {\n        var _a, _b;\n        this.view.win.removeEventListener(\"resize\", this.measureSoon);\n        for (let tooltipView of this.manager.tooltipViews) {\n            tooltipView.dom.remove();\n            (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);\n        }\n        (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();\n        clearTimeout(this.measureTimeout);\n    }\n    readMeasure() {\n        let editor = this.view.dom.getBoundingClientRect();\n        return {\n            editor,\n            parent: this.parent ? this.container.getBoundingClientRect() : editor,\n            pos: this.manager.tooltips.map((t, i) => {\n                let tv = this.manager.tooltipViews[i];\n                return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);\n            }),\n            size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),\n            space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),\n        };\n    }\n    writeMeasure(measured) {\n        var _a;\n        let { editor, space } = measured;\n        let others = [];\n        for (let i = 0; i < this.manager.tooltips.length; i++) {\n            let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;\n            let pos = measured.pos[i], size = measured.size[i];\n            // Hide tooltips that are outside of the editor.\n            if (!pos || pos.bottom <= Math.max(editor.top, space.top) ||\n                pos.top >= Math.min(editor.bottom, space.bottom) ||\n                pos.right < Math.max(editor.left, space.left) - .1 ||\n                pos.left > Math.min(editor.right, space.right) + .1) {\n                dom.style.top = Outside;\n                continue;\n            }\n            let arrow = tooltip.arrow ? tView.dom.querySelector(\".cm-tooltip-arrow\") : null;\n            let arrowHeight = arrow ? 7 /* Size */ : 0;\n            let width = size.right - size.left, height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;\n            let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;\n            let left = size.width > space.right - space.left ? (ltr ? space.left : space.right - size.width)\n                : ltr ? Math.min(pos.left - (arrow ? 14 /* Offset */ : 0) + offset.x, space.right - width)\n                    : Math.max(space.left, pos.left - width + (arrow ? 14 /* Offset */ : 0) - offset.x);\n            let above = !!tooltip.above;\n            if (!tooltip.strictSide && (above\n                ? pos.top - (size.bottom - size.top) - offset.y < space.top\n                : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) &&\n                above == (space.bottom - pos.bottom > pos.top - space.top))\n                above = !above;\n            let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;\n            if (spaceVert < height && tView.resize !== false) {\n                if (spaceVert < this.view.defaultLineHeight) {\n                    dom.style.top = Outside;\n                    continue;\n                }\n                knownHeight.set(tView, height);\n                dom.style.height = (height = spaceVert) + \"px\";\n            }\n            else if (dom.style.height) {\n                dom.style.height = \"\";\n            }\n            let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;\n            let right = left + width;\n            if (tView.overlap !== true)\n                for (let r of others)\n                    if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)\n                        top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;\n            if (this.position == \"absolute\") {\n                dom.style.top = (top - measured.parent.top) + \"px\";\n                dom.style.left = (left - measured.parent.left) + \"px\";\n            }\n            else {\n                dom.style.top = top + \"px\";\n                dom.style.left = left + \"px\";\n            }\n            if (arrow)\n                arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Offset */ - 7 /* Size */)}px`;\n            if (tView.overlap !== true)\n                others.push({ left, top, right, bottom: top + height });\n            dom.classList.toggle(\"cm-tooltip-above\", above);\n            dom.classList.toggle(\"cm-tooltip-below\", !above);\n            if (tView.positioned)\n                tView.positioned(measured.space);\n        }\n    }\n    maybeMeasure() {\n        if (this.manager.tooltips.length) {\n            if (this.view.inView)\n                this.view.requestMeasure(this.measureReq);\n            if (this.inView != this.view.inView) {\n                this.inView = this.view.inView;\n                if (!this.inView)\n                    for (let tv of this.manager.tooltipViews)\n                        tv.dom.style.top = Outside;\n            }\n        }\n    }\n}, {\n    eventHandlers: {\n        scroll() { this.maybeMeasure(); }\n    }\n});\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-tooltip\": {\n        zIndex: 100,\n        boxSizing: \"border-box\"\n    },\n    \"&light .cm-tooltip\": {\n        border: \"1px solid #bbb\",\n        backgroundColor: \"#f5f5f5\"\n    },\n    \"&light .cm-tooltip-section:not(:first-child)\": {\n        borderTop: \"1px solid #bbb\",\n    },\n    \"&dark .cm-tooltip\": {\n        backgroundColor: \"#333338\",\n        color: \"white\"\n    },\n    \".cm-tooltip-arrow\": {\n        height: `${7 /* Size */}px`,\n        width: `${7 /* Size */ * 2}px`,\n        position: \"absolute\",\n        zIndex: -1,\n        overflow: \"hidden\",\n        \"&:before, &:after\": {\n            content: \"''\",\n            position: \"absolute\",\n            width: 0,\n            height: 0,\n            borderLeft: `${7 /* Size */}px solid transparent`,\n            borderRight: `${7 /* Size */}px solid transparent`,\n        },\n        \".cm-tooltip-above &\": {\n            bottom: `-${7 /* Size */}px`,\n            \"&:before\": {\n                borderTop: `${7 /* Size */}px solid #bbb`,\n            },\n            \"&:after\": {\n                borderTop: `${7 /* Size */}px solid #f5f5f5`,\n                bottom: \"1px\"\n            }\n        },\n        \".cm-tooltip-below &\": {\n            top: `-${7 /* Size */}px`,\n            \"&:before\": {\n                borderBottom: `${7 /* Size */}px solid #bbb`,\n            },\n            \"&:after\": {\n                borderBottom: `${7 /* Size */}px solid #f5f5f5`,\n                top: \"1px\"\n            }\n        },\n    },\n    \"&dark .cm-tooltip .cm-tooltip-arrow\": {\n        \"&:before\": {\n            borderTopColor: \"#333338\",\n            borderBottomColor: \"#333338\"\n        },\n        \"&:after\": {\n            borderTopColor: \"transparent\",\n            borderBottomColor: \"transparent\"\n        }\n    }\n});\nconst noOffset = { x: 0, y: 0 };\n/**\nFacet to which an extension can add a value to show a tooltip.\n*/\nconst showTooltip = /*@__PURE__*/Facet.define({\n    enables: [tooltipPlugin, baseTheme]\n});\nconst showHoverTooltip = /*@__PURE__*/Facet.define();\nclass HoverTooltipHost {\n    constructor(view) {\n        this.view = view;\n        this.mounted = false;\n        this.dom = document.createElement(\"div\");\n        this.dom.classList.add(\"cm-tooltip-hover\");\n        this.manager = new TooltipViewManager(view, showHoverTooltip, t => this.createHostedView(t));\n    }\n    // Needs to be static so that host tooltip instances always match\n    static create(view) {\n        return new HoverTooltipHost(view);\n    }\n    createHostedView(tooltip) {\n        let hostedView = tooltip.create(this.view);\n        hostedView.dom.classList.add(\"cm-tooltip-section\");\n        this.dom.appendChild(hostedView.dom);\n        if (this.mounted && hostedView.mount)\n            hostedView.mount(this.view);\n        return hostedView;\n    }\n    mount(view) {\n        for (let hostedView of this.manager.tooltipViews) {\n            if (hostedView.mount)\n                hostedView.mount(view);\n        }\n        this.mounted = true;\n    }\n    positioned(space) {\n        for (let hostedView of this.manager.tooltipViews) {\n            if (hostedView.positioned)\n                hostedView.positioned(space);\n        }\n    }\n    update(update) {\n        this.manager.update(update);\n    }\n    destroy() {\n        var _a;\n        for (let t of this.manager.tooltipViews)\n            (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);\n    }\n}\nconst showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {\n    let tooltips = state.facet(showHoverTooltip).filter(t => t);\n    if (tooltips.length === 0)\n        return null;\n    return {\n        pos: Math.min(...tooltips.map(t => t.pos)),\n        end: Math.max(...tooltips.filter(t => t.end != null).map(t => t.end)),\n        create: HoverTooltipHost.create,\n        above: tooltips[0].above,\n        arrow: tooltips.some(t => t.arrow),\n    };\n});\nclass HoverPlugin {\n    constructor(view, source, field, setHover, hoverTime) {\n        this.view = view;\n        this.source = source;\n        this.field = field;\n        this.setHover = setHover;\n        this.hoverTime = hoverTime;\n        this.hoverTimeout = -1;\n        this.restartTimeout = -1;\n        this.pending = null;\n        this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };\n        this.checkHover = this.checkHover.bind(this);\n        view.dom.addEventListener(\"mouseleave\", this.mouseleave = this.mouseleave.bind(this));\n        view.dom.addEventListener(\"mousemove\", this.mousemove = this.mousemove.bind(this));\n    }\n    update() {\n        if (this.pending) {\n            this.pending = null;\n            clearTimeout(this.restartTimeout);\n            this.restartTimeout = setTimeout(() => this.startHover(), 20);\n        }\n    }\n    get active() {\n        return this.view.state.field(this.field);\n    }\n    checkHover() {\n        this.hoverTimeout = -1;\n        if (this.active)\n            return;\n        let hovered = Date.now() - this.lastMove.time;\n        if (hovered < this.hoverTime)\n            this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);\n        else\n            this.startHover();\n    }\n    startHover() {\n        clearTimeout(this.restartTimeout);\n        let { lastMove } = this;\n        let pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;\n        if (pos == null)\n            return;\n        let posCoords = this.view.coordsAtPos(pos);\n        if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom ||\n            lastMove.x < posCoords.left - this.view.defaultCharacterWidth ||\n            lastMove.x > posCoords.right + this.view.defaultCharacterWidth)\n            return;\n        let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);\n        let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;\n        let open = this.source(this.view, pos, (lastMove.x < posCoords.left ? -rtl : rtl));\n        if (open === null || open === void 0 ? void 0 : open.then) {\n            let pending = this.pending = { pos };\n            open.then(result => {\n                if (this.pending == pending) {\n                    this.pending = null;\n                    if (result)\n                        this.view.dispatch({ effects: this.setHover.of(result) });\n                }\n            }, e => logException(this.view.state, e, \"hover tooltip\"));\n        }\n        else if (open) {\n            this.view.dispatch({ effects: this.setHover.of(open) });\n        }\n    }\n    mousemove(event) {\n        var _a;\n        this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };\n        if (this.hoverTimeout < 0)\n            this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);\n        let tooltip = this.active;\n        if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {\n            let { pos } = tooltip || this.pending, end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;\n            if ((pos == end ? this.view.posAtCoords(this.lastMove) != pos\n                : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6 /* MaxDist */))) {\n                this.view.dispatch({ effects: this.setHover.of(null) });\n                this.pending = null;\n            }\n        }\n    }\n    mouseleave(e) {\n        clearTimeout(this.hoverTimeout);\n        this.hoverTimeout = -1;\n        if (this.active && !isInTooltip(e.relatedTarget))\n            this.view.dispatch({ effects: this.setHover.of(null) });\n    }\n    destroy() {\n        clearTimeout(this.hoverTimeout);\n        this.view.dom.removeEventListener(\"mouseleave\", this.mouseleave);\n        this.view.dom.removeEventListener(\"mousemove\", this.mousemove);\n    }\n}\nfunction isInTooltip(elt) {\n    for (let cur = elt; cur; cur = cur.parentNode)\n        if (cur.nodeType == 1 && cur.classList.contains(\"cm-tooltip\"))\n            return true;\n    return false;\n}\nfunction isOverRange(view, from, to, x, y, margin) {\n    let range = document.createRange();\n    let fromDOM = view.domAtPos(from), toDOM = view.domAtPos(to);\n    range.setEnd(toDOM.node, toDOM.offset);\n    range.setStart(fromDOM.node, fromDOM.offset);\n    let rects = range.getClientRects();\n    range.detach();\n    for (let i = 0; i < rects.length; i++) {\n        let rect = rects[i];\n        let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);\n        if (dist <= margin)\n            return true;\n    }\n    return false;\n}\n/**\nSet up a hover tooltip, which shows up when the pointer hovers\nover ranges of text. The callback is called when the mouse hovers\nover the document text. It should, if there is a tooltip\nassociated with position `pos`, return the tooltip description\n(either directly or in a promise). The `side` argument indicates\non which side of the position the pointer is—it will be -1 if the\npointer is before the position, 1 if after the position.\n\nNote that all hover tooltips are hosted within a single tooltip\ncontainer element. This allows multiple tooltips over the same\nrange to be \"merged\" together without overlapping.\n*/\nfunction hoverTooltip(source, options = {}) {\n    let setHover = StateEffect.define();\n    let hoverState = StateField.define({\n        create() { return null; },\n        update(value, tr) {\n            if (value && (options.hideOnChange && (tr.docChanged || tr.selection) ||\n                options.hideOn && options.hideOn(tr, value)))\n                return null;\n            if (value && tr.docChanged) {\n                let newPos = tr.changes.mapPos(value.pos, -1, MapMode.TrackDel);\n                if (newPos == null)\n                    return null;\n                let copy = Object.assign(Object.create(null), value);\n                copy.pos = newPos;\n                if (value.end != null)\n                    copy.end = tr.changes.mapPos(value.end);\n                value = copy;\n            }\n            for (let effect of tr.effects) {\n                if (effect.is(setHover))\n                    value = effect.value;\n                if (effect.is(closeHoverTooltipEffect))\n                    value = null;\n            }\n            return value;\n        },\n        provide: f => showHoverTooltip.from(f)\n    });\n    return [\n        hoverState,\n        ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Time */)),\n        showHoverTooltipHost\n    ];\n}\n/**\nGet the active tooltip view for a given tooltip, if available.\n*/\nfunction getTooltip(view, tooltip) {\n    let plugin = view.plugin(tooltipPlugin);\n    if (!plugin)\n        return null;\n    let found = plugin.manager.tooltips.indexOf(tooltip);\n    return found < 0 ? null : plugin.manager.tooltipViews[found];\n}\n/**\nReturns true if any hover tooltips are currently active.\n*/\nfunction hasHoverTooltips(state) {\n    return state.facet(showHoverTooltip).some(x => x);\n}\nconst closeHoverTooltipEffect = /*@__PURE__*/StateEffect.define();\n/**\nTransaction effect that closes all hover tooltips.\n*/\nconst closeHoverTooltips = /*@__PURE__*/closeHoverTooltipEffect.of(null);\n/**\nTell the tooltip extension to recompute the position of the active\ntooltips. This can be useful when something happens (such as a\nre-positioning or CSS change affecting the editor) that could\ninvalidate the existing tooltip positions.\n*/\nfunction repositionTooltips(view) {\n    var _a;\n    (_a = view.plugin(tooltipPlugin)) === null || _a === void 0 ? void 0 : _a.maybeMeasure();\n}\n\nconst panelConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        let topContainer, bottomContainer;\n        for (let c of configs) {\n            topContainer = topContainer || c.topContainer;\n            bottomContainer = bottomContainer || c.bottomContainer;\n        }\n        return { topContainer, bottomContainer };\n    }\n});\n/**\nConfigures the panel-managing extension.\n*/\nfunction panels(config) {\n    return config ? [panelConfig.of(config)] : [];\n}\n/**\nGet the active panel created by the given constructor, if any.\nThis can be useful when you need access to your panels' DOM\nstructure.\n*/\nfunction getPanel(view, panel) {\n    let plugin = view.plugin(panelPlugin);\n    let index = plugin ? plugin.specs.indexOf(panel) : -1;\n    return index > -1 ? plugin.panels[index] : null;\n}\nconst panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.input = view.state.facet(showPanel);\n        this.specs = this.input.filter(s => s);\n        this.panels = this.specs.map(spec => spec(view));\n        let conf = view.state.facet(panelConfig);\n        this.top = new PanelGroup(view, true, conf.topContainer);\n        this.bottom = new PanelGroup(view, false, conf.bottomContainer);\n        this.top.sync(this.panels.filter(p => p.top));\n        this.bottom.sync(this.panels.filter(p => !p.top));\n        for (let p of this.panels) {\n            p.dom.classList.add(\"cm-panel\");\n            if (p.mount)\n                p.mount();\n        }\n    }\n    update(update) {\n        let conf = update.state.facet(panelConfig);\n        if (this.top.container != conf.topContainer) {\n            this.top.sync([]);\n            this.top = new PanelGroup(update.view, true, conf.topContainer);\n        }\n        if (this.bottom.container != conf.bottomContainer) {\n            this.bottom.sync([]);\n            this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);\n        }\n        this.top.syncClasses();\n        this.bottom.syncClasses();\n        let input = update.state.facet(showPanel);\n        if (input != this.input) {\n            let specs = input.filter(x => x);\n            let panels = [], top = [], bottom = [], mount = [];\n            for (let spec of specs) {\n                let known = this.specs.indexOf(spec), panel;\n                if (known < 0) {\n                    panel = spec(update.view);\n                    mount.push(panel);\n                }\n                else {\n                    panel = this.panels[known];\n                    if (panel.update)\n                        panel.update(update);\n                }\n                panels.push(panel);\n                (panel.top ? top : bottom).push(panel);\n            }\n            this.specs = specs;\n            this.panels = panels;\n            this.top.sync(top);\n            this.bottom.sync(bottom);\n            for (let p of mount) {\n                p.dom.classList.add(\"cm-panel\");\n                if (p.mount)\n                    p.mount();\n            }\n        }\n        else {\n            for (let p of this.panels)\n                if (p.update)\n                    p.update(update);\n        }\n    }\n    destroy() {\n        this.top.sync([]);\n        this.bottom.sync([]);\n    }\n}, {\n    provide: plugin => EditorView.scrollMargins.of(view => {\n        let value = view.plugin(plugin);\n        return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };\n    })\n});\nclass PanelGroup {\n    constructor(view, top, container) {\n        this.view = view;\n        this.top = top;\n        this.container = container;\n        this.dom = undefined;\n        this.classes = \"\";\n        this.panels = [];\n        this.syncClasses();\n    }\n    sync(panels) {\n        for (let p of this.panels)\n            if (p.destroy && panels.indexOf(p) < 0)\n                p.destroy();\n        this.panels = panels;\n        this.syncDOM();\n    }\n    syncDOM() {\n        if (this.panels.length == 0) {\n            if (this.dom) {\n                this.dom.remove();\n                this.dom = undefined;\n            }\n            return;\n        }\n        if (!this.dom) {\n            this.dom = document.createElement(\"div\");\n            this.dom.className = this.top ? \"cm-panels cm-panels-top\" : \"cm-panels cm-panels-bottom\";\n            this.dom.style[this.top ? \"top\" : \"bottom\"] = \"0\";\n            let parent = this.container || this.view.dom;\n            parent.insertBefore(this.dom, this.top ? parent.firstChild : null);\n        }\n        let curDOM = this.dom.firstChild;\n        for (let panel of this.panels) {\n            if (panel.dom.parentNode == this.dom) {\n                while (curDOM != panel.dom)\n                    curDOM = rm(curDOM);\n                curDOM = curDOM.nextSibling;\n            }\n            else {\n                this.dom.insertBefore(panel.dom, curDOM);\n            }\n        }\n        while (curDOM)\n            curDOM = rm(curDOM);\n    }\n    scrollMargin() {\n        return !this.dom || this.container ? 0\n            : Math.max(0, this.top ?\n                this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :\n                Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);\n    }\n    syncClasses() {\n        if (!this.container || this.classes == this.view.themeClasses)\n            return;\n        for (let cls of this.classes.split(\" \"))\n            if (cls)\n                this.container.classList.remove(cls);\n        for (let cls of (this.classes = this.view.themeClasses).split(\" \"))\n            if (cls)\n                this.container.classList.add(cls);\n    }\n}\nfunction rm(node) {\n    let next = node.nextSibling;\n    node.remove();\n    return next;\n}\n/**\nOpening a panel is done by providing a constructor function for\nthe panel through this facet. (The panel is closed again when its\nconstructor is no longer provided.) Values of `null` are ignored.\n*/\nconst showPanel = /*@__PURE__*/Facet.define({\n    enables: panelPlugin\n});\n\n/**\nA gutter marker represents a bit of information attached to a line\nin a specific gutter. Your own custom markers have to extend this\nclass.\n*/\nclass GutterMarker extends RangeValue {\n    /**\n    @internal\n    */\n    compare(other) {\n        return this == other || this.constructor == other.constructor && this.eq(other);\n    }\n    /**\n    Compare this marker to another marker of the same type.\n    */\n    eq(other) { return false; }\n    /**\n    Called if the marker has a `toDOM` method and its representation\n    was removed from a gutter.\n    */\n    destroy(dom) { }\n}\nGutterMarker.prototype.elementClass = \"\";\nGutterMarker.prototype.toDOM = undefined;\nGutterMarker.prototype.mapMode = MapMode.TrackBefore;\nGutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;\nGutterMarker.prototype.point = true;\n/**\nFacet used to add a class to all gutter elements for a given line.\nMarkers given to this facet should _only_ define an\n[`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a\n[`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear\nin all gutters for the line).\n*/\nconst gutterLineClass = /*@__PURE__*/Facet.define();\nconst defaults = {\n    class: \"\",\n    renderEmptyElements: false,\n    elementStyle: \"\",\n    markers: () => RangeSet.empty,\n    lineMarker: () => null,\n    widgetMarker: () => null,\n    lineMarkerChange: null,\n    initialSpacer: null,\n    updateSpacer: null,\n    domEventHandlers: {}\n};\nconst activeGutters = /*@__PURE__*/Facet.define();\n/**\nDefine an editor gutter. The order in which the gutters appear is\ndetermined by their extension priority.\n*/\nfunction gutter(config) {\n    return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];\n}\nconst unfixGutters = /*@__PURE__*/Facet.define({\n    combine: values => values.some(x => x)\n});\n/**\nThe gutter-drawing plugin is automatically enabled when you add a\ngutter, but you can use this function to explicitly configure it.\n\nUnless `fixed` is explicitly set to `false`, the gutters are\nfixed, meaning they don't scroll along with the content\nhorizontally (except on Internet Explorer, which doesn't support\nCSS [`position:\nsticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).\n*/\nfunction gutters(config) {\n    let result = [\n        gutterView,\n    ];\n    if (config && config.fixed === false)\n        result.push(unfixGutters.of(true));\n    return result;\n}\nconst gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.prevViewport = view.viewport;\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-gutters\";\n        this.dom.setAttribute(\"aria-hidden\", \"true\");\n        this.dom.style.minHeight = this.view.contentHeight + \"px\";\n        this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));\n        for (let gutter of this.gutters)\n            this.dom.appendChild(gutter.dom);\n        this.fixed = !view.state.facet(unfixGutters);\n        if (this.fixed) {\n            // FIXME IE11 fallback, which doesn't support position: sticky,\n            // by using position: relative + event handlers that realign the\n            // gutter (or just force fixed=false on IE11?)\n            this.dom.style.position = \"sticky\";\n        }\n        this.syncGutters(false);\n        view.scrollDOM.insertBefore(this.dom, view.contentDOM);\n    }\n    update(update) {\n        if (this.updateGutters(update)) {\n            // Detach during sync when the viewport changed significantly\n            // (such as during scrolling), since for large updates that is\n            // faster.\n            let vpA = this.prevViewport, vpB = update.view.viewport;\n            let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);\n            this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);\n        }\n        if (update.geometryChanged)\n            this.dom.style.minHeight = this.view.contentHeight + \"px\";\n        if (this.view.state.facet(unfixGutters) != !this.fixed) {\n            this.fixed = !this.fixed;\n            this.dom.style.position = this.fixed ? \"sticky\" : \"\";\n        }\n        this.prevViewport = update.view.viewport;\n    }\n    syncGutters(detach) {\n        let after = this.dom.nextSibling;\n        if (detach)\n            this.dom.remove();\n        let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);\n        let classSet = [];\n        let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));\n        for (let line of this.view.viewportLineBlocks) {\n            if (classSet.length)\n                classSet = [];\n            if (Array.isArray(line.type)) {\n                let first = true;\n                for (let b of line.type) {\n                    if (b.type == BlockType.Text && first) {\n                        advanceCursor(lineClasses, classSet, b.from);\n                        for (let cx of contexts)\n                            cx.line(this.view, b, classSet);\n                        first = false;\n                    }\n                    else if (b.widget) {\n                        for (let cx of contexts)\n                            cx.widget(this.view, b);\n                    }\n                }\n            }\n            else if (line.type == BlockType.Text) {\n                advanceCursor(lineClasses, classSet, line.from);\n                for (let cx of contexts)\n                    cx.line(this.view, line, classSet);\n            }\n        }\n        for (let cx of contexts)\n            cx.finish();\n        if (detach)\n            this.view.scrollDOM.insertBefore(this.dom, after);\n    }\n    updateGutters(update) {\n        let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);\n        let change = update.docChanged || update.heightChanged || update.viewportChanged ||\n            !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);\n        if (prev == cur) {\n            for (let gutter of this.gutters)\n                if (gutter.update(update))\n                    change = true;\n        }\n        else {\n            change = true;\n            let gutters = [];\n            for (let conf of cur) {\n                let known = prev.indexOf(conf);\n                if (known < 0) {\n                    gutters.push(new SingleGutterView(this.view, conf));\n                }\n                else {\n                    this.gutters[known].update(update);\n                    gutters.push(this.gutters[known]);\n                }\n            }\n            for (let g of this.gutters) {\n                g.dom.remove();\n                if (gutters.indexOf(g) < 0)\n                    g.destroy();\n            }\n            for (let g of gutters)\n                this.dom.appendChild(g.dom);\n            this.gutters = gutters;\n        }\n        return change;\n    }\n    destroy() {\n        for (let view of this.gutters)\n            view.destroy();\n        this.dom.remove();\n    }\n}, {\n    provide: plugin => EditorView.scrollMargins.of(view => {\n        let value = view.plugin(plugin);\n        if (!value || value.gutters.length == 0 || !value.fixed)\n            return null;\n        return view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };\n    })\n});\nfunction asArray(val) { return (Array.isArray(val) ? val : [val]); }\nfunction advanceCursor(cursor, collect, pos) {\n    while (cursor.value && cursor.from <= pos) {\n        if (cursor.from == pos)\n            collect.push(cursor.value);\n        cursor.next();\n    }\n}\nclass UpdateContext {\n    constructor(gutter, viewport, height) {\n        this.gutter = gutter;\n        this.height = height;\n        this.i = 0;\n        this.cursor = RangeSet.iter(gutter.markers, viewport.from);\n    }\n    addElement(view, block, markers) {\n        let { gutter } = this, above = block.top - this.height;\n        if (this.i == gutter.elements.length) {\n            let newElt = new GutterElement(view, block.height, above, markers);\n            gutter.elements.push(newElt);\n            gutter.dom.appendChild(newElt.dom);\n        }\n        else {\n            gutter.elements[this.i].update(view, block.height, above, markers);\n        }\n        this.height = block.bottom;\n        this.i++;\n    }\n    line(view, line, extraMarkers) {\n        let localMarkers = [];\n        advanceCursor(this.cursor, localMarkers, line.from);\n        if (extraMarkers.length)\n            localMarkers = localMarkers.concat(extraMarkers);\n        let forLine = this.gutter.config.lineMarker(view, line, localMarkers);\n        if (forLine)\n            localMarkers.unshift(forLine);\n        let gutter = this.gutter;\n        if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)\n            return;\n        this.addElement(view, line, localMarkers);\n    }\n    widget(view, block) {\n        let marker = this.gutter.config.widgetMarker(view, block.widget, block);\n        if (marker)\n            this.addElement(view, block, [marker]);\n    }\n    finish() {\n        let gutter = this.gutter;\n        while (gutter.elements.length > this.i) {\n            let last = gutter.elements.pop();\n            gutter.dom.removeChild(last.dom);\n            last.destroy();\n        }\n    }\n}\nclass SingleGutterView {\n    constructor(view, config) {\n        this.view = view;\n        this.config = config;\n        this.elements = [];\n        this.spacer = null;\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-gutter\" + (this.config.class ? \" \" + this.config.class : \"\");\n        for (let prop in config.domEventHandlers) {\n            this.dom.addEventListener(prop, (event) => {\n                let target = event.target, y;\n                if (target != this.dom && this.dom.contains(target)) {\n                    while (target.parentNode != this.dom)\n                        target = target.parentNode;\n                    let rect = target.getBoundingClientRect();\n                    y = (rect.top + rect.bottom) / 2;\n                }\n                else {\n                    y = event.clientY;\n                }\n                let line = view.lineBlockAtHeight(y - view.documentTop);\n                if (config.domEventHandlers[prop](view, line, event))\n                    event.preventDefault();\n            });\n        }\n        this.markers = asArray(config.markers(view));\n        if (config.initialSpacer) {\n            this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);\n            this.dom.appendChild(this.spacer.dom);\n            this.spacer.dom.style.cssText += \"visibility: hidden; pointer-events: none\";\n        }\n    }\n    update(update) {\n        let prevMarkers = this.markers;\n        this.markers = asArray(this.config.markers(update.view));\n        if (this.spacer && this.config.updateSpacer) {\n            let updated = this.config.updateSpacer(this.spacer.markers[0], update);\n            if (updated != this.spacer.markers[0])\n                this.spacer.update(update.view, 0, 0, [updated]);\n        }\n        let vp = update.view.viewport;\n        return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||\n            (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);\n    }\n    destroy() {\n        for (let elt of this.elements)\n            elt.destroy();\n    }\n}\nclass GutterElement {\n    constructor(view, height, above, markers) {\n        this.height = -1;\n        this.above = 0;\n        this.markers = [];\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-gutterElement\";\n        this.update(view, height, above, markers);\n    }\n    update(view, height, above, markers) {\n        if (this.height != height)\n            this.dom.style.height = (this.height = height) + \"px\";\n        if (this.above != above)\n            this.dom.style.marginTop = (this.above = above) ? above + \"px\" : \"\";\n        if (!sameMarkers(this.markers, markers))\n            this.setMarkers(view, markers);\n    }\n    setMarkers(view, markers) {\n        let cls = \"cm-gutterElement\", domPos = this.dom.firstChild;\n        for (let iNew = 0, iOld = 0;;) {\n            let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;\n            if (marker) {\n                let c = marker.elementClass;\n                if (c)\n                    cls += \" \" + c;\n                for (let i = iOld; i < this.markers.length; i++)\n                    if (this.markers[i].compare(marker)) {\n                        skipTo = i;\n                        matched = true;\n                        break;\n                    }\n            }\n            else {\n                skipTo = this.markers.length;\n            }\n            while (iOld < skipTo) {\n                let next = this.markers[iOld++];\n                if (next.toDOM) {\n                    next.destroy(domPos);\n                    let after = domPos.nextSibling;\n                    domPos.remove();\n                    domPos = after;\n                }\n            }\n            if (!marker)\n                break;\n            if (marker.toDOM) {\n                if (matched)\n                    domPos = domPos.nextSibling;\n                else\n                    this.dom.insertBefore(marker.toDOM(view), domPos);\n            }\n            if (matched)\n                iOld++;\n        }\n        this.dom.className = cls;\n        this.markers = markers;\n    }\n    destroy() {\n        this.setMarkers(null, []); // First argument not used unless creating markers\n    }\n}\nfunction sameMarkers(a, b) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!a[i].compare(b[i]))\n            return false;\n    return true;\n}\n/**\nFacet used to provide markers to the line number gutter.\n*/\nconst lineNumberMarkers = /*@__PURE__*/Facet.define();\nconst lineNumberConfig = /*@__PURE__*/Facet.define({\n    combine(values) {\n        return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {\n            domEventHandlers(a, b) {\n                let result = Object.assign({}, a);\n                for (let event in b) {\n                    let exists = result[event], add = b[event];\n                    result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;\n                }\n                return result;\n            }\n        });\n    }\n});\nclass NumberMarker extends GutterMarker {\n    constructor(number) {\n        super();\n        this.number = number;\n    }\n    eq(other) { return this.number == other.number; }\n    toDOM() { return document.createTextNode(this.number); }\n}\nfunction formatNumber(view, number) {\n    return view.state.facet(lineNumberConfig).formatNumber(number, view.state);\n}\nconst lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({\n    class: \"cm-lineNumbers\",\n    renderEmptyElements: false,\n    markers(view) { return view.state.facet(lineNumberMarkers); },\n    lineMarker(view, line, others) {\n        if (others.some(m => m.toDOM))\n            return null;\n        return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));\n    },\n    widgetMarker: () => null,\n    lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),\n    initialSpacer(view) {\n        return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));\n    },\n    updateSpacer(spacer, update) {\n        let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));\n        return max == spacer.number ? spacer : new NumberMarker(max);\n    },\n    domEventHandlers: state.facet(lineNumberConfig).domEventHandlers\n}));\n/**\nCreate a line number gutter extension.\n*/\nfunction lineNumbers(config = {}) {\n    return [\n        lineNumberConfig.of(config),\n        gutters(),\n        lineNumberGutter\n    ];\n}\nfunction maxLineNumber(lines) {\n    let last = 9;\n    while (last < lines)\n        last = last * 10 + 9;\n    return last;\n}\nconst activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {\n    constructor() {\n        super(...arguments);\n        this.elementClass = \"cm-activeLineGutter\";\n    }\n};\nconst activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute([\"selection\"], state => {\n    let marks = [], last = -1;\n    for (let range of state.selection.ranges) {\n        let linePos = state.doc.lineAt(range.head).from;\n        if (linePos > last) {\n            last = linePos;\n            marks.push(activeLineGutterMarker.range(linePos));\n        }\n    }\n    return RangeSet.of(marks);\n});\n/**\nReturns an extension that adds a `cm-activeLineGutter` class to\nall gutter elements on the [active\nline](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).\n*/\nfunction highlightActiveLineGutter() {\n    return activeLineGutterHighlighter;\n}\n\nconst WhitespaceDeco = /*@__PURE__*/new Map();\nfunction getWhitespaceDeco(space) {\n    let deco = WhitespaceDeco.get(space);\n    if (!deco)\n        WhitespaceDeco.set(space, deco = Decoration.mark({\n            attributes: space === \"\\t\" ? {\n                class: \"cm-highlightTab\",\n            } : {\n                class: \"cm-highlightSpace\",\n                \"data-display\": space.replace(/ /g, \"·\")\n            }\n        }));\n    return deco;\n}\nfunction matcher(decorator) {\n    return ViewPlugin.define(view => ({\n        decorations: decorator.createDeco(view),\n        update(u) {\n            this.decorations = decorator.updateDeco(u, this.decorations);\n        },\n    }), {\n        decorations: v => v.decorations\n    });\n}\nconst whitespaceHighlighter = /*@__PURE__*/matcher(/*@__PURE__*/new MatchDecorator({\n    regexp: /\\t| +/g,\n    decoration: match => getWhitespaceDeco(match[0]),\n    boundary: /\\S/,\n}));\n/**\nReturns an extension that highlights whitespace, adding a\n`cm-highlightSpace` class to stretches of spaces, and a\n`cm-highlightTab` class to individual tab characters. By default,\nthe former are shown as faint dots, and the latter as arrows.\n*/\nfunction highlightWhitespace() {\n    return whitespaceHighlighter;\n}\nconst trailingHighlighter = /*@__PURE__*/matcher(/*@__PURE__*/new MatchDecorator({\n    regexp: /\\s+$/g,\n    decoration: /*@__PURE__*/Decoration.mark({ class: \"cm-trailingSpace\" }),\n    boundary: /\\S/,\n}));\n/**\nReturns an extension that adds a `cm-trailingSpace` class to all\ntrailing whitespace.\n*/\nfunction highlightTrailingWhitespace() {\n    return trailingHighlighter;\n}\n\n/**\n@internal\n*/\nconst __test = { HeightMap, HeightOracle, MeasuredHeights, QueryType, ChangedRange, computeOrder, moveVisually };\n\nexport { BidiSpan, BlockInfo, BlockType, Decoration, Direction, EditorView, GutterMarker, MatchDecorator, RectangleMarker, ViewPlugin, ViewUpdate, WidgetType, __test, closeHoverTooltips, crosshairCursor, drawSelection, dropCursor, getPanel, getTooltip, gutter, gutterLineClass, gutters, hasHoverTooltips, highlightActiveLine, highlightActiveLineGutter, highlightSpecialChars, highlightTrailingWhitespace, highlightWhitespace, hoverTooltip, keymap, layer, lineNumberMarkers, lineNumbers, logException, panels, placeholder, rectangularSelection, repositionTooltips, runScopeHandlers, scrollPastEnd, showPanel, showTooltip, tooltips };\n","/**\nThe data structure for documents. @nonabstract\n*/\nclass Text {\n    /**\n    Get the line description around the given position.\n    */\n    lineAt(pos) {\n        if (pos < 0 || pos > this.length)\n            throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);\n        return this.lineInner(pos, false, 1, 0);\n    }\n    /**\n    Get the description for the given (1-based) line number.\n    */\n    line(n) {\n        if (n < 1 || n > this.lines)\n            throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);\n        return this.lineInner(n, true, 1, 0);\n    }\n    /**\n    Replace a range of the text with the given content.\n    */\n    replace(from, to, text) {\n        let parts = [];\n        this.decompose(0, from, parts, 2 /* Open.To */);\n        if (text.length)\n            text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);\n        this.decompose(to, this.length, parts, 1 /* Open.From */);\n        return TextNode.from(parts, this.length - (to - from) + text.length);\n    }\n    /**\n    Append another document to this one.\n    */\n    append(other) {\n        return this.replace(this.length, this.length, other);\n    }\n    /**\n    Retrieve the text between the given points.\n    */\n    slice(from, to = this.length) {\n        let parts = [];\n        this.decompose(from, to, parts, 0);\n        return TextNode.from(parts, to - from);\n    }\n    /**\n    Test whether this text is equal to another instance.\n    */\n    eq(other) {\n        if (other == this)\n            return true;\n        if (other.length != this.length || other.lines != this.lines)\n            return false;\n        let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);\n        let a = new RawTextCursor(this), b = new RawTextCursor(other);\n        for (let skip = start, pos = start;;) {\n            a.next(skip);\n            b.next(skip);\n            skip = 0;\n            if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)\n                return false;\n            pos += a.value.length;\n            if (a.done || pos >= end)\n                return true;\n        }\n    }\n    /**\n    Iterate over the text. When `dir` is `-1`, iteration happens\n    from end to start. This will return lines and the breaks between\n    them as separate strings.\n    */\n    iter(dir = 1) { return new RawTextCursor(this, dir); }\n    /**\n    Iterate over a range of the text. When `from` > `to`, the\n    iterator will run in reverse.\n    */\n    iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }\n    /**\n    Return a cursor that iterates over the given range of lines,\n    _without_ returning the line breaks between, and yielding empty\n    strings for empty lines.\n    \n    When `from` and `to` are given, they should be 1-based line numbers.\n    */\n    iterLines(from, to) {\n        let inner;\n        if (from == null) {\n            inner = this.iter();\n        }\n        else {\n            if (to == null)\n                to = this.lines + 1;\n            let start = this.line(from).from;\n            inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));\n        }\n        return new LineCursor(inner);\n    }\n    /**\n    Return the document as a string, using newline characters to\n    separate lines.\n    */\n    toString() { return this.sliceString(0); }\n    /**\n    Convert the document to an array of lines (which can be\n    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).\n    */\n    toJSON() {\n        let lines = [];\n        this.flatten(lines);\n        return lines;\n    }\n    /**\n    @internal\n    */\n    constructor() { }\n    /**\n    Create a `Text` instance for the given array of lines.\n    */\n    static of(text) {\n        if (text.length == 0)\n            throw new RangeError(\"A document must have at least one line\");\n        if (text.length == 1 && !text[0])\n            return Text.empty;\n        return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));\n    }\n}\n// Leaves store an array of line strings. There are always line breaks\n// between these strings. Leaves are limited in size and have to be\n// contained in TextNode instances for bigger documents.\nclass TextLeaf extends Text {\n    constructor(text, length = textLength(text)) {\n        super();\n        this.text = text;\n        this.length = length;\n    }\n    get lines() { return this.text.length; }\n    get children() { return null; }\n    lineInner(target, isLine, line, offset) {\n        for (let i = 0;; i++) {\n            let string = this.text[i], end = offset + string.length;\n            if ((isLine ? line : end) >= target)\n                return new Line(offset, end, line, string);\n            offset = end + 1;\n            line++;\n        }\n    }\n    decompose(from, to, target, open) {\n        let text = from <= 0 && to >= this.length ? this\n            : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));\n        if (open & 1 /* Open.From */) {\n            let prev = target.pop();\n            let joined = appendText(text.text, prev.text.slice(), 0, text.length);\n            if (joined.length <= 32 /* Tree.Branch */) {\n                target.push(new TextLeaf(joined, prev.length + text.length));\n            }\n            else {\n                let mid = joined.length >> 1;\n                target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));\n            }\n        }\n        else {\n            target.push(text);\n        }\n    }\n    replace(from, to, text) {\n        if (!(text instanceof TextLeaf))\n            return super.replace(from, to, text);\n        let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);\n        let newLen = this.length + text.length - (to - from);\n        if (lines.length <= 32 /* Tree.Branch */)\n            return new TextLeaf(lines, newLen);\n        return TextNode.from(TextLeaf.split(lines, []), newLen);\n    }\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\n        let result = \"\";\n        for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {\n            let line = this.text[i], end = pos + line.length;\n            if (pos > from && i)\n                result += lineSep;\n            if (from < end && to > pos)\n                result += line.slice(Math.max(0, from - pos), to - pos);\n            pos = end + 1;\n        }\n        return result;\n    }\n    flatten(target) {\n        for (let line of this.text)\n            target.push(line);\n    }\n    scanIdentical() { return 0; }\n    static split(text, target) {\n        let part = [], len = -1;\n        for (let line of text) {\n            part.push(line);\n            len += line.length + 1;\n            if (part.length == 32 /* Tree.Branch */) {\n                target.push(new TextLeaf(part, len));\n                part = [];\n                len = -1;\n            }\n        }\n        if (len > -1)\n            target.push(new TextLeaf(part, len));\n        return target;\n    }\n}\n// Nodes provide the tree structure of the `Text` type. They store a\n// number of other nodes or leaves, taking care to balance themselves\n// on changes. There are implied line breaks _between_ the children of\n// a node (but not before the first or after the last child).\nclass TextNode extends Text {\n    constructor(children, length) {\n        super();\n        this.children = children;\n        this.length = length;\n        this.lines = 0;\n        for (let child of children)\n            this.lines += child.lines;\n    }\n    lineInner(target, isLine, line, offset) {\n        for (let i = 0;; i++) {\n            let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;\n            if ((isLine ? endLine : end) >= target)\n                return child.lineInner(target, isLine, line, offset);\n            offset = end + 1;\n            line = endLine + 1;\n        }\n    }\n    decompose(from, to, target, open) {\n        for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {\n            let child = this.children[i], end = pos + child.length;\n            if (from <= end && to >= pos) {\n                let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));\n                if (pos >= from && end <= to && !childOpen)\n                    target.push(child);\n                else\n                    child.decompose(from - pos, to - pos, target, childOpen);\n            }\n            pos = end + 1;\n        }\n    }\n    replace(from, to, text) {\n        if (text.lines < this.lines)\n            for (let i = 0, pos = 0; i < this.children.length; i++) {\n                let child = this.children[i], end = pos + child.length;\n                // Fast path: if the change only affects one child and the\n                // child's size remains in the acceptable range, only update\n                // that child\n                if (from >= pos && to <= end) {\n                    let updated = child.replace(from - pos, to - pos, text);\n                    let totalLines = this.lines - child.lines + updated.lines;\n                    if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&\n                        updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {\n                        let copy = this.children.slice();\n                        copy[i] = updated;\n                        return new TextNode(copy, this.length - (to - from) + text.length);\n                    }\n                    return super.replace(pos, end, updated);\n                }\n                pos = end + 1;\n            }\n        return super.replace(from, to, text);\n    }\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\n        let result = \"\";\n        for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {\n            let child = this.children[i], end = pos + child.length;\n            if (pos > from && i)\n                result += lineSep;\n            if (from < end && to > pos)\n                result += child.sliceString(from - pos, to - pos, lineSep);\n            pos = end + 1;\n        }\n        return result;\n    }\n    flatten(target) {\n        for (let child of this.children)\n            child.flatten(target);\n    }\n    scanIdentical(other, dir) {\n        if (!(other instanceof TextNode))\n            return 0;\n        let length = 0;\n        let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]\n            : [this.children.length - 1, other.children.length - 1, -1, -1];\n        for (;; iA += dir, iB += dir) {\n            if (iA == eA || iB == eB)\n                return length;\n            let chA = this.children[iA], chB = other.children[iB];\n            if (chA != chB)\n                return length + chA.scanIdentical(chB, dir);\n            length += chA.length + 1;\n        }\n    }\n    static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {\n        let lines = 0;\n        for (let ch of children)\n            lines += ch.lines;\n        if (lines < 32 /* Tree.Branch */) {\n            let flat = [];\n            for (let ch of children)\n                ch.flatten(flat);\n            return new TextLeaf(flat, length);\n        }\n        let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;\n        let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];\n        function add(child) {\n            let last;\n            if (child.lines > maxChunk && child instanceof TextNode) {\n                for (let node of child.children)\n                    add(node);\n            }\n            else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {\n                flush();\n                chunked.push(child);\n            }\n            else if (child instanceof TextLeaf && currentLines &&\n                (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&\n                child.lines + last.lines <= 32 /* Tree.Branch */) {\n                currentLines += child.lines;\n                currentLen += child.length + 1;\n                currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);\n            }\n            else {\n                if (currentLines + child.lines > chunk)\n                    flush();\n                currentLines += child.lines;\n                currentLen += child.length + 1;\n                currentChunk.push(child);\n            }\n        }\n        function flush() {\n            if (currentLines == 0)\n                return;\n            chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));\n            currentLen = -1;\n            currentLines = currentChunk.length = 0;\n        }\n        for (let child of children)\n            add(child);\n        flush();\n        return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);\n    }\n}\nText.empty = /*@__PURE__*/new TextLeaf([\"\"], 0);\nfunction textLength(text) {\n    let length = -1;\n    for (let line of text)\n        length += line.length + 1;\n    return length;\n}\nfunction appendText(text, target, from = 0, to = 1e9) {\n    for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {\n        let line = text[i], end = pos + line.length;\n        if (end >= from) {\n            if (end > to)\n                line = line.slice(0, to - pos);\n            if (pos < from)\n                line = line.slice(from - pos);\n            if (first) {\n                target[target.length - 1] += line;\n                first = false;\n            }\n            else\n                target.push(line);\n        }\n        pos = end + 1;\n    }\n    return target;\n}\nfunction sliceText(text, from, to) {\n    return appendText(text, [\"\"], from, to);\n}\nclass RawTextCursor {\n    constructor(text, dir = 1) {\n        this.dir = dir;\n        this.done = false;\n        this.lineBreak = false;\n        this.value = \"\";\n        this.nodes = [text];\n        this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];\n    }\n    nextInner(skip, dir) {\n        this.done = this.lineBreak = false;\n        for (;;) {\n            let last = this.nodes.length - 1;\n            let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;\n            let size = top instanceof TextLeaf ? top.text.length : top.children.length;\n            if (offset == (dir > 0 ? size : 0)) {\n                if (last == 0) {\n                    this.done = true;\n                    this.value = \"\";\n                    return this;\n                }\n                if (dir > 0)\n                    this.offsets[last - 1]++;\n                this.nodes.pop();\n                this.offsets.pop();\n            }\n            else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {\n                this.offsets[last] += dir;\n                if (skip == 0) {\n                    this.lineBreak = true;\n                    this.value = \"\\n\";\n                    return this;\n                }\n                skip--;\n            }\n            else if (top instanceof TextLeaf) {\n                // Move to the next string\n                let next = top.text[offset + (dir < 0 ? -1 : 0)];\n                this.offsets[last] += dir;\n                if (next.length > Math.max(0, skip)) {\n                    this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);\n                    return this;\n                }\n                skip -= next.length;\n            }\n            else {\n                let next = top.children[offset + (dir < 0 ? -1 : 0)];\n                if (skip > next.length) {\n                    skip -= next.length;\n                    this.offsets[last] += dir;\n                }\n                else {\n                    if (dir < 0)\n                        this.offsets[last]--;\n                    this.nodes.push(next);\n                    this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);\n                }\n            }\n        }\n    }\n    next(skip = 0) {\n        if (skip < 0) {\n            this.nextInner(-skip, (-this.dir));\n            skip = this.value.length;\n        }\n        return this.nextInner(skip, this.dir);\n    }\n}\nclass PartialTextCursor {\n    constructor(text, start, end) {\n        this.value = \"\";\n        this.done = false;\n        this.cursor = new RawTextCursor(text, start > end ? -1 : 1);\n        this.pos = start > end ? text.length : 0;\n        this.from = Math.min(start, end);\n        this.to = Math.max(start, end);\n    }\n    nextInner(skip, dir) {\n        if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {\n            this.value = \"\";\n            this.done = true;\n            return this;\n        }\n        skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);\n        let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;\n        if (skip > limit)\n            skip = limit;\n        limit -= skip;\n        let { value } = this.cursor.next(skip);\n        this.pos += (value.length + skip) * dir;\n        this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);\n        this.done = !this.value;\n        return this;\n    }\n    next(skip = 0) {\n        if (skip < 0)\n            skip = Math.max(skip, this.from - this.pos);\n        else if (skip > 0)\n            skip = Math.min(skip, this.to - this.pos);\n        return this.nextInner(skip, this.cursor.dir);\n    }\n    get lineBreak() { return this.cursor.lineBreak && this.value != \"\"; }\n}\nclass LineCursor {\n    constructor(inner) {\n        this.inner = inner;\n        this.afterBreak = true;\n        this.value = \"\";\n        this.done = false;\n    }\n    next(skip = 0) {\n        let { done, lineBreak, value } = this.inner.next(skip);\n        if (done) {\n            this.done = true;\n            this.value = \"\";\n        }\n        else if (lineBreak) {\n            if (this.afterBreak) {\n                this.value = \"\";\n            }\n            else {\n                this.afterBreak = true;\n                this.next();\n            }\n        }\n        else {\n            this.value = value;\n            this.afterBreak = false;\n        }\n        return this;\n    }\n    get lineBreak() { return false; }\n}\nif (typeof Symbol != \"undefined\") {\n    Text.prototype[Symbol.iterator] = function () { return this.iter(); };\n    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =\n        LineCursor.prototype[Symbol.iterator] = function () { return this; };\n}\n/**\nThis type describes a line in the document. It is created\non-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).\n*/\nclass Line {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The position of the start of the line.\n    */\n    from, \n    /**\n    The position at the end of the line (_before_ the line break,\n    or at the end of document for the last line).\n    */\n    to, \n    /**\n    This line's line number (1-based).\n    */\n    number, \n    /**\n    The line's content.\n    */\n    text) {\n        this.from = from;\n        this.to = to;\n        this.number = number;\n        this.text = text;\n    }\n    /**\n    The length of the line (not including any line break after it).\n    */\n    get length() { return this.to - this.from; }\n}\n\n// Compressed representation of the Grapheme_Cluster_Break=Extend\n// information from\n// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.\n// Each pair of elements represents a range, as an offet from the\n// previous range and a length. Numbers are in base-36, with the empty\n// string being a shorthand for 1.\nlet extend = /*@__PURE__*/\"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o\".split(\",\").map(s => s ? parseInt(s, 36) : 1);\n// Convert offsets into absolute values\nfor (let i = 1; i < extend.length; i++)\n    extend[i] += extend[i - 1];\nfunction isExtendingChar(code) {\n    for (let i = 1; i < extend.length; i += 2)\n        if (extend[i] > code)\n            return extend[i - 1] <= code;\n    return false;\n}\nfunction isRegionalIndicator(code) {\n    return code >= 0x1F1E6 && code <= 0x1F1FF;\n}\nconst ZWJ = 0x200d;\n/**\nReturns a next grapheme cluster break _after_ (not equal to)\n`pos`, if `forward` is true, or before otherwise. Returns `pos`\nitself if no further cluster break is available in the string.\nMoves across surrogate pairs, extending characters (when\n`includeExtending` is true), characters joined with zero-width\njoiners, and flag emoji.\n*/\nfunction findClusterBreak(str, pos, forward = true, includeExtending = true) {\n    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);\n}\nfunction nextClusterBreak(str, pos, includeExtending) {\n    if (pos == str.length)\n        return pos;\n    // If pos is in the middle of a surrogate pair, move to its start\n    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))\n        pos--;\n    let prev = codePointAt(str, pos);\n    pos += codePointSize(prev);\n    while (pos < str.length) {\n        let next = codePointAt(str, pos);\n        if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {\n            pos += codePointSize(next);\n            prev = next;\n        }\n        else if (isRegionalIndicator(next)) {\n            let countBefore = 0, i = pos - 2;\n            while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {\n                countBefore++;\n                i -= 2;\n            }\n            if (countBefore % 2 == 0)\n                break;\n            else\n                pos += 2;\n        }\n        else {\n            break;\n        }\n    }\n    return pos;\n}\nfunction prevClusterBreak(str, pos, includeExtending) {\n    while (pos > 0) {\n        let found = nextClusterBreak(str, pos - 2, includeExtending);\n        if (found < pos)\n            return found;\n        pos--;\n    }\n    return 0;\n}\nfunction surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }\nfunction surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }\n/**\nFind the code point at the given position in a string (like the\n[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\nstring method).\n*/\nfunction codePointAt(str, pos) {\n    let code0 = str.charCodeAt(pos);\n    if (!surrogateHigh(code0) || pos + 1 == str.length)\n        return code0;\n    let code1 = str.charCodeAt(pos + 1);\n    if (!surrogateLow(code1))\n        return code0;\n    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;\n}\n/**\nGiven a Unicode codepoint, return the JavaScript string that\nrespresents it (like\n[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).\n*/\nfunction fromCodePoint(code) {\n    if (code <= 0xffff)\n        return String.fromCharCode(code);\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);\n}\n/**\nThe amount of positions a character takes up a JavaScript string.\n*/\nfunction codePointSize(code) { return code < 0x10000 ? 1 : 2; }\n\nconst DefaultSplit = /\\r\\n?|\\n/;\n/**\nDistinguishes different ways in which positions can be mapped.\n*/\nvar MapMode = /*@__PURE__*/(function (MapMode) {\n    /**\n    Map a position to a valid new position, even when its context\n    was deleted.\n    */\n    MapMode[MapMode[\"Simple\"] = 0] = \"Simple\";\n    /**\n    Return null if deletion happens across the position.\n    */\n    MapMode[MapMode[\"TrackDel\"] = 1] = \"TrackDel\";\n    /**\n    Return null if the character _before_ the position is deleted.\n    */\n    MapMode[MapMode[\"TrackBefore\"] = 2] = \"TrackBefore\";\n    /**\n    Return null if the character _after_ the position is deleted.\n    */\n    MapMode[MapMode[\"TrackAfter\"] = 3] = \"TrackAfter\";\nreturn MapMode})(MapMode || (MapMode = {}));\n/**\nA change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)\nthat doesn't store the inserted text. As such, it can't be\napplied, but is cheaper to store and manipulate.\n*/\nclass ChangeDesc {\n    // Sections are encoded as pairs of integers. The first is the\n    // length in the current document, and the second is -1 for\n    // unaffected sections, and the length of the replacement content\n    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,\n    // 0), and a replacement two positive numbers.\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    sections) {\n        this.sections = sections;\n    }\n    /**\n    The length of the document before the change.\n    */\n    get length() {\n        let result = 0;\n        for (let i = 0; i < this.sections.length; i += 2)\n            result += this.sections[i];\n        return result;\n    }\n    /**\n    The length of the document after the change.\n    */\n    get newLength() {\n        let result = 0;\n        for (let i = 0; i < this.sections.length; i += 2) {\n            let ins = this.sections[i + 1];\n            result += ins < 0 ? this.sections[i] : ins;\n        }\n        return result;\n    }\n    /**\n    False when there are actual changes in this set.\n    */\n    get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }\n    /**\n    Iterate over the unchanged parts left by these changes. `posA`\n    provides the position of the range in the old document, `posB`\n    the new position in the changed document.\n    */\n    iterGaps(f) {\n        for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {\n            let len = this.sections[i++], ins = this.sections[i++];\n            if (ins < 0) {\n                f(posA, posB, len);\n                posB += len;\n            }\n            else {\n                posB += ins;\n            }\n            posA += len;\n        }\n    }\n    /**\n    Iterate over the ranges changed by these changes. (See\n    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a\n    variant that also provides you with the inserted text.)\n    `fromA`/`toA` provides the extent of the change in the starting\n    document, `fromB`/`toB` the extent of the replacement in the\n    changed document.\n    \n    When `individual` is true, adjacent changes (which are kept\n    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are\n    reported separately.\n    */\n    iterChangedRanges(f, individual = false) {\n        iterChanges(this, f, individual);\n    }\n    /**\n    Get a description of the inverted form of these changes.\n    */\n    get invertedDesc() {\n        let sections = [];\n        for (let i = 0; i < this.sections.length;) {\n            let len = this.sections[i++], ins = this.sections[i++];\n            if (ins < 0)\n                sections.push(len, ins);\n            else\n                sections.push(ins, len);\n        }\n        return new ChangeDesc(sections);\n    }\n    /**\n    Compute the combined effect of applying another set of changes\n    after this one. The length of the document after this set should\n    match the length before `other`.\n    */\n    composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }\n    /**\n    Map this description, which should start with the same document\n    as `other`, over another set of changes, so that it can be\n    applied after it. When `before` is true, map as if the changes\n    in `other` happened before the ones in `this`.\n    */\n    mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }\n    mapPos(pos, assoc = -1, mode = MapMode.Simple) {\n        let posA = 0, posB = 0;\n        for (let i = 0; i < this.sections.length;) {\n            let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;\n            if (ins < 0) {\n                if (endA > pos)\n                    return posB + (pos - posA);\n                posB += len;\n            }\n            else {\n                if (mode != MapMode.Simple && endA >= pos &&\n                    (mode == MapMode.TrackDel && posA < pos && endA > pos ||\n                        mode == MapMode.TrackBefore && posA < pos ||\n                        mode == MapMode.TrackAfter && endA > pos))\n                    return null;\n                if (endA > pos || endA == pos && assoc < 0 && !len)\n                    return pos == posA || assoc < 0 ? posB : posB + ins;\n                posB += ins;\n            }\n            posA = endA;\n        }\n        if (pos > posA)\n            throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);\n        return posB;\n    }\n    /**\n    Check whether these changes touch a given range. When one of the\n    changes entirely covers the range, the string `\"cover\"` is\n    returned.\n    */\n    touchesRange(from, to = from) {\n        for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {\n            let len = this.sections[i++], ins = this.sections[i++], end = pos + len;\n            if (ins >= 0 && pos <= to && end >= from)\n                return pos < from && end > to ? \"cover\" : true;\n            pos = end;\n        }\n        return false;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        let result = \"\";\n        for (let i = 0; i < this.sections.length;) {\n            let len = this.sections[i++], ins = this.sections[i++];\n            result += (result ? \" \" : \"\") + len + (ins >= 0 ? \":\" + ins : \"\");\n        }\n        return result;\n    }\n    /**\n    Serialize this change desc to a JSON-representable value.\n    */\n    toJSON() { return this.sections; }\n    /**\n    Create a change desc from its JSON representation (as produced\n    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).\n    */\n    static fromJSON(json) {\n        if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != \"number\"))\n            throw new RangeError(\"Invalid JSON representation of ChangeDesc\");\n        return new ChangeDesc(json);\n    }\n    /**\n    @internal\n    */\n    static create(sections) { return new ChangeDesc(sections); }\n}\n/**\nA change set represents a group of modifications to a document. It\nstores the document length, and can only be applied to documents\nwith exactly that length.\n*/\nclass ChangeSet extends ChangeDesc {\n    constructor(sections, \n    /**\n    @internal\n    */\n    inserted) {\n        super(sections);\n        this.inserted = inserted;\n    }\n    /**\n    Apply the changes to a document, returning the modified\n    document.\n    */\n    apply(doc) {\n        if (this.length != doc.length)\n            throw new RangeError(\"Applying change set to a document with the wrong length\");\n        iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);\n        return doc;\n    }\n    mapDesc(other, before = false) { return mapSet(this, other, before, true); }\n    /**\n    Given the document as it existed _before_ the changes, return a\n    change set that represents the inverse of this set, which could\n    be used to go from the document created by the changes back to\n    the document as it existed before the changes.\n    */\n    invert(doc) {\n        let sections = this.sections.slice(), inserted = [];\n        for (let i = 0, pos = 0; i < sections.length; i += 2) {\n            let len = sections[i], ins = sections[i + 1];\n            if (ins >= 0) {\n                sections[i] = ins;\n                sections[i + 1] = len;\n                let index = i >> 1;\n                while (inserted.length < index)\n                    inserted.push(Text.empty);\n                inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);\n            }\n            pos += len;\n        }\n        return new ChangeSet(sections, inserted);\n    }\n    /**\n    Combine two subsequent change sets into a single set. `other`\n    must start in the document produced by `this`. If `this` goes\n    `docA` → `docB` and `other` represents `docB` → `docC`, the\n    returned value will represent the change `docA` → `docC`.\n    */\n    compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }\n    /**\n    Given another change set starting in the same document, maps this\n    change set over the other, producing a new change set that can be\n    applied to the document produced by applying `other`. When\n    `before` is `true`, order changes as if `this` comes before\n    `other`, otherwise (the default) treat `other` as coming first.\n    \n    Given two changes `A` and `B`, `A.compose(B.map(A))` and\n    `B.compose(A.map(B, true))` will produce the same document. This\n    provides a basic form of [operational\n    transformation](https://en.wikipedia.org/wiki/Operational_transformation),\n    and can be used for collaborative editing.\n    */\n    map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }\n    /**\n    Iterate over the changed ranges in the document, calling `f` for\n    each, with the range in the original document (`fromA`-`toA`)\n    and the range that replaces it in the new document\n    (`fromB`-`toB`).\n    \n    When `individual` is true, adjacent changes are reported\n    separately.\n    */\n    iterChanges(f, individual = false) {\n        iterChanges(this, f, individual);\n    }\n    /**\n    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change\n    set.\n    */\n    get desc() { return ChangeDesc.create(this.sections); }\n    /**\n    @internal\n    */\n    filter(ranges) {\n        let resultSections = [], resultInserted = [], filteredSections = [];\n        let iter = new SectionIter(this);\n        done: for (let i = 0, pos = 0;;) {\n            let next = i == ranges.length ? 1e9 : ranges[i++];\n            while (pos < next || pos == next && iter.len == 0) {\n                if (iter.done)\n                    break done;\n                let len = Math.min(iter.len, next - pos);\n                addSection(filteredSections, len, -1);\n                let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;\n                addSection(resultSections, len, ins);\n                if (ins > 0)\n                    addInsert(resultInserted, resultSections, iter.text);\n                iter.forward(len);\n                pos += len;\n            }\n            let end = ranges[i++];\n            while (pos < end) {\n                if (iter.done)\n                    break done;\n                let len = Math.min(iter.len, end - pos);\n                addSection(resultSections, len, -1);\n                addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);\n                iter.forward(len);\n                pos += len;\n            }\n        }\n        return { changes: new ChangeSet(resultSections, resultInserted),\n            filtered: ChangeDesc.create(filteredSections) };\n    }\n    /**\n    Serialize this change set to a JSON-representable value.\n    */\n    toJSON() {\n        let parts = [];\n        for (let i = 0; i < this.sections.length; i += 2) {\n            let len = this.sections[i], ins = this.sections[i + 1];\n            if (ins < 0)\n                parts.push(len);\n            else if (ins == 0)\n                parts.push([len]);\n            else\n                parts.push([len].concat(this.inserted[i >> 1].toJSON()));\n        }\n        return parts;\n    }\n    /**\n    Create a change set for the given changes, for a document of the\n    given length, using `lineSep` as line separator.\n    */\n    static of(changes, length, lineSep) {\n        let sections = [], inserted = [], pos = 0;\n        let total = null;\n        function flush(force = false) {\n            if (!force && !sections.length)\n                return;\n            if (pos < length)\n                addSection(sections, length - pos, -1);\n            let set = new ChangeSet(sections, inserted);\n            total = total ? total.compose(set.map(total)) : set;\n            sections = [];\n            inserted = [];\n            pos = 0;\n        }\n        function process(spec) {\n            if (Array.isArray(spec)) {\n                for (let sub of spec)\n                    process(sub);\n            }\n            else if (spec instanceof ChangeSet) {\n                if (spec.length != length)\n                    throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);\n                flush();\n                total = total ? total.compose(spec.map(total)) : spec;\n            }\n            else {\n                let { from, to = from, insert } = spec;\n                if (from > to || from < 0 || to > length)\n                    throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);\n                let insText = !insert ? Text.empty : typeof insert == \"string\" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;\n                let insLen = insText.length;\n                if (from == to && insLen == 0)\n                    return;\n                if (from < pos)\n                    flush();\n                if (from > pos)\n                    addSection(sections, from - pos, -1);\n                addSection(sections, to - from, insLen);\n                addInsert(inserted, sections, insText);\n                pos = to;\n            }\n        }\n        process(changes);\n        flush(!total);\n        return total;\n    }\n    /**\n    Create an empty changeset of the given length.\n    */\n    static empty(length) {\n        return new ChangeSet(length ? [length, -1] : [], []);\n    }\n    /**\n    Create a changeset from its JSON representation (as produced by\n    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).\n    */\n    static fromJSON(json) {\n        if (!Array.isArray(json))\n            throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n        let sections = [], inserted = [];\n        for (let i = 0; i < json.length; i++) {\n            let part = json[i];\n            if (typeof part == \"number\") {\n                sections.push(part, -1);\n            }\n            else if (!Array.isArray(part) || typeof part[0] != \"number\" || part.some((e, i) => i && typeof e != \"string\")) {\n                throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n            }\n            else if (part.length == 1) {\n                sections.push(part[0], 0);\n            }\n            else {\n                while (inserted.length < i)\n                    inserted.push(Text.empty);\n                inserted[i] = Text.of(part.slice(1));\n                sections.push(part[0], inserted[i].length);\n            }\n        }\n        return new ChangeSet(sections, inserted);\n    }\n    /**\n    @internal\n    */\n    static createSet(sections, inserted) {\n        return new ChangeSet(sections, inserted);\n    }\n}\nfunction addSection(sections, len, ins, forceJoin = false) {\n    if (len == 0 && ins <= 0)\n        return;\n    let last = sections.length - 2;\n    if (last >= 0 && ins <= 0 && ins == sections[last + 1])\n        sections[last] += len;\n    else if (len == 0 && sections[last] == 0)\n        sections[last + 1] += ins;\n    else if (forceJoin) {\n        sections[last] += len;\n        sections[last + 1] += ins;\n    }\n    else\n        sections.push(len, ins);\n}\nfunction addInsert(values, sections, value) {\n    if (value.length == 0)\n        return;\n    let index = (sections.length - 2) >> 1;\n    if (index < values.length) {\n        values[values.length - 1] = values[values.length - 1].append(value);\n    }\n    else {\n        while (values.length < index)\n            values.push(Text.empty);\n        values.push(value);\n    }\n}\nfunction iterChanges(desc, f, individual) {\n    let inserted = desc.inserted;\n    for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {\n        let len = desc.sections[i++], ins = desc.sections[i++];\n        if (ins < 0) {\n            posA += len;\n            posB += len;\n        }\n        else {\n            let endA = posA, endB = posB, text = Text.empty;\n            for (;;) {\n                endA += len;\n                endB += ins;\n                if (ins && inserted)\n                    text = text.append(inserted[(i - 2) >> 1]);\n                if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)\n                    break;\n                len = desc.sections[i++];\n                ins = desc.sections[i++];\n            }\n            f(posA, endA, posB, endB, text);\n            posA = endA;\n            posB = endB;\n        }\n    }\n}\nfunction mapSet(setA, setB, before, mkSet = false) {\n    // Produce a copy of setA that applies to the document after setB\n    // has been applied (assuming both start at the same document).\n    let sections = [], insert = mkSet ? [] : null;\n    let a = new SectionIter(setA), b = new SectionIter(setB);\n    // Iterate over both sets in parallel. inserted tracks, for changes\n    // in A that have to be processed piece-by-piece, whether their\n    // content has been inserted already, and refers to the section\n    // index.\n    for (let inserted = -1;;) {\n        if (a.ins == -1 && b.ins == -1) {\n            // Move across ranges skipped by both sets.\n            let len = Math.min(a.len, b.len);\n            addSection(sections, len, -1);\n            a.forward(len);\n            b.forward(len);\n        }\n        else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {\n            // If there's a change in B that comes before the next change in\n            // A (ordered by start pos, then len, then before flag), skip\n            // that (and process any changes in A it covers).\n            let len = b.len;\n            addSection(sections, b.ins, -1);\n            while (len) {\n                let piece = Math.min(a.len, len);\n                if (a.ins >= 0 && inserted < a.i && a.len <= piece) {\n                    addSection(sections, 0, a.ins);\n                    if (insert)\n                        addInsert(insert, sections, a.text);\n                    inserted = a.i;\n                }\n                a.forward(piece);\n                len -= piece;\n            }\n            b.next();\n        }\n        else if (a.ins >= 0) {\n            // Process the part of a change in A up to the start of the next\n            // non-deletion change in B (if overlapping).\n            let len = 0, left = a.len;\n            while (left) {\n                if (b.ins == -1) {\n                    let piece = Math.min(left, b.len);\n                    len += piece;\n                    left -= piece;\n                    b.forward(piece);\n                }\n                else if (b.ins == 0 && b.len < left) {\n                    left -= b.len;\n                    b.next();\n                }\n                else {\n                    break;\n                }\n            }\n            addSection(sections, len, inserted < a.i ? a.ins : 0);\n            if (insert && inserted < a.i)\n                addInsert(insert, sections, a.text);\n            inserted = a.i;\n            a.forward(a.len - left);\n        }\n        else if (a.done && b.done) {\n            return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);\n        }\n        else {\n            throw new Error(\"Mismatched change set lengths\");\n        }\n    }\n}\nfunction composeSets(setA, setB, mkSet = false) {\n    let sections = [];\n    let insert = mkSet ? [] : null;\n    let a = new SectionIter(setA), b = new SectionIter(setB);\n    for (let open = false;;) {\n        if (a.done && b.done) {\n            return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);\n        }\n        else if (a.ins == 0) { // Deletion in A\n            addSection(sections, a.len, 0, open);\n            a.next();\n        }\n        else if (b.len == 0 && !b.done) { // Insertion in B\n            addSection(sections, 0, b.ins, open);\n            if (insert)\n                addInsert(insert, sections, b.text);\n            b.next();\n        }\n        else if (a.done || b.done) {\n            throw new Error(\"Mismatched change set lengths\");\n        }\n        else {\n            let len = Math.min(a.len2, b.len), sectionLen = sections.length;\n            if (a.ins == -1) {\n                let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;\n                addSection(sections, len, insB, open);\n                if (insert && insB)\n                    addInsert(insert, sections, b.text);\n            }\n            else if (b.ins == -1) {\n                addSection(sections, a.off ? 0 : a.len, len, open);\n                if (insert)\n                    addInsert(insert, sections, a.textBit(len));\n            }\n            else {\n                addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);\n                if (insert && !b.off)\n                    addInsert(insert, sections, b.text);\n            }\n            open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);\n            a.forward2(len);\n            b.forward(len);\n        }\n    }\n}\nclass SectionIter {\n    constructor(set) {\n        this.set = set;\n        this.i = 0;\n        this.next();\n    }\n    next() {\n        let { sections } = this.set;\n        if (this.i < sections.length) {\n            this.len = sections[this.i++];\n            this.ins = sections[this.i++];\n        }\n        else {\n            this.len = 0;\n            this.ins = -2;\n        }\n        this.off = 0;\n    }\n    get done() { return this.ins == -2; }\n    get len2() { return this.ins < 0 ? this.len : this.ins; }\n    get text() {\n        let { inserted } = this.set, index = (this.i - 2) >> 1;\n        return index >= inserted.length ? Text.empty : inserted[index];\n    }\n    textBit(len) {\n        let { inserted } = this.set, index = (this.i - 2) >> 1;\n        return index >= inserted.length && !len ? Text.empty\n            : inserted[index].slice(this.off, len == null ? undefined : this.off + len);\n    }\n    forward(len) {\n        if (len == this.len)\n            this.next();\n        else {\n            this.len -= len;\n            this.off += len;\n        }\n    }\n    forward2(len) {\n        if (this.ins == -1)\n            this.forward(len);\n        else if (len == this.ins)\n            this.next();\n        else {\n            this.ins -= len;\n            this.off += len;\n        }\n    }\n}\n\n/**\nA single selection range. When\n[`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\nis enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold\nmultiple ranges. By default, selections hold exactly one range.\n*/\nclass SelectionRange {\n    constructor(\n    /**\n    The lower boundary of the range.\n    */\n    from, \n    /**\n    The upper boundary of the range.\n    */\n    to, flags) {\n        this.from = from;\n        this.to = to;\n        this.flags = flags;\n    }\n    /**\n    The anchor of the range—the side that doesn't move when you\n    extend it.\n    */\n    get anchor() { return this.flags & 16 /* RangeFlag.Inverted */ ? this.to : this.from; }\n    /**\n    The head of the range, which is moved when the range is\n    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).\n    */\n    get head() { return this.flags & 16 /* RangeFlag.Inverted */ ? this.from : this.to; }\n    /**\n    True when `anchor` and `head` are at the same position.\n    */\n    get empty() { return this.from == this.to; }\n    /**\n    If this is a cursor that is explicitly associated with the\n    character on one of its sides, this returns the side. -1 means\n    the character before its position, 1 the character after, and 0\n    means no association.\n    */\n    get assoc() { return this.flags & 4 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 8 /* RangeFlag.AssocAfter */ ? 1 : 0; }\n    /**\n    The bidirectional text level associated with this cursor, if\n    any.\n    */\n    get bidiLevel() {\n        let level = this.flags & 3 /* RangeFlag.BidiLevelMask */;\n        return level == 3 ? null : level;\n    }\n    /**\n    The goal column (stored vertical offset) associated with a\n    cursor. This is used to preserve the vertical position when\n    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across\n    lines of different length.\n    */\n    get goalColumn() {\n        let value = this.flags >> 5 /* RangeFlag.GoalColumnOffset */;\n        return value == 33554431 /* RangeFlag.NoGoalColumn */ ? undefined : value;\n    }\n    /**\n    Map this range through a change, producing a valid range in the\n    updated document.\n    */\n    map(change, assoc = -1) {\n        let from, to;\n        if (this.empty) {\n            from = to = change.mapPos(this.from, assoc);\n        }\n        else {\n            from = change.mapPos(this.from, 1);\n            to = change.mapPos(this.to, -1);\n        }\n        return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);\n    }\n    /**\n    Extend this range to cover at least `from` to `to`.\n    */\n    extend(from, to = from) {\n        if (from <= this.anchor && to >= this.anchor)\n            return EditorSelection.range(from, to);\n        let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;\n        return EditorSelection.range(this.anchor, head);\n    }\n    /**\n    Compare this range to another range.\n    */\n    eq(other) {\n        return this.anchor == other.anchor && this.head == other.head;\n    }\n    /**\n    Return a JSON-serializable object representing the range.\n    */\n    toJSON() { return { anchor: this.anchor, head: this.head }; }\n    /**\n    Convert a JSON representation of a range to a `SelectionRange`\n    instance.\n    */\n    static fromJSON(json) {\n        if (!json || typeof json.anchor != \"number\" || typeof json.head != \"number\")\n            throw new RangeError(\"Invalid JSON representation for SelectionRange\");\n        return EditorSelection.range(json.anchor, json.head);\n    }\n    /**\n    @internal\n    */\n    static create(from, to, flags) {\n        return new SelectionRange(from, to, flags);\n    }\n}\n/**\nAn editor selection holds one or more selection ranges.\n*/\nclass EditorSelection {\n    constructor(\n    /**\n    The ranges in the selection, sorted by position. Ranges cannot\n    overlap (but they may touch, if they aren't empty).\n    */\n    ranges, \n    /**\n    The index of the _main_ range in the selection (which is\n    usually the range that was added last).\n    */\n    mainIndex) {\n        this.ranges = ranges;\n        this.mainIndex = mainIndex;\n    }\n    /**\n    Map a selection through a change. Used to adjust the selection\n    position for changes.\n    */\n    map(change, assoc = -1) {\n        if (change.empty)\n            return this;\n        return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);\n    }\n    /**\n    Compare this selection to another selection.\n    */\n    eq(other) {\n        if (this.ranges.length != other.ranges.length ||\n            this.mainIndex != other.mainIndex)\n            return false;\n        for (let i = 0; i < this.ranges.length; i++)\n            if (!this.ranges[i].eq(other.ranges[i]))\n                return false;\n        return true;\n    }\n    /**\n    Get the primary selection range. Usually, you should make sure\n    your code applies to _all_ ranges, by using methods like\n    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).\n    */\n    get main() { return this.ranges[this.mainIndex]; }\n    /**\n    Make sure the selection only has one range. Returns a selection\n    holding only the main range from this selection.\n    */\n    asSingle() {\n        return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);\n    }\n    /**\n    Extend this selection with an extra range.\n    */\n    addRange(range, main = true) {\n        return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);\n    }\n    /**\n    Replace a given range with another range, and then normalize the\n    selection to merge and sort ranges if necessary.\n    */\n    replaceRange(range, which = this.mainIndex) {\n        let ranges = this.ranges.slice();\n        ranges[which] = range;\n        return EditorSelection.create(ranges, this.mainIndex);\n    }\n    /**\n    Convert this selection to an object that can be serialized to\n    JSON.\n    */\n    toJSON() {\n        return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };\n    }\n    /**\n    Create a selection from a JSON representation.\n    */\n    static fromJSON(json) {\n        if (!json || !Array.isArray(json.ranges) || typeof json.main != \"number\" || json.main >= json.ranges.length)\n            throw new RangeError(\"Invalid JSON representation for EditorSelection\");\n        return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);\n    }\n    /**\n    Create a selection holding a single range.\n    */\n    static single(anchor, head = anchor) {\n        return new EditorSelection([EditorSelection.range(anchor, head)], 0);\n    }\n    /**\n    Sort and merge the given set of ranges, creating a valid\n    selection.\n    */\n    static create(ranges, mainIndex = 0) {\n        if (ranges.length == 0)\n            throw new RangeError(\"A selection needs at least one range\");\n        for (let pos = 0, i = 0; i < ranges.length; i++) {\n            let range = ranges[i];\n            if (range.empty ? range.from <= pos : range.from < pos)\n                return EditorSelection.normalized(ranges.slice(), mainIndex);\n            pos = range.to;\n        }\n        return new EditorSelection(ranges, mainIndex);\n    }\n    /**\n    Create a cursor selection range at the given position. You can\n    safely ignore the optional arguments in most situations.\n    */\n    static cursor(pos, assoc = 0, bidiLevel, goalColumn) {\n        return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* RangeFlag.AssocBefore */ : 8 /* RangeFlag.AssocAfter */) |\n            (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |\n            ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */));\n    }\n    /**\n    Create a selection range.\n    */\n    static range(anchor, head, goalColumn, bidiLevel) {\n        let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */) |\n            (bidiLevel == null ? 3 : Math.min(2, bidiLevel));\n        return head < anchor ? SelectionRange.create(head, anchor, 16 /* RangeFlag.Inverted */ | 8 /* RangeFlag.AssocAfter */ | flags)\n            : SelectionRange.create(anchor, head, (head > anchor ? 4 /* RangeFlag.AssocBefore */ : 0) | flags);\n    }\n    /**\n    @internal\n    */\n    static normalized(ranges, mainIndex = 0) {\n        let main = ranges[mainIndex];\n        ranges.sort((a, b) => a.from - b.from);\n        mainIndex = ranges.indexOf(main);\n        for (let i = 1; i < ranges.length; i++) {\n            let range = ranges[i], prev = ranges[i - 1];\n            if (range.empty ? range.from <= prev.to : range.from < prev.to) {\n                let from = prev.from, to = Math.max(range.to, prev.to);\n                if (i <= mainIndex)\n                    mainIndex--;\n                ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));\n            }\n        }\n        return new EditorSelection(ranges, mainIndex);\n    }\n}\nfunction checkSelection(selection, docLength) {\n    for (let range of selection.ranges)\n        if (range.to > docLength)\n            throw new RangeError(\"Selection points outside of document\");\n}\n\nlet nextID = 0;\n/**\nA facet is a labeled value that is associated with an editor\nstate. It takes inputs from any number of extensions, and combines\nthose into a single output value.\n\nExamples of uses of facets are the [tab\nsize](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor\nattributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update\nlisteners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).\n*/\nclass Facet {\n    constructor(\n    /**\n    @internal\n    */\n    combine, \n    /**\n    @internal\n    */\n    compareInput, \n    /**\n    @internal\n    */\n    compare, isStatic, enables) {\n        this.combine = combine;\n        this.compareInput = compareInput;\n        this.compare = compare;\n        this.isStatic = isStatic;\n        /**\n        @internal\n        */\n        this.id = nextID++;\n        this.default = combine([]);\n        this.extensions = typeof enables == \"function\" ? enables(this) : enables;\n    }\n    /**\n    Define a new facet.\n    */\n    static define(config = {}) {\n        return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);\n    }\n    /**\n    Returns an extension that adds the given value to this facet.\n    */\n    of(value) {\n        return new FacetProvider([], this, 0 /* Provider.Static */, value);\n    }\n    /**\n    Create an extension that computes a value for the facet from a\n    state. You must take care to declare the parts of the state that\n    this value depends on, since your function is only called again\n    for a new state when one of those parts changed.\n    \n    In cases where your value depends only on a single field, you'll\n    want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.\n    */\n    compute(deps, get) {\n        if (this.isStatic)\n            throw new Error(\"Can't compute a static facet\");\n        return new FacetProvider(deps, this, 1 /* Provider.Single */, get);\n    }\n    /**\n    Create an extension that computes zero or more values for this\n    facet from a state.\n    */\n    computeN(deps, get) {\n        if (this.isStatic)\n            throw new Error(\"Can't compute a static facet\");\n        return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);\n    }\n    from(field, get) {\n        if (!get)\n            get = x => x;\n        return this.compute([field], state => get(state.field(field)));\n    }\n}\nfunction sameArray(a, b) {\n    return a == b || a.length == b.length && a.every((e, i) => e === b[i]);\n}\nclass FacetProvider {\n    constructor(dependencies, facet, type, value) {\n        this.dependencies = dependencies;\n        this.facet = facet;\n        this.type = type;\n        this.value = value;\n        this.id = nextID++;\n    }\n    dynamicSlot(addresses) {\n        var _a;\n        let getter = this.value;\n        let compare = this.facet.compareInput;\n        let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;\n        let depDoc = false, depSel = false, depAddrs = [];\n        for (let dep of this.dependencies) {\n            if (dep == \"doc\")\n                depDoc = true;\n            else if (dep == \"selection\")\n                depSel = true;\n            else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)\n                depAddrs.push(addresses[dep.id]);\n        }\n        return {\n            create(state) {\n                state.values[idx] = getter(state);\n                return 1 /* SlotStatus.Changed */;\n            },\n            update(state, tr) {\n                if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {\n                    let newVal = getter(state);\n                    if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {\n                        state.values[idx] = newVal;\n                        return 1 /* SlotStatus.Changed */;\n                    }\n                }\n                return 0;\n            },\n            reconfigure: (state, oldState) => {\n                let newVal, oldAddr = oldState.config.address[id];\n                if (oldAddr != null) {\n                    let oldVal = getAddr(oldState, oldAddr);\n                    if (this.dependencies.every(dep => {\n                        return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :\n                            dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;\n                    }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {\n                        state.values[idx] = oldVal;\n                        return 0;\n                    }\n                }\n                else {\n                    newVal = getter(state);\n                }\n                state.values[idx] = newVal;\n                return 1 /* SlotStatus.Changed */;\n            }\n        };\n    }\n}\nfunction compareArray(a, b, compare) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!compare(a[i], b[i]))\n            return false;\n    return true;\n}\nfunction ensureAll(state, addrs) {\n    let changed = false;\n    for (let addr of addrs)\n        if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)\n            changed = true;\n    return changed;\n}\nfunction dynamicFacetSlot(addresses, facet, providers) {\n    let providerAddrs = providers.map(p => addresses[p.id]);\n    let providerTypes = providers.map(p => p.type);\n    let dynamic = providerAddrs.filter(p => !(p & 1));\n    let idx = addresses[facet.id] >> 1;\n    function get(state) {\n        let values = [];\n        for (let i = 0; i < providerAddrs.length; i++) {\n            let value = getAddr(state, providerAddrs[i]);\n            if (providerTypes[i] == 2 /* Provider.Multi */)\n                for (let val of value)\n                    values.push(val);\n            else\n                values.push(value);\n        }\n        return facet.combine(values);\n    }\n    return {\n        create(state) {\n            for (let addr of providerAddrs)\n                ensureAddr(state, addr);\n            state.values[idx] = get(state);\n            return 1 /* SlotStatus.Changed */;\n        },\n        update(state, tr) {\n            if (!ensureAll(state, dynamic))\n                return 0;\n            let value = get(state);\n            if (facet.compare(value, state.values[idx]))\n                return 0;\n            state.values[idx] = value;\n            return 1 /* SlotStatus.Changed */;\n        },\n        reconfigure(state, oldState) {\n            let depChanged = ensureAll(state, providerAddrs);\n            let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);\n            if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {\n                state.values[idx] = oldValue;\n                return 0;\n            }\n            let value = get(state);\n            if (facet.compare(value, oldValue)) {\n                state.values[idx] = oldValue;\n                return 0;\n            }\n            state.values[idx] = value;\n            return 1 /* SlotStatus.Changed */;\n        }\n    };\n}\nconst initField = /*@__PURE__*/Facet.define({ static: true });\n/**\nFields can store additional information in an editor state, and\nkeep it in sync with the rest of the state.\n*/\nclass StateField {\n    constructor(\n    /**\n    @internal\n    */\n    id, createF, updateF, compareF, \n    /**\n    @internal\n    */\n    spec) {\n        this.id = id;\n        this.createF = createF;\n        this.updateF = updateF;\n        this.compareF = compareF;\n        this.spec = spec;\n        /**\n        @internal\n        */\n        this.provides = undefined;\n    }\n    /**\n    Define a state field.\n    */\n    static define(config) {\n        let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);\n        if (config.provide)\n            field.provides = config.provide(field);\n        return field;\n    }\n    create(state) {\n        let init = state.facet(initField).find(i => i.field == this);\n        return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);\n    }\n    /**\n    @internal\n    */\n    slot(addresses) {\n        let idx = addresses[this.id] >> 1;\n        return {\n            create: (state) => {\n                state.values[idx] = this.create(state);\n                return 1 /* SlotStatus.Changed */;\n            },\n            update: (state, tr) => {\n                let oldVal = state.values[idx];\n                let value = this.updateF(oldVal, tr);\n                if (this.compareF(oldVal, value))\n                    return 0;\n                state.values[idx] = value;\n                return 1 /* SlotStatus.Changed */;\n            },\n            reconfigure: (state, oldState) => {\n                if (oldState.config.address[this.id] != null) {\n                    state.values[idx] = oldState.field(this);\n                    return 0;\n                }\n                state.values[idx] = this.create(state);\n                return 1 /* SlotStatus.Changed */;\n            }\n        };\n    }\n    /**\n    Returns an extension that enables this field and overrides the\n    way it is initialized. Can be useful when you need to provide a\n    non-default starting value for the field.\n    */\n    init(create) {\n        return [this, initField.of({ field: this, create })];\n    }\n    /**\n    State field instances can be used as\n    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a\n    given state.\n    */\n    get extension() { return this; }\n}\nconst Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };\nfunction prec(value) {\n    return (ext) => new PrecExtension(ext, value);\n}\n/**\nBy default extensions are registered in the order they are found\nin the flattened form of nested array that was provided.\nIndividual extension values can be assigned a precedence to\noverride this. Extensions that do not have a precedence set get\nthe precedence of the nearest parent with a precedence, or\n[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The\nfinal ordering of extensions is determined by first sorting by\nprecedence and then by order within each precedence.\n*/\nconst Prec = {\n    /**\n    The highest precedence level, for extensions that should end up\n    near the start of the precedence ordering.\n    */\n    highest: /*@__PURE__*/prec(Prec_.highest),\n    /**\n    A higher-than-default precedence, for extensions that should\n    come before those with default precedence.\n    */\n    high: /*@__PURE__*/prec(Prec_.high),\n    /**\n    The default precedence, which is also used for extensions\n    without an explicit precedence.\n    */\n    default: /*@__PURE__*/prec(Prec_.default),\n    /**\n    A lower-than-default precedence.\n    */\n    low: /*@__PURE__*/prec(Prec_.low),\n    /**\n    The lowest precedence level. Meant for things that should end up\n    near the end of the extension order.\n    */\n    lowest: /*@__PURE__*/prec(Prec_.lowest)\n};\nclass PrecExtension {\n    constructor(inner, prec) {\n        this.inner = inner;\n        this.prec = prec;\n    }\n}\n/**\nExtension compartments can be used to make a configuration\ndynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your\nconfiguration in a compartment, you can later\n[replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a\ntransaction.\n*/\nclass Compartment {\n    /**\n    Create an instance of this compartment to add to your [state\n    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).\n    */\n    of(ext) { return new CompartmentInstance(this, ext); }\n    /**\n    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that\n    reconfigures this compartment.\n    */\n    reconfigure(content) {\n        return Compartment.reconfigure.of({ compartment: this, extension: content });\n    }\n    /**\n    Get the current content of the compartment in the state, or\n    `undefined` if it isn't present.\n    */\n    get(state) {\n        return state.config.compartments.get(this);\n    }\n}\nclass CompartmentInstance {\n    constructor(compartment, inner) {\n        this.compartment = compartment;\n        this.inner = inner;\n    }\n}\nclass Configuration {\n    constructor(base, compartments, dynamicSlots, address, staticValues, facets) {\n        this.base = base;\n        this.compartments = compartments;\n        this.dynamicSlots = dynamicSlots;\n        this.address = address;\n        this.staticValues = staticValues;\n        this.facets = facets;\n        this.statusTemplate = [];\n        while (this.statusTemplate.length < dynamicSlots.length)\n            this.statusTemplate.push(0 /* SlotStatus.Unresolved */);\n    }\n    staticFacet(facet) {\n        let addr = this.address[facet.id];\n        return addr == null ? facet.default : this.staticValues[addr >> 1];\n    }\n    static resolve(base, compartments, oldState) {\n        let fields = [];\n        let facets = Object.create(null);\n        let newCompartments = new Map();\n        for (let ext of flatten(base, compartments, newCompartments)) {\n            if (ext instanceof StateField)\n                fields.push(ext);\n            else\n                (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);\n        }\n        let address = Object.create(null);\n        let staticValues = [];\n        let dynamicSlots = [];\n        for (let field of fields) {\n            address[field.id] = dynamicSlots.length << 1;\n            dynamicSlots.push(a => field.slot(a));\n        }\n        let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;\n        for (let id in facets) {\n            let providers = facets[id], facet = providers[0].facet;\n            let oldProviders = oldFacets && oldFacets[id] || [];\n            if (providers.every(p => p.type == 0 /* Provider.Static */)) {\n                address[facet.id] = (staticValues.length << 1) | 1;\n                if (sameArray(oldProviders, providers)) {\n                    staticValues.push(oldState.facet(facet));\n                }\n                else {\n                    let value = facet.combine(providers.map(p => p.value));\n                    staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);\n                }\n            }\n            else {\n                for (let p of providers) {\n                    if (p.type == 0 /* Provider.Static */) {\n                        address[p.id] = (staticValues.length << 1) | 1;\n                        staticValues.push(p.value);\n                    }\n                    else {\n                        address[p.id] = dynamicSlots.length << 1;\n                        dynamicSlots.push(a => p.dynamicSlot(a));\n                    }\n                }\n                address[facet.id] = dynamicSlots.length << 1;\n                dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));\n            }\n        }\n        let dynamic = dynamicSlots.map(f => f(address));\n        return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);\n    }\n}\nfunction flatten(extension, compartments, newCompartments) {\n    let result = [[], [], [], [], []];\n    let seen = new Map();\n    function inner(ext, prec) {\n        let known = seen.get(ext);\n        if (known != null) {\n            if (known <= prec)\n                return;\n            let found = result[known].indexOf(ext);\n            if (found > -1)\n                result[known].splice(found, 1);\n            if (ext instanceof CompartmentInstance)\n                newCompartments.delete(ext.compartment);\n        }\n        seen.set(ext, prec);\n        if (Array.isArray(ext)) {\n            for (let e of ext)\n                inner(e, prec);\n        }\n        else if (ext instanceof CompartmentInstance) {\n            if (newCompartments.has(ext.compartment))\n                throw new RangeError(`Duplicate use of compartment in extensions`);\n            let content = compartments.get(ext.compartment) || ext.inner;\n            newCompartments.set(ext.compartment, content);\n            inner(content, prec);\n        }\n        else if (ext instanceof PrecExtension) {\n            inner(ext.inner, ext.prec);\n        }\n        else if (ext instanceof StateField) {\n            result[prec].push(ext);\n            if (ext.provides)\n                inner(ext.provides, prec);\n        }\n        else if (ext instanceof FacetProvider) {\n            result[prec].push(ext);\n            if (ext.facet.extensions)\n                inner(ext.facet.extensions, Prec_.default);\n        }\n        else {\n            let content = ext.extension;\n            if (!content)\n                throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);\n            inner(content, prec);\n        }\n    }\n    inner(extension, Prec_.default);\n    return result.reduce((a, b) => a.concat(b));\n}\nfunction ensureAddr(state, addr) {\n    if (addr & 1)\n        return 2 /* SlotStatus.Computed */;\n    let idx = addr >> 1;\n    let status = state.status[idx];\n    if (status == 4 /* SlotStatus.Computing */)\n        throw new Error(\"Cyclic dependency between fields and/or facets\");\n    if (status & 2 /* SlotStatus.Computed */)\n        return status;\n    state.status[idx] = 4 /* SlotStatus.Computing */;\n    let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);\n    return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;\n}\nfunction getAddr(state, addr) {\n    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];\n}\n\nconst languageData = /*@__PURE__*/Facet.define();\nconst allowMultipleSelections = /*@__PURE__*/Facet.define({\n    combine: values => values.some(v => v),\n    static: true\n});\nconst lineSeparator = /*@__PURE__*/Facet.define({\n    combine: values => values.length ? values[0] : undefined,\n    static: true\n});\nconst changeFilter = /*@__PURE__*/Facet.define();\nconst transactionFilter = /*@__PURE__*/Facet.define();\nconst transactionExtender = /*@__PURE__*/Facet.define();\nconst readOnly = /*@__PURE__*/Facet.define({\n    combine: values => values.length ? values[0] : false\n});\n\n/**\nAnnotations are tagged values that are used to add metadata to\ntransactions in an extensible way. They should be used to model\nthings that effect the entire transaction (such as its [time\nstamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its\n[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen\n_alongside_ the other changes made by the transaction, [state\neffects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.\n*/\nclass Annotation {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The annotation type.\n    */\n    type, \n    /**\n    The value of this annotation.\n    */\n    value) {\n        this.type = type;\n        this.value = value;\n    }\n    /**\n    Define a new type of annotation.\n    */\n    static define() { return new AnnotationType(); }\n}\n/**\nMarker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).\n*/\nclass AnnotationType {\n    /**\n    Create an instance of this annotation.\n    */\n    of(value) { return new Annotation(this, value); }\n}\n/**\nRepresentation of a type of state effect. Defined with\n[`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).\n*/\nclass StateEffectType {\n    /**\n    @internal\n    */\n    constructor(\n    // The `any` types in these function types are there to work\n    // around TypeScript issue #37631, where the type guard on\n    // `StateEffect.is` mysteriously stops working when these properly\n    // have type `Value`.\n    /**\n    @internal\n    */\n    map) {\n        this.map = map;\n    }\n    /**\n    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this\n    type.\n    */\n    of(value) { return new StateEffect(this, value); }\n}\n/**\nState effects can be used to represent additional effects\nassociated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They\nare often useful to model changes to custom [state\nfields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in\ndocument or selection changes.\n*/\nclass StateEffect {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    type, \n    /**\n    The value of this effect.\n    */\n    value) {\n        this.type = type;\n        this.value = value;\n    }\n    /**\n    Map this effect through a position mapping. Will return\n    `undefined` when that ends up deleting the effect.\n    */\n    map(mapping) {\n        let mapped = this.type.map(this.value, mapping);\n        return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);\n    }\n    /**\n    Tells you whether this effect object is of a given\n    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).\n    */\n    is(type) { return this.type == type; }\n    /**\n    Define a new effect type. The type parameter indicates the type\n    of values that his effect holds. It should be a type that\n    doesn't include `undefined`, since that is used in\n    [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is\n    removed.\n    */\n    static define(spec = {}) {\n        return new StateEffectType(spec.map || (v => v));\n    }\n    /**\n    Map an array of effects through a change set.\n    */\n    static mapEffects(effects, mapping) {\n        if (!effects.length)\n            return effects;\n        let result = [];\n        for (let effect of effects) {\n            let mapped = effect.map(mapping);\n            if (mapped)\n                result.push(mapped);\n        }\n        return result;\n    }\n}\n/**\nThis effect can be used to reconfigure the root extensions of\nthe editor. Doing this will discard any extensions\n[appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset\nthe content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)\ncompartments.\n*/\nStateEffect.reconfigure = /*@__PURE__*/StateEffect.define();\n/**\nAppend extensions to the top-level configuration of the editor.\n*/\nStateEffect.appendConfig = /*@__PURE__*/StateEffect.define();\n/**\nChanges to the editor state are grouped into transactions.\nTypically, a user action creates a single transaction, which may\ncontain any number of document changes, may change the selection,\nor have other effects. Create a transaction by calling\n[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately\ndispatch one by calling\n[`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).\n*/\nclass Transaction {\n    constructor(\n    /**\n    The state from which the transaction starts.\n    */\n    startState, \n    /**\n    The document changes made by this transaction.\n    */\n    changes, \n    /**\n    The selection set by this transaction, or undefined if it\n    doesn't explicitly set a selection.\n    */\n    selection, \n    /**\n    The effects added to the transaction.\n    */\n    effects, \n    /**\n    @internal\n    */\n    annotations, \n    /**\n    Whether the selection should be scrolled into view after this\n    transaction is dispatched.\n    */\n    scrollIntoView) {\n        this.startState = startState;\n        this.changes = changes;\n        this.selection = selection;\n        this.effects = effects;\n        this.annotations = annotations;\n        this.scrollIntoView = scrollIntoView;\n        /**\n        @internal\n        */\n        this._doc = null;\n        /**\n        @internal\n        */\n        this._state = null;\n        if (selection)\n            checkSelection(selection, changes.newLength);\n        if (!annotations.some((a) => a.type == Transaction.time))\n            this.annotations = annotations.concat(Transaction.time.of(Date.now()));\n    }\n    /**\n    @internal\n    */\n    static create(startState, changes, selection, effects, annotations, scrollIntoView) {\n        return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);\n    }\n    /**\n    The new document produced by the transaction. Contrary to\n    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't\n    force the entire new state to be computed right away, so it is\n    recommended that [transaction\n    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter\n    when they need to look at the new document.\n    */\n    get newDoc() {\n        return this._doc || (this._doc = this.changes.apply(this.startState.doc));\n    }\n    /**\n    The new selection produced by the transaction. If\n    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,\n    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's\n    current selection through the changes made by the transaction.\n    */\n    get newSelection() {\n        return this.selection || this.startState.selection.map(this.changes);\n    }\n    /**\n    The new state created by the transaction. Computed on demand\n    (but retained for subsequent access), so it is recommended not to\n    access it in [transaction\n    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.\n    */\n    get state() {\n        if (!this._state)\n            this.startState.applyTransaction(this);\n        return this._state;\n    }\n    /**\n    Get the value of the given annotation type, if any.\n    */\n    annotation(type) {\n        for (let ann of this.annotations)\n            if (ann.type == type)\n                return ann.value;\n        return undefined;\n    }\n    /**\n    Indicates whether the transaction changed the document.\n    */\n    get docChanged() { return !this.changes.empty; }\n    /**\n    Indicates whether this transaction reconfigures the state\n    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or\n    with a top-level configuration\n    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).\n    */\n    get reconfigured() { return this.startState.config != this.state.config; }\n    /**\n    Returns true if the transaction has a [user\n    event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to\n    or more specific than `event`. For example, if the transaction\n    has `\"select.pointer\"` as user event, `\"select\"` and\n    `\"select.pointer\"` will match it.\n    */\n    isUserEvent(event) {\n        let e = this.annotation(Transaction.userEvent);\n        return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == \".\"));\n    }\n}\n/**\nAnnotation used to store transaction timestamps. Automatically\nadded to every transaction, holding `Date.now()`.\n*/\nTransaction.time = /*@__PURE__*/Annotation.define();\n/**\nAnnotation used to associate a transaction with a user interface\nevent. Holds a string identifying the event, using a\ndot-separated format to support attaching more specific\ninformation. The events used by the core libraries are:\n\n - `\"input\"` when content is entered\n   - `\"input.type\"` for typed input\n     - `\"input.type.compose\"` for composition\n   - `\"input.paste\"` for pasted input\n   - `\"input.drop\"` when adding content with drag-and-drop\n   - `\"input.complete\"` when autocompleting\n - `\"delete\"` when the user deletes content\n   - `\"delete.selection\"` when deleting the selection\n   - `\"delete.forward\"` when deleting forward from the selection\n   - `\"delete.backward\"` when deleting backward from the selection\n   - `\"delete.cut\"` when cutting to the clipboard\n - `\"move\"` when content is moved\n   - `\"move.drop\"` when content is moved within the editor through drag-and-drop\n - `\"select\"` when explicitly changing the selection\n   - `\"select.pointer\"` when selecting with a mouse or other pointing device\n - `\"undo\"` and `\"redo\"` for history actions\n\nUse [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check\nwhether the annotation matches a given event.\n*/\nTransaction.userEvent = /*@__PURE__*/Annotation.define();\n/**\nAnnotation indicating whether a transaction should be added to\nthe undo history or not.\n*/\nTransaction.addToHistory = /*@__PURE__*/Annotation.define();\n/**\nAnnotation indicating (when present and true) that a transaction\nrepresents a change made by some other actor, not the user. This\nis used, for example, to tag other people's changes in\ncollaborative editing.\n*/\nTransaction.remote = /*@__PURE__*/Annotation.define();\nfunction joinRanges(a, b) {\n    let result = [];\n    for (let iA = 0, iB = 0;;) {\n        let from, to;\n        if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {\n            from = a[iA++];\n            to = a[iA++];\n        }\n        else if (iB < b.length) {\n            from = b[iB++];\n            to = b[iB++];\n        }\n        else\n            return result;\n        if (!result.length || result[result.length - 1] < from)\n            result.push(from, to);\n        else if (result[result.length - 1] < to)\n            result[result.length - 1] = to;\n    }\n}\nfunction mergeTransaction(a, b, sequential) {\n    var _a;\n    let mapForA, mapForB, changes;\n    if (sequential) {\n        mapForA = b.changes;\n        mapForB = ChangeSet.empty(b.changes.length);\n        changes = a.changes.compose(b.changes);\n    }\n    else {\n        mapForA = b.changes.map(a.changes);\n        mapForB = a.changes.mapDesc(b.changes, true);\n        changes = a.changes.compose(mapForA);\n    }\n    return {\n        changes,\n        selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),\n        effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),\n        annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,\n        scrollIntoView: a.scrollIntoView || b.scrollIntoView\n    };\n}\nfunction resolveTransactionInner(state, spec, docSize) {\n    let sel = spec.selection, annotations = asArray(spec.annotations);\n    if (spec.userEvent)\n        annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));\n    return {\n        changes: spec.changes instanceof ChangeSet ? spec.changes\n            : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),\n        selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),\n        effects: asArray(spec.effects),\n        annotations,\n        scrollIntoView: !!spec.scrollIntoView\n    };\n}\nfunction resolveTransaction(state, specs, filter) {\n    let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);\n    if (specs.length && specs[0].filter === false)\n        filter = false;\n    for (let i = 1; i < specs.length; i++) {\n        if (specs[i].filter === false)\n            filter = false;\n        let seq = !!specs[i].sequential;\n        s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);\n    }\n    let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);\n    return extendTransaction(filter ? filterTransaction(tr) : tr);\n}\n// Finish a transaction by applying filters if necessary.\nfunction filterTransaction(tr) {\n    let state = tr.startState;\n    // Change filters\n    let result = true;\n    for (let filter of state.facet(changeFilter)) {\n        let value = filter(tr);\n        if (value === false) {\n            result = false;\n            break;\n        }\n        if (Array.isArray(value))\n            result = result === true ? value : joinRanges(result, value);\n    }\n    if (result !== true) {\n        let changes, back;\n        if (result === false) {\n            back = tr.changes.invertedDesc;\n            changes = ChangeSet.empty(state.doc.length);\n        }\n        else {\n            let filtered = tr.changes.filter(result);\n            changes = filtered.changes;\n            back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;\n        }\n        tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);\n    }\n    // Transaction filters\n    let filters = state.facet(transactionFilter);\n    for (let i = filters.length - 1; i >= 0; i--) {\n        let filtered = filters[i](tr);\n        if (filtered instanceof Transaction)\n            tr = filtered;\n        else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)\n            tr = filtered[0];\n        else\n            tr = resolveTransaction(state, asArray(filtered), false);\n    }\n    return tr;\n}\nfunction extendTransaction(tr) {\n    let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;\n    for (let i = extenders.length - 1; i >= 0; i--) {\n        let extension = extenders[i](tr);\n        if (extension && Object.keys(extension).length)\n            spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);\n    }\n    return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);\n}\nconst none = [];\nfunction asArray(value) {\n    return value == null ? none : Array.isArray(value) ? value : [value];\n}\n\n/**\nThe categories produced by a [character\ncategorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used\ndo things like selecting by word.\n*/\nvar CharCategory = /*@__PURE__*/(function (CharCategory) {\n    /**\n    Word characters.\n    */\n    CharCategory[CharCategory[\"Word\"] = 0] = \"Word\";\n    /**\n    Whitespace.\n    */\n    CharCategory[CharCategory[\"Space\"] = 1] = \"Space\";\n    /**\n    Anything else.\n    */\n    CharCategory[CharCategory[\"Other\"] = 2] = \"Other\";\nreturn CharCategory})(CharCategory || (CharCategory = {}));\nconst nonASCIISingleCaseWordChar = /[\\u00df\\u0587\\u0590-\\u05f4\\u0600-\\u06ff\\u3040-\\u309f\\u30a0-\\u30ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\uac00-\\ud7af]/;\nlet wordChar;\ntry {\n    wordChar = /*@__PURE__*/new RegExp(\"[\\\\p{Alphabetic}\\\\p{Number}_]\", \"u\");\n}\ncatch (_) { }\nfunction hasWordChar(str) {\n    if (wordChar)\n        return wordChar.test(str);\n    for (let i = 0; i < str.length; i++) {\n        let ch = str[i];\n        if (/\\w/.test(ch) || ch > \"\\x80\" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))\n            return true;\n    }\n    return false;\n}\nfunction makeCategorizer(wordChars) {\n    return (char) => {\n        if (!/\\S/.test(char))\n            return CharCategory.Space;\n        if (hasWordChar(char))\n            return CharCategory.Word;\n        for (let i = 0; i < wordChars.length; i++)\n            if (char.indexOf(wordChars[i]) > -1)\n                return CharCategory.Word;\n        return CharCategory.Other;\n    };\n}\n\n/**\nThe editor state class is a persistent (immutable) data structure.\nTo update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a\n[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state\ninstance, without modifying the original object.\n\nAs such, _never_ mutate properties of a state directly. That'll\njust break things.\n*/\nclass EditorState {\n    constructor(\n    /**\n    @internal\n    */\n    config, \n    /**\n    The current document.\n    */\n    doc, \n    /**\n    The current selection.\n    */\n    selection, \n    /**\n    @internal\n    */\n    values, computeSlot, tr) {\n        this.config = config;\n        this.doc = doc;\n        this.selection = selection;\n        this.values = values;\n        this.status = config.statusTemplate.slice();\n        this.computeSlot = computeSlot;\n        // Fill in the computed state immediately, so that further queries\n        // for it made during the update return this state\n        if (tr)\n            tr._state = this;\n        for (let i = 0; i < this.config.dynamicSlots.length; i++)\n            ensureAddr(this, i << 1);\n        this.computeSlot = null;\n    }\n    field(field, require = true) {\n        let addr = this.config.address[field.id];\n        if (addr == null) {\n            if (require)\n                throw new RangeError(\"Field is not present in this state\");\n            return undefined;\n        }\n        ensureAddr(this, addr);\n        return getAddr(this, addr);\n    }\n    /**\n    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this\n    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)\n    can be passed. Unless\n    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the\n    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec\n    are assumed to start in the _current_ document (not the document\n    produced by previous specs), and its\n    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and\n    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer\n    to the document created by its _own_ changes. The resulting\n    transaction contains the combined effect of all the different\n    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later\n    specs take precedence over earlier ones.\n    */\n    update(...specs) {\n        return resolveTransaction(this, specs, true);\n    }\n    /**\n    @internal\n    */\n    applyTransaction(tr) {\n        let conf = this.config, { base, compartments } = conf;\n        for (let effect of tr.effects) {\n            if (effect.is(Compartment.reconfigure)) {\n                if (conf) {\n                    compartments = new Map;\n                    conf.compartments.forEach((val, key) => compartments.set(key, val));\n                    conf = null;\n                }\n                compartments.set(effect.value.compartment, effect.value.extension);\n            }\n            else if (effect.is(StateEffect.reconfigure)) {\n                conf = null;\n                base = effect.value;\n            }\n            else if (effect.is(StateEffect.appendConfig)) {\n                conf = null;\n                base = asArray(base).concat(effect.value);\n            }\n        }\n        let startValues;\n        if (!conf) {\n            conf = Configuration.resolve(base, compartments, this);\n            let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);\n            startValues = intermediateState.values;\n        }\n        else {\n            startValues = tr.startState.values.slice();\n        }\n        new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);\n    }\n    /**\n    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that\n    replaces every selection range with the given content.\n    */\n    replaceSelection(text) {\n        if (typeof text == \"string\")\n            text = this.toText(text);\n        return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },\n            range: EditorSelection.cursor(range.from + text.length) }));\n    }\n    /**\n    Create a set of changes and a new selection by running the given\n    function for each range in the active selection. The function\n    can return an optional set of changes (in the coordinate space\n    of the start document), plus an updated range (in the coordinate\n    space of the document produced by the call's own changes). This\n    method will merge all the changes and ranges into a single\n    changeset and selection, and return it as a [transaction\n    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to\n    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).\n    */\n    changeByRange(f) {\n        let sel = this.selection;\n        let result1 = f(sel.ranges[0]);\n        let changes = this.changes(result1.changes), ranges = [result1.range];\n        let effects = asArray(result1.effects);\n        for (let i = 1; i < sel.ranges.length; i++) {\n            let result = f(sel.ranges[i]);\n            let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);\n            for (let j = 0; j < i; j++)\n                ranges[j] = ranges[j].map(newMapped);\n            let mapBy = changes.mapDesc(newChanges, true);\n            ranges.push(result.range.map(mapBy));\n            changes = changes.compose(newMapped);\n            effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));\n        }\n        return {\n            changes,\n            selection: EditorSelection.create(ranges, sel.mainIndex),\n            effects\n        };\n    }\n    /**\n    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change\n    description, taking the state's document length and line\n    separator into account.\n    */\n    changes(spec = []) {\n        if (spec instanceof ChangeSet)\n            return spec;\n        return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));\n    }\n    /**\n    Using the state's [line\n    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a\n    [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.\n    */\n    toText(string) {\n        return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));\n    }\n    /**\n    Return the given range of the document as a string.\n    */\n    sliceDoc(from = 0, to = this.doc.length) {\n        return this.doc.sliceString(from, to, this.lineBreak);\n    }\n    /**\n    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).\n    */\n    facet(facet) {\n        let addr = this.config.address[facet.id];\n        if (addr == null)\n            return facet.default;\n        ensureAddr(this, addr);\n        return getAddr(this, addr);\n    }\n    /**\n    Convert this state to a JSON-serializable object. When custom\n    fields should be serialized, you can pass them in as an object\n    mapping property names (in the resulting object, which should\n    not use `doc` or `selection`) to fields.\n    */\n    toJSON(fields) {\n        let result = {\n            doc: this.sliceDoc(),\n            selection: this.selection.toJSON()\n        };\n        if (fields)\n            for (let prop in fields) {\n                let value = fields[prop];\n                if (value instanceof StateField && this.config.address[value.id] != null)\n                    result[prop] = value.spec.toJSON(this.field(fields[prop]), this);\n            }\n        return result;\n    }\n    /**\n    Deserialize a state from its JSON representation. When custom\n    fields should be deserialized, pass the same object you passed\n    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as\n    third argument.\n    */\n    static fromJSON(json, config = {}, fields) {\n        if (!json || typeof json.doc != \"string\")\n            throw new RangeError(\"Invalid JSON representation for EditorState\");\n        let fieldInit = [];\n        if (fields)\n            for (let prop in fields) {\n                if (Object.prototype.hasOwnProperty.call(json, prop)) {\n                    let field = fields[prop], value = json[prop];\n                    fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));\n                }\n            }\n        return EditorState.create({\n            doc: json.doc,\n            selection: EditorSelection.fromJSON(json.selection),\n            extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit\n        });\n    }\n    /**\n    Create a new state. You'll usually only need this when\n    initializing an editor—updated states are created by applying\n    transactions.\n    */\n    static create(config = {}) {\n        let configuration = Configuration.resolve(config.extensions || [], new Map);\n        let doc = config.doc instanceof Text ? config.doc\n            : Text.of((config.doc || \"\").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));\n        let selection = !config.selection ? EditorSelection.single(0)\n            : config.selection instanceof EditorSelection ? config.selection\n                : EditorSelection.single(config.selection.anchor, config.selection.head);\n        checkSelection(selection, doc.length);\n        if (!configuration.staticFacet(allowMultipleSelections))\n            selection = selection.asSingle();\n        return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);\n    }\n    /**\n    The size (in columns) of a tab in the document, determined by\n    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.\n    */\n    get tabSize() { return this.facet(EditorState.tabSize); }\n    /**\n    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)\n    string for this state.\n    */\n    get lineBreak() { return this.facet(EditorState.lineSeparator) || \"\\n\"; }\n    /**\n    Returns true when the editor is\n    [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.\n    */\n    get readOnly() { return this.facet(readOnly); }\n    /**\n    Look up a translation for the given phrase (via the\n    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the\n    original string if no translation is found.\n    \n    If additional arguments are passed, they will be inserted in\n    place of markers like `$1` (for the first value) and `$2`, etc.\n    A single `$` is equivalent to `$1`, and `$$` will produce a\n    literal dollar sign.\n    */\n    phrase(phrase, ...insert) {\n        for (let map of this.facet(EditorState.phrases))\n            if (Object.prototype.hasOwnProperty.call(map, phrase)) {\n                phrase = map[phrase];\n                break;\n            }\n        if (insert.length)\n            phrase = phrase.replace(/\\$(\\$|\\d*)/g, (m, i) => {\n                if (i == \"$\")\n                    return \"$\";\n                let n = +(i || 1);\n                return !n || n > insert.length ? m : insert[n - 1];\n            });\n        return phrase;\n    }\n    /**\n    Find the values for a given language data field, provided by the\n    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.\n    \n    Examples of language data fields are...\n    \n    - [`\"commentTokens\"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying\n      comment syntax.\n    - [`\"autocomplete\"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)\n      for providing language-specific completion sources.\n    - [`\"wordChars\"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding\n      characters that should be considered part of words in this\n      language.\n    - [`\"closeBrackets\"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls\n      bracket closing behavior.\n    */\n    languageDataAt(name, pos, side = -1) {\n        let values = [];\n        for (let provider of this.facet(languageData)) {\n            for (let result of provider(this, pos, side)) {\n                if (Object.prototype.hasOwnProperty.call(result, name))\n                    values.push(result[name]);\n            }\n        }\n        return values;\n    }\n    /**\n    Return a function that can categorize strings (expected to\n    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))\n    into one of:\n    \n     - Word (contains an alphanumeric character or a character\n       explicitly listed in the local language's `\"wordChars\"`\n       language data, which should be a string)\n     - Space (contains only whitespace)\n     - Other (anything else)\n    */\n    charCategorizer(at) {\n        return makeCategorizer(this.languageDataAt(\"wordChars\", at).join(\"\"));\n    }\n    /**\n    Find the word at the given position, meaning the range\n    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters\n    around it. If no word characters are adjacent to the position,\n    this returns null.\n    */\n    wordAt(pos) {\n        let { text, from, length } = this.doc.lineAt(pos);\n        let cat = this.charCategorizer(pos);\n        let start = pos - from, end = pos - from;\n        while (start > 0) {\n            let prev = findClusterBreak(text, start, false);\n            if (cat(text.slice(prev, start)) != CharCategory.Word)\n                break;\n            start = prev;\n        }\n        while (end < length) {\n            let next = findClusterBreak(text, end);\n            if (cat(text.slice(end, next)) != CharCategory.Word)\n                break;\n            end = next;\n        }\n        return start == end ? null : EditorSelection.range(start + from, end + from);\n    }\n}\n/**\nA facet that, when enabled, causes the editor to allow multiple\nranges to be selected. Be careful though, because by default the\neditor relies on the native DOM selection, which cannot handle\nmultiple selections. An extension like\n[`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make\nsecondary selections visible to the user.\n*/\nEditorState.allowMultipleSelections = allowMultipleSelections;\n/**\nConfigures the tab size to use in this state. The first\n(highest-precedence) value of the facet is used. If no value is\ngiven, this defaults to 4.\n*/\nEditorState.tabSize = /*@__PURE__*/Facet.define({\n    combine: values => values.length ? values[0] : 4\n});\n/**\nThe line separator to use. By default, any of `\"\\n\"`, `\"\\r\\n\"`\nand `\"\\r\"` is treated as a separator when splitting lines, and\nlines are joined with `\"\\n\"`.\n\nWhen you configure a value here, only that precise separator\nwill be used, allowing you to round-trip documents through the\neditor without normalizing line separators.\n*/\nEditorState.lineSeparator = lineSeparator;\n/**\nThis facet controls the value of the\n[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is\nconsulted by commands and extensions that implement editing\nfunctionality to determine whether they should apply. It\ndefaults to false, but when its highest-precedence value is\n`true`, such functionality disables itself.\n\nNot to be confused with\n[`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which\ncontrols whether the editor's DOM is set to be editable (and\nthus focusable).\n*/\nEditorState.readOnly = readOnly;\n/**\nRegisters translation phrases. The\n[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through\nall objects registered with this facet to find translations for\nits argument.\n*/\nEditorState.phrases = /*@__PURE__*/Facet.define({\n    compare(a, b) {\n        let kA = Object.keys(a), kB = Object.keys(b);\n        return kA.length == kB.length && kA.every(k => a[k] == b[k]);\n    }\n});\n/**\nA facet used to register [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.\n*/\nEditorState.languageData = languageData;\n/**\nFacet used to register change filters, which are called for each\ntransaction (unless explicitly\n[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress\npart of the transaction's changes.\n\nSuch a function can return `true` to indicate that it doesn't\nwant to do anything, `false` to completely stop the changes in\nthe transaction, or a set of ranges in which changes should be\nsuppressed. Such ranges are represented as an array of numbers,\nwith each pair of two numbers indicating the start and end of a\nrange. So for example `[10, 20, 100, 110]` suppresses changes\nbetween 10 and 20, and between 100 and 110.\n*/\nEditorState.changeFilter = changeFilter;\n/**\nFacet used to register a hook that gets a chance to update or\nreplace transaction specs before they are applied. This will\nonly be applied for transactions that don't have\n[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You\ncan either return a single transaction spec (possibly the input\ntransaction), or an array of specs (which will be combined in\nthe same way as the arguments to\n[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).\n\nWhen possible, it is recommended to avoid accessing\n[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,\nsince it will force creation of a state that will then be\ndiscarded again, if the transaction is actually filtered.\n\n(This functionality should be used with care. Indiscriminately\nmodifying transaction is likely to break something or degrade\nthe user experience.)\n*/\nEditorState.transactionFilter = transactionFilter;\n/**\nThis is a more limited form of\n[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),\nwhich can only add\n[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and\n[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type\nof filter runs even if the transaction has disabled regular\n[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable\nfor effects that don't need to touch the changes or selection,\nbut do want to process every transaction.\n\nExtenders run _after_ filters, when both are present.\n*/\nEditorState.transactionExtender = transactionExtender;\nCompartment.reconfigure = /*@__PURE__*/StateEffect.define();\n\n/**\nUtility function for combining behaviors to fill in a config\nobject from an array of provided configs. `defaults` should hold\ndefault values for all optional fields in `Config`.\n\nThe function will, by default, error\nwhen a field gets two values that aren't `===`-equal, but you can\nprovide combine functions per field to do something else.\n*/\nfunction combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that\ncombine = {}) {\n    let result = {};\n    for (let config of configs)\n        for (let key of Object.keys(config)) {\n            let value = config[key], current = result[key];\n            if (current === undefined)\n                result[key] = value;\n            else if (current === value || value === undefined) ; // No conflict\n            else if (Object.hasOwnProperty.call(combine, key))\n                result[key] = combine[key](current, value);\n            else\n                throw new Error(\"Config merge conflict for field \" + key);\n        }\n    for (let key in defaults)\n        if (result[key] === undefined)\n            result[key] = defaults[key];\n    return result;\n}\n\n/**\nEach range is associated with a value, which must inherit from\nthis class.\n*/\nclass RangeValue {\n    /**\n    Compare this value with another value. Used when comparing\n    rangesets. The default implementation compares by identity.\n    Unless you are only creating a fixed number of unique instances\n    of your value type, it is a good idea to implement this\n    properly.\n    */\n    eq(other) { return this == other; }\n    /**\n    Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.\n    */\n    range(from, to = from) { return Range.create(from, to, this); }\n}\nRangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;\nRangeValue.prototype.point = false;\nRangeValue.prototype.mapMode = MapMode.TrackDel;\n/**\nA range associates a value with a range of positions.\n*/\nclass Range {\n    constructor(\n    /**\n    The range's start position.\n    */\n    from, \n    /**\n    Its end position.\n    */\n    to, \n    /**\n    The value associated with this range.\n    */\n    value) {\n        this.from = from;\n        this.to = to;\n        this.value = value;\n    }\n    /**\n    @internal\n    */\n    static create(from, to, value) {\n        return new Range(from, to, value);\n    }\n}\nfunction cmpRange(a, b) {\n    return a.from - b.from || a.value.startSide - b.value.startSide;\n}\nclass Chunk {\n    constructor(from, to, value, \n    // Chunks are marked with the largest point that occurs\n    // in them (or -1 for no points), so that scans that are\n    // only interested in points (such as the\n    // heightmap-related logic) can skip range-only chunks.\n    maxPoint) {\n        this.from = from;\n        this.to = to;\n        this.value = value;\n        this.maxPoint = maxPoint;\n    }\n    get length() { return this.to[this.to.length - 1]; }\n    // Find the index of the given position and side. Use the ranges'\n    // `from` pos when `end == false`, `to` when `end == true`.\n    findIndex(pos, side, end, startAt = 0) {\n        let arr = end ? this.to : this.from;\n        for (let lo = startAt, hi = arr.length;;) {\n            if (lo == hi)\n                return lo;\n            let mid = (lo + hi) >> 1;\n            let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;\n            if (mid == lo)\n                return diff >= 0 ? lo : hi;\n            if (diff >= 0)\n                hi = mid;\n            else\n                lo = mid + 1;\n        }\n    }\n    between(offset, from, to, f) {\n        for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)\n            if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)\n                return false;\n    }\n    map(offset, changes) {\n        let value = [], from = [], to = [], newPos = -1, maxPoint = -1;\n        for (let i = 0; i < this.value.length; i++) {\n            let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;\n            if (curFrom == curTo) {\n                let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);\n                if (mapped == null)\n                    continue;\n                newFrom = newTo = mapped;\n                if (val.startSide != val.endSide) {\n                    newTo = changes.mapPos(curFrom, val.endSide);\n                    if (newTo < newFrom)\n                        continue;\n                }\n            }\n            else {\n                newFrom = changes.mapPos(curFrom, val.startSide);\n                newTo = changes.mapPos(curTo, val.endSide);\n                if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)\n                    continue;\n            }\n            if ((newTo - newFrom || val.endSide - val.startSide) < 0)\n                continue;\n            if (newPos < 0)\n                newPos = newFrom;\n            if (val.point)\n                maxPoint = Math.max(maxPoint, newTo - newFrom);\n            value.push(val);\n            from.push(newFrom - newPos);\n            to.push(newTo - newPos);\n        }\n        return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };\n    }\n}\n/**\nA range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a\nway that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and\n[update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data\nstructure.\n*/\nclass RangeSet {\n    constructor(\n    /**\n    @internal\n    */\n    chunkPos, \n    /**\n    @internal\n    */\n    chunk, \n    /**\n    @internal\n    */\n    nextLayer, \n    /**\n    @internal\n    */\n    maxPoint) {\n        this.chunkPos = chunkPos;\n        this.chunk = chunk;\n        this.nextLayer = nextLayer;\n        this.maxPoint = maxPoint;\n    }\n    /**\n    @internal\n    */\n    static create(chunkPos, chunk, nextLayer, maxPoint) {\n        return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);\n    }\n    /**\n    @internal\n    */\n    get length() {\n        let last = this.chunk.length - 1;\n        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);\n    }\n    /**\n    The number of ranges in the set.\n    */\n    get size() {\n        if (this.isEmpty)\n            return 0;\n        let size = this.nextLayer.size;\n        for (let chunk of this.chunk)\n            size += chunk.value.length;\n        return size;\n    }\n    /**\n    @internal\n    */\n    chunkEnd(index) {\n        return this.chunkPos[index] + this.chunk[index].length;\n    }\n    /**\n    Update the range set, optionally adding new ranges or filtering\n    out existing ones.\n    \n    (Note: The type parameter is just there as a kludge to work\n    around TypeScript variance issues that prevented `RangeSet<X>`\n    from being a subtype of `RangeSet<Y>` when `X` is a subtype of\n    `Y`.)\n    */\n    update(updateSpec) {\n        let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;\n        let filter = updateSpec.filter;\n        if (add.length == 0 && !filter)\n            return this;\n        if (sort)\n            add = add.slice().sort(cmpRange);\n        if (this.isEmpty)\n            return add.length ? RangeSet.of(add) : this;\n        let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];\n        let builder = new RangeSetBuilder();\n        while (cur.value || i < add.length) {\n            if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {\n                let range = add[i++];\n                if (!builder.addInner(range.from, range.to, range.value))\n                    spill.push(range);\n            }\n            else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&\n                (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&\n                (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&\n                builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {\n                cur.nextChunk();\n            }\n            else {\n                if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {\n                    if (!builder.addInner(cur.from, cur.to, cur.value))\n                        spill.push(Range.create(cur.from, cur.to, cur.value));\n                }\n                cur.next();\n            }\n        }\n        return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty\n            : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));\n    }\n    /**\n    Map this range set through a set of changes, return the new set.\n    */\n    map(changes) {\n        if (changes.empty || this.isEmpty)\n            return this;\n        let chunks = [], chunkPos = [], maxPoint = -1;\n        for (let i = 0; i < this.chunk.length; i++) {\n            let start = this.chunkPos[i], chunk = this.chunk[i];\n            let touch = changes.touchesRange(start, start + chunk.length);\n            if (touch === false) {\n                maxPoint = Math.max(maxPoint, chunk.maxPoint);\n                chunks.push(chunk);\n                chunkPos.push(changes.mapPos(start));\n            }\n            else if (touch === true) {\n                let { mapped, pos } = chunk.map(start, changes);\n                if (mapped) {\n                    maxPoint = Math.max(maxPoint, mapped.maxPoint);\n                    chunks.push(mapped);\n                    chunkPos.push(pos);\n                }\n            }\n        }\n        let next = this.nextLayer.map(changes);\n        return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);\n    }\n    /**\n    Iterate over the ranges that touch the region `from` to `to`,\n    calling `f` for each. There is no guarantee that the ranges will\n    be reported in any specific order. When the callback returns\n    `false`, iteration stops.\n    */\n    between(from, to, f) {\n        if (this.isEmpty)\n            return;\n        for (let i = 0; i < this.chunk.length; i++) {\n            let start = this.chunkPos[i], chunk = this.chunk[i];\n            if (to >= start && from <= start + chunk.length &&\n                chunk.between(start, from - start, to - start, f) === false)\n                return;\n        }\n        this.nextLayer.between(from, to, f);\n    }\n    /**\n    Iterate over the ranges in this set, in order, including all\n    ranges that end at or after `from`.\n    */\n    iter(from = 0) {\n        return HeapCursor.from([this]).goto(from);\n    }\n    /**\n    @internal\n    */\n    get isEmpty() { return this.nextLayer == this; }\n    /**\n    Iterate over the ranges in a collection of sets, in order,\n    starting from `from`.\n    */\n    static iter(sets, from = 0) {\n        return HeapCursor.from(sets).goto(from);\n    }\n    /**\n    Iterate over two groups of sets, calling methods on `comparator`\n    to notify it of possible differences.\n    */\n    static compare(oldSets, newSets, \n    /**\n    This indicates how the underlying data changed between these\n    ranges, and is needed to synchronize the iteration.\n    */\n    textDiff, comparator, \n    /**\n    Can be used to ignore all non-point ranges, and points below\n    the given size. When -1, all ranges are compared.\n    */\n    minPointSize = -1) {\n        let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);\n        let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);\n        let sharedChunks = findSharedChunks(a, b, textDiff);\n        let sideA = new SpanCursor(a, sharedChunks, minPointSize);\n        let sideB = new SpanCursor(b, sharedChunks, minPointSize);\n        textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));\n        if (textDiff.empty && textDiff.length == 0)\n            compare(sideA, 0, sideB, 0, 0, comparator);\n    }\n    /**\n    Compare the contents of two groups of range sets, returning true\n    if they are equivalent in the given range.\n    */\n    static eq(oldSets, newSets, from = 0, to) {\n        if (to == null)\n            to = 1000000000 /* C.Far */ - 1;\n        let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);\n        let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);\n        if (a.length != b.length)\n            return false;\n        if (!a.length)\n            return true;\n        let sharedChunks = findSharedChunks(a, b);\n        let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);\n        for (;;) {\n            if (sideA.to != sideB.to ||\n                !sameValues(sideA.active, sideB.active) ||\n                sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))\n                return false;\n            if (sideA.to > to)\n                return true;\n            sideA.next();\n            sideB.next();\n        }\n    }\n    /**\n    Iterate over a group of range sets at the same time, notifying\n    the iterator about the ranges covering every given piece of\n    content. Returns the open count (see\n    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end\n    of the iteration.\n    */\n    static spans(sets, from, to, iterator, \n    /**\n    When given and greater than -1, only points of at least this\n    size are taken into account.\n    */\n    minPointSize = -1) {\n        let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;\n        let openRanges = cursor.openStart;\n        for (;;) {\n            let curTo = Math.min(cursor.to, to);\n            if (cursor.point) {\n                let active = cursor.activeForPoint(cursor.to);\n                let openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);\n                iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);\n                openRanges = Math.min(cursor.openEnd(curTo), active.length);\n            }\n            else if (curTo > pos) {\n                iterator.span(pos, curTo, cursor.active, openRanges);\n                openRanges = cursor.openEnd(curTo);\n            }\n            if (cursor.to > to)\n                return openRanges + (cursor.point && cursor.to > to ? 1 : 0);\n            pos = cursor.to;\n            cursor.next();\n        }\n    }\n    /**\n    Create a range set for the given range or array of ranges. By\n    default, this expects the ranges to be _sorted_ (by start\n    position and, if two start at the same position,\n    `value.startSide`). You can pass `true` as second argument to\n    cause the method to sort them.\n    */\n    static of(ranges, sort = false) {\n        let build = new RangeSetBuilder();\n        for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)\n            build.add(range.from, range.to, range.value);\n        return build.finish();\n    }\n}\n/**\nThe empty set of ranges.\n*/\nRangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);\nfunction lazySort(ranges) {\n    if (ranges.length > 1)\n        for (let prev = ranges[0], i = 1; i < ranges.length; i++) {\n            let cur = ranges[i];\n            if (cmpRange(prev, cur) > 0)\n                return ranges.slice().sort(cmpRange);\n            prev = cur;\n        }\n    return ranges;\n}\nRangeSet.empty.nextLayer = RangeSet.empty;\n/**\nA range set builder is a data structure that helps build up a\n[range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating\nan array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.\n*/\nclass RangeSetBuilder {\n    finishChunk(newArrays) {\n        this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));\n        this.chunkPos.push(this.chunkStart);\n        this.chunkStart = -1;\n        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);\n        this.maxPoint = -1;\n        if (newArrays) {\n            this.from = [];\n            this.to = [];\n            this.value = [];\n        }\n    }\n    /**\n    Create an empty builder.\n    */\n    constructor() {\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunkStart = -1;\n        this.last = null;\n        this.lastFrom = -1000000000 /* C.Far */;\n        this.lastTo = -1000000000 /* C.Far */;\n        this.from = [];\n        this.to = [];\n        this.value = [];\n        this.maxPoint = -1;\n        this.setMaxPoint = -1;\n        this.nextLayer = null;\n    }\n    /**\n    Add a range. Ranges should be added in sorted (by `from` and\n    `value.startSide`) order.\n    */\n    add(from, to, value) {\n        if (!this.addInner(from, to, value))\n            (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);\n    }\n    /**\n    @internal\n    */\n    addInner(from, to, value) {\n        let diff = from - this.lastTo || value.startSide - this.last.endSide;\n        if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)\n            throw new Error(\"Ranges must be added sorted by `from` position and `startSide`\");\n        if (diff < 0)\n            return false;\n        if (this.from.length == 250 /* C.ChunkSize */)\n            this.finishChunk(true);\n        if (this.chunkStart < 0)\n            this.chunkStart = from;\n        this.from.push(from - this.chunkStart);\n        this.to.push(to - this.chunkStart);\n        this.last = value;\n        this.lastFrom = from;\n        this.lastTo = to;\n        this.value.push(value);\n        if (value.point)\n            this.maxPoint = Math.max(this.maxPoint, to - from);\n        return true;\n    }\n    /**\n    @internal\n    */\n    addChunk(from, chunk) {\n        if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)\n            return false;\n        if (this.from.length)\n            this.finishChunk(true);\n        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);\n        this.chunks.push(chunk);\n        this.chunkPos.push(from);\n        let last = chunk.value.length - 1;\n        this.last = chunk.value[last];\n        this.lastFrom = chunk.from[last] + from;\n        this.lastTo = chunk.to[last] + from;\n        return true;\n    }\n    /**\n    Finish the range set. Returns the new set. The builder can't be\n    used anymore after this has been called.\n    */\n    finish() { return this.finishInner(RangeSet.empty); }\n    /**\n    @internal\n    */\n    finishInner(next) {\n        if (this.from.length)\n            this.finishChunk(false);\n        if (this.chunks.length == 0)\n            return next;\n        let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);\n        this.from = null; // Make sure further `add` calls produce errors\n        return result;\n    }\n}\nfunction findSharedChunks(a, b, textDiff) {\n    let inA = new Map();\n    for (let set of a)\n        for (let i = 0; i < set.chunk.length; i++)\n            if (set.chunk[i].maxPoint <= 0)\n                inA.set(set.chunk[i], set.chunkPos[i]);\n    let shared = new Set();\n    for (let set of b)\n        for (let i = 0; i < set.chunk.length; i++) {\n            let known = inA.get(set.chunk[i]);\n            if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&\n                !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))\n                shared.add(set.chunk[i]);\n        }\n    return shared;\n}\nclass LayerCursor {\n    constructor(layer, skip, minPoint, rank = 0) {\n        this.layer = layer;\n        this.skip = skip;\n        this.minPoint = minPoint;\n        this.rank = rank;\n    }\n    get startSide() { return this.value ? this.value.startSide : 0; }\n    get endSide() { return this.value ? this.value.endSide : 0; }\n    goto(pos, side = -1000000000 /* C.Far */) {\n        this.chunkIndex = this.rangeIndex = 0;\n        this.gotoInner(pos, side, false);\n        return this;\n    }\n    gotoInner(pos, side, forward) {\n        while (this.chunkIndex < this.layer.chunk.length) {\n            let next = this.layer.chunk[this.chunkIndex];\n            if (!(this.skip && this.skip.has(next) ||\n                this.layer.chunkEnd(this.chunkIndex) < pos ||\n                next.maxPoint < this.minPoint))\n                break;\n            this.chunkIndex++;\n            forward = false;\n        }\n        if (this.chunkIndex < this.layer.chunk.length) {\n            let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);\n            if (!forward || this.rangeIndex < rangeIndex)\n                this.setRangeIndex(rangeIndex);\n        }\n        this.next();\n    }\n    forward(pos, side) {\n        if ((this.to - pos || this.endSide - side) < 0)\n            this.gotoInner(pos, side, true);\n    }\n    next() {\n        for (;;) {\n            if (this.chunkIndex == this.layer.chunk.length) {\n                this.from = this.to = 1000000000 /* C.Far */;\n                this.value = null;\n                break;\n            }\n            else {\n                let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];\n                let from = chunkPos + chunk.from[this.rangeIndex];\n                this.from = from;\n                this.to = chunkPos + chunk.to[this.rangeIndex];\n                this.value = chunk.value[this.rangeIndex];\n                this.setRangeIndex(this.rangeIndex + 1);\n                if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)\n                    break;\n            }\n        }\n    }\n    setRangeIndex(index) {\n        if (index == this.layer.chunk[this.chunkIndex].value.length) {\n            this.chunkIndex++;\n            if (this.skip) {\n                while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))\n                    this.chunkIndex++;\n            }\n            this.rangeIndex = 0;\n        }\n        else {\n            this.rangeIndex = index;\n        }\n    }\n    nextChunk() {\n        this.chunkIndex++;\n        this.rangeIndex = 0;\n        this.next();\n    }\n    compare(other) {\n        return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||\n            this.to - other.to || this.endSide - other.endSide;\n    }\n}\nclass HeapCursor {\n    constructor(heap) {\n        this.heap = heap;\n    }\n    static from(sets, skip = null, minPoint = -1) {\n        let heap = [];\n        for (let i = 0; i < sets.length; i++) {\n            for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {\n                if (cur.maxPoint >= minPoint)\n                    heap.push(new LayerCursor(cur, skip, minPoint, i));\n            }\n        }\n        return heap.length == 1 ? heap[0] : new HeapCursor(heap);\n    }\n    get startSide() { return this.value ? this.value.startSide : 0; }\n    goto(pos, side = -1000000000 /* C.Far */) {\n        for (let cur of this.heap)\n            cur.goto(pos, side);\n        for (let i = this.heap.length >> 1; i >= 0; i--)\n            heapBubble(this.heap, i);\n        this.next();\n        return this;\n    }\n    forward(pos, side) {\n        for (let cur of this.heap)\n            cur.forward(pos, side);\n        for (let i = this.heap.length >> 1; i >= 0; i--)\n            heapBubble(this.heap, i);\n        if ((this.to - pos || this.value.endSide - side) < 0)\n            this.next();\n    }\n    next() {\n        if (this.heap.length == 0) {\n            this.from = this.to = 1000000000 /* C.Far */;\n            this.value = null;\n            this.rank = -1;\n        }\n        else {\n            let top = this.heap[0];\n            this.from = top.from;\n            this.to = top.to;\n            this.value = top.value;\n            this.rank = top.rank;\n            if (top.value)\n                top.next();\n            heapBubble(this.heap, 0);\n        }\n    }\n}\nfunction heapBubble(heap, index) {\n    for (let cur = heap[index];;) {\n        let childIndex = (index << 1) + 1;\n        if (childIndex >= heap.length)\n            break;\n        let child = heap[childIndex];\n        if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {\n            child = heap[childIndex + 1];\n            childIndex++;\n        }\n        if (cur.compare(child) < 0)\n            break;\n        heap[childIndex] = cur;\n        heap[index] = child;\n        index = childIndex;\n    }\n}\nclass SpanCursor {\n    constructor(sets, skip, minPoint) {\n        this.minPoint = minPoint;\n        this.active = [];\n        this.activeTo = [];\n        this.activeRank = [];\n        this.minActive = -1;\n        // A currently active point range, if any\n        this.point = null;\n        this.pointFrom = 0;\n        this.pointRank = 0;\n        this.to = -1000000000 /* C.Far */;\n        this.endSide = 0;\n        // The amount of open active ranges at the start of the iterator.\n        // Not including points.\n        this.openStart = -1;\n        this.cursor = HeapCursor.from(sets, skip, minPoint);\n    }\n    goto(pos, side = -1000000000 /* C.Far */) {\n        this.cursor.goto(pos, side);\n        this.active.length = this.activeTo.length = this.activeRank.length = 0;\n        this.minActive = -1;\n        this.to = pos;\n        this.endSide = side;\n        this.openStart = -1;\n        this.next();\n        return this;\n    }\n    forward(pos, side) {\n        while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)\n            this.removeActive(this.minActive);\n        this.cursor.forward(pos, side);\n    }\n    removeActive(index) {\n        remove(this.active, index);\n        remove(this.activeTo, index);\n        remove(this.activeRank, index);\n        this.minActive = findMinIndex(this.active, this.activeTo);\n    }\n    addActive(trackOpen) {\n        let i = 0, { value, to, rank } = this.cursor;\n        while (i < this.activeRank.length && this.activeRank[i] <= rank)\n            i++;\n        insert(this.active, i, value);\n        insert(this.activeTo, i, to);\n        insert(this.activeRank, i, rank);\n        if (trackOpen)\n            insert(trackOpen, i, this.cursor.from);\n        this.minActive = findMinIndex(this.active, this.activeTo);\n    }\n    // After calling this, if `this.point` != null, the next range is a\n    // point. Otherwise, it's a regular range, covered by `this.active`.\n    next() {\n        let from = this.to, wasPoint = this.point;\n        this.point = null;\n        let trackOpen = this.openStart < 0 ? [] : null;\n        for (;;) {\n            let a = this.minActive;\n            if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {\n                if (this.activeTo[a] > from) {\n                    this.to = this.activeTo[a];\n                    this.endSide = this.active[a].endSide;\n                    break;\n                }\n                this.removeActive(a);\n                if (trackOpen)\n                    remove(trackOpen, a);\n            }\n            else if (!this.cursor.value) {\n                this.to = this.endSide = 1000000000 /* C.Far */;\n                break;\n            }\n            else if (this.cursor.from > from) {\n                this.to = this.cursor.from;\n                this.endSide = this.cursor.startSide;\n                break;\n            }\n            else {\n                let nextVal = this.cursor.value;\n                if (!nextVal.point) { // Opening a range\n                    this.addActive(trackOpen);\n                    this.cursor.next();\n                }\n                else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {\n                    // Ignore any non-empty points that end precisely at the end of the prev point\n                    this.cursor.next();\n                }\n                else { // New point\n                    this.point = nextVal;\n                    this.pointFrom = this.cursor.from;\n                    this.pointRank = this.cursor.rank;\n                    this.to = this.cursor.to;\n                    this.endSide = nextVal.endSide;\n                    this.cursor.next();\n                    this.forward(this.to, this.endSide);\n                    break;\n                }\n            }\n        }\n        if (trackOpen) {\n            this.openStart = 0;\n            for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)\n                this.openStart++;\n        }\n    }\n    activeForPoint(to) {\n        if (!this.active.length)\n            return this.active;\n        let active = [];\n        for (let i = this.active.length - 1; i >= 0; i--) {\n            if (this.activeRank[i] < this.pointRank)\n                break;\n            if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)\n                active.push(this.active[i]);\n        }\n        return active.reverse();\n    }\n    openEnd(to) {\n        let open = 0;\n        for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)\n            open++;\n        return open;\n    }\n}\nfunction compare(a, startA, b, startB, length, comparator) {\n    a.goto(startA);\n    b.goto(startB);\n    let endB = startB + length;\n    let pos = startB, dPos = startB - startA;\n    for (;;) {\n        let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;\n        let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);\n        if (a.point || b.point) {\n            if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&\n                sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))\n                comparator.comparePoint(pos, clipEnd, a.point, b.point);\n        }\n        else {\n            if (clipEnd > pos && !sameValues(a.active, b.active))\n                comparator.compareRange(pos, clipEnd, a.active, b.active);\n        }\n        if (end > endB)\n            break;\n        pos = end;\n        if (diff <= 0)\n            a.next();\n        if (diff >= 0)\n            b.next();\n    }\n}\nfunction sameValues(a, b) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (a[i] != b[i] && !a[i].eq(b[i]))\n            return false;\n    return true;\n}\nfunction remove(array, index) {\n    for (let i = index, e = array.length - 1; i < e; i++)\n        array[i] = array[i + 1];\n    array.pop();\n}\nfunction insert(array, index, value) {\n    for (let i = array.length - 1; i >= index; i--)\n        array[i + 1] = array[i];\n    array[index] = value;\n}\nfunction findMinIndex(value, array) {\n    let found = -1, foundPos = 1000000000 /* C.Far */;\n    for (let i = 0; i < array.length; i++)\n        if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {\n            found = i;\n            foundPos = array[i];\n        }\n    return found;\n}\n\n/**\nCount the column position at the given offset into the string,\ntaking extending characters and tab size into account.\n*/\nfunction countColumn(string, tabSize, to = string.length) {\n    let n = 0;\n    for (let i = 0; i < to;) {\n        if (string.charCodeAt(i) == 9) {\n            n += tabSize - (n % tabSize);\n            i++;\n        }\n        else {\n            n++;\n            i = findClusterBreak(string, i);\n        }\n    }\n    return n;\n}\n/**\nFind the offset that corresponds to the given column position in a\nstring, taking extending characters and tab size into account. By\ndefault, the string length is returned when it is too short to\nreach the column. Pass `strict` true to make it return -1 in that\nsituation.\n*/\nfunction findColumn(string, col, tabSize, strict) {\n    for (let i = 0, n = 0;;) {\n        if (n >= col)\n            return i;\n        if (i == string.length)\n            break;\n        n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;\n        i = findClusterBreak(string, i);\n    }\n    return strict === true ? -1 : string.length;\n}\n\nexport { Annotation, AnnotationType, ChangeDesc, ChangeSet, CharCategory, Compartment, EditorSelection, EditorState, Facet, Line, MapMode, Prec, Range, RangeSet, RangeSetBuilder, RangeValue, SelectionRange, StateEffect, StateEffectType, StateField, Text, Transaction, codePointAt, codePointSize, combineConfig, countColumn, findClusterBreak, findColumn, fromCodePoint };\n","const C = \"\\u037c\"\nconst COUNT = typeof Symbol == \"undefined\" ? \"__\" + C : Symbol.for(C)\nconst SET = typeof Symbol == \"undefined\" ? \"__styleSet\" + Math.floor(Math.random() * 1e8) : Symbol(\"styleSet\")\nconst top = typeof globalThis != \"undefined\" ? globalThis : typeof window != \"undefined\" ? window : {}\n\n// :: - Style modules encapsulate a set of CSS rules defined from\n// JavaScript. Their definitions are only available in a given DOM\n// root after it has been _mounted_ there with `StyleModule.mount`.\n//\n// Style modules should be created once and stored somewhere, as\n// opposed to re-creating them every time you need them. The amount of\n// CSS rules generated for a given DOM root is bounded by the amount\n// of style modules that were used. So to avoid leaking rules, don't\n// create these dynamically, but treat them as one-time allocations.\nexport class StyleModule {\n  // :: (Object<Style>, ?{finish: ?(string) → string})\n  // Create a style module from the given spec.\n  //\n  // When `finish` is given, it is called on regular (non-`@`)\n  // selectors (after `&` expansion) to compute the final selector.\n  constructor(spec, options) {\n    this.rules = []\n    let {finish} = options || {}\n\n    function splitSelector(selector) {\n      return /^@/.test(selector) ? [selector] : selector.split(/,\\s*/)\n    }\n\n    function render(selectors, spec, target, isKeyframes) {\n      let local = [], isAt = /^@(\\w+)\\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == \"keyframes\"\n      if (isAt && spec == null) return target.push(selectors[0] + \";\")\n      for (let prop in spec) {\n        let value = spec[prop]\n        if (/&/.test(prop)) {\n          render(prop.split(/,\\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),\n                 value, target)\n        } else if (value && typeof value == \"object\") {\n          if (!isAt) throw new RangeError(\"The value of a property (\" + prop + \") should be a primitive value.\")\n          render(splitSelector(prop), value, local, keyframes)\n        } else if (value != null) {\n          local.push(prop.replace(/_.*/, \"\").replace(/[A-Z]/g, l => \"-\" + l.toLowerCase()) + \": \" + value + \";\")\n        }\n      }\n      if (local.length || keyframes) {\n        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(\", \") +\n                    \" {\" + local.join(\" \") + \"}\")\n      }\n    }\n\n    for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules)\n  }\n\n  // :: () → string\n  // Returns a string containing the module's CSS rules.\n  getRules() { return this.rules.join(\"\\n\") }\n\n  // :: () → string\n  // Generate a new unique CSS class name.\n  static newName() {\n    let id = top[COUNT] || 1\n    top[COUNT] = id + 1\n    return C + id.toString(36)\n  }\n\n  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)\n  //\n  // Mount the given set of modules in the given DOM root, which ensures\n  // that the CSS rules defined by the module are available in that\n  // context.\n  //\n  // Rules are only added to the document once per root.\n  //\n  // Rule order will follow the order of the modules, so that rules from\n  // modules later in the array take precedence of those from earlier\n  // modules. If you call this function multiple times for the same root\n  // in a way that changes the order of already mounted modules, the old\n  // order will be changed.\n  static mount(root, modules) {\n    (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules])\n  }\n}\n\nlet adoptedSet = new Map //<Document, StyleSet>\n\nclass StyleSet {\n  constructor(root) {\n    let doc = root.ownerDocument || root, win = doc.defaultView\n    if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {\n      let adopted = adoptedSet.get(doc)\n      if (adopted) {\n        root.adoptedStyleSheets = [adopted.sheet, ...root.adoptedStyleSheets]\n        return root[SET] = adopted\n      }\n      this.sheet = new win.CSSStyleSheet\n      root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets]\n      adoptedSet.set(doc, this)\n    } else {\n      this.styleTag = doc.createElement(\"style\")\n      let target = root.head || root\n      target.insertBefore(this.styleTag, target.firstChild)\n    }\n    this.modules = []\n    root[SET] = this\n  }\n\n  mount(modules) {\n    let sheet = this.sheet\n    let pos = 0 /* Current rule offset */, j = 0 /* Index into this.modules */\n    for (let i = 0; i < modules.length; i++) {\n      let mod = modules[i], index = this.modules.indexOf(mod)\n      if (index < j && index > -1) { // Ordering conflict\n        this.modules.splice(index, 1)\n        j--\n        index = -1\n      }\n      if (index == -1) {\n        this.modules.splice(j++, 0, mod)\n        if (sheet) for (let k = 0; k < mod.rules.length; k++)\n          sheet.insertRule(mod.rules[k], pos++)\n      } else {\n        while (j < index) pos += this.modules[j++].rules.length\n        pos += mod.rules.length\n        j++\n      }\n    }\n\n    if (!sheet) {\n      let text = \"\"\n      for (let i = 0; i < this.modules.length; i++)\n        text += this.modules[i].getRules() + \"\\n\"\n      this.styleTag.textContent = text\n    }\n  }\n}\n\n// Style::Object<union<Style,string>>\n//\n// A style is an object that, in the simple case, maps CSS property\n// names to strings holding their values, as in `{color: \"red\",\n// fontWeight: \"bold\"}`. The property names can be given in\n// camel-case—the library will insert a dash before capital letters\n// when converting them to CSS.\n//\n// If you include an underscore in a property name, it and everything\n// after it will be removed from the output, which can be useful when\n// providing a property multiple times, for browser compatibility\n// reasons.\n//\n// A property in a style object can also be a sub-selector, which\n// extends the current context to add a pseudo-selector or a child\n// selector. Such a property should contain a `&` character, which\n// will be replaced by the current selector. For example `{\"&:before\":\n// {content: '\"hi\"'}}`. Sub-selectors and regular properties can\n// freely be mixed in a given object. Any property containing a `&` is\n// assumed to be a sub-selector.\n//\n// Finally, a property can specify an @-block to be wrapped around the\n// styles defined inside the object that's the property's value. For\n// example to create a media query you can do `{\"@media screen and\n// (min-width: 400px)\": {...}}`.\n","export var base = {\n  8: \"Backspace\",\n  9: \"Tab\",\n  10: \"Enter\",\n  12: \"NumLock\",\n  13: \"Enter\",\n  16: \"Shift\",\n  17: \"Control\",\n  18: \"Alt\",\n  20: \"CapsLock\",\n  27: \"Escape\",\n  32: \" \",\n  33: \"PageUp\",\n  34: \"PageDown\",\n  35: \"End\",\n  36: \"Home\",\n  37: \"ArrowLeft\",\n  38: \"ArrowUp\",\n  39: \"ArrowRight\",\n  40: \"ArrowDown\",\n  44: \"PrintScreen\",\n  45: \"Insert\",\n  46: \"Delete\",\n  59: \";\",\n  61: \"=\",\n  91: \"Meta\",\n  92: \"Meta\",\n  106: \"*\",\n  107: \"+\",\n  108: \",\",\n  109: \"-\",\n  110: \".\",\n  111: \"/\",\n  144: \"NumLock\",\n  145: \"ScrollLock\",\n  160: \"Shift\",\n  161: \"Shift\",\n  162: \"Control\",\n  163: \"Control\",\n  164: \"Alt\",\n  165: \"Alt\",\n  173: \"-\",\n  186: \";\",\n  187: \"=\",\n  188: \",\",\n  189: \"-\",\n  190: \".\",\n  191: \"/\",\n  192: \"`\",\n  219: \"[\",\n  220: \"\\\\\",\n  221: \"]\",\n  222: \"'\"\n}\n\nexport var shift = {\n  48: \")\",\n  49: \"!\",\n  50: \"@\",\n  51: \"#\",\n  52: \"$\",\n  53: \"%\",\n  54: \"^\",\n  55: \"&\",\n  56: \"*\",\n  57: \"(\",\n  59: \":\",\n  61: \"+\",\n  173: \"_\",\n  186: \":\",\n  187: \"+\",\n  188: \"<\",\n  189: \"_\",\n  190: \">\",\n  191: \"?\",\n  192: \"~\",\n  219: \"{\",\n  220: \"|\",\n  221: \"}\",\n  222: \"\\\"\"\n}\n\nvar mac = typeof navigator != \"undefined\" && /Mac/.test(navigator.platform)\nvar ie = typeof navigator != \"undefined\" && /MSIE \\d|Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent)\n\n// Fill in the digit keys\nfor (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i)\n\n// The function keys\nfor (var i = 1; i <= 24; i++) base[i + 111] = \"F\" + i\n\n// And the alphabetic keys\nfor (var i = 65; i <= 90; i++) {\n  base[i] = String.fromCharCode(i + 32)\n  shift[i] = String.fromCharCode(i)\n}\n\n// For each code that doesn't have a shift-equivalent, copy the base name\nfor (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code]\n\nexport function keyName(event) {\n  // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.\n  // On IE, shift effect is never included in `.key`.\n  var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||\n      ie && event.shiftKey && event.key && event.key.length == 1 ||\n      event.key == \"Unidentified\"\n  var name = (!ignoreKey && event.key) ||\n    (event.shiftKey ? shift : base)[event.keyCode] ||\n    event.key || \"Unidentified\"\n  // Edge sometimes produces wrong names (Issue #3)\n  if (name == \"Esc\") name = \"Escape\"\n  if (name == \"Del\") name = \"Delete\"\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n  if (name == \"Left\") name = \"ArrowLeft\"\n  if (name == \"Up\") name = \"ArrowUp\"\n  if (name == \"Right\") name = \"ArrowRight\"\n  if (name == \"Down\") name = \"ArrowDown\"\n  return name\n}\n","import { lineNumbers, highlightActiveLineGutter, highlightSpecialChars, drawSelection, dropCursor, rectangularSelection, crosshairCursor, highlightActiveLine, keymap } from '@codemirror/view';\nexport { EditorView } from '@codemirror/view';\nimport { EditorState } from '@codemirror/state';\nimport { foldGutter, indentOnInput, syntaxHighlighting, defaultHighlightStyle, bracketMatching, foldKeymap } from '@codemirror/language';\nimport { history, defaultKeymap, historyKeymap } from '@codemirror/commands';\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search';\nimport { closeBrackets, autocompletion, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete';\nimport { lintKeymap } from '@codemirror/lint';\n\n// (The superfluous function calls around the list of extensions work\n// around current limitations in tree-shaking software.)\n/**\nThis is an extension value that just pulls together a number of\nextensions that you might want in a basic editor. It is meant as a\nconvenient helper to quickly set up CodeMirror without installing\nand importing a lot of separate packages.\n\nSpecifically, it includes...\n\n - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)\n - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)\n - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)\n - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)\n - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)\n - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)\n - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)\n - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\n - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)\n - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)\n - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)\n - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)\n - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)\n - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)\n - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)\n - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)\n - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)\n - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)\n - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)\n\n(You'll probably want to add some language package to your setup\ntoo.)\n\nThis extension does not allow customization. The idea is that,\nonce you decide you want to configure your editor more precisely,\nyou take this package's source (which is just a bunch of imports\nand an array literal), copy it into your own code, and adjust it\nas desired.\n*/\nconst basicSetup = /*@__PURE__*/(() => [\n    lineNumbers(),\n    highlightActiveLineGutter(),\n    highlightSpecialChars(),\n    history(),\n    foldGutter(),\n    drawSelection(),\n    dropCursor(),\n    EditorState.allowMultipleSelections.of(true),\n    indentOnInput(),\n    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n    bracketMatching(),\n    closeBrackets(),\n    autocompletion(),\n    rectangularSelection(),\n    crosshairCursor(),\n    highlightActiveLine(),\n    highlightSelectionMatches(),\n    keymap.of([\n        ...closeBracketsKeymap,\n        ...defaultKeymap,\n        ...searchKeymap,\n        ...historyKeymap,\n        ...foldKeymap,\n        ...completionKeymap,\n        ...lintKeymap\n    ])\n])();\n/**\nA minimal set of extensions to create a functional editor. Only\nincludes [the default keymap](https://codemirror.net/6/docs/ref/#commands.defaultKeymap), [undo\nhistory](https://codemirror.net/6/docs/ref/#commands.history), [special character\nhighlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars), [custom selection\ndrawing](https://codemirror.net/6/docs/ref/#view.drawSelection), and [default highlight\nstyle](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle).\n*/\nconst minimalSetup = /*@__PURE__*/(() => [\n    highlightSpecialChars(),\n    history(),\n    drawSelection(),\n    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n    keymap.of([\n        ...defaultKeymap,\n        ...historyKeymap,\n    ])\n])();\n\nexport { basicSetup, minimalSetup };\n","import { NodeProp, Tree, IterMode, TreeFragment, Parser, NodeType, NodeSet } from '@lezer/common';\nimport { StateEffect, StateField, Facet, EditorState, countColumn, combineConfig, RangeSet, RangeSetBuilder, Prec } from '@codemirror/state';\nimport { ViewPlugin, logException, EditorView, Decoration, WidgetType, gutter, GutterMarker } from '@codemirror/view';\nimport { tags, tagHighlighter, highlightTree, styleTags } from '@lezer/highlight';\nimport { StyleModule } from 'style-mod';\n\nvar _a;\n/**\nNode prop stored in a parser's top syntax node to provide the\nfacet that stores language-specific data for that language.\n*/\nconst languageDataProp = /*@__PURE__*/new NodeProp();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/\nfunction defineLanguageFacet(baseData) {\n    return Facet.define({\n        combine: baseData ? values => values.concat(baseData) : undefined\n    });\n}\n/**\nSyntax node prop used to register sublanguages. Should be added to\nthe top level node type for the language.\n*/\nconst sublanguageProp = /*@__PURE__*/new NodeProp();\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. The class\ncan be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)\nsubclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or\nvia the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass\nfor stream parsers.\n*/\nclass Language {\n    /**\n    Construct a language object. If you need to invoke this\n    directly, first define a data facet with\n    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then\n    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it\n    to the language's outer syntax node.\n    */\n    constructor(\n    /**\n    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet\n    used for this language.\n    */\n    data, parser, extraExtensions = [], \n    /**\n    A language name.\n    */\n    name = \"\") {\n        this.data = data;\n        this.name = name;\n        // Kludge to define EditorState.tree as a debugging helper,\n        // without the EditorState package actually knowing about\n        // languages and lezer trees.\n        if (!EditorState.prototype.hasOwnProperty(\"tree\"))\n            Object.defineProperty(EditorState.prototype, \"tree\", { get() { return syntaxTree(this); } });\n        this.parser = parser;\n        this.extension = [\n            language.of(this),\n            EditorState.languageData.of((state, pos, side) => {\n                let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);\n                if (!data)\n                    return [];\n                let base = state.facet(data), sub = top.type.prop(sublanguageProp);\n                if (sub) {\n                    let innerNode = top.resolve(pos - top.from, side);\n                    for (let sublang of sub)\n                        if (sublang.test(innerNode, state)) {\n                            let data = state.facet(sublang.facet);\n                            return sublang.type == \"replace\" ? data : data.concat(base);\n                        }\n                }\n                return base;\n            })\n        ].concat(extraExtensions);\n    }\n    /**\n    Query whether this language is active at the given position.\n    */\n    isActiveAt(state, pos, side = -1) {\n        return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;\n    }\n    /**\n    Find the document regions that were parsed using this language.\n    The returned regions will _include_ any nested languages rooted\n    in this language, when those exist.\n    */\n    findRegions(state) {\n        let lang = state.facet(language);\n        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)\n            return [{ from: 0, to: state.doc.length }];\n        if (!lang || !lang.allowsNesting)\n            return [];\n        let result = [];\n        let explore = (tree, from) => {\n            if (tree.prop(languageDataProp) == this.data) {\n                result.push({ from, to: from + tree.length });\n                return;\n            }\n            let mount = tree.prop(NodeProp.mounted);\n            if (mount) {\n                if (mount.tree.prop(languageDataProp) == this.data) {\n                    if (mount.overlay)\n                        for (let r of mount.overlay)\n                            result.push({ from: r.from + from, to: r.to + from });\n                    else\n                        result.push({ from: from, to: from + tree.length });\n                    return;\n                }\n                else if (mount.overlay) {\n                    let size = result.length;\n                    explore(mount.tree, mount.overlay[0].from + from);\n                    if (result.length > size)\n                        return;\n                }\n            }\n            for (let i = 0; i < tree.children.length; i++) {\n                let ch = tree.children[i];\n                if (ch instanceof Tree)\n                    explore(ch, tree.positions[i] + from);\n            }\n        };\n        explore(syntaxTree(state), 0);\n        return result;\n    }\n    /**\n    Indicates whether this language allows nested languages. The\n    default implementation returns true.\n    */\n    get allowsNesting() { return true; }\n}\n/**\n@internal\n*/\nLanguage.setState = /*@__PURE__*/StateEffect.define();\nfunction topNodeAt(state, pos, side) {\n    let topLang = state.facet(language), tree = syntaxTree(state).topNode;\n    if (!topLang || topLang.allowsNesting) {\n        for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))\n            if (node.type.isTop)\n                tree = node;\n    }\n    return tree;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer\n[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)\nparsers.\n*/\nclass LRLanguage extends Language {\n    constructor(data, parser, name) {\n        super(data, parser, [], name);\n        this.parser = parser;\n    }\n    /**\n    Define a language from a parser.\n    */\n    static define(spec) {\n        let data = defineLanguageFacet(spec.languageData);\n        return new LRLanguage(data, spec.parser.configure({\n            props: [languageDataProp.add(type => type.isTop ? data : undefined)]\n        }), spec.name);\n    }\n    /**\n    Create a new instance of this language with a reconfigured\n    version of its parser and optionally a new name.\n    */\n    configure(options, name) {\n        return new LRLanguage(this.data, this.parser.configure(options), name || this.name);\n    }\n    get allowsNesting() { return this.parser.hasWrappers(); }\n}\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of the active\n[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no\nlanguage available.\n*/\nfunction syntaxTree(state) {\n    let field = state.field(Language.state, false);\n    return field ? field.tree : Tree.empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/\nfunction ensureSyntaxTree(state, upto, timeout = 50) {\n    var _a;\n    let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n    if (!parse)\n        return null;\n    let oldVieport = parse.viewport;\n    parse.updateViewport({ from: 0, to: upto });\n    let result = parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\n    parse.updateViewport(oldVieport);\n    return result;\n}\n/**\nQueries whether there is a full syntax tree available up to the\ngiven document position. If there isn't, the background parse\nprocess _might_ still be working and update the tree further, but\nthere is no guarantee of that—the parser will [stop\nworking](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a\ncertain amount of time or has moved beyond the visible viewport.\nAlways returns false if no language has been enabled.\n*/\nfunction syntaxTreeAvailable(state, upto = state.doc.length) {\n    var _a;\n    return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\n}\n/**\nMove parsing forward, and update the editor state afterwards to\nreflect the new tree. Will work for at most `timeout`\nmilliseconds. Returns true if the parser managed get to the given\nposition in that time.\n*/\nfunction forceParsing(view, upto = view.viewport.to, timeout = 100) {\n    let success = ensureSyntaxTree(view.state, upto, timeout);\n    if (success != syntaxTree(view.state))\n        view.dispatch({});\n    return !!success;\n}\n/**\nTells you whether the language parser is planning to do more\nparsing work (in a `requestIdleCallback` pseudo-thread) or has\nstopped running, either because it parsed the entire document,\nbecause it spent too much time and was cut off, or because there\nis no language parser enabled.\n*/\nfunction syntaxParserRunning(view) {\n    var _a;\n    return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\n}\n/**\nLezer-style\n[`Input`](https://lezer.codemirror.net/docs/ref#common.Input)\nobject for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.\n*/\nclass DocInput {\n    /**\n    Create an input object for the given document.\n    */\n    constructor(doc) {\n        this.doc = doc;\n        this.cursorPos = 0;\n        this.string = \"\";\n        this.cursor = doc.iter();\n    }\n    get length() { return this.doc.length; }\n    syncTo(pos) {\n        this.string = this.cursor.next(pos - this.cursorPos).value;\n        this.cursorPos = pos + this.string.length;\n        return this.cursorPos - this.string.length;\n    }\n    chunk(pos) {\n        this.syncTo(pos);\n        return this.string;\n    }\n    get lineChunks() { return true; }\n    read(from, to) {\n        let stringStart = this.cursorPos - this.string.length;\n        if (from < stringStart || to >= this.cursorPos)\n            return this.doc.sliceString(from, to);\n        else\n            return this.string.slice(from - stringStart, to - stringStart);\n    }\n}\nlet currentContext = null;\n/**\nA parse context provided to parsers working on the editor content.\n*/\nclass ParseContext {\n    constructor(parser, \n    /**\n    The current editor state.\n    */\n    state, \n    /**\n    Tree fragments that can be reused by incremental re-parses.\n    */\n    fragments = [], \n    /**\n    @internal\n    */\n    tree, \n    /**\n    @internal\n    */\n    treeLen, \n    /**\n    The current editor viewport (or some overapproximation\n    thereof). Intended to be used for opportunistically avoiding\n    work (in which case\n    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)\n    should be called to make sure the parser is restarted when the\n    skipped region becomes visible).\n    */\n    viewport, \n    /**\n    @internal\n    */\n    skipped, \n    /**\n    This is where skipping parsers can register a promise that,\n    when resolved, will schedule a new parse. It is cleared when\n    the parse worker picks up the promise. @internal\n    */\n    scheduleOn) {\n        this.parser = parser;\n        this.state = state;\n        this.fragments = fragments;\n        this.tree = tree;\n        this.treeLen = treeLen;\n        this.viewport = viewport;\n        this.skipped = skipped;\n        this.scheduleOn = scheduleOn;\n        this.parse = null;\n        /**\n        @internal\n        */\n        this.tempSkipped = [];\n    }\n    /**\n    @internal\n    */\n    static create(parser, state, viewport) {\n        return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);\n    }\n    startParse() {\n        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\n    }\n    /**\n    @internal\n    */\n    work(until, upto) {\n        if (upto != null && upto >= this.state.doc.length)\n            upto = undefined;\n        if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\n            this.takeTree();\n            return true;\n        }\n        return this.withContext(() => {\n            var _a;\n            if (typeof until == \"number\") {\n                let endTime = Date.now() + until;\n                until = () => Date.now() > endTime;\n            }\n            if (!this.parse)\n                this.parse = this.startParse();\n            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&\n                upto < this.state.doc.length)\n                this.parse.stopAt(upto);\n            for (;;) {\n                let done = this.parse.advance();\n                if (done) {\n                    this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));\n                    this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;\n                    this.tree = done;\n                    this.parse = null;\n                    if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))\n                        this.parse = this.startParse();\n                    else\n                        return true;\n                }\n                if (until())\n                    return false;\n            }\n        });\n    }\n    /**\n    @internal\n    */\n    takeTree() {\n        let pos, tree;\n        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\n            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)\n                this.parse.stopAt(pos);\n            this.withContext(() => { while (!(tree = this.parse.advance())) { } });\n            this.treeLen = pos;\n            this.tree = tree;\n            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n            this.parse = null;\n        }\n    }\n    withContext(f) {\n        let prev = currentContext;\n        currentContext = this;\n        try {\n            return f();\n        }\n        finally {\n            currentContext = prev;\n        }\n    }\n    withoutTempSkipped(fragments) {\n        for (let r; r = this.tempSkipped.pop();)\n            fragments = cutFragments(fragments, r.from, r.to);\n        return fragments;\n    }\n    /**\n    @internal\n    */\n    changes(changes, newState) {\n        let { fragments, tree, treeLen, viewport, skipped } = this;\n        this.takeTree();\n        if (!changes.empty) {\n            let ranges = [];\n            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));\n            fragments = TreeFragment.applyChanges(fragments, ranges);\n            tree = Tree.empty;\n            treeLen = 0;\n            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };\n            if (this.skipped.length) {\n                skipped = [];\n                for (let r of this.skipped) {\n                    let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);\n                    if (from < to)\n                        skipped.push({ from, to });\n                }\n            }\n        }\n        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\n    }\n    /**\n    @internal\n    */\n    updateViewport(viewport) {\n        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)\n            return false;\n        this.viewport = viewport;\n        let startLen = this.skipped.length;\n        for (let i = 0; i < this.skipped.length; i++) {\n            let { from, to } = this.skipped[i];\n            if (from < viewport.to && to > viewport.from) {\n                this.fragments = cutFragments(this.fragments, from, to);\n                this.skipped.splice(i--, 1);\n            }\n        }\n        if (this.skipped.length >= startLen)\n            return false;\n        this.reset();\n        return true;\n    }\n    /**\n    @internal\n    */\n    reset() {\n        if (this.parse) {\n            this.takeTree();\n            this.parse = null;\n        }\n    }\n    /**\n    Notify the parse scheduler that the given region was skipped\n    because it wasn't in view, and the parse should be restarted\n    when it comes into view.\n    */\n    skipUntilInView(from, to) {\n        this.skipped.push({ from, to });\n    }\n    /**\n    Returns a parser intended to be used as placeholder when\n    asynchronously loading a nested parser. It'll skip its input and\n    mark it as not-really-parsed, so that the next update will parse\n    it again.\n    \n    When `until` is given, a reparse will be scheduled when that\n    promise resolves.\n    */\n    static getSkippingParser(until) {\n        return new class extends Parser {\n            createParse(input, fragments, ranges) {\n                let from = ranges[0].from, to = ranges[ranges.length - 1].to;\n                let parser = {\n                    parsedPos: from,\n                    advance() {\n                        let cx = currentContext;\n                        if (cx) {\n                            for (let r of ranges)\n                                cx.tempSkipped.push(r);\n                            if (until)\n                                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\n                        }\n                        this.parsedPos = to;\n                        return new Tree(NodeType.none, [], [], to - from);\n                    },\n                    stoppedAt: null,\n                    stopAt() { }\n                };\n                return parser;\n            }\n        };\n    }\n    /**\n    @internal\n    */\n    isDone(upto) {\n        upto = Math.min(upto, this.state.doc.length);\n        let frags = this.fragments;\n        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\n    }\n    /**\n    Get the context for the current parse, or `null` if no editor\n    parse is in progress.\n    */\n    static get() { return currentContext; }\n}\nfunction cutFragments(fragments, from, to) {\n    return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);\n}\nclass LanguageState {\n    constructor(\n    // A mutable parse state that is used to preserve work done during\n    // the lifetime of a state when moving to the next state.\n    context) {\n        this.context = context;\n        this.tree = context.tree;\n    }\n    apply(tr) {\n        if (!tr.docChanged && this.tree == this.context.tree)\n            return this;\n        let newCx = this.context.changes(tr.changes, tr.state);\n        // If the previous parse wasn't done, go forward only up to its\n        // end position or the end of the viewport, to avoid slowing down\n        // state updates with parse work beyond the viewport.\n        let upto = this.context.treeLen == tr.startState.doc.length ? undefined\n            : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\n        if (!newCx.work(20 /* Apply */, upto))\n            newCx.takeTree();\n        return new LanguageState(newCx);\n    }\n    static init(state) {\n        let vpTo = Math.min(3000 /* InitViewport */, state.doc.length);\n        let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });\n        if (!parseState.work(20 /* Apply */, vpTo))\n            parseState.takeTree();\n        return new LanguageState(parseState);\n    }\n}\nLanguage.state = /*@__PURE__*/StateField.define({\n    create: LanguageState.init,\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(Language.setState))\n                return e.value;\n        if (tr.startState.facet(language) != tr.state.facet(language))\n            return LanguageState.init(tr.state);\n        return value.apply(tr);\n    }\n});\nlet requestIdle = (callback) => {\n    let timeout = setTimeout(() => callback(), 500 /* MaxPause */);\n    return () => clearTimeout(timeout);\n};\nif (typeof requestIdleCallback != \"undefined\")\n    requestIdle = (callback) => {\n        let idle = -1, timeout = setTimeout(() => {\n            idle = requestIdleCallback(callback, { timeout: 500 /* MaxPause */ - 100 /* MinPause */ });\n        }, 100 /* MinPause */);\n        return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\n    };\nconst isInputPending = typeof navigator != \"undefined\" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)\n    ? () => navigator.scheduling.isInputPending() : null;\nconst parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {\n    constructor(view) {\n        this.view = view;\n        this.working = null;\n        this.workScheduled = 0;\n        // End of the current time chunk\n        this.chunkEnd = -1;\n        // Milliseconds of budget left for this chunk\n        this.chunkBudget = -1;\n        this.work = this.work.bind(this);\n        this.scheduleWork();\n    }\n    update(update) {\n        let cx = this.view.state.field(Language.state).context;\n        if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)\n            this.scheduleWork();\n        if (update.docChanged) {\n            if (this.view.hasFocus)\n                this.chunkBudget += 50 /* ChangeBonus */;\n            this.scheduleWork();\n        }\n        this.checkAsyncSchedule(cx);\n    }\n    scheduleWork() {\n        if (this.working)\n            return;\n        let { state } = this.view, field = state.field(Language.state);\n        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))\n            this.working = requestIdle(this.work);\n    }\n    work(deadline) {\n        this.working = null;\n        let now = Date.now();\n        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk\n            this.chunkEnd = now + 30000 /* ChunkTime */;\n            this.chunkBudget = 3000 /* ChunkBudget */;\n        }\n        if (this.chunkBudget <= 0)\n            return; // No more budget\n        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);\n        if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* MaxParseAhead */))\n            return;\n        let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Slice */, deadline && !isInputPending ? Math.max(25 /* MinSlice */, deadline.timeRemaining() - 5) : 1e9);\n        let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\n        let done = field.context.work(() => {\n            return isInputPending && isInputPending() || Date.now() > endTime;\n        }, vpTo + (viewportFirst ? 0 : 100000 /* MaxParseAhead */));\n        this.chunkBudget -= Date.now() - now;\n        if (done || this.chunkBudget <= 0) {\n            field.context.takeTree();\n            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });\n        }\n        if (this.chunkBudget > 0 && !(done && !viewportFirst))\n            this.scheduleWork();\n        this.checkAsyncSchedule(field.context);\n    }\n    checkAsyncSchedule(cx) {\n        if (cx.scheduleOn) {\n            this.workScheduled++;\n            cx.scheduleOn\n                .then(() => this.scheduleWork())\n                .catch(err => logException(this.view.state, err))\n                .then(() => this.workScheduled--);\n            cx.scheduleOn = null;\n        }\n    }\n    destroy() {\n        if (this.working)\n            this.working();\n    }\n    isWorking() {\n        return !!(this.working || this.workScheduled > 0);\n    }\n}, {\n    eventHandlers: { focus() { this.scheduleWork(); } }\n});\n/**\nThe facet used to associate a language with an editor state. Used\nby `Language` object's `extension` property (so you don't need to\nmanually wrap your languages in this). Can be used to access the\ncurrent language on a state.\n*/\nconst language = /*@__PURE__*/Facet.define({\n    combine(languages) { return languages.length ? languages[0] : null; },\n    enables: language => [\n        Language.state,\n        parseWorker,\n        EditorView.contentAttributes.compute([language], state => {\n            let lang = state.facet(language);\n            return lang && lang.name ? { \"data-language\": lang.name } : {};\n        })\n    ]\n});\n/**\nThis class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/\nclass LanguageSupport {\n    /**\n    Create a language support object.\n    */\n    constructor(\n    /**\n    The language object.\n    */\n    language, \n    /**\n    An optional set of supporting extensions. When nesting a\n    language in another language, the outer language is encouraged\n    to include the supporting extensions for its inner languages\n    in its own set of support extensions.\n    */\n    support = []) {\n        this.language = language;\n        this.support = support;\n        this.extension = [language, support];\n    }\n}\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/\nclass LanguageDescription {\n    constructor(\n    /**\n    The name of this language.\n    */\n    name, \n    /**\n    Alternative names for the mode (lowercased, includes `this.name`).\n    */\n    alias, \n    /**\n    File extensions associated with this language.\n    */\n    extensions, \n    /**\n    Optional filename pattern that should be associated with this\n    language.\n    */\n    filename, loadFunc, \n    /**\n    If the language has been loaded, this will hold its value.\n    */\n    support = undefined) {\n        this.name = name;\n        this.alias = alias;\n        this.extensions = extensions;\n        this.filename = filename;\n        this.loadFunc = loadFunc;\n        this.support = support;\n        this.loading = null;\n    }\n    /**\n    Start loading the the language. Will return a promise that\n    resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n    object when the language successfully loads.\n    */\n    load() {\n        return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));\n    }\n    /**\n    Create a language description.\n    */\n    static of(spec) {\n        let { load, support } = spec;\n        if (!load) {\n            if (!support)\n                throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\n            load = () => Promise.resolve(support);\n        }\n        return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);\n    }\n    /**\n    Look for a language in the given array of descriptions that\n    matches the filename. Will first match\n    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n    and return the first language that matches.\n    */\n    static matchFilename(descs, filename) {\n        for (let d of descs)\n            if (d.filename && d.filename.test(filename))\n                return d;\n        let ext = /\\.([^.]+)$/.exec(filename);\n        if (ext)\n            for (let d of descs)\n                if (d.extensions.indexOf(ext[1]) > -1)\n                    return d;\n        return null;\n    }\n    /**\n    Look for a language whose name or alias matches the the given\n    name (case-insensitively). If `fuzzy` is true, and no direct\n    matchs is found, this'll also search for a language whose name\n    or alias occurs in the string (for names shorter than three\n    characters, only when surrounded by non-word characters).\n    */\n    static matchLanguageName(descs, name, fuzzy = true) {\n        name = name.toLowerCase();\n        for (let d of descs)\n            if (d.alias.some(a => a == name))\n                return d;\n        if (fuzzy)\n            for (let d of descs)\n                for (let a of d.alias) {\n                    let found = name.indexOf(a);\n                    if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length])))\n                        return d;\n                }\n        return null;\n    }\n}\n\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth, as a column number (see\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given\nline. A return value of `null` indicates no indentation can be\ndetermined, and the line should inherit the indentation of the one\nabove it. A return value of `undefined` defers to the next indent\nservice.\n*/\nconst indentService = /*@__PURE__*/Facet.define();\n/**\nFacet for overriding the unit by which indentation happens. Should\nbe a string consisting either entirely of the same whitespace\ncharacter. When not set, this defaults to 2 spaces.\n*/\nconst indentUnit = /*@__PURE__*/Facet.define({\n    combine: values => {\n        if (!values.length)\n            return \"  \";\n        let unit = values[0];\n        if (!unit || /\\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))\n            throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n        return unit;\n    }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/\nfunction getIndentUnit(state) {\n    let unit = state.facet(indentUnit);\n    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/\nfunction indentString(state, cols) {\n    let result = \"\", ts = state.tabSize, ch = state.facet(indentUnit)[0];\n    if (ch == \"\\t\") {\n        while (cols >= ts) {\n            result += \"\\t\";\n            cols -= ts;\n        }\n        ch = \" \";\n    }\n    for (let i = 0; i < cols; i++)\n        result += ch;\n    return result;\n}\n/**\nGet the indentation, as a column number, at the given position.\nWill first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)\nthat are registered, and if none of those return an indentation,\nthis will check the syntax tree for the [indent node\nprop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a\nnumber when an indentation could be determined, and null\notherwise.\n*/\nfunction getIndentation(context, pos) {\n    if (context instanceof EditorState)\n        context = new IndentContext(context);\n    for (let service of context.state.facet(indentService)) {\n        let result = service(context, pos);\n        if (result !== undefined)\n            return result;\n    }\n    let tree = syntaxTree(context.state);\n    return tree ? syntaxIndentation(context, tree, pos) : null;\n}\n/**\nCreate a change set that auto-indents all lines touched by the\ngiven document range.\n*/\nfunction indentRange(state, from, to) {\n    let updated = Object.create(null);\n    let context = new IndentContext(state, { overrideIndentation: start => { var _a; return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1; } });\n    let changes = [];\n    for (let pos = from; pos <= to;) {\n        let line = state.doc.lineAt(pos);\n        pos = line.to + 1;\n        let indent = getIndentation(context, line.from);\n        if (indent == null)\n            continue;\n        if (!/\\S/.test(line.text))\n            indent = 0;\n        let cur = /^\\s*/.exec(line.text)[0];\n        let norm = indentString(state, indent);\n        if (cur != norm) {\n            updated[line.from] = indent;\n            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n    }\n    return state.changes(changes);\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/\nclass IndentContext {\n    /**\n    Create an indent context.\n    */\n    constructor(\n    /**\n    The editor state.\n    */\n    state, \n    /**\n    @internal\n    */\n    options = {}) {\n        this.state = state;\n        this.options = options;\n        this.unit = getIndentUnit(state);\n    }\n    /**\n    Get a description of the line at the given position, taking\n    [simulated line\n    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    into account. If there is such a break at `pos`, the `bias`\n    argument determines whether the part of the line line before or\n    after the break is used.\n    */\n    lineAt(pos, bias = 1) {\n        let line = this.state.doc.lineAt(pos);\n        let { simulateBreak, simulateDoubleBreak } = this.options;\n        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\n            if (simulateDoubleBreak && simulateBreak == pos)\n                return { text: \"\", from: pos };\n            else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)\n                return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };\n            else\n                return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };\n        }\n        return line;\n    }\n    /**\n    Get the text directly after `pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    textAfterPos(pos, bias = 1) {\n        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)\n            return \"\";\n        let { text, from } = this.lineAt(pos, bias);\n        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\n    }\n    /**\n    Find the column for the given position.\n    */\n    column(pos, bias = 1) {\n        let { text, from } = this.lineAt(pos, bias);\n        let result = this.countColumn(text, pos - from);\n        let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\n        if (override > -1)\n            result += override - this.countColumn(text, text.search(/\\S|$/));\n        return result;\n    }\n    /**\n    Find the column position (taking tabs into account) of the given\n    position in the given string.\n    */\n    countColumn(line, pos = line.length) {\n        return countColumn(line, this.state.tabSize, pos);\n    }\n    /**\n    Find the indentation column of the line at the given point.\n    */\n    lineIndent(pos, bias = 1) {\n        let { text, from } = this.lineAt(pos, bias);\n        let override = this.options.overrideIndentation;\n        if (override) {\n            let overriden = override(from);\n            if (overriden > -1)\n                return overriden;\n        }\n        return this.countColumn(text, text.search(/\\S|$/));\n    }\n    /**\n    Returns the [simulated line\n    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    for this context, if any.\n    */\n    get simulatedBreak() {\n        return this.options.simulateBreak || null;\n    }\n}\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number (see also\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null\nindicates that no definitive indentation can be determined.\n*/\nconst indentNodeProp = /*@__PURE__*/new NodeProp();\n// Compute the indentation for a given position from the syntax tree.\nfunction syntaxIndentation(cx, ast, pos) {\n    return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);\n}\nfunction ignoreClosed(cx) {\n    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\n}\nfunction indentStrategy(tree) {\n    let strategy = tree.type.prop(indentNodeProp);\n    if (strategy)\n        return strategy;\n    let first = tree.firstChild, close;\n    if (first && (close = first.type.prop(NodeProp.closedBy))) {\n        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;\n        return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\n    }\n    return tree.parent == null ? topIndent : null;\n}\nfunction indentFrom(node, pos, base) {\n    for (; node; node = node.parent) {\n        let strategy = indentStrategy(node);\n        if (strategy)\n            return strategy(TreeIndentContext.create(base, pos, node));\n    }\n    return null;\n}\nfunction topIndent() { return 0; }\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions registered on syntax nodes.\n*/\nclass TreeIndentContext extends IndentContext {\n    constructor(base, \n    /**\n    The position at which indentation is being computed.\n    */\n    pos, \n    /**\n    The syntax tree node to which the indentation strategy\n    applies.\n    */\n    node) {\n        super(base.state, base.options);\n        this.base = base;\n        this.pos = pos;\n        this.node = node;\n    }\n    /**\n    @internal\n    */\n    static create(base, pos, node) {\n        return new TreeIndentContext(base, pos, node);\n    }\n    /**\n    Get the text directly after `this.pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    get textAfter() {\n        return this.textAfterPos(this.pos);\n    }\n    /**\n    Get the indentation at the reference line for `this.node`, which\n    is the line on which it starts, unless there is a node that is\n    _not_ a parent of this node covering the start of that line. If\n    so, the line at the start of that node is tried, again skipping\n    on if it is covered by another such node.\n    */\n    get baseIndent() {\n        return this.baseIndentFor(this.node);\n    }\n    /**\n    Get the indentation for the reference line of the given node\n    (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).\n    */\n    baseIndentFor(node) {\n        let line = this.state.doc.lineAt(node.from);\n        // Skip line starts that are covered by a sibling (or cousin, etc)\n        for (;;) {\n            let atBreak = node.resolve(line.from);\n            while (atBreak.parent && atBreak.parent.from == atBreak.from)\n                atBreak = atBreak.parent;\n            if (isParent(atBreak, node))\n                break;\n            line = this.state.doc.lineAt(atBreak.from);\n        }\n        return this.lineIndent(line.from);\n    }\n    /**\n    Continue looking for indentations in the node's parent nodes,\n    and return the result of that.\n    */\n    continue() {\n        let parent = this.node.parent;\n        return parent ? indentFrom(parent, this.pos, this.base) : 0;\n    }\n}\nfunction isParent(parent, of) {\n    for (let cur = of; cur; cur = cur.parent)\n        if (parent == cur)\n            return true;\n    return false;\n}\n// Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\nfunction bracketedAligned(context) {\n    let tree = context.node;\n    let openToken = tree.childAfter(tree.from), last = tree.lastChild;\n    if (!openToken)\n        return null;\n    let sim = context.options.simulateBreak;\n    let openLine = context.state.doc.lineAt(openToken.from);\n    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n    for (let pos = openToken.to;;) {\n        let next = tree.childAfter(pos);\n        if (!next || next == last)\n            return null;\n        if (!next.type.isSkipped)\n            return next.from < lineEnd ? openToken : null;\n        pos = next.to;\n    }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/\nfunction delimitedIndent({ closing, align = true, units = 1 }) {\n    return (context) => delimitedStrategy(context, align, units, closing);\n}\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\n    let after = context.textAfter, space = after.match(/^\\s*/)[0].length;\n    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n    let aligned = align ? bracketedAligned(context) : null;\n    if (aligned)\n        return closed ? context.column(aligned.from) : context.column(aligned.to);\n    return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/\nconst flatIndent = (context) => context.baseIndent;\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/\nfunction continuedIndent({ except, units = 1 } = {}) {\n    return (context) => {\n        let matchExcept = except && except.test(context.textAfter);\n        return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n    };\n}\nconst DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/\nfunction indentOnInput() {\n    return EditorState.transactionFilter.of(tr => {\n        if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\"))\n            return tr;\n        let rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n        if (!rules.length)\n            return tr;\n        let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);\n        if (head > line.from + DontIndentBeyond)\n            return tr;\n        let lineStart = doc.sliceString(line.from, head);\n        if (!rules.some(r => r.test(lineStart)))\n            return tr;\n        let { state } = tr, last = -1, changes = [];\n        for (let { head } of state.selection.ranges) {\n            let line = state.doc.lineAt(head);\n            if (line.from == last)\n                continue;\n            last = line.from;\n            let indent = getIndentation(state, line.from);\n            if (indent == null)\n                continue;\n            let cur = /^\\s*/.exec(line.text)[0];\n            let norm = indentString(state, indent);\n            if (cur != norm)\n                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n        return changes.length ? [tr, { changes, sequential: true }] : tr;\n    });\n}\n\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/\nconst foldService = /*@__PURE__*/Facet.define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/\nconst foldNodeProp = /*@__PURE__*/new NodeProp();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/\nfunction foldInside(node) {\n    let first = node.firstChild, last = node.lastChild;\n    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;\n}\nfunction syntaxFolding(state, start, end) {\n    let tree = syntaxTree(state);\n    if (tree.length < end)\n        return null;\n    let inner = tree.resolveInner(end, 1);\n    let found = null;\n    for (let cur = inner; cur; cur = cur.parent) {\n        if (cur.to <= end || cur.from > end)\n            continue;\n        if (found && cur.from < start)\n            break;\n        let prop = cur.type.prop(foldNodeProp);\n        if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {\n            let value = prop(cur, state);\n            if (value && value.from <= end && value.from >= start && value.to > end)\n                found = value;\n        }\n    }\n    return found;\n}\nfunction isUnfinished(node) {\n    let ch = node.lastChild;\n    return ch && ch.to == node.to && ch.type.isError;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/\nfunction foldable(state, lineStart, lineEnd) {\n    for (let service of state.facet(foldService)) {\n        let result = service(state, lineStart, lineEnd);\n        if (result)\n            return result;\n    }\n    return syntaxFolding(state, lineStart, lineEnd);\n}\nfunction mapRange(range, mapping) {\n    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);\n    return from >= to ? undefined : { from, to };\n}\n/**\nState effect that can be attached to a transaction to fold the\ngiven range. (You probably only need this in exceptional\ncircumstances—usually you'll just want to let\n[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold\ngutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)\n*/\nconst foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });\n/**\nState effect that unfolds the given range (if it was folded).\n*/\nconst unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });\nfunction selectedLines(view) {\n    let lines = [];\n    for (let { head } of view.state.selection.ranges) {\n        if (lines.some(l => l.from <= head && l.to >= head))\n            continue;\n        lines.push(view.lineBlockAt(head));\n    }\n    return lines;\n}\n/**\nThe state field that stores the folded ranges (as a [decoration\nset](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to\n[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and\n[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold\nstate.\n*/\nconst foldState = /*@__PURE__*/StateField.define({\n    create() {\n        return Decoration.none;\n    },\n    update(folded, tr) {\n        folded = folded.map(tr.changes);\n        for (let e of tr.effects) {\n            if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to))\n                folded = folded.update({ add: [foldWidget.range(e.value.from, e.value.to)] });\n            else if (e.is(unfoldEffect))\n                folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,\n                    filterFrom: e.value.from, filterTo: e.value.to });\n        }\n        // Clear folded ranges that cover the selection head\n        if (tr.selection) {\n            let onSelection = false, { head } = tr.selection.main;\n            folded.between(head, head, (a, b) => { if (a < head && b > head)\n                onSelection = true; });\n            if (onSelection)\n                folded = folded.update({\n                    filterFrom: head,\n                    filterTo: head,\n                    filter: (a, b) => b <= head || a >= head\n                });\n        }\n        return folded;\n    },\n    provide: f => EditorView.decorations.from(f),\n    toJSON(folded, state) {\n        let ranges = [];\n        folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });\n        return ranges;\n    },\n    fromJSON(value) {\n        if (!Array.isArray(value) || value.length % 2)\n            throw new RangeError(\"Invalid JSON for fold state\");\n        let ranges = [];\n        for (let i = 0; i < value.length;) {\n            let from = value[i++], to = value[i++];\n            if (typeof from != \"number\" || typeof to != \"number\")\n                throw new RangeError(\"Invalid JSON for fold state\");\n            ranges.push(foldWidget.range(from, to));\n        }\n        return Decoration.set(ranges, true);\n    }\n});\n/**\nGet a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges\nin the given state.\n*/\nfunction foldedRanges(state) {\n    return state.field(foldState, false) || RangeSet.empty;\n}\nfunction findFold(state, from, to) {\n    var _a;\n    let found = null;\n    (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {\n        if (!found || found.from > from)\n            found = { from, to };\n    });\n    return found;\n}\nfunction foldExists(folded, from, to) {\n    let found = false;\n    folded.between(from, from, (a, b) => { if (a == from && b == to)\n        found = true; });\n    return found;\n}\nfunction maybeEnable(state, other) {\n    return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));\n}\n/**\nFold the lines that are selected, if possible.\n*/\nconst foldCode = view => {\n    for (let line of selectedLines(view)) {\n        let range = foldable(view.state, line.from, line.to);\n        if (range) {\n            view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });\n            return true;\n        }\n    }\n    return false;\n};\n/**\nUnfold folded ranges on selected lines.\n*/\nconst unfoldCode = view => {\n    if (!view.state.field(foldState, false))\n        return false;\n    let effects = [];\n    for (let line of selectedLines(view)) {\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded)\n            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n    }\n    if (effects.length)\n        view.dispatch({ effects });\n    return effects.length > 0;\n};\nfunction announceFold(view, range, fold = true) {\n    let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;\n    return EditorView.announce.of(`${view.state.phrase(fold ? \"Folded lines\" : \"Unfolded lines\")} ${lineFrom} ${view.state.phrase(\"to\")} ${lineTo}.`);\n}\n/**\nFold all top-level foldable ranges. Note that, in most cases,\nfolding information will depend on the [syntax\ntree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work\nreliably when the document hasn't been fully parsed (either\nbecause the editor state was only just initialized, or because the\ndocument is so big that the parser decided not to parse it\nentirely).\n*/\nconst foldAll = view => {\n    let { state } = view, effects = [];\n    for (let pos = 0; pos < state.doc.length;) {\n        let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);\n        if (range)\n            effects.push(foldEffect.of(range));\n        pos = (range ? view.lineBlockAt(range.to) : line).to + 1;\n    }\n    if (effects.length)\n        view.dispatch({ effects: maybeEnable(view.state, effects) });\n    return !!effects.length;\n};\n/**\nUnfold all folded code.\n*/\nconst unfoldAll = view => {\n    let field = view.state.field(foldState, false);\n    if (!field || !field.size)\n        return false;\n    let effects = [];\n    field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });\n    view.dispatch({ effects });\n    return true;\n};\n// Find the foldable region containing the given line, if one exists\nfunction foldableContainer(view, lineBlock) {\n    // Look backwards through line blocks until we find a foldable region that\n    // intersects with the line\n    for (let line = lineBlock;;) {\n        let foldableRegion = foldable(view.state, line.from, line.to);\n        if (foldableRegion && foldableRegion.to > lineBlock.from)\n            return foldableRegion;\n        if (!line.from)\n            return null;\n        line = view.lineBlockAt(line.from - 1);\n    }\n}\n/**\nToggle folding at cursors. Unfolds if there is an existing fold\nstarting in that line, tries to find a foldable range around it\notherwise.\n*/\nconst toggleFold = (view) => {\n    let effects = [];\n    for (let line of selectedLines(view)) {\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded) {\n            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n        }\n        else {\n            let foldRange = foldableContainer(view, line);\n            if (foldRange)\n                effects.push(foldEffect.of(foldRange), announceFold(view, foldRange));\n        }\n    }\n    if (effects.length > 0)\n        view.dispatch({ effects: maybeEnable(view.state, effects) });\n    return !!effects.length;\n};\n/**\nDefault fold-related key bindings.\n\n - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).\n - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).\n - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).\n - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).\n*/\nconst foldKeymap = [\n    { key: \"Ctrl-Shift-[\", mac: \"Cmd-Alt-[\", run: foldCode },\n    { key: \"Ctrl-Shift-]\", mac: \"Cmd-Alt-]\", run: unfoldCode },\n    { key: \"Ctrl-Alt-[\", run: foldAll },\n    { key: \"Ctrl-Alt-]\", run: unfoldAll }\n];\nconst defaultConfig = {\n    placeholderDOM: null,\n    placeholderText: \"…\"\n};\nconst foldConfig = /*@__PURE__*/Facet.define({\n    combine(values) { return combineConfig(values, defaultConfig); }\n});\n/**\nCreate an extension that configures code folding.\n*/\nfunction codeFolding(config) {\n    let result = [foldState, baseTheme$1];\n    if (config)\n        result.push(foldConfig.of(config));\n    return result;\n}\nconst foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {\n        toDOM(view) {\n            let { state } = view, conf = state.facet(foldConfig);\n            let onclick = (event) => {\n                let line = view.lineBlockAt(view.posAtDOM(event.target));\n                let folded = findFold(view.state, line.from, line.to);\n                if (folded)\n                    view.dispatch({ effects: unfoldEffect.of(folded) });\n                event.preventDefault();\n            };\n            if (conf.placeholderDOM)\n                return conf.placeholderDOM(view, onclick);\n            let element = document.createElement(\"span\");\n            element.textContent = conf.placeholderText;\n            element.setAttribute(\"aria-label\", state.phrase(\"folded code\"));\n            element.title = state.phrase(\"unfold\");\n            element.className = \"cm-foldPlaceholder\";\n            element.onclick = onclick;\n            return element;\n        }\n    } });\nconst foldGutterDefaults = {\n    openText: \"⌄\",\n    closedText: \"›\",\n    markerDOM: null,\n    domEventHandlers: {},\n    foldingChanged: () => false\n};\nclass FoldMarker extends GutterMarker {\n    constructor(config, open) {\n        super();\n        this.config = config;\n        this.open = open;\n    }\n    eq(other) { return this.config == other.config && this.open == other.open; }\n    toDOM(view) {\n        if (this.config.markerDOM)\n            return this.config.markerDOM(this.open);\n        let span = document.createElement(\"span\");\n        span.textContent = this.open ? this.config.openText : this.config.closedText;\n        span.title = view.state.phrase(this.open ? \"Fold line\" : \"Unfold line\");\n        return span;\n    }\n}\n/**\nCreate an extension that registers a fold gutter, which shows a\nfold status indicator before foldable lines (which can be clicked\nto fold or unfold the line).\n*/\nfunction foldGutter(config = {}) {\n    let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);\n    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);\n    let markers = ViewPlugin.fromClass(class {\n        constructor(view) {\n            this.from = view.viewport.from;\n            this.markers = this.buildMarkers(view);\n        }\n        update(update) {\n            if (update.docChanged || update.viewportChanged ||\n                update.startState.facet(language) != update.state.facet(language) ||\n                update.startState.field(foldState, false) != update.state.field(foldState, false) ||\n                syntaxTree(update.startState) != syntaxTree(update.state) ||\n                fullConfig.foldingChanged(update))\n                this.markers = this.buildMarkers(update.view);\n        }\n        buildMarkers(view) {\n            let builder = new RangeSetBuilder();\n            for (let line of view.viewportLineBlocks) {\n                let mark = findFold(view.state, line.from, line.to) ? canUnfold\n                    : foldable(view.state, line.from, line.to) ? canFold : null;\n                if (mark)\n                    builder.add(line.from, line.from, mark);\n            }\n            return builder.finish();\n        }\n    });\n    let { domEventHandlers } = fullConfig;\n    return [\n        markers,\n        gutter({\n            class: \"cm-foldGutter\",\n            markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },\n            initialSpacer() {\n                return new FoldMarker(fullConfig, false);\n            },\n            domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {\n                    if (domEventHandlers.click && domEventHandlers.click(view, line, event))\n                        return true;\n                    let folded = findFold(view.state, line.from, line.to);\n                    if (folded) {\n                        view.dispatch({ effects: unfoldEffect.of(folded) });\n                        return true;\n                    }\n                    let range = foldable(view.state, line.from, line.to);\n                    if (range) {\n                        view.dispatch({ effects: foldEffect.of(range) });\n                        return true;\n                    }\n                    return false;\n                } })\n        }),\n        codeFolding()\n    ];\n}\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-foldPlaceholder\": {\n        backgroundColor: \"#eee\",\n        border: \"1px solid #ddd\",\n        color: \"#888\",\n        borderRadius: \".2em\",\n        margin: \"0 1px\",\n        padding: \"0 1px\",\n        cursor: \"pointer\"\n    },\n    \".cm-foldGutter span\": {\n        padding: \"0 1px\",\n        cursor: \"pointer\"\n    }\n});\n\n/**\nA highlight style associates CSS styles with higlighting\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).\n*/\nclass HighlightStyle {\n    constructor(\n    /**\n    The tag styles used to create this highlight style.\n    */\n    specs, options) {\n        this.specs = specs;\n        let modSpec;\n        function def(spec) {\n            let cls = StyleModule.newName();\n            (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\n            return cls;\n        }\n        const all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : undefined;\n        const scopeOpt = options.scope;\n        this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data\n            : scopeOpt ? (type) => type == scopeOpt : undefined;\n        this.style = tagHighlighter(specs.map(style => ({\n            tag: style.tag,\n            class: style.class || def(Object.assign({}, style, { tag: null }))\n        })), {\n            all,\n        }).style;\n        this.module = modSpec ? new StyleModule(modSpec) : null;\n        this.themeType = options.themeType;\n    }\n    /**\n    Create a highlighter style that associates the given styles to\n    the given tags. The specs must be objects that hold a style tag\n    or array of tags in their `tag` property, and either a single\n    `class` property providing a static CSS class (for highlighter\n    that rely on external styling), or a\n    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n    set of CSS properties (which define the styling for those tags).\n    \n    The CSS rules created for a highlighter will be emitted in the\n    order of the spec's properties. That means that for elements that\n    have multiple tags associated with them, styles defined further\n    down in the list will have a higher CSS precedence than styles\n    defined earlier.\n    */\n    static define(specs, options) {\n        return new HighlightStyle(specs, options || {});\n    }\n}\nconst highlighterFacet = /*@__PURE__*/Facet.define();\nconst fallbackHighlighter = /*@__PURE__*/Facet.define({\n    combine(values) { return values.length ? [values[0]] : null; }\n});\nfunction getHighlighters(state) {\n    let main = state.facet(highlighterFacet);\n    return main.length ? main : state.facet(fallbackHighlighter);\n}\n/**\nWrap a highlighter in an editor extension that uses it to apply\nsyntax highlighting to the editor content.\n\nWhen multiple (non-fallback) styles are provided, the styling\napplied is the union of the classes they emit.\n*/\nfunction syntaxHighlighting(highlighter, options) {\n    let ext = [treeHighlighter], themeType;\n    if (highlighter instanceof HighlightStyle) {\n        if (highlighter.module)\n            ext.push(EditorView.styleModule.of(highlighter.module));\n        themeType = highlighter.themeType;\n    }\n    if (options === null || options === void 0 ? void 0 : options.fallback)\n        ext.push(fallbackHighlighter.of(highlighter));\n    else if (themeType)\n        ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {\n            return state.facet(EditorView.darkTheme) == (themeType == \"dark\") ? [highlighter] : [];\n        }));\n    else\n        ext.push(highlighterFacet.of(highlighter));\n    return ext;\n}\n/**\nReturns the CSS classes (if any) that the highlighters active in\nthe state would assign to the given style\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and\n(optional) language\n[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).\n*/\nfunction highlightingFor(state, tags, scope) {\n    let highlighters = getHighlighters(state);\n    let result = null;\n    if (highlighters)\n        for (let highlighter of highlighters) {\n            if (!highlighter.scope || scope && highlighter.scope(scope)) {\n                let cls = highlighter.style(tags);\n                if (cls)\n                    result = result ? result + \" \" + cls : cls;\n            }\n        }\n    return result;\n}\nclass TreeHighlighter {\n    constructor(view) {\n        this.markCache = Object.create(null);\n        this.tree = syntaxTree(view.state);\n        this.decorations = this.buildDeco(view, getHighlighters(view.state));\n    }\n    update(update) {\n        let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);\n        let styleChange = highlighters != getHighlighters(update.startState);\n        if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {\n            this.decorations = this.decorations.map(update.changes);\n        }\n        else if (tree != this.tree || update.viewportChanged || styleChange) {\n            this.tree = tree;\n            this.decorations = this.buildDeco(update.view, highlighters);\n        }\n    }\n    buildDeco(view, highlighters) {\n        if (!highlighters || !this.tree.length)\n            return Decoration.none;\n        let builder = new RangeSetBuilder();\n        for (let { from, to } of view.visibleRanges) {\n            highlightTree(this.tree, highlighters, (from, to, style) => {\n                builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));\n            }, from, to);\n        }\n        return builder.finish();\n    }\n}\nconst treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {\n    decorations: v => v.decorations\n}));\n/**\nA default highlight style (works well with light themes).\n*/\nconst defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([\n    { tag: tags.meta,\n        color: \"#404740\" },\n    { tag: tags.link,\n        textDecoration: \"underline\" },\n    { tag: tags.heading,\n        textDecoration: \"underline\",\n        fontWeight: \"bold\" },\n    { tag: tags.emphasis,\n        fontStyle: \"italic\" },\n    { tag: tags.strong,\n        fontWeight: \"bold\" },\n    { tag: tags.strikethrough,\n        textDecoration: \"line-through\" },\n    { tag: tags.keyword,\n        color: \"#708\" },\n    { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],\n        color: \"#219\" },\n    { tag: [tags.literal, tags.inserted],\n        color: \"#164\" },\n    { tag: [tags.string, tags.deleted],\n        color: \"#a11\" },\n    { tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],\n        color: \"#e40\" },\n    { tag: /*@__PURE__*/tags.definition(tags.variableName),\n        color: \"#00f\" },\n    { tag: /*@__PURE__*/tags.local(tags.variableName),\n        color: \"#30a\" },\n    { tag: [tags.typeName, tags.namespace],\n        color: \"#085\" },\n    { tag: tags.className,\n        color: \"#167\" },\n    { tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],\n        color: \"#256\" },\n    { tag: /*@__PURE__*/tags.definition(tags.propertyName),\n        color: \"#00c\" },\n    { tag: tags.comment,\n        color: \"#940\" },\n    { tag: tags.invalid,\n        color: \"#f00\" }\n]);\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \"&.cm-focused .cm-matchingBracket\": { backgroundColor: \"#328c8252\" },\n    \"&.cm-focused .cm-nonmatchingBracket\": { backgroundColor: \"#bb555544\" }\n});\nconst DefaultScanDist = 10000, DefaultBrackets = \"()[]{}\";\nconst bracketMatchingConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            afterCursor: true,\n            brackets: DefaultBrackets,\n            maxScanDistance: DefaultScanDist,\n            renderMatch: defaultRenderMatch\n        });\n    }\n});\nconst matchingMark = /*@__PURE__*/Decoration.mark({ class: \"cm-matchingBracket\" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: \"cm-nonmatchingBracket\" });\nfunction defaultRenderMatch(match) {\n    let decorations = [];\n    let mark = match.matched ? matchingMark : nonmatchingMark;\n    decorations.push(mark.range(match.start.from, match.start.to));\n    if (match.end)\n        decorations.push(mark.range(match.end.from, match.end.to));\n    return decorations;\n}\nconst bracketMatchingState = /*@__PURE__*/StateField.define({\n    create() { return Decoration.none; },\n    update(deco, tr) {\n        if (!tr.docChanged && !tr.selection)\n            return deco;\n        let decorations = [];\n        let config = tr.state.facet(bracketMatchingConfig);\n        for (let range of tr.state.selection.ranges) {\n            if (!range.empty)\n                continue;\n            let match = matchBrackets(tr.state, range.head, -1, config)\n                || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))\n                || (config.afterCursor &&\n                    (matchBrackets(tr.state, range.head, 1, config) ||\n                        (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));\n            if (match)\n                decorations = decorations.concat(config.renderMatch(match, tr.state));\n        }\n        return Decoration.set(decorations, true);\n    },\n    provide: f => EditorView.decorations.from(f)\n});\nconst bracketMatchingUnique = [\n    bracketMatchingState,\n    baseTheme\n];\n/**\nCreate an extension that enables bracket matching. Whenever the\ncursor is next to a bracket, that bracket and the one it matches\nare highlighted. Or, when no matching bracket is found, another\nhighlighting style is used to indicate this.\n*/\nfunction bracketMatching(config = {}) {\n    return [bracketMatchingConfig.of(config), bracketMatchingUnique];\n}\n/**\nWhen larger syntax nodes, such as HTML tags, are marked as\nopening/closing, it can be a bit messy to treat the whole node as\na matchable bracket. This node prop allows you to define, for such\na node, a ‘handle’—the part of the node that is highlighted, and\nthat the cursor must be on to activate highlighting in the first\nplace.\n*/\nconst bracketMatchingHandle = /*@__PURE__*/new NodeProp();\nfunction matchingNodes(node, dir, brackets) {\n    let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);\n    if (byProp)\n        return byProp;\n    if (node.name.length == 1) {\n        let index = brackets.indexOf(node.name);\n        if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))\n            return [brackets[index + dir]];\n    }\n    return null;\n}\nfunction findHandle(node) {\n    let hasHandle = node.type.prop(bracketMatchingHandle);\n    return hasHandle ? hasHandle(node.node) : node;\n}\n/**\nFind the matching bracket for the token at `pos`, scanning\ndirection `dir`. Only the `brackets` and `maxScanDistance`\nproperties are used from `config`, if given. Returns null if no\nbracket was found at `pos`, or a match result otherwise.\n*/\nfunction matchBrackets(state, pos, dir, config = {}) {\n    let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;\n    let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);\n    for (let cur = node; cur; cur = cur.parent) {\n        let matches = matchingNodes(cur.type, dir, brackets);\n        if (matches && cur.from < cur.to) {\n            let handle = findHandle(cur);\n            if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))\n                return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);\n        }\n    }\n    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);\n}\nfunction matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {\n    let parent = token.parent, firstToken = { from: handle.from, to: handle.to };\n    let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();\n    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))\n        do {\n            if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {\n                if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {\n                    let endHandle = findHandle(cursor);\n                    return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };\n                }\n                else if (matchingNodes(cursor.type, dir, brackets)) {\n                    depth++;\n                }\n                else if (matchingNodes(cursor.type, -dir, brackets)) {\n                    if (depth == 0) {\n                        let endHandle = findHandle(cursor);\n                        return {\n                            start: firstToken,\n                            end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,\n                            matched: false\n                        };\n                    }\n                    depth--;\n                }\n            }\n        } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());\n    return { start: firstToken, matched: false };\n}\nfunction matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {\n    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);\n    let bracket = brackets.indexOf(startCh);\n    if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))\n        return null;\n    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };\n    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;\n    for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {\n        let text = iter.value;\n        if (dir < 0)\n            distance += text.length;\n        let basePos = pos + distance * dir;\n        for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {\n            let found = brackets.indexOf(text[pos]);\n            if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)\n                continue;\n            if ((found % 2 == 0) == (dir > 0)) {\n                depth++;\n            }\n            else if (depth == 1) { // Closing\n                return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };\n            }\n            else {\n                depth--;\n            }\n        }\n        if (dir > 0)\n            distance += text.length;\n    }\n    return iter.done ? { start: startToken, matched: false } : null;\n}\n\n// Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\nfunction countCol(string, end, tabSize, startIndex = 0, startValue = 0) {\n    if (end == null) {\n        end = string.search(/[^\\s\\u00a0]/);\n        if (end == -1)\n            end = string.length;\n    }\n    let n = startValue;\n    for (let i = startIndex; i < end; i++) {\n        if (string.charCodeAt(i) == 9)\n            n += tabSize - (n % tabSize);\n        else\n            n++;\n    }\n    return n;\n}\n/**\nEncapsulates a single line of input. Given to stream syntax code,\nwhich uses it to tokenize the content.\n*/\nclass StringStream {\n    /**\n    Create a stream.\n    */\n    constructor(\n    /**\n    The line.\n    */\n    string, tabSize, \n    /**\n    The current indent unit size.\n    */\n    indentUnit, overrideIndent) {\n        this.string = string;\n        this.tabSize = tabSize;\n        this.indentUnit = indentUnit;\n        this.overrideIndent = overrideIndent;\n        /**\n        The current position on the line.\n        */\n        this.pos = 0;\n        /**\n        The start position of the current token.\n        */\n        this.start = 0;\n        this.lastColumnPos = 0;\n        this.lastColumnValue = 0;\n    }\n    /**\n    True if we are at the end of the line.\n    */\n    eol() { return this.pos >= this.string.length; }\n    /**\n    True if we are at the start of the line.\n    */\n    sol() { return this.pos == 0; }\n    /**\n    Get the next code unit after the current position, or undefined\n    if we're at the end of the line.\n    */\n    peek() { return this.string.charAt(this.pos) || undefined; }\n    /**\n    Read the next code unit and advance `this.pos`.\n    */\n    next() {\n        if (this.pos < this.string.length)\n            return this.string.charAt(this.pos++);\n    }\n    /**\n    Match the next character against the given string, regular\n    expression, or predicate. Consume and return it if it matches.\n    */\n    eat(match) {\n        let ch = this.string.charAt(this.pos);\n        let ok;\n        if (typeof match == \"string\")\n            ok = ch == match;\n        else\n            ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\n        if (ok) {\n            ++this.pos;\n            return ch;\n        }\n    }\n    /**\n    Continue matching characters that match the given string,\n    regular expression, or predicate function. Return true if any\n    characters were consumed.\n    */\n    eatWhile(match) {\n        let start = this.pos;\n        while (this.eat(match)) { }\n        return this.pos > start;\n    }\n    /**\n    Consume whitespace ahead of `this.pos`. Return true if any was\n    found.\n    */\n    eatSpace() {\n        let start = this.pos;\n        while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\n            ++this.pos;\n        return this.pos > start;\n    }\n    /**\n    Move to the end of the line.\n    */\n    skipToEnd() { this.pos = this.string.length; }\n    /**\n    Move to directly before the given character, if found on the\n    current line.\n    */\n    skipTo(ch) {\n        let found = this.string.indexOf(ch, this.pos);\n        if (found > -1) {\n            this.pos = found;\n            return true;\n        }\n    }\n    /**\n    Move back `n` characters.\n    */\n    backUp(n) { this.pos -= n; }\n    /**\n    Get the column position at `this.pos`.\n    */\n    column() {\n        if (this.lastColumnPos < this.start) {\n            this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n            this.lastColumnPos = this.start;\n        }\n        return this.lastColumnValue;\n    }\n    /**\n    Get the indentation column of the current line.\n    */\n    indentation() {\n        var _a;\n        return (_a = this.overrideIndent) !== null && _a !== void 0 ? _a : countCol(this.string, null, this.tabSize);\n    }\n    /**\n    Match the input against the given string or regular expression\n    (which should start with a `^`). Return true or the regexp match\n    if it matches.\n    \n    Unless `consume` is set to `false`, this will move `this.pos`\n    past the matched text.\n    \n    When matching a string `caseInsensitive` can be set to true to\n    make the match case-insensitive.\n    */\n    match(pattern, consume, caseInsensitive) {\n        if (typeof pattern == \"string\") {\n            let cased = (str) => caseInsensitive ? str.toLowerCase() : str;\n            let substr = this.string.substr(this.pos, pattern.length);\n            if (cased(substr) == cased(pattern)) {\n                if (consume !== false)\n                    this.pos += pattern.length;\n                return true;\n            }\n            else\n                return null;\n        }\n        else {\n            let match = this.string.slice(this.pos).match(pattern);\n            if (match && match.index > 0)\n                return null;\n            if (match && consume !== false)\n                this.pos += match[0].length;\n            return match;\n        }\n    }\n    /**\n    Get the current token.\n    */\n    current() { return this.string.slice(this.start, this.pos); }\n}\n\nfunction fullParser(spec) {\n    return {\n        name: spec.name || \"\",\n        token: spec.token,\n        blankLine: spec.blankLine || (() => { }),\n        startState: spec.startState || (() => true),\n        copyState: spec.copyState || defaultCopyState,\n        indent: spec.indent || (() => null),\n        languageData: spec.languageData || {},\n        tokenTable: spec.tokenTable || noTokens\n    };\n}\nfunction defaultCopyState(state) {\n    if (typeof state != \"object\")\n        return state;\n    let newState = {};\n    for (let prop in state) {\n        let val = state[prop];\n        newState[prop] = (val instanceof Array ? val.slice() : val);\n    }\n    return newState;\n}\nconst IndentedFrom = /*@__PURE__*/new WeakMap();\n/**\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror\n5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).\n*/\nclass StreamLanguage extends Language {\n    constructor(parser) {\n        let data = defineLanguageFacet(parser.languageData);\n        let p = fullParser(parser), self;\n        let impl = new class extends Parser {\n            createParse(input, fragments, ranges) {\n                return new Parse(self, input, fragments, ranges);\n            }\n        };\n        super(data, impl, [indentService.of((cx, pos) => this.getIndent(cx, pos))], parser.name);\n        this.topNode = docID(data);\n        self = this;\n        this.streamParser = p;\n        this.stateAfter = new NodeProp({ perNode: true });\n        this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\n    }\n    /**\n    Define a stream language.\n    */\n    static define(spec) { return new StreamLanguage(spec); }\n    getIndent(cx, pos) {\n        let tree = syntaxTree(cx.state), at = tree.resolve(pos);\n        while (at && at.type != this.topNode)\n            at = at.parent;\n        if (!at)\n            return null;\n        let from = undefined;\n        let { overrideIndentation } = cx.options;\n        if (overrideIndentation) {\n            from = IndentedFrom.get(cx.state);\n            if (from != null && from < pos - 1e4)\n                from = undefined;\n        }\n        let start = findState(this, tree, 0, at.from, from !== null && from !== void 0 ? from : pos), statePos, state;\n        if (start) {\n            state = start.state;\n            statePos = start.pos + 1;\n        }\n        else {\n            state = this.streamParser.startState(cx.unit);\n            statePos = 0;\n        }\n        if (pos - statePos > 10000 /* MaxIndentScanDist */)\n            return null;\n        while (statePos < pos) {\n            let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);\n            if (line.length) {\n                let indentation = overrideIndentation ? overrideIndentation(line.from) : -1;\n                let stream = new StringStream(line.text, cx.state.tabSize, cx.unit, indentation < 0 ? undefined : indentation);\n                while (stream.pos < end - line.from)\n                    readToken(this.streamParser.token, stream, state);\n            }\n            else {\n                this.streamParser.blankLine(state, cx.unit);\n            }\n            if (end == pos)\n                break;\n            statePos = line.to + 1;\n        }\n        let line = cx.lineAt(pos);\n        if (overrideIndentation && from == null)\n            IndentedFrom.set(cx.state, line.from);\n        return this.streamParser.indent(state, /^\\s*(.*)/.exec(line.text)[1], cx);\n    }\n    get allowsNesting() { return false; }\n}\nfunction findState(lang, tree, off, startPos, before) {\n    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\n    if (state)\n        return { state: lang.streamParser.copyState(state), pos: off + tree.length };\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let child = tree.children[i], pos = off + tree.positions[i];\n        let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);\n        if (found)\n            return found;\n    }\n    return null;\n}\nfunction cutTree(lang, tree, from, to, inside) {\n    if (inside && from <= 0 && to >= tree.length)\n        return tree;\n    if (!inside && tree.type == lang.topNode)\n        inside = true;\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let pos = tree.positions[i], child = tree.children[i], inner;\n        if (pos < to && child instanceof Tree) {\n            if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))\n                break;\n            return !inside ? inner\n                : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\n        }\n    }\n    return null;\n}\nfunction findStartInFragments(lang, fragments, startPos, editorState) {\n    for (let f of fragments) {\n        let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);\n        let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;\n        if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))\n            return { state: found.state, tree };\n    }\n    return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };\n}\nclass Parse {\n    constructor(lang, input, fragments, ranges) {\n        this.lang = lang;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.stoppedAt = null;\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.rangeIndex = 0;\n        this.to = ranges[ranges.length - 1].to;\n        let context = ParseContext.get(), from = ranges[0].from;\n        let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);\n        this.state = state;\n        this.parsedPos = this.chunkStart = from + tree.length;\n        for (let i = 0; i < tree.children.length; i++) {\n            this.chunks.push(tree.children[i]);\n            this.chunkPos.push(tree.positions[i]);\n        }\n        if (context && this.parsedPos < context.viewport.from - 100000 /* MaxDistanceBeforeViewport */) {\n            this.state = this.lang.streamParser.startState(getIndentUnit(context.state));\n            context.skipUntilInView(this.parsedPos, context.viewport.from);\n            this.parsedPos = context.viewport.from;\n        }\n        this.moveRangeIndex();\n    }\n    advance() {\n        let context = ParseContext.get();\n        let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\n        let end = Math.min(parseEnd, this.chunkStart + 2048 /* ChunkSize */);\n        if (context)\n            end = Math.min(end, context.viewport.to);\n        while (this.parsedPos < end)\n            this.parseLine(context);\n        if (this.chunkStart < this.parsedPos)\n            this.finishChunk();\n        if (this.parsedPos >= parseEnd)\n            return this.finish();\n        if (context && this.parsedPos >= context.viewport.to) {\n            context.skipUntilInView(this.parsedPos, parseEnd);\n            return this.finish();\n        }\n        return null;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n    }\n    lineAfter(pos) {\n        let chunk = this.input.chunk(pos);\n        if (!this.input.lineChunks) {\n            let eol = chunk.indexOf(\"\\n\");\n            if (eol > -1)\n                chunk = chunk.slice(0, eol);\n        }\n        else if (chunk == \"\\n\") {\n            chunk = \"\";\n        }\n        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\n    }\n    nextLine() {\n        let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;\n        for (let index = this.rangeIndex;;) {\n            let rangeEnd = this.ranges[index].to;\n            if (rangeEnd >= end)\n                break;\n            line = line.slice(0, rangeEnd - (end - line.length));\n            index++;\n            if (index == this.ranges.length)\n                break;\n            let rangeStart = this.ranges[index].from;\n            let after = this.lineAfter(rangeStart);\n            line += after;\n            end = rangeStart + after.length;\n        }\n        return { line, end };\n    }\n    skipGapsTo(pos, offset, side) {\n        for (;;) {\n            let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;\n            if (side > 0 ? end > offPos : end >= offPos)\n                break;\n            let start = this.ranges[++this.rangeIndex].from;\n            offset += start - end;\n        }\n        return offset;\n    }\n    moveRangeIndex() {\n        while (this.ranges[this.rangeIndex].to < this.parsedPos)\n            this.rangeIndex++;\n    }\n    emitToken(id, from, to, size, offset) {\n        if (this.ranges.length > 1) {\n            offset = this.skipGapsTo(from, offset, 1);\n            from += offset;\n            let len0 = this.chunk.length;\n            offset = this.skipGapsTo(to, offset, -1);\n            to += offset;\n            size += this.chunk.length - len0;\n        }\n        this.chunk.push(id, from, to, size);\n        return offset;\n    }\n    parseLine(context) {\n        let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;\n        let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);\n        if (stream.eol()) {\n            streamParser.blankLine(this.state, stream.indentUnit);\n        }\n        else {\n            while (!stream.eol()) {\n                let token = readToken(streamParser.token, stream, this.state);\n                if (token)\n                    offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);\n                if (stream.start > 10000 /* MaxLineLength */)\n                    break;\n            }\n        }\n        this.parsedPos = end;\n        this.moveRangeIndex();\n        if (this.parsedPos < this.to)\n            this.parsedPos++;\n    }\n    finishChunk() {\n        let tree = Tree.build({\n            buffer: this.chunk,\n            start: this.chunkStart,\n            length: this.parsedPos - this.chunkStart,\n            nodeSet,\n            topID: 0,\n            maxBufferLength: 2048 /* ChunkSize */,\n            reused: this.chunkReused\n        });\n        tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\n        this.chunks.push(tree);\n        this.chunkPos.push(this.chunkStart - this.ranges[0].from);\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.chunkStart = this.parsedPos;\n    }\n    finish() {\n        return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\n    }\n}\nfunction readToken(token, stream, state) {\n    stream.start = stream.pos;\n    for (let i = 0; i < 10; i++) {\n        let result = token(stream, state);\n        if (stream.pos > stream.start)\n            return result;\n    }\n    throw new Error(\"Stream parser failed to advance stream.\");\n}\nconst noTokens = /*@__PURE__*/Object.create(null);\nconst typeArray = [NodeType.none];\nconst nodeSet = /*@__PURE__*/new NodeSet(typeArray);\nconst warned = [];\nconst defaultTable = /*@__PURE__*/Object.create(null);\nfor (let [legacyName, name] of [\n    [\"variable\", \"variableName\"],\n    [\"variable-2\", \"variableName.special\"],\n    [\"string-2\", \"string.special\"],\n    [\"def\", \"variableName.definition\"],\n    [\"tag\", \"tagName\"],\n    [\"attribute\", \"attributeName\"],\n    [\"type\", \"typeName\"],\n    [\"builtin\", \"variableName.standard\"],\n    [\"qualifier\", \"modifier\"],\n    [\"error\", \"invalid\"],\n    [\"header\", \"heading\"],\n    [\"property\", \"propertyName\"]\n])\n    defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);\nclass TokenTable {\n    constructor(extra) {\n        this.extra = extra;\n        this.table = Object.assign(Object.create(null), defaultTable);\n    }\n    resolve(tag) {\n        return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\n    }\n}\nconst defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);\nfunction warnForPart(part, msg) {\n    if (warned.indexOf(part) > -1)\n        return;\n    warned.push(part);\n    console.warn(msg);\n}\nfunction createTokenType(extra, tagStr) {\n    let tag = null;\n    for (let part of tagStr.split(\".\")) {\n        let value = (extra[part] || tags[part]);\n        if (!value) {\n            warnForPart(part, `Unknown highlighting tag ${part}`);\n        }\n        else if (typeof value == \"function\") {\n            if (!tag)\n                warnForPart(part, `Modifier ${part} used at start of tag`);\n            else\n                tag = value(tag);\n        }\n        else {\n            if (tag)\n                warnForPart(part, `Tag ${part} used as modifier`);\n            else\n                tag = value;\n        }\n    }\n    if (!tag)\n        return 0;\n    let name = tagStr.replace(/ /g, \"_\"), type = NodeType.define({\n        id: typeArray.length,\n        name,\n        props: [styleTags({ [name]: tag })]\n    });\n    typeArray.push(type);\n    return type.id;\n}\nfunction docID(data) {\n    let type = NodeType.define({ id: typeArray.length, name: \"Document\", props: [languageDataProp.add(() => data)] });\n    typeArray.push(type);\n    return type;\n}\n\nexport { DocInput, HighlightStyle, IndentContext, LRLanguage, Language, LanguageDescription, LanguageSupport, ParseContext, StreamLanguage, StringStream, TreeIndentContext, bracketMatching, bracketMatchingHandle, codeFolding, continuedIndent, defaultHighlightStyle, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldAll, foldCode, foldEffect, foldGutter, foldInside, foldKeymap, foldNodeProp, foldService, foldState, foldable, foldedRanges, forceParsing, getIndentUnit, getIndentation, highlightingFor, indentNodeProp, indentOnInput, indentRange, indentService, indentString, indentUnit, language, languageDataProp, matchBrackets, sublanguageProp, syntaxHighlighting, syntaxParserRunning, syntaxTree, syntaxTreeAvailable, toggleFold, unfoldAll, unfoldCode, unfoldEffect };\n","// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node.\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\nclass NodeProp {\n    /// Create a new node prop type.\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /// This is meant to be used with\n    /// [`NodeSet.extend`](#common.NodeSet.extend) or\n    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    /// prop values for each node type in the set. Takes a [match\n    /// object](#common.NodeType^match) or function that returns undefined\n    /// if the node type doesn't get this prop, and the prop's value if\n    /// it does.\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages in mixed-language parsers.\nNodeProp.mounted = new NodeProp({ perNode: true });\n/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\nclass MountedTree {\n    constructor(\n    /// The inner tree.\n    tree, \n    /// If this is null, this tree replaces the entire node (it will\n    /// be included in the regular iteration instead of its host\n    /// node). If not, only the given ranges are considered to be\n    /// covered by this tree. This is used for trees that are mixed in\n    /// a way that isn't strictly hierarchical. Such mounted trees are\n    /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n    /// and [`enter`](#common.SyntaxNode.enter).\n    overlay, \n    /// The parser used to create this subtree.\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n}\nconst noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass NodeType {\n    /// @internal\n    constructor(\n    /// The name of the node type. Not necessarily unique, but if the\n    /// grammar was written properly, different node types with the\n    /// same name within a node set should play the same semantic\n    /// role.\n    name, \n    /// @internal\n    props, \n    /// The id of this node in its set. Corresponds to the term ids\n    /// used in the parser.\n    id, \n    /// @internal\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    /// Define a node type.\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |\n            (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    prop(prop) { return this.props[prop.id]; }\n    /// True when this is the top node of a grammar.\n    get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }\n    /// True when this node is produced by a skip rule.\n    get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }\n    /// Indicates whether this is an error node.\n    get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }\n    /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n    get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }\n    /// Returns true when this node's name or one of its\n    /// [groups](#common.NodeProp^group) matches the given string.\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#common.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/// An empty dummy node type to use when no actual type is available.\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\nclass NodeSet {\n    /// Create a set with the given types. The `id` property of each\n    /// type should correspond to its position within the array.\n    constructor(\n    /// The node types in this set, by id.\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /// Create a copy of this set with some node properties added. The\n    /// arguments to this method can be created with\n    /// [`NodeProp.add`](#common.NodeProp.add).\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/// Options that control iteration. Can be combined with the `|`\n/// operator to enable multiple ones.\nvar IterMode;\n(function (IterMode) {\n    /// When enabled, iteration will only visit [`Tree`](#common.Tree)\n    /// objects, not nodes packed into\n    /// [`TreeBuffer`](#common.TreeBuffer)s.\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n    /// Enable this to make iteration include anonymous nodes (such as\n    /// the nodes that wrap repeated grammar constructs into a balanced\n    /// tree).\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n    /// By default, regular [mounted](#common.NodeProp^mounted) nodes\n    /// replace their base node in iteration. Enable this to ignore them\n    /// instead.\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n    /// This option only applies in\n    /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n    /// library to not enter mounted overlays if one covers the given\n    /// position.\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {}));\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\nclass Tree {\n    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    constructor(\n    /// The type of the top node.\n    type, \n    /// This node's child nodes.\n    children, \n    /// The positions (offsets relative to the start of this tree) of\n    /// the children.\n    positions, \n    /// The total length of this tree\n    length, \n    /// Per-node [node props](#common.NodeProp) to associate with this node.\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /// @internal\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /// @internal\n    toString() {\n        let mounted = this.prop(NodeProp.mounted);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /// Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    /// the tree. Mode can be used to [control](#common.IterMode) which\n    /// nodes the cursor visits.\n    cursor(mode = 0) {\n        return new TreeCursor(this.topNode, mode);\n    }\n    /// Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    /// at the given position and side (see\n    /// [`moveTo`](#common.TreeCursor.moveTo).\n    cursorAt(pos, side = 0, mode = 0) {\n        let scope = CachedNode.get(this) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        cursor.moveTo(pos, side);\n        CachedNode.set(this, cursor._tree);\n        return cursor;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n    /// tree.\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /// Get the [syntax node](#common.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    ///\n    /// Note that this will not enter\n    /// [overlays](#common.MountedTree.overlay), and you often want\n    /// [`resolveInner`](#common.Tree.resolveInner) instead.\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /// Like [`resolve`](#common.Tree.resolve), but will enter\n    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    /// pointing into the innermost overlaid tree at the given position\n    /// (with parent links going through all parent structure, including\n    /// the host trees).\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, that node will\n    /// not have its children iterated over (or `leave` called).\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;\n        for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {\n            let entered = false;\n            if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {\n                if (c.firstChild())\n                    continue;\n                entered = true;\n            }\n            for (;;) {\n                if (entered && leave && (anon || !c.type.isAnonymous))\n                    leave(c);\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                entered = true;\n            }\n        }\n    }\n    /// Get the value of the given [node prop](#common.NodeProp) for this\n    /// node. Works with both per-node and per-type props.\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    /// format that can be passed to the [`Tree`](#common.Tree)\n    /// constructor.\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /// Balance the direct children of this tree, producing a copy of\n    /// which may have children grouped into subtrees with type\n    /// [`NodeType.none`](#common.NodeType^none).\n    balance(config = {}) {\n        return this.children.length <= 8 /* Balance.BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n    static build(data) { return buildTree(data); }\n}\n/// The empty tree\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it).\nclass TreeBuffer {\n    /// Create a tree buffer.\n    constructor(\n    /// The buffer's content.\n    buffer, \n    /// The total length of the group of nodes in the buffer.\n    length, \n    /// The node set used in this buffer.\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /// @internal\n    get type() { return NodeType.none; }\n    /// @internal\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /// @internal\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /// @internal\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /// @internal\n    slice(startI, endI, from) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI), len = 0;\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            let to = copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n            len = Math.max(len, to);\n        }\n        return new TreeBuffer(copy, len, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Side.Before */: return from < pos;\n        case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Side.Around */: return from < pos && to > pos;\n        case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* Side.After */: return to > pos;\n        case 4 /* Side.DontCare */: return true;\n    }\n}\nfunction enterUnfinishedNodesBefore(node, pos) {\n    let scan = node.childBefore(pos);\n    while (scan) {\n        let last = scan.lastChild;\n        if (!last || last.to != scan.to)\n            break;\n        if (last.type.isError && last.from == last.to) {\n            node = scan;\n            scan = last.prevSibling;\n        }\n        else {\n            scan = last;\n        }\n    }\n    return node;\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    let mode = overlays ? 0 : IterMode.IgnoreOverlays;\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, mode);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass TreeNode {\n    constructor(_tree, from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        this._tree = _tree;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this._tree.type; }\n    get name() { return this._tree.type.name; }\n    get to() { return this.from + this._tree.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & IterMode.ExcludeBuffers)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & IterMode.IgnoreMounts) &&\n                        next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        let mounted;\n        if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, mode);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;\n    }\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    get tree() { return this._tree; }\n    toTree() { return this._tree; }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    /// @internal\n    toString() { return this._tree.toString(); }\n    get node() { return this; }\n    matchContext(context) { return matchNodeContext(this, context); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor(), result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        while (!cur.type.is(before))\n            if (!cur.nextSibling())\n                return result;\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nfunction matchNodeContext(node, context, i = context.length - 1) {\n    for (let p = node.parent; i >= 0; p = p.parent) {\n        if (!p)\n            return false;\n        if (!p.type.isAnonymous) {\n            if (context[i] && context[i] != p.name)\n                return false;\n            i--;\n        }\n    }\n    return true;\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode {\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    constructor(context, _parent, index) {\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        if (mode & IterMode.ExcludeBuffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n    }\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1];\n            children.push(buffer.slice(startI, endI, from));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    /// @internal\n    toString() { return this.context.buffer.childString(this.index); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    get node() { return this; }\n    matchContext(context) { return matchNodeContext(this, context); }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass TreeCursor {\n    /// Shorthand for `.type.name`.\n    get name() { return this.type.name; }\n    /// @internal\n    constructor(node, \n    /// @internal\n    mode = 0) {\n        this.mode = mode;\n        /// @internal\n        this.buffer = null;\n        this.stack = [];\n        /// @internal\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /// @internal\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /// @internal\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n    firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }\n    /// Move the cursor to this node's last child.\n    lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }\n    /// Move the cursor to the first child that ends after `pos`.\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }\n    /// Move to the last child that starts before `pos`.\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }\n    /// Move the cursor to the child around `pos`. If side is -1 the\n    /// child may end at that position, when 1 it may start there. This\n    /// will also enter [overlaid](#common.MountedTree.overlay)\n    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    /// set to false.\n    enter(pos, side, mode = this.mode) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, mode));\n        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    }\n    /// Move to the node's parent node, if this isn't the top node.\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /// @internal\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;\n    }\n    /// Move to this node's next sibling, if any.\n    nextSibling() { return this.sibling(1); }\n    /// Move to this node's previous sibling, if any.\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n                    let child = parent._tree.children[i];\n                    if ((this.mode & IterMode.IncludeAnonymous) ||\n                        child instanceof TreeBuffer ||\n                        !child.type.isAnonymous ||\n                        hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty or `enter` is false, its next sibling or\n    /// the next sibling of the first parent node that has one.\n    next(enter = true) { return this.move(1, enter); }\n    /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by its last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n    prev(enter = true) { return this.move(-1, enter); }\n    /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    /// position.\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /// Get the [tree](#common.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#common.TreeBuffer).\n    get tree() {\n        return this.buffer ? null : this._tree._tree;\n    }\n    /// Iterate over the current node and all its descendants, calling\n    /// `enter` when entering a node and `leave`, if given, when leaving\n    /// one. When `enter` returns `false`, any children of that node are\n    /// skipped, and `leave` isn't called for it.\n    iterate(enter, leave) {\n        for (let depth = 0;;) {\n            let mustLeave = false;\n            if (this.type.isAnonymous || enter(this) !== false) {\n                if (this.firstChild()) {\n                    depth++;\n                    continue;\n                }\n                if (!this.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(this);\n                mustLeave = this.type.isAnonymous;\n                if (this.nextSibling())\n                    break;\n                if (!depth)\n                    return;\n                this.parent();\n                depth--;\n                mustLeave = true;\n            }\n        }\n    }\n    /// Test whether the current node matches a given context—a sequence\n    /// of direct parent node names. Empty strings in the context array\n    /// are treated as wildcards.\n    matchContext(context) {\n        if (!this.buffer)\n            return matchNodeContext(this.node, context);\n        let { buffer } = this.buffer, { types } = buffer.set;\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n            if (d < 0)\n                return matchNodeContext(this.node, context, i);\n            let type = types[buffer.buffer[this.stack[d]]];\n            if (!type.isAnonymous) {\n                if (context[i] && context[i] != type.name)\n                    return false;\n                i--;\n            }\n        }\n        return true;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* SpecialRecord.Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* SpecialRecord.LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* SpecialRecord.ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* SpecialRecord.ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* SpecialRecord.LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/// Provides a way to associate values with pieces of trees. As long\n/// as that part of the tree is reused, the associated values can be\n/// retrieved from an updated tree.\nclass NodeWeakMap {\n    constructor() {\n        this.map = new WeakMap();\n    }\n    setBuffer(buffer, index, value) {\n        let inner = this.map.get(buffer);\n        if (!inner)\n            this.map.set(buffer, inner = new Map);\n        inner.set(index, value);\n    }\n    getBuffer(buffer, index) {\n        let inner = this.map.get(buffer);\n        return inner && inner.get(index);\n    }\n    /// Set the value for this syntax node.\n    set(node, value) {\n        if (node instanceof BufferNode)\n            this.setBuffer(node.context.buffer, node.index, value);\n        else if (node instanceof TreeNode)\n            this.map.set(node.tree, value);\n    }\n    /// Retrieve value for this syntax node, if it exists in the map.\n    get(node) {\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n    }\n    /// Set the value for the node that a cursor currently points to.\n    cursorSet(cursor, value) {\n        if (cursor.buffer)\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n        else\n            this.map.set(cursor.tree, value);\n    }\n    /// Retrieve the value for the node that a cursor currently points\n    /// to.\n    cursorGet(cursor) {\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n}\n\n/// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\nclass TreeFragment {\n    /// Construct a tree fragment. You'll usually want to use\n    /// [`addTree`](#common.TreeFragment^addTree) and\n    /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n    /// calling this directly.\n    constructor(\n    /// The start of the unchanged range pointed to by this fragment.\n    /// This refers to an offset in the _updated_ document (as opposed\n    /// to the original tree).\n    from, \n    /// The end of the unchanged range.\n    to, \n    /// The tree that this fragment is based on.\n    tree, \n    /// The offset between the fragment's tree and the document that\n    /// this fragment can be used against. Add this when going from\n    /// document to tree positions, subtract it to go from tree to\n    /// document positions.\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);\n    }\n    /// Whether the start of the fragment represents the start of a\n    /// parse, or the end of a change. (In the second case, it may not\n    /// be safe to reuse some nodes at the start, depending on the\n    /// parsing algorithm.)\n    get openStart() { return (this.open & 1 /* Open.Start */) > 0; }\n    /// Whether the end of the fragment represents the end of a\n    /// full-document parse, or the start of a change.\n    get openEnd() { return (this.open & 2 /* Open.End */) > 0; }\n    /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the resulting\n    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    /// true.\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/// A superclass that parsers should extend.\nclass Parser {\n    /// Start a parse, returning a [partial parse](#common.PartialParse)\n    /// object. [`fragments`](#common.TreeFragment) can be passed in to\n    /// make the parse incremental.\n    ///\n    /// By default, the entire input is parsed. You can pass `ranges`,\n    /// which should be a sorted array of non-empty, non-overlapping\n    /// ranges, to parse only those ranges. The tree returned in that\n    /// case will start at `ranges[0].from`.\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /// Run a full parse, returning the resulting tree.\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, ranges) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.ranges = ranges;\n        if (!ranges.length || ranges.some(r => r.from >= r.to))\n            throw new RangeError(\"Invalid inner parse ranges given: \" + JSON.stringify(ranges));\n    }\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].ranges[0].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n        scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n            let enter = true, range;\n            if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Cover.Full */;\n            }\n            else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n                    if (ranges.length)\n                        this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length)\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;\n    }\n    return 0 /* Cover.None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1];\n        nodes.push(buf.slice(startI, endI, from));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, depth = 0;\n    // Scan up to the nearest tree\n    do {\n        cursor.parent();\n        depth++;\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let i = 0, base = cursor.tree, off = 0;\n    for (;; i++) {\n        off = base.positions[i] + cursor.from;\n        if (off <= node.from && off + base.children[i].length >= node.to)\n            break;\n    }\n    let buf = base.children[i], b = buf.buffer;\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length) {\n        let i = startI;\n        while (b[i + 2] + off <= node.from)\n            i = b[i + 3];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, i, children, positions, innerOffset);\n        let from = b[i + 1], to = b[i + 2];\n        let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n        children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);\n    // Move the cursor back to the target node\n    for (let d = 0; d <= depth; d++)\n        cursor.childAfter(node.from);\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n        }\n    }\n    return result;\n}\n\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };\n","import { NodeProp } from '@lezer/common';\n\nlet nextTagID = 0;\n/**\nHighlighting tags are markers that denote a highlighting category.\nThey are [associated](#highlight.styleTags) with parts of a syntax\ntree by a language mode, and then mapped to an actual CSS style by\na [highlighter](#highlight.Highlighter).\n\nBecause syntax tree node types and highlight styles have to be\nable to talk the same language, CodeMirror uses a mostly _closed_\n[vocabulary](#highlight.tags) of syntax tags (as opposed to\ntraditional open string-based systems, which make it hard for\nhighlighting themes to cover all the tokens produced by the\nvarious languages).\n\nIt _is_ possible to [define](#highlight.Tag^define) your own\nhighlighting tags for system-internal use (where you control both\nthe language package and the highlighter), but such tags will not\nbe picked up by regular highlighters (though you can derive them\nfrom standard tags to allow highlighters to fall back to those).\n*/\nclass Tag {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The set of this tag and all its parent tags, starting with\n    this one itself and sorted in order of decreasing specificity.\n    */\n    set, \n    /**\n    The base unmodified tag that this one is based on, if it's\n    modified @internal\n    */\n    base, \n    /**\n    The modifiers applied to this.base @internal\n    */\n    modified) {\n        this.set = set;\n        this.base = base;\n        this.modified = modified;\n        /**\n        @internal\n        */\n        this.id = nextTagID++;\n    }\n    /**\n    Define a new tag. If `parent` is given, the tag is treated as a\n    sub-tag of that parent, and\n    [highlighters](#highlight.tagHighlighter) that don't mention\n    this tag will try to fall back to the parent tag (or grandparent\n    tag, etc).\n    */\n    static define(parent) {\n        if (parent === null || parent === void 0 ? void 0 : parent.base)\n            throw new Error(\"Can not derive from a modified tag\");\n        let tag = new Tag([], null, []);\n        tag.set.push(tag);\n        if (parent)\n            for (let t of parent.set)\n                tag.set.push(t);\n        return tag;\n    }\n    /**\n    Define a tag _modifier_, which is a function that, given a tag,\n    will return a tag that is a subtag of the original. Applying the\n    same modifier to a twice tag will return the same value (`m1(t1)\n    == m1(t1)`) and applying multiple modifiers will, regardless or\n    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).\n    \n    When multiple modifiers are applied to a given base tag, each\n    smaller set of modifiers is registered as a parent, so that for\n    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,\n    `m1(m3(t1)`, and so on.\n    */\n    static defineModifier() {\n        let mod = new Modifier;\n        return (tag) => {\n            if (tag.modified.indexOf(mod) > -1)\n                return tag;\n            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));\n        };\n    }\n}\nlet nextModifierID = 0;\nclass Modifier {\n    constructor() {\n        this.instances = [];\n        this.id = nextModifierID++;\n    }\n    static get(base, mods) {\n        if (!mods.length)\n            return base;\n        let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));\n        if (exists)\n            return exists;\n        let set = [], tag = new Tag(set, base, mods);\n        for (let m of mods)\n            m.instances.push(tag);\n        let configs = powerSet(mods);\n        for (let parent of base.set)\n            if (!parent.modified.length)\n                for (let config of configs)\n                    set.push(Modifier.get(parent, config));\n        return tag;\n    }\n}\nfunction sameArray(a, b) {\n    return a.length == b.length && a.every((x, i) => x == b[i]);\n}\nfunction powerSet(array) {\n    let sets = [[]];\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0, e = sets.length; j < e; j++) {\n            sets.push(sets[j].concat(array[i]));\n        }\n    }\n    return sets.sort((a, b) => b.length - a.length);\n}\n/**\nThis function is used to add a set of tags to a language syntax\nvia [`NodeSet.extend`](#common.NodeSet.extend) or\n[`LRParser.configure`](#lr.LRParser.configure).\n\nThe argument object maps node selectors to [highlighting\ntags](#highlight.Tag) or arrays of tags.\n\nNode selectors may hold one or more (space-separated) node paths.\nSuch a path can be a [node name](#common.NodeType.name), or\nmultiple node names (or `*` wildcards) separated by slash\ncharacters, as in `\"Block/Declaration/VariableName\"`. Such a path\nmatches the final node but only if its direct parent nodes are the\nother nodes mentioned. A `*` in such a path matches any parent,\nbut only a single level—wildcards that match multiple parents\naren't supported, both for efficiency reasons and because Lezer\ntrees make it rather hard to reason about what they would match.)\n\nA path can be ended with `/...` to indicate that the tag assigned\nto the node should also apply to all child nodes, even if they\nmatch their own style (by default, only the innermost style is\nused).\n\nWhen a path ends in `!`, as in `Attribute!`, no further matching\nhappens for the node's child nodes, and the entire node gets the\ngiven style.\n\nIn this notation, node names that contain `/`, `!`, `*`, or `...`\nmust be quoted as JSON strings.\n\nFor example:\n\n```javascript\nparser.withProps(\n  styleTags({\n    // Style Number and BigNumber nodes\n    \"Number BigNumber\": tags.number,\n    // Style Escape nodes whose parent is String\n    \"String/Escape\": tags.escape,\n    // Style anything inside Attributes nodes\n    \"Attributes!\": tags.meta,\n    // Add a style to all content inside Italic nodes\n    \"Italic/...\": tags.emphasis,\n    // Style InvalidString nodes as both `string` and `invalid`\n    \"InvalidString\": [tags.string, tags.invalid],\n    // Style the node named \"/\" as punctuation\n    '\"/\"': tags.punctuation\n  })\n)\n```\n*/\nfunction styleTags(spec) {\n    let byName = Object.create(null);\n    for (let prop in spec) {\n        let tags = spec[prop];\n        if (!Array.isArray(tags))\n            tags = [tags];\n        for (let part of prop.split(\" \"))\n            if (part) {\n                let pieces = [], mode = 2 /* Normal */, rest = part;\n                for (let pos = 0;;) {\n                    if (rest == \"...\" && pos > 0 && pos + 3 == part.length) {\n                        mode = 1 /* Inherit */;\n                        break;\n                    }\n                    let m = /^\"(?:[^\"\\\\]|\\\\.)*?\"|[^\\/!]+/.exec(rest);\n                    if (!m)\n                        throw new RangeError(\"Invalid path: \" + part);\n                    pieces.push(m[0] == \"*\" ? \"\" : m[0][0] == '\"' ? JSON.parse(m[0]) : m[0]);\n                    pos += m[0].length;\n                    if (pos == part.length)\n                        break;\n                    let next = part[pos++];\n                    if (pos == part.length && next == \"!\") {\n                        mode = 0 /* Opaque */;\n                        break;\n                    }\n                    if (next != \"/\")\n                        throw new RangeError(\"Invalid path: \" + part);\n                    rest = part.slice(pos);\n                }\n                let last = pieces.length - 1, inner = pieces[last];\n                if (!inner)\n                    throw new RangeError(\"Invalid path: \" + part);\n                let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);\n                byName[inner] = rule.sort(byName[inner]);\n            }\n    }\n    return ruleNodeProp.add(byName);\n}\nconst ruleNodeProp = new NodeProp();\nclass Rule {\n    constructor(tags, mode, context, next) {\n        this.tags = tags;\n        this.mode = mode;\n        this.context = context;\n        this.next = next;\n    }\n    get opaque() { return this.mode == 0 /* Opaque */; }\n    get inherit() { return this.mode == 1 /* Inherit */; }\n    sort(other) {\n        if (!other || other.depth < this.depth) {\n            this.next = other;\n            return this;\n        }\n        other.next = this.sort(other.next);\n        return other;\n    }\n    get depth() { return this.context ? this.context.length : 0; }\n}\nRule.empty = new Rule([], 2 /* Normal */, null);\n/**\nDefine a [highlighter](#highlight.Highlighter) from an array of\ntag/class pairs. Classes associated with more specific tags will\ntake precedence.\n*/\nfunction tagHighlighter(tags, options) {\n    let map = Object.create(null);\n    for (let style of tags) {\n        if (!Array.isArray(style.tag))\n            map[style.tag.id] = style.class;\n        else\n            for (let tag of style.tag)\n                map[tag.id] = style.class;\n    }\n    let { scope, all = null } = options || {};\n    return {\n        style: (tags) => {\n            let cls = all;\n            for (let tag of tags) {\n                for (let sub of tag.set) {\n                    let tagClass = map[sub.id];\n                    if (tagClass) {\n                        cls = cls ? cls + \" \" + tagClass : tagClass;\n                        break;\n                    }\n                }\n            }\n            return cls;\n        },\n        scope\n    };\n}\nfunction highlightTags(highlighters, tags) {\n    let result = null;\n    for (let highlighter of highlighters) {\n        let value = highlighter.style(tags);\n        if (value)\n            result = result ? result + \" \" + value : value;\n    }\n    return result;\n}\n/**\nHighlight the given [tree](#common.Tree) with the given\n[highlighter](#highlight.Highlighter).\n*/\nfunction highlightTree(tree, highlighter, \n/**\nAssign styling to a region of the text. Will be called, in order\nof position, for any ranges where more than zero classes apply.\n`classes` is a space separated string of CSS classes.\n*/\nputStyle, \n/**\nThe start of the range to highlight.\n*/\nfrom = 0, \n/**\nThe end of the range.\n*/\nto = tree.length) {\n    let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);\n    builder.highlightRange(tree.cursor(), from, to, \"\", builder.highlighters);\n    builder.flush(to);\n}\nclass HighlightBuilder {\n    constructor(at, highlighters, span) {\n        this.at = at;\n        this.highlighters = highlighters;\n        this.span = span;\n        this.class = \"\";\n    }\n    startSpan(at, cls) {\n        if (cls != this.class) {\n            this.flush(at);\n            if (at > this.at)\n                this.at = at;\n            this.class = cls;\n        }\n    }\n    flush(to) {\n        if (to > this.at && this.class)\n            this.span(this.at, to, this.class);\n    }\n    highlightRange(cursor, from, to, inheritedClass, highlighters) {\n        let { type, from: start, to: end } = cursor;\n        if (start >= to || end <= from)\n            return;\n        if (type.isTop)\n            highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));\n        let cls = inheritedClass;\n        let rule = getStyleTags(cursor) || Rule.empty;\n        let tagCls = highlightTags(highlighters, rule.tags);\n        if (tagCls) {\n            if (cls)\n                cls += \" \";\n            cls += tagCls;\n            if (rule.mode == 1 /* Inherit */)\n                inheritedClass += (inheritedClass ? \" \" : \"\") + tagCls;\n        }\n        this.startSpan(Math.max(from, start), cls);\n        if (rule.opaque)\n            return;\n        let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);\n        if (mounted && mounted.overlay) {\n            let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);\n            let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));\n            let hasChild = cursor.firstChild();\n            for (let i = 0, pos = start;; i++) {\n                let next = i < mounted.overlay.length ? mounted.overlay[i] : null;\n                let nextPos = next ? next.from + start : end;\n                let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);\n                if (rangeFrom < rangeTo && hasChild) {\n                    while (cursor.from < rangeTo) {\n                        this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);\n                        this.startSpan(Math.min(rangeTo, cursor.to), cls);\n                        if (cursor.to >= nextPos || !cursor.nextSibling())\n                            break;\n                    }\n                }\n                if (!next || nextPos > to)\n                    break;\n                pos = next.to + start;\n                if (pos > from) {\n                    this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), \"\", innerHighlighters);\n                    this.startSpan(Math.min(to, pos), cls);\n                }\n            }\n            if (hasChild)\n                cursor.parent();\n        }\n        else if (cursor.firstChild()) {\n            if (mounted)\n                inheritedClass = \"\";\n            do {\n                if (cursor.to <= from)\n                    continue;\n                if (cursor.from >= to)\n                    break;\n                this.highlightRange(cursor, from, to, inheritedClass, highlighters);\n                this.startSpan(Math.min(to, cursor.to), cls);\n            } while (cursor.nextSibling());\n            cursor.parent();\n        }\n    }\n}\n/**\nMatch a syntax node's [highlight rules](#highlight.styleTags). If\nthere's a match, return its set of tags, and whether it is\nopaque (uses a `!`) or applies to all child nodes (`/...`).\n*/\nfunction getStyleTags(node) {\n    let rule = node.type.prop(ruleNodeProp);\n    while (rule && rule.context && !node.matchContext(rule.context))\n        rule = rule.next;\n    return rule || null;\n}\nconst t = Tag.define;\nconst comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();\n/**\nThe default set of highlighting [tags](#highlight.Tag).\n\nThis collection is heavily biased towards programming languages,\nand necessarily incomplete. A full ontology of syntactic\nconstructs would fill a stack of books, and be impractical to\nwrite themes for. So try to make do with this set. If all else\nfails, [open an\nissue](https://github.com/codemirror/codemirror.next) to propose a\nnew tag, or [define](#highlight.Tag^define) a local custom tag for\nyour use case.\n\nNote that it is not obligatory to always attach the most specific\ntag possible to an element—if your grammar can't easily\ndistinguish a certain type of element (such as a local variable),\nit is okay to style it as its more general variant (a variable).\n\nFor tags that extend some parent tag, the documentation links to\nthe parent.\n*/\nconst tags = {\n    /**\n    A comment.\n    */\n    comment,\n    /**\n    A line [comment](#highlight.tags.comment).\n    */\n    lineComment: t(comment),\n    /**\n    A block [comment](#highlight.tags.comment).\n    */\n    blockComment: t(comment),\n    /**\n    A documentation [comment](#highlight.tags.comment).\n    */\n    docComment: t(comment),\n    /**\n    Any kind of identifier.\n    */\n    name,\n    /**\n    The [name](#highlight.tags.name) of a variable.\n    */\n    variableName: t(name),\n    /**\n    A type [name](#highlight.tags.name).\n    */\n    typeName: typeName,\n    /**\n    A tag name (subtag of [`typeName`](#highlight.tags.typeName)).\n    */\n    tagName: t(typeName),\n    /**\n    A property or field [name](#highlight.tags.name).\n    */\n    propertyName: propertyName,\n    /**\n    An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).\n    */\n    attributeName: t(propertyName),\n    /**\n    The [name](#highlight.tags.name) of a class.\n    */\n    className: t(name),\n    /**\n    A label [name](#highlight.tags.name).\n    */\n    labelName: t(name),\n    /**\n    A namespace [name](#highlight.tags.name).\n    */\n    namespace: t(name),\n    /**\n    The [name](#highlight.tags.name) of a macro.\n    */\n    macroName: t(name),\n    /**\n    A literal value.\n    */\n    literal,\n    /**\n    A string [literal](#highlight.tags.literal).\n    */\n    string,\n    /**\n    A documentation [string](#highlight.tags.string).\n    */\n    docString: t(string),\n    /**\n    A character literal (subtag of [string](#highlight.tags.string)).\n    */\n    character: t(string),\n    /**\n    An attribute value (subtag of [string](#highlight.tags.string)).\n    */\n    attributeValue: t(string),\n    /**\n    A number [literal](#highlight.tags.literal).\n    */\n    number,\n    /**\n    An integer [number](#highlight.tags.number) literal.\n    */\n    integer: t(number),\n    /**\n    A floating-point [number](#highlight.tags.number) literal.\n    */\n    float: t(number),\n    /**\n    A boolean [literal](#highlight.tags.literal).\n    */\n    bool: t(literal),\n    /**\n    Regular expression [literal](#highlight.tags.literal).\n    */\n    regexp: t(literal),\n    /**\n    An escape [literal](#highlight.tags.literal), for example a\n    backslash escape in a string.\n    */\n    escape: t(literal),\n    /**\n    A color [literal](#highlight.tags.literal).\n    */\n    color: t(literal),\n    /**\n    A URL [literal](#highlight.tags.literal).\n    */\n    url: t(literal),\n    /**\n    A language keyword.\n    */\n    keyword,\n    /**\n    The [keyword](#highlight.tags.keyword) for the self or this\n    object.\n    */\n    self: t(keyword),\n    /**\n    The [keyword](#highlight.tags.keyword) for null.\n    */\n    null: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) denoting some atomic value.\n    */\n    atom: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that represents a unit.\n    */\n    unit: t(keyword),\n    /**\n    A modifier [keyword](#highlight.tags.keyword).\n    */\n    modifier: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that acts as an operator.\n    */\n    operatorKeyword: t(keyword),\n    /**\n    A control-flow related [keyword](#highlight.tags.keyword).\n    */\n    controlKeyword: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that defines something.\n    */\n    definitionKeyword: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) related to defining or\n    interfacing with modules.\n    */\n    moduleKeyword: t(keyword),\n    /**\n    An operator.\n    */\n    operator,\n    /**\n    An [operator](#highlight.tags.operator) that dereferences something.\n    */\n    derefOperator: t(operator),\n    /**\n    Arithmetic-related [operator](#highlight.tags.operator).\n    */\n    arithmeticOperator: t(operator),\n    /**\n    Logical [operator](#highlight.tags.operator).\n    */\n    logicOperator: t(operator),\n    /**\n    Bit [operator](#highlight.tags.operator).\n    */\n    bitwiseOperator: t(operator),\n    /**\n    Comparison [operator](#highlight.tags.operator).\n    */\n    compareOperator: t(operator),\n    /**\n    [Operator](#highlight.tags.operator) that updates its operand.\n    */\n    updateOperator: t(operator),\n    /**\n    [Operator](#highlight.tags.operator) that defines something.\n    */\n    definitionOperator: t(operator),\n    /**\n    Type-related [operator](#highlight.tags.operator).\n    */\n    typeOperator: t(operator),\n    /**\n    Control-flow [operator](#highlight.tags.operator).\n    */\n    controlOperator: t(operator),\n    /**\n    Program or markup punctuation.\n    */\n    punctuation,\n    /**\n    [Punctuation](#highlight.tags.punctuation) that separates\n    things.\n    */\n    separator: t(punctuation),\n    /**\n    Bracket-style [punctuation](#highlight.tags.punctuation).\n    */\n    bracket,\n    /**\n    Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`\n    tokens).\n    */\n    angleBracket: t(bracket),\n    /**\n    Square [brackets](#highlight.tags.bracket) (usually `[` and `]`\n    tokens).\n    */\n    squareBracket: t(bracket),\n    /**\n    Parentheses (usually `(` and `)` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */\n    paren: t(bracket),\n    /**\n    Braces (usually `{` and `}` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */\n    brace: t(bracket),\n    /**\n    Content, for example plain text in XML or markup documents.\n    */\n    content,\n    /**\n    [Content](#highlight.tags.content) that represents a heading.\n    */\n    heading,\n    /**\n    A level 1 [heading](#highlight.tags.heading).\n    */\n    heading1: t(heading),\n    /**\n    A level 2 [heading](#highlight.tags.heading).\n    */\n    heading2: t(heading),\n    /**\n    A level 3 [heading](#highlight.tags.heading).\n    */\n    heading3: t(heading),\n    /**\n    A level 4 [heading](#highlight.tags.heading).\n    */\n    heading4: t(heading),\n    /**\n    A level 5 [heading](#highlight.tags.heading).\n    */\n    heading5: t(heading),\n    /**\n    A level 6 [heading](#highlight.tags.heading).\n    */\n    heading6: t(heading),\n    /**\n    A prose separator (such as a horizontal rule).\n    */\n    contentSeparator: t(content),\n    /**\n    [Content](#highlight.tags.content) that represents a list.\n    */\n    list: t(content),\n    /**\n    [Content](#highlight.tags.content) that represents a quote.\n    */\n    quote: t(content),\n    /**\n    [Content](#highlight.tags.content) that is emphasized.\n    */\n    emphasis: t(content),\n    /**\n    [Content](#highlight.tags.content) that is styled strong.\n    */\n    strong: t(content),\n    /**\n    [Content](#highlight.tags.content) that is part of a link.\n    */\n    link: t(content),\n    /**\n    [Content](#highlight.tags.content) that is styled as code or\n    monospace.\n    */\n    monospace: t(content),\n    /**\n    [Content](#highlight.tags.content) that has a strike-through\n    style.\n    */\n    strikethrough: t(content),\n    /**\n    Inserted text in a change-tracking format.\n    */\n    inserted: t(),\n    /**\n    Deleted text.\n    */\n    deleted: t(),\n    /**\n    Changed text.\n    */\n    changed: t(),\n    /**\n    An invalid or unsyntactic element.\n    */\n    invalid: t(),\n    /**\n    Metadata or meta-instruction.\n    */\n    meta,\n    /**\n    [Metadata](#highlight.tags.meta) that applies to the entire\n    document.\n    */\n    documentMeta: t(meta),\n    /**\n    [Metadata](#highlight.tags.meta) that annotates or adds\n    attributes to a given syntactic element.\n    */\n    annotation: t(meta),\n    /**\n    Processing instruction or preprocessor directive. Subtag of\n    [meta](#highlight.tags.meta).\n    */\n    processingInstruction: t(meta),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that a\n    given element is being defined. Expected to be used with the\n    various [name](#highlight.tags.name) tags.\n    */\n    definition: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that\n    something is constant. Mostly expected to be used with\n    [variable names](#highlight.tags.variableName).\n    */\n    constant: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) used to indicate that\n    a [variable](#highlight.tags.variableName) or [property\n    name](#highlight.tags.propertyName) is being called or defined\n    as a function.\n    */\n    function: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that can be applied to\n    [names](#highlight.tags.name) to indicate that they belong to\n    the language's standard environment.\n    */\n    standard: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates a given\n    [names](#highlight.tags.name) is local to some scope.\n    */\n    local: Tag.defineModifier(),\n    /**\n    A generic variant [modifier](#highlight.Tag^defineModifier) that\n    can be used to tag language-specific alternative variants of\n    some common tag. It is recommended for themes to define special\n    forms of at least the [string](#highlight.tags.string) and\n    [variable name](#highlight.tags.variableName) tags, since those\n    come up a lot.\n    */\n    special: Tag.defineModifier()\n};\n/**\nThis is a highlighter that adds stable, predictable classes to\ntokens, for styling with external CSS.\n\nThe following tags are mapped to their name prefixed with `\"tok-\"`\n(for example `\"tok-comment\"`):\n\n* [`link`](#highlight.tags.link)\n* [`heading`](#highlight.tags.heading)\n* [`emphasis`](#highlight.tags.emphasis)\n* [`strong`](#highlight.tags.strong)\n* [`keyword`](#highlight.tags.keyword)\n* [`atom`](#highlight.tags.atom)\n* [`bool`](#highlight.tags.bool)\n* [`url`](#highlight.tags.url)\n* [`labelName`](#highlight.tags.labelName)\n* [`inserted`](#highlight.tags.inserted)\n* [`deleted`](#highlight.tags.deleted)\n* [`literal`](#highlight.tags.literal)\n* [`string`](#highlight.tags.string)\n* [`number`](#highlight.tags.number)\n* [`variableName`](#highlight.tags.variableName)\n* [`typeName`](#highlight.tags.typeName)\n* [`namespace`](#highlight.tags.namespace)\n* [`className`](#highlight.tags.className)\n* [`macroName`](#highlight.tags.macroName)\n* [`propertyName`](#highlight.tags.propertyName)\n* [`operator`](#highlight.tags.operator)\n* [`comment`](#highlight.tags.comment)\n* [`meta`](#highlight.tags.meta)\n* [`punctuation`](#highlight.tags.punctuation)\n* [`invalid`](#highlight.tags.invalid)\n\nIn addition, these mappings are provided:\n\n* [`regexp`](#highlight.tags.regexp),\n  [`escape`](#highlight.tags.escape), and\n  [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)\n  are mapped to `\"tok-string2\"`\n* [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName2\"`\n* [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-local\"`\n* [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-definition\"`\n* [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)\n  to `\"tok-propertyName tok-definition\"`\n*/\nconst classHighlighter = tagHighlighter([\n    { tag: tags.link, class: \"tok-link\" },\n    { tag: tags.heading, class: \"tok-heading\" },\n    { tag: tags.emphasis, class: \"tok-emphasis\" },\n    { tag: tags.strong, class: \"tok-strong\" },\n    { tag: tags.keyword, class: \"tok-keyword\" },\n    { tag: tags.atom, class: \"tok-atom\" },\n    { tag: tags.bool, class: \"tok-bool\" },\n    { tag: tags.url, class: \"tok-url\" },\n    { tag: tags.labelName, class: \"tok-labelName\" },\n    { tag: tags.inserted, class: \"tok-inserted\" },\n    { tag: tags.deleted, class: \"tok-deleted\" },\n    { tag: tags.literal, class: \"tok-literal\" },\n    { tag: tags.string, class: \"tok-string\" },\n    { tag: tags.number, class: \"tok-number\" },\n    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: \"tok-string2\" },\n    { tag: tags.variableName, class: \"tok-variableName\" },\n    { tag: tags.local(tags.variableName), class: \"tok-variableName tok-local\" },\n    { tag: tags.definition(tags.variableName), class: \"tok-variableName tok-definition\" },\n    { tag: tags.special(tags.variableName), class: \"tok-variableName2\" },\n    { tag: tags.definition(tags.propertyName), class: \"tok-propertyName tok-definition\" },\n    { tag: tags.typeName, class: \"tok-typeName\" },\n    { tag: tags.namespace, class: \"tok-namespace\" },\n    { tag: tags.className, class: \"tok-className\" },\n    { tag: tags.macroName, class: \"tok-macroName\" },\n    { tag: tags.propertyName, class: \"tok-propertyName\" },\n    { tag: tags.operator, class: \"tok-operator\" },\n    { tag: tags.comment, class: \"tok-comment\" },\n    { tag: tags.meta, class: \"tok-meta\" },\n    { tag: tags.invalid, class: \"tok-invalid\" },\n    { tag: tags.punctuation, class: \"tok-punctuation\" }\n]);\n\nexport { Tag, classHighlighter, getStyleTags, highlightTree, styleTags, tagHighlighter, tags };\n","import { Annotation, Facet, combineConfig, StateField, EditorSelection, Transaction, ChangeSet, ChangeDesc, StateEffect, Text, findClusterBreak, countColumn, CharCategory } from '@codemirror/state';\nimport { EditorView, Direction } from '@codemirror/view';\nimport { IndentContext, getIndentation, indentString, matchBrackets, syntaxTree, getIndentUnit, indentUnit } from '@codemirror/language';\nimport { NodeProp } from '@lezer/common';\n\n/**\nComment or uncomment the current selection. Will use line comments\nif available, otherwise falling back to block comments.\n*/\nconst toggleComment = target => {\n    let { state } = target, line = state.doc.lineAt(state.selection.main.from), config = getConfig(target.state, line.from);\n    return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;\n};\nfunction command(f, option) {\n    return ({ state, dispatch }) => {\n        if (state.readOnly)\n            return false;\n        let tr = f(option, state);\n        if (!tr)\n            return false;\n        dispatch(state.update(tr));\n        return true;\n    };\n}\n/**\nComment or uncomment the current selection using line comments.\nThe line comment syntax is taken from the\n[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\n*/\nconst toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);\n/**\nComment the current selection using line comments.\n*/\nconst lineComment = /*@__PURE__*/command(changeLineComment, 1 /* CommentOption.Comment */);\n/**\nUncomment the current selection using line comments.\n*/\nconst lineUncomment = /*@__PURE__*/command(changeLineComment, 2 /* CommentOption.Uncomment */);\n/**\nComment or uncomment the current selection using block comments.\nThe block comment syntax is taken from the\n[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\n*/\nconst toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);\n/**\nComment the current selection using block comments.\n*/\nconst blockComment = /*@__PURE__*/command(changeBlockComment, 1 /* CommentOption.Comment */);\n/**\nUncomment the current selection using block comments.\n*/\nconst blockUncomment = /*@__PURE__*/command(changeBlockComment, 2 /* CommentOption.Uncomment */);\n/**\nComment or uncomment the lines around the current selection using\nblock comments.\n*/\nconst toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);\nfunction getConfig(state, pos) {\n    let data = state.languageDataAt(\"commentTokens\", pos);\n    return data.length ? data[0] : {};\n}\nconst SearchMargin = 50;\n/**\nDetermines if the given range is block-commented in the given\nstate.\n*/\nfunction findBlockComment(state, { open, close }, from, to) {\n    let textBefore = state.sliceDoc(from - SearchMargin, from);\n    let textAfter = state.sliceDoc(to, to + SearchMargin);\n    let spaceBefore = /\\s*$/.exec(textBefore)[0].length, spaceAfter = /^\\s*/.exec(textAfter)[0].length;\n    let beforeOff = textBefore.length - spaceBefore;\n    if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&\n        textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {\n        return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },\n            close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };\n    }\n    let startText, endText;\n    if (to - from <= 2 * SearchMargin) {\n        startText = endText = state.sliceDoc(from, to);\n    }\n    else {\n        startText = state.sliceDoc(from, from + SearchMargin);\n        endText = state.sliceDoc(to - SearchMargin, to);\n    }\n    let startSpace = /^\\s*/.exec(startText)[0].length, endSpace = /\\s*$/.exec(endText)[0].length;\n    let endOff = endText.length - endSpace - close.length;\n    if (startText.slice(startSpace, startSpace + open.length) == open &&\n        endText.slice(endOff, endOff + close.length) == close) {\n        return { open: { pos: from + startSpace + open.length,\n                margin: /\\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },\n            close: { pos: to - endSpace - close.length,\n                margin: /\\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };\n    }\n    return null;\n}\nfunction selectedLineRanges(state) {\n    let ranges = [];\n    for (let r of state.selection.ranges) {\n        let fromLine = state.doc.lineAt(r.from);\n        let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);\n        let last = ranges.length - 1;\n        if (last >= 0 && ranges[last].to > fromLine.from)\n            ranges[last].to = toLine.to;\n        else\n            ranges.push({ from: fromLine.from + /^\\s*/.exec(fromLine.text)[0].length, to: toLine.to });\n    }\n    return ranges;\n}\n// Performs toggle, comment and uncomment of block comments in\n// languages that support them.\nfunction changeBlockComment(option, state, ranges = state.selection.ranges) {\n    let tokens = ranges.map(r => getConfig(state, r.from).block);\n    if (!tokens.every(c => c))\n        return null;\n    let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));\n    if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {\n        return { changes: state.changes(ranges.map((range, i) => {\n                if (comments[i])\n                    return [];\n                return [{ from: range.from, insert: tokens[i].open + \" \" }, { from: range.to, insert: \" \" + tokens[i].close }];\n            })) };\n    }\n    else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {\n        let changes = [];\n        for (let i = 0, comment; i < comments.length; i++)\n            if (comment = comments[i]) {\n                let token = tokens[i], { open, close } = comment;\n                changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });\n            }\n        return { changes };\n    }\n    return null;\n}\n// Performs toggle, comment and uncomment of line comments.\nfunction changeLineComment(option, state, ranges = state.selection.ranges) {\n    let lines = [];\n    let prevLine = -1;\n    for (let { from, to } of ranges) {\n        let startI = lines.length, minIndent = 1e9;\n        let token = getConfig(state, from).line;\n        if (!token)\n            continue;\n        for (let pos = from; pos <= to;) {\n            let line = state.doc.lineAt(pos);\n            if (line.from > prevLine && (from == to || to > line.from)) {\n                prevLine = line.from;\n                let indent = /^\\s*/.exec(line.text)[0].length;\n                let empty = indent == line.length;\n                let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;\n                if (indent < line.text.length && indent < minIndent)\n                    minIndent = indent;\n                lines.push({ line, comment, token, indent, empty, single: false });\n            }\n            pos = line.to + 1;\n        }\n        if (minIndent < 1e9)\n            for (let i = startI; i < lines.length; i++)\n                if (lines[i].indent < lines[i].line.text.length)\n                    lines[i].indent = minIndent;\n        if (lines.length == startI + 1)\n            lines[startI].single = true;\n    }\n    if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {\n        let changes = [];\n        for (let { line, token, indent, empty, single } of lines)\n            if (single || !empty)\n                changes.push({ from: line.from + indent, insert: token + \" \" });\n        let changeSet = state.changes(changes);\n        return { changes: changeSet, selection: state.selection.map(changeSet, 1) };\n    }\n    else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {\n        let changes = [];\n        for (let { line, comment, token } of lines)\n            if (comment >= 0) {\n                let from = line.from + comment, to = from + token.length;\n                if (line.text[to - line.from] == \" \")\n                    to++;\n                changes.push({ from, to });\n            }\n        return { changes };\n    }\n    return null;\n}\n\nconst fromHistory = /*@__PURE__*/Annotation.define();\n/**\nTransaction annotation that will prevent that transaction from\nbeing combined with other transactions in the undo history. Given\n`\"before\"`, it'll prevent merging with previous transactions. With\n`\"after\"`, subsequent transactions won't be combined with this\none. With `\"full\"`, the transaction is isolated on both sides.\n*/\nconst isolateHistory = /*@__PURE__*/Annotation.define();\n/**\nThis facet provides a way to register functions that, given a\ntransaction, provide a set of effects that the history should\nstore when inverting the transaction. This can be used to\nintegrate some kinds of effects in the history, so that they can\nbe undone (and redone again).\n*/\nconst invertedEffects = /*@__PURE__*/Facet.define();\nconst historyConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            minDepth: 100,\n            newGroupDelay: 500,\n            joinToEvent: (_t, isAdjacent) => isAdjacent,\n        }, {\n            minDepth: Math.max,\n            newGroupDelay: Math.min,\n            joinToEvent: (a, b) => (tr, adj) => a(tr, adj) || b(tr, adj)\n        });\n    }\n});\nfunction changeEnd(changes) {\n    let end = 0;\n    changes.iterChangedRanges((_, to) => end = to);\n    return end;\n}\nconst historyField_ = /*@__PURE__*/StateField.define({\n    create() {\n        return HistoryState.empty;\n    },\n    update(state, tr) {\n        let config = tr.state.facet(historyConfig);\n        let fromHist = tr.annotation(fromHistory);\n        if (fromHist) {\n            let selection = tr.docChanged ? EditorSelection.single(changeEnd(tr.changes)) : undefined;\n            let item = HistEvent.fromTransaction(tr, selection), from = fromHist.side;\n            let other = from == 0 /* BranchName.Done */ ? state.undone : state.done;\n            if (item)\n                other = updateBranch(other, other.length, config.minDepth, item);\n            else\n                other = addSelection(other, tr.startState.selection);\n            return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);\n        }\n        let isolate = tr.annotation(isolateHistory);\n        if (isolate == \"full\" || isolate == \"before\")\n            state = state.isolate();\n        if (tr.annotation(Transaction.addToHistory) === false)\n            return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;\n        let event = HistEvent.fromTransaction(tr);\n        let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);\n        if (event)\n            state = state.addChanges(event, time, userEvent, config, tr);\n        else if (tr.selection)\n            state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);\n        if (isolate == \"full\" || isolate == \"after\")\n            state = state.isolate();\n        return state;\n    },\n    toJSON(value) {\n        return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };\n    },\n    fromJSON(json) {\n        return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));\n    }\n});\n/**\nCreate a history extension with the given configuration.\n*/\nfunction history(config = {}) {\n    return [\n        historyField_,\n        historyConfig.of(config),\n        EditorView.domEventHandlers({\n            beforeinput(e, view) {\n                let command = e.inputType == \"historyUndo\" ? undo : e.inputType == \"historyRedo\" ? redo : null;\n                if (!command)\n                    return false;\n                e.preventDefault();\n                return command(view);\n            }\n        })\n    ];\n}\n/**\nThe state field used to store the history data. Should probably\nonly be used when you want to\n[serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or\n[deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way\nthat preserves history.\n*/\nconst historyField = historyField_;\nfunction cmd(side, selection) {\n    return function ({ state, dispatch }) {\n        if (!selection && state.readOnly)\n            return false;\n        let historyState = state.field(historyField_, false);\n        if (!historyState)\n            return false;\n        let tr = historyState.pop(side, state, selection);\n        if (!tr)\n            return false;\n        dispatch(tr);\n        return true;\n    };\n}\n/**\nUndo a single group of history events. Returns false if no group\nwas available.\n*/\nconst undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);\n/**\nRedo a group of history events. Returns false if no group was\navailable.\n*/\nconst redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);\n/**\nUndo a change or selection change.\n*/\nconst undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);\n/**\nRedo a change or selection change.\n*/\nconst redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);\nfunction depth(side) {\n    return function (state) {\n        let histState = state.field(historyField_, false);\n        if (!histState)\n            return 0;\n        let branch = side == 0 /* BranchName.Done */ ? histState.done : histState.undone;\n        return branch.length - (branch.length && !branch[0].changes ? 1 : 0);\n    };\n}\n/**\nThe amount of undoable change events available in a given state.\n*/\nconst undoDepth = /*@__PURE__*/depth(0 /* BranchName.Done */);\n/**\nThe amount of redoable change events available in a given state.\n*/\nconst redoDepth = /*@__PURE__*/depth(1 /* BranchName.Undone */);\n// History events store groups of changes or effects that need to be\n// undone/redone together.\nclass HistEvent {\n    constructor(\n    // The changes in this event. Normal events hold at least one\n    // change or effect. But it may be necessary to store selection\n    // events before the first change, in which case a special type of\n    // instance is created which doesn't hold any changes, with\n    // changes == startSelection == undefined\n    changes, \n    // The effects associated with this event\n    effects, \n    // Accumulated mapping (from addToHistory==false) that should be\n    // applied to events below this one.\n    mapped, \n    // The selection before this event\n    startSelection, \n    // Stores selection changes after this event, to be used for\n    // selection undo/redo.\n    selectionsAfter) {\n        this.changes = changes;\n        this.effects = effects;\n        this.mapped = mapped;\n        this.startSelection = startSelection;\n        this.selectionsAfter = selectionsAfter;\n    }\n    setSelAfter(after) {\n        return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);\n    }\n    toJSON() {\n        var _a, _b, _c;\n        return {\n            changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),\n            mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),\n            startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),\n            selectionsAfter: this.selectionsAfter.map(s => s.toJSON())\n        };\n    }\n    static fromJSON(json) {\n        return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));\n    }\n    // This does not check `addToHistory` and such, it assumes the\n    // transaction needs to be converted to an item. Returns null when\n    // there are no changes or effects in the transaction.\n    static fromTransaction(tr, selection) {\n        let effects = none;\n        for (let invert of tr.startState.facet(invertedEffects)) {\n            let result = invert(tr);\n            if (result.length)\n                effects = effects.concat(result);\n        }\n        if (!effects.length && tr.changes.empty)\n            return null;\n        return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);\n    }\n    static selection(selections) {\n        return new HistEvent(undefined, none, undefined, undefined, selections);\n    }\n}\nfunction updateBranch(branch, to, maxLen, newEvent) {\n    let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;\n    let newBranch = branch.slice(start, to);\n    newBranch.push(newEvent);\n    return newBranch;\n}\nfunction isAdjacent(a, b) {\n    let ranges = [], isAdjacent = false;\n    a.iterChangedRanges((f, t) => ranges.push(f, t));\n    b.iterChangedRanges((_f, _t, f, t) => {\n        for (let i = 0; i < ranges.length;) {\n            let from = ranges[i++], to = ranges[i++];\n            if (t >= from && f <= to)\n                isAdjacent = true;\n        }\n    });\n    return isAdjacent;\n}\nfunction eqSelectionShape(a, b) {\n    return a.ranges.length == b.ranges.length &&\n        a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;\n}\nfunction conc(a, b) {\n    return !a.length ? b : !b.length ? a : a.concat(b);\n}\nconst none = [];\nconst MaxSelectionsPerEvent = 200;\nfunction addSelection(branch, selection) {\n    if (!branch.length) {\n        return [HistEvent.selection([selection])];\n    }\n    else {\n        let lastEvent = branch[branch.length - 1];\n        let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));\n        if (sels.length && sels[sels.length - 1].eq(selection))\n            return branch;\n        sels.push(selection);\n        return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));\n    }\n}\n// Assumes the top item has one or more selectionAfter values\nfunction popSelection(branch) {\n    let last = branch[branch.length - 1];\n    let newBranch = branch.slice();\n    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));\n    return newBranch;\n}\n// Add a mapping to the top event in the given branch. If this maps\n// away all the changes and effects in that item, drop it and\n// propagate the mapping to the next item.\nfunction addMappingToBranch(branch, mapping) {\n    if (!branch.length)\n        return branch;\n    let length = branch.length, selections = none;\n    while (length) {\n        let event = mapEvent(branch[length - 1], mapping, selections);\n        if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping\n            let result = branch.slice(0, length);\n            result[length - 1] = event;\n            return result;\n        }\n        else { // Drop this event, since there's no changes or effects left\n            mapping = event.mapped;\n            length--;\n            selections = event.selectionsAfter;\n        }\n    }\n    return selections.length ? [HistEvent.selection(selections)] : none;\n}\nfunction mapEvent(event, mapping, extraSelections) {\n    let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections);\n    // Change-less events don't store mappings (they are always the last event in a branch)\n    if (!event.changes)\n        return HistEvent.selection(selections);\n    let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);\n    let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;\n    return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);\n}\nconst joinableUserEvent = /^(input\\.type|delete)($|\\.)/;\nclass HistoryState {\n    constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {\n        this.done = done;\n        this.undone = undone;\n        this.prevTime = prevTime;\n        this.prevUserEvent = prevUserEvent;\n    }\n    isolate() {\n        return this.prevTime ? new HistoryState(this.done, this.undone) : this;\n    }\n    addChanges(event, time, userEvent, config, tr) {\n        let done = this.done, lastEvent = done[done.length - 1];\n        if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&\n            (!userEvent || joinableUserEvent.test(userEvent)) &&\n            ((!lastEvent.selectionsAfter.length &&\n                time - this.prevTime < config.newGroupDelay &&\n                config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes))) ||\n                // For compose (but not compose.start) events, always join with previous event\n                userEvent == \"input.type.compose\")) {\n            done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));\n        }\n        else {\n            done = updateBranch(done, done.length, config.minDepth, event);\n        }\n        return new HistoryState(done, none, time, userEvent);\n    }\n    addSelection(selection, time, userEvent, newGroupDelay) {\n        let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;\n        if (last.length > 0 &&\n            time - this.prevTime < newGroupDelay &&\n            userEvent == this.prevUserEvent && userEvent && /^select($|\\.)/.test(userEvent) &&\n            eqSelectionShape(last[last.length - 1], selection))\n            return this;\n        return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);\n    }\n    addMapping(mapping) {\n        return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);\n    }\n    pop(side, state, selection) {\n        let branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;\n        if (branch.length == 0)\n            return null;\n        let event = branch[branch.length - 1];\n        if (selection && event.selectionsAfter.length) {\n            return state.update({\n                selection: event.selectionsAfter[event.selectionsAfter.length - 1],\n                annotations: fromHistory.of({ side, rest: popSelection(branch) }),\n                userEvent: side == 0 /* BranchName.Done */ ? \"select.undo\" : \"select.redo\",\n                scrollIntoView: true\n            });\n        }\n        else if (!event.changes) {\n            return null;\n        }\n        else {\n            let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);\n            if (event.mapped)\n                rest = addMappingToBranch(rest, event.mapped);\n            return state.update({\n                changes: event.changes,\n                selection: event.startSelection,\n                effects: event.effects,\n                annotations: fromHistory.of({ side, rest }),\n                filter: false,\n                userEvent: side == 0 /* BranchName.Done */ ? \"undo\" : \"redo\",\n                scrollIntoView: true\n            });\n        }\n    }\n}\nHistoryState.empty = /*@__PURE__*/new HistoryState(none, none);\n/**\nDefault key bindings for the undo history.\n\n- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).\n- Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).\n- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).\n- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).\n*/\nconst historyKeymap = [\n    { key: \"Mod-z\", run: undo, preventDefault: true },\n    { key: \"Mod-y\", mac: \"Mod-Shift-z\", run: redo, preventDefault: true },\n    { linux: \"Ctrl-Shift-z\", run: redo, preventDefault: true },\n    { key: \"Mod-u\", run: undoSelection, preventDefault: true },\n    { key: \"Alt-u\", mac: \"Mod-Shift-u\", run: redoSelection, preventDefault: true }\n];\n\nfunction updateSel(sel, by) {\n    return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);\n}\nfunction setSel(state, selection) {\n    return state.update({ selection, scrollIntoView: true, userEvent: \"select\" });\n}\nfunction moveSel({ state, dispatch }, how) {\n    let selection = updateSel(state.selection, how);\n    if (selection.eq(state.selection))\n        return false;\n    dispatch(setSel(state, selection));\n    return true;\n}\nfunction rangeEnd(range, forward) {\n    return EditorSelection.cursor(forward ? range.to : range.from);\n}\nfunction cursorByChar(view, forward) {\n    return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));\n}\nfunction ltrAtCursor(view) {\n    return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;\n}\n/**\nMove the selection one character to the left (which is backward in\nleft-to-right text, forward in right-to-left text).\n*/\nconst cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));\n/**\nMove the selection one character to the right.\n*/\nconst cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));\n/**\nMove the selection one character forward.\n*/\nconst cursorCharForward = view => cursorByChar(view, true);\n/**\nMove the selection one character backward.\n*/\nconst cursorCharBackward = view => cursorByChar(view, false);\nfunction cursorByGroup(view, forward) {\n    return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));\n}\n/**\nMove the selection to the left across one group of word or\nnon-word (but also non-space) characters.\n*/\nconst cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));\n/**\nMove the selection one group to the right.\n*/\nconst cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));\n/**\nMove the selection one group forward.\n*/\nconst cursorGroupForward = view => cursorByGroup(view, true);\n/**\nMove the selection one group backward.\n*/\nconst cursorGroupBackward = view => cursorByGroup(view, false);\nfunction moveBySubword(view, range, forward) {\n    let categorize = view.state.charCategorizer(range.from);\n    return view.moveByChar(range, forward, start => {\n        let cat = CharCategory.Space, pos = range.from;\n        let done = false, sawUpper = false, sawLower = false;\n        let step = (next) => {\n            if (done)\n                return false;\n            pos += forward ? next.length : -next.length;\n            let nextCat = categorize(next), ahead;\n            if (nextCat == CharCategory.Word && next.charCodeAt(0) < 128 && /[\\W_]/.test(next))\n                nextCat = -1; // Treat word punctuation specially\n            if (cat == CharCategory.Space)\n                cat = nextCat;\n            if (cat != nextCat)\n                return false;\n            if (cat == CharCategory.Word) {\n                if (next.toLowerCase() == next) {\n                    if (!forward && sawUpper)\n                        return false;\n                    sawLower = true;\n                }\n                else if (sawLower) {\n                    if (forward)\n                        return false;\n                    done = true;\n                }\n                else {\n                    if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == CharCategory.Word &&\n                        ahead.toLowerCase() == ahead)\n                        return false;\n                    sawUpper = true;\n                }\n            }\n            return true;\n        };\n        step(start);\n        return step;\n    });\n}\nfunction cursorBySubword(view, forward) {\n    return moveSel(view, range => range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward));\n}\n/**\nMove the selection one group or camel-case subword forward.\n*/\nconst cursorSubwordForward = view => cursorBySubword(view, true);\n/**\nMove the selection one group or camel-case subword backward.\n*/\nconst cursorSubwordBackward = view => cursorBySubword(view, false);\nfunction interestingNode(state, node, bracketProp) {\n    if (node.type.prop(bracketProp))\n        return true;\n    let len = node.to - node.from;\n    return len && (len > 2 || /[^\\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;\n}\nfunction moveBySyntax(state, start, forward) {\n    let pos = syntaxTree(state).resolveInner(start.head);\n    let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;\n    // Scan forward through child nodes to see if there's an interesting\n    // node ahead.\n    for (let at = start.head;;) {\n        let next = forward ? pos.childAfter(at) : pos.childBefore(at);\n        if (!next)\n            break;\n        if (interestingNode(state, next, bracketProp))\n            pos = next;\n        else\n            at = forward ? next.to : next.from;\n    }\n    let bracket = pos.type.prop(bracketProp), match, newPos;\n    if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)\n        newPos = forward ? match.end.to : match.end.from;\n    else\n        newPos = forward ? pos.to : pos.from;\n    return EditorSelection.cursor(newPos, forward ? -1 : 1);\n}\n/**\nMove the cursor over the next syntactic element to the left.\n*/\nconst cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));\n/**\nMove the cursor over the next syntactic element to the right.\n*/\nconst cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));\nfunction cursorByLine(view, forward) {\n    return moveSel(view, range => {\n        if (!range.empty)\n            return rangeEnd(range, forward);\n        let moved = view.moveVertically(range, forward);\n        return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);\n    });\n}\n/**\nMove the selection one line up.\n*/\nconst cursorLineUp = view => cursorByLine(view, false);\n/**\nMove the selection one line down.\n*/\nconst cursorLineDown = view => cursorByLine(view, true);\nfunction pageInfo(view) {\n    let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;\n    let marginTop = 0, marginBottom = 0, height;\n    if (selfScroll) {\n        for (let source of view.state.facet(EditorView.scrollMargins)) {\n            let margins = source(view);\n            if (margins === null || margins === void 0 ? void 0 : margins.top)\n                marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);\n            if (margins === null || margins === void 0 ? void 0 : margins.bottom)\n                marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);\n        }\n        height = view.scrollDOM.clientHeight - marginTop - marginBottom;\n    }\n    else {\n        height = (view.dom.ownerDocument.defaultView || window).innerHeight;\n    }\n    return { marginTop, marginBottom, selfScroll,\n        height: Math.max(view.defaultLineHeight, height - 5) };\n}\nfunction cursorByPage(view, forward) {\n    let page = pageInfo(view);\n    let { state } = view, selection = updateSel(state.selection, range => {\n        return range.empty ? view.moveVertically(range, forward, page.height)\n            : rangeEnd(range, forward);\n    });\n    if (selection.eq(state.selection))\n        return false;\n    let effect;\n    if (page.selfScroll) {\n        let startPos = view.coordsAtPos(state.selection.main.head);\n        let scrollRect = view.scrollDOM.getBoundingClientRect();\n        let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;\n        if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)\n            effect = EditorView.scrollIntoView(selection.main.head, { y: \"start\", yMargin: startPos.top - scrollTop });\n    }\n    view.dispatch(setSel(state, selection), { effects: effect });\n    return true;\n}\n/**\nMove the selection one page up.\n*/\nconst cursorPageUp = view => cursorByPage(view, false);\n/**\nMove the selection one page down.\n*/\nconst cursorPageDown = view => cursorByPage(view, true);\nfunction moveByLineBoundary(view, start, forward) {\n    let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);\n    if (moved.head == start.head && moved.head != (forward ? line.to : line.from))\n        moved = view.moveToLineBoundary(start, forward, false);\n    if (!forward && moved.head == line.from && line.length) {\n        let space = /^\\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;\n        if (space && start.head != line.from + space)\n            moved = EditorSelection.cursor(line.from + space);\n    }\n    return moved;\n}\n/**\nMove the selection to the next line wrap point, or to the end of\nthe line if there isn't one left on this line.\n*/\nconst cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));\n/**\nMove the selection to previous line wrap point, or failing that to\nthe start of the line. If the line is indented, and the cursor\nisn't already at the end of the indentation, this will move to the\nend of the indentation instead of the start of the line.\n*/\nconst cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));\n/**\nMove the selection one line wrap point to the left.\n*/\nconst cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));\n/**\nMove the selection one line wrap point to the right.\n*/\nconst cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));\n/**\nMove the selection to the start of the line.\n*/\nconst cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));\n/**\nMove the selection to the end of the line.\n*/\nconst cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));\nfunction toMatchingBracket(state, dispatch, extend) {\n    let found = false, selection = updateSel(state.selection, range => {\n        let matching = matchBrackets(state, range.head, -1)\n            || matchBrackets(state, range.head, 1)\n            || (range.head > 0 && matchBrackets(state, range.head - 1, 1))\n            || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));\n        if (!matching || !matching.end)\n            return range;\n        found = true;\n        let head = matching.start.from == range.head ? matching.end.to : matching.end.from;\n        return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);\n    });\n    if (!found)\n        return false;\n    dispatch(setSel(state, selection));\n    return true;\n}\n/**\nMove the selection to the bracket matching the one it is currently\non, if any.\n*/\nconst cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);\n/**\nExtend the selection to the bracket matching the one the selection\nhead is currently on, if any.\n*/\nconst selectMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, true);\nfunction extendSel(view, how) {\n    let selection = updateSel(view.state.selection, range => {\n        let head = how(range);\n        return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);\n    });\n    if (selection.eq(view.state.selection))\n        return false;\n    view.dispatch(setSel(view.state, selection));\n    return true;\n}\nfunction selectByChar(view, forward) {\n    return extendSel(view, range => view.moveByChar(range, forward));\n}\n/**\nMove the selection head one character to the left, while leaving\nthe anchor in place.\n*/\nconst selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));\n/**\nMove the selection head one character to the right.\n*/\nconst selectCharRight = view => selectByChar(view, ltrAtCursor(view));\n/**\nMove the selection head one character forward.\n*/\nconst selectCharForward = view => selectByChar(view, true);\n/**\nMove the selection head one character backward.\n*/\nconst selectCharBackward = view => selectByChar(view, false);\nfunction selectByGroup(view, forward) {\n    return extendSel(view, range => view.moveByGroup(range, forward));\n}\n/**\nMove the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to\nthe left.\n*/\nconst selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));\n/**\nMove the selection head one group to the right.\n*/\nconst selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));\n/**\nMove the selection head one group forward.\n*/\nconst selectGroupForward = view => selectByGroup(view, true);\n/**\nMove the selection head one group backward.\n*/\nconst selectGroupBackward = view => selectByGroup(view, false);\nfunction selectBySubword(view, forward) {\n    return extendSel(view, range => moveBySubword(view, range, forward));\n}\n/**\nMove the selection head one group or camel-case subword forward.\n*/\nconst selectSubwordForward = view => selectBySubword(view, true);\n/**\nMove the selection head one group or subword backward.\n*/\nconst selectSubwordBackward = view => selectBySubword(view, false);\n/**\nMove the selection head over the next syntactic element to the left.\n*/\nconst selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));\n/**\nMove the selection head over the next syntactic element to the right.\n*/\nconst selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));\nfunction selectByLine(view, forward) {\n    return extendSel(view, range => view.moveVertically(range, forward));\n}\n/**\nMove the selection head one line up.\n*/\nconst selectLineUp = view => selectByLine(view, false);\n/**\nMove the selection head one line down.\n*/\nconst selectLineDown = view => selectByLine(view, true);\nfunction selectByPage(view, forward) {\n    return extendSel(view, range => view.moveVertically(range, forward, pageInfo(view).height));\n}\n/**\nMove the selection head one page up.\n*/\nconst selectPageUp = view => selectByPage(view, false);\n/**\nMove the selection head one page down.\n*/\nconst selectPageDown = view => selectByPage(view, true);\n/**\nMove the selection head to the next line boundary.\n*/\nconst selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));\n/**\nMove the selection head to the previous line boundary.\n*/\nconst selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));\n/**\nMove the selection head one line boundary to the left.\n*/\nconst selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));\n/**\nMove the selection head one line boundary to the right.\n*/\nconst selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));\n/**\nMove the selection head to the start of the line.\n*/\nconst selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));\n/**\nMove the selection head to the end of the line.\n*/\nconst selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));\n/**\nMove the selection to the start of the document.\n*/\nconst cursorDocStart = ({ state, dispatch }) => {\n    dispatch(setSel(state, { anchor: 0 }));\n    return true;\n};\n/**\nMove the selection to the end of the document.\n*/\nconst cursorDocEnd = ({ state, dispatch }) => {\n    dispatch(setSel(state, { anchor: state.doc.length }));\n    return true;\n};\n/**\nMove the selection head to the start of the document.\n*/\nconst selectDocStart = ({ state, dispatch }) => {\n    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));\n    return true;\n};\n/**\nMove the selection head to the end of the document.\n*/\nconst selectDocEnd = ({ state, dispatch }) => {\n    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));\n    return true;\n};\n/**\nSelect the entire document.\n*/\nconst selectAll = ({ state, dispatch }) => {\n    dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: \"select\" }));\n    return true;\n};\n/**\nExpand the selection to cover entire lines.\n*/\nconst selectLine = ({ state, dispatch }) => {\n    let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));\n    dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: \"select\" }));\n    return true;\n};\n/**\nSelect the next syntactic construct that is larger than the\nselection. Note that this will only work insofar as the language\n[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full\nsyntax tree.\n*/\nconst selectParentSyntax = ({ state, dispatch }) => {\n    let selection = updateSel(state.selection, range => {\n        var _a;\n        let context = syntaxTree(state).resolveInner(range.head, 1);\n        while (!((context.from < range.from && context.to >= range.to) ||\n            (context.to > range.to && context.from <= range.from) ||\n            !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))\n            context = context.parent;\n        return EditorSelection.range(context.to, context.from);\n    });\n    dispatch(setSel(state, selection));\n    return true;\n};\n/**\nSimplify the current selection. When multiple ranges are selected,\nreduce it to its main range. Otherwise, if the selection is\nnon-empty, convert it to a cursor selection.\n*/\nconst simplifySelection = ({ state, dispatch }) => {\n    let cur = state.selection, selection = null;\n    if (cur.ranges.length > 1)\n        selection = EditorSelection.create([cur.main]);\n    else if (!cur.main.empty)\n        selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);\n    if (!selection)\n        return false;\n    dispatch(setSel(state, selection));\n    return true;\n};\nfunction deleteBy(target, by) {\n    if (target.state.readOnly)\n        return false;\n    let event = \"delete.selection\", { state } = target;\n    let changes = state.changeByRange(range => {\n        let { from, to } = range;\n        if (from == to) {\n            let towards = by(from);\n            if (towards < from) {\n                event = \"delete.backward\";\n                towards = skipAtomic(target, towards, false);\n            }\n            else if (towards > from) {\n                event = \"delete.forward\";\n                towards = skipAtomic(target, towards, true);\n            }\n            from = Math.min(from, towards);\n            to = Math.max(to, towards);\n        }\n        else {\n            from = skipAtomic(target, from, false);\n            to = skipAtomic(target, to, true);\n        }\n        return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };\n    });\n    if (changes.changes.empty)\n        return false;\n    target.dispatch(state.update(changes, {\n        scrollIntoView: true,\n        userEvent: event,\n        effects: event == \"delete.selection\" ? EditorView.announce.of(state.phrase(\"Selection deleted\")) : undefined\n    }));\n    return true;\n}\nfunction skipAtomic(target, pos, forward) {\n    if (target instanceof EditorView)\n        for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))\n            ranges.between(pos, pos, (from, to) => {\n                if (from < pos && to > pos)\n                    pos = forward ? to : from;\n            });\n    return pos;\n}\nconst deleteByChar = (target, forward) => deleteBy(target, pos => {\n    let { state } = target, line = state.doc.lineAt(pos), before, targetPos;\n    if (!forward && pos > line.from && pos < line.from + 200 &&\n        !/[^ \\t]/.test(before = line.text.slice(0, pos - line.from))) {\n        if (before[before.length - 1] == \"\\t\")\n            return pos - 1;\n        let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);\n        for (let i = 0; i < drop && before[before.length - 1 - i] == \" \"; i++)\n            pos--;\n        targetPos = pos;\n    }\n    else {\n        targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;\n        if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))\n            targetPos += forward ? 1 : -1;\n    }\n    return targetPos;\n});\n/**\nDelete the selection, or, for cursor selections, the character\nbefore the cursor.\n*/\nconst deleteCharBackward = view => deleteByChar(view, false);\n/**\nDelete the selection or the character after the cursor.\n*/\nconst deleteCharForward = view => deleteByChar(view, true);\nconst deleteByGroup = (target, forward) => deleteBy(target, start => {\n    let pos = start, { state } = target, line = state.doc.lineAt(pos);\n    let categorize = state.charCategorizer(pos);\n    for (let cat = null;;) {\n        if (pos == (forward ? line.to : line.from)) {\n            if (pos == start && line.number != (forward ? state.doc.lines : 1))\n                pos += forward ? 1 : -1;\n            break;\n        }\n        let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;\n        let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);\n        let nextCat = categorize(nextChar);\n        if (cat != null && nextCat != cat)\n            break;\n        if (nextChar != \" \" || pos != start)\n            cat = nextCat;\n        pos = next;\n    }\n    return pos;\n});\n/**\nDelete the selection or backward until the end of the next\n[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of\nwhitespace when they consist of a single space.\n*/\nconst deleteGroupBackward = target => deleteByGroup(target, false);\n/**\nDelete the selection or forward until the end of the next group.\n*/\nconst deleteGroupForward = target => deleteByGroup(target, true);\n/**\nDelete the selection, or, if it is a cursor selection, delete to\nthe end of the line. If the cursor is directly at the end of the\nline, delete the line break after it.\n*/\nconst deleteToLineEnd = view => deleteBy(view, pos => {\n    let lineEnd = view.lineBlockAt(pos).to;\n    return pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1);\n});\n/**\nDelete the selection, or, if it is a cursor selection, delete to\nthe start of the line. If the cursor is directly at the start of the\nline, delete the line break before it.\n*/\nconst deleteToLineStart = view => deleteBy(view, pos => {\n    let lineStart = view.lineBlockAt(pos).from;\n    return pos > lineStart ? lineStart : Math.max(0, pos - 1);\n});\n/**\nDelete all whitespace directly before a line end from the\ndocument.\n*/\nconst deleteTrailingWhitespace = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let changes = [];\n    for (let pos = 0, prev = \"\", iter = state.doc.iter();;) {\n        iter.next();\n        if (iter.lineBreak || iter.done) {\n            let trailing = prev.search(/\\s+$/);\n            if (trailing > -1)\n                changes.push({ from: pos - (prev.length - trailing), to: pos });\n            if (iter.done)\n                break;\n            prev = \"\";\n        }\n        else {\n            prev = iter.value;\n        }\n        pos += iter.value.length;\n    }\n    if (!changes.length)\n        return false;\n    dispatch(state.update({ changes, userEvent: \"delete\" }));\n    return true;\n};\n/**\nReplace each selection range with a line break, leaving the cursor\non the line before the break.\n*/\nconst splitLine = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let changes = state.changeByRange(range => {\n        return { changes: { from: range.from, to: range.to, insert: Text.of([\"\", \"\"]) },\n            range: EditorSelection.cursor(range.from) };\n    });\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\n/**\nFlip the characters before and after the cursor(s).\n*/\nconst transposeChars = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let changes = state.changeByRange(range => {\n        if (!range.empty || range.from == 0 || range.from == state.doc.length)\n            return { range };\n        let pos = range.from, line = state.doc.lineAt(pos);\n        let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;\n        let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;\n        return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },\n            range: EditorSelection.cursor(to) };\n    });\n    if (changes.changes.empty)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"move.character\" }));\n    return true;\n};\nfunction selectedLineBlocks(state) {\n    let blocks = [], upto = -1;\n    for (let range of state.selection.ranges) {\n        let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);\n        if (!range.empty && range.to == endLine.from)\n            endLine = state.doc.lineAt(range.to - 1);\n        if (upto >= startLine.number) {\n            let prev = blocks[blocks.length - 1];\n            prev.to = endLine.to;\n            prev.ranges.push(range);\n        }\n        else {\n            blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });\n        }\n        upto = endLine.number + 1;\n    }\n    return blocks;\n}\nfunction moveLine(state, dispatch, forward) {\n    if (state.readOnly)\n        return false;\n    let changes = [], ranges = [];\n    for (let block of selectedLineBlocks(state)) {\n        if (forward ? block.to == state.doc.length : block.from == 0)\n            continue;\n        let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);\n        let size = nextLine.length + 1;\n        if (forward) {\n            changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });\n            for (let r of block.ranges)\n                ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));\n        }\n        else {\n            changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });\n            for (let r of block.ranges)\n                ranges.push(EditorSelection.range(r.anchor - size, r.head - size));\n        }\n    }\n    if (!changes.length)\n        return false;\n    dispatch(state.update({\n        changes,\n        scrollIntoView: true,\n        selection: EditorSelection.create(ranges, state.selection.mainIndex),\n        userEvent: \"move.line\"\n    }));\n    return true;\n}\n/**\nMove the selected lines up one line.\n*/\nconst moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);\n/**\nMove the selected lines down one line.\n*/\nconst moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);\nfunction copyLine(state, dispatch, forward) {\n    if (state.readOnly)\n        return false;\n    let changes = [];\n    for (let block of selectedLineBlocks(state)) {\n        if (forward)\n            changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });\n        else\n            changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });\n    }\n    dispatch(state.update({ changes, scrollIntoView: true, userEvent: \"input.copyline\" }));\n    return true;\n}\n/**\nCreate a copy of the selected lines. Keep the selection in the top copy.\n*/\nconst copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);\n/**\nCreate a copy of the selected lines. Keep the selection in the bottom copy.\n*/\nconst copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);\n/**\nDelete selected lines.\n*/\nconst deleteLine = view => {\n    if (view.state.readOnly)\n        return false;\n    let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {\n        if (from > 0)\n            from--;\n        else if (to < state.doc.length)\n            to++;\n        return { from, to };\n    }));\n    let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);\n    view.dispatch({ changes, selection, scrollIntoView: true, userEvent: \"delete.line\" });\n    return true;\n};\n/**\nReplace the selection with a newline.\n*/\nconst insertNewline = ({ state, dispatch }) => {\n    dispatch(state.update(state.replaceSelection(state.lineBreak), { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isBetweenBrackets(state, pos) {\n    if (/\\(\\)|\\[\\]|\\{\\}/.test(state.sliceDoc(pos - 1, pos + 1)))\n        return { from: pos, to: pos };\n    let context = syntaxTree(state).resolveInner(pos);\n    let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;\n    if (before && after && before.to <= pos && after.from >= pos &&\n        (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&\n        state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)\n        return { from: before.to, to: after.from };\n    return null;\n}\n/**\nReplace the selection with a newline and indent the newly created\nline(s). If the current line consists only of whitespace, this\nwill also delete that whitespace. When the cursor is between\nmatching brackets, an additional newline will be inserted after\nthe cursor.\n*/\nconst insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);\n/**\nCreate a blank, indented line below the current line.\n*/\nconst insertBlankLine = /*@__PURE__*/newlineAndIndent(true);\nfunction newlineAndIndent(atEof) {\n    return ({ state, dispatch }) => {\n        if (state.readOnly)\n            return false;\n        let changes = state.changeByRange(range => {\n            let { from, to } = range, line = state.doc.lineAt(from);\n            let explode = !atEof && from == to && isBetweenBrackets(state, from);\n            if (atEof)\n                from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;\n            let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });\n            let indent = getIndentation(cx, from);\n            if (indent == null)\n                indent = /^\\s*/.exec(state.doc.lineAt(from).text)[0].length;\n            while (to < line.to && /\\s/.test(line.text[to - line.from]))\n                to++;\n            if (explode)\n                ({ from, to } = explode);\n            else if (from > line.from && from < line.from + 100 && !/\\S/.test(line.text.slice(0, from)))\n                from = line.from;\n            let insert = [\"\", indentString(state, indent)];\n            if (explode)\n                insert.push(indentString(state, cx.lineIndent(line.from, -1)));\n            return { changes: { from, to, insert: Text.of(insert) },\n                range: EditorSelection.cursor(from + 1 + insert[1].length) };\n        });\n        dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n        return true;\n    };\n}\nfunction changeBySelectedLine(state, f) {\n    let atLine = -1;\n    return state.changeByRange(range => {\n        let changes = [];\n        for (let pos = range.from; pos <= range.to;) {\n            let line = state.doc.lineAt(pos);\n            if (line.number > atLine && (range.empty || range.to > line.from)) {\n                f(line, changes, range);\n                atLine = line.number;\n            }\n            pos = line.to + 1;\n        }\n        let changeSet = state.changes(changes);\n        return { changes,\n            range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };\n    });\n}\n/**\nAuto-indent the selected lines. This uses the [indentation service\nfacet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent\ninformation.\n*/\nconst indentSelection = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let updated = Object.create(null);\n    let context = new IndentContext(state, { overrideIndentation: start => {\n            let found = updated[start];\n            return found == null ? -1 : found;\n        } });\n    let changes = changeBySelectedLine(state, (line, changes, range) => {\n        let indent = getIndentation(context, line.from);\n        if (indent == null)\n            return;\n        if (!/\\S/.test(line.text))\n            indent = 0;\n        let cur = /^\\s*/.exec(line.text)[0];\n        let norm = indentString(state, indent);\n        if (cur != norm || range.from < line.from + cur.length) {\n            updated[line.from] = indent;\n            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n    });\n    if (!changes.changes.empty)\n        dispatch(state.update(changes, { userEvent: \"indent\" }));\n    return true;\n};\n/**\nAdd a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected\nlines.\n*/\nconst indentMore = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {\n        changes.push({ from: line.from, insert: state.facet(indentUnit) });\n    }), { userEvent: \"input.indent\" }));\n    return true;\n};\n/**\nRemove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all\nselected lines.\n*/\nconst indentLess = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {\n        let space = /^\\s*/.exec(line.text)[0];\n        if (!space)\n            return;\n        let col = countColumn(space, state.tabSize), keep = 0;\n        let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));\n        while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))\n            keep++;\n        changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });\n    }), { userEvent: \"delete.dedent\" }));\n    return true;\n};\n/**\nInsert a tab character at the cursor or, if something is selected,\nuse [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire\nselection.\n*/\nconst insertTab = ({ state, dispatch }) => {\n    if (state.selection.ranges.some(r => !r.empty))\n        return indentMore({ state, dispatch });\n    dispatch(state.update(state.replaceSelection(\"\\t\"), { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\n/**\nArray of key bindings containing the Emacs-style bindings that are\navailable on macOS by default.\n\n - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)\n - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)\n - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)\n - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)\n - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)\n - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)\n - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)\n - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)\n - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)\n - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)\n - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)\n - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)\n - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)\n - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)\n*/\nconst emacsStyleKeymap = [\n    { key: \"Ctrl-b\", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },\n    { key: \"Ctrl-f\", run: cursorCharRight, shift: selectCharRight },\n    { key: \"Ctrl-p\", run: cursorLineUp, shift: selectLineUp },\n    { key: \"Ctrl-n\", run: cursorLineDown, shift: selectLineDown },\n    { key: \"Ctrl-a\", run: cursorLineStart, shift: selectLineStart },\n    { key: \"Ctrl-e\", run: cursorLineEnd, shift: selectLineEnd },\n    { key: \"Ctrl-d\", run: deleteCharForward },\n    { key: \"Ctrl-h\", run: deleteCharBackward },\n    { key: \"Ctrl-k\", run: deleteToLineEnd },\n    { key: \"Ctrl-Alt-h\", run: deleteGroupBackward },\n    { key: \"Ctrl-o\", run: splitLine },\n    { key: \"Ctrl-t\", run: transposeChars },\n    { key: \"Ctrl-v\", run: cursorPageDown },\n];\n/**\nAn array of key bindings closely sticking to platform-standard or\nwidely used bindings. (This includes the bindings from\n[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`\nproperty changed to `mac`.)\n\n - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)\n - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)\n - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)\n - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)\n - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)\n - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)\n - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)\n - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)\n - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)\n - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)\n - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)\n - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)\n - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)\n - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)\n - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)\n - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)\n - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)\n - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)\n - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)\n - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)\n - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)\n - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)\n - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)\n - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)\n - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).\n - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).\n*/\nconst standardKeymap = /*@__PURE__*/[\n    { key: \"ArrowLeft\", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },\n    { key: \"Mod-ArrowLeft\", mac: \"Alt-ArrowLeft\", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },\n    { mac: \"Cmd-ArrowLeft\", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },\n    { key: \"ArrowRight\", run: cursorCharRight, shift: selectCharRight, preventDefault: true },\n    { key: \"Mod-ArrowRight\", mac: \"Alt-ArrowRight\", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },\n    { mac: \"Cmd-ArrowRight\", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },\n    { key: \"ArrowUp\", run: cursorLineUp, shift: selectLineUp, preventDefault: true },\n    { mac: \"Cmd-ArrowUp\", run: cursorDocStart, shift: selectDocStart },\n    { mac: \"Ctrl-ArrowUp\", run: cursorPageUp, shift: selectPageUp },\n    { key: \"ArrowDown\", run: cursorLineDown, shift: selectLineDown, preventDefault: true },\n    { mac: \"Cmd-ArrowDown\", run: cursorDocEnd, shift: selectDocEnd },\n    { mac: \"Ctrl-ArrowDown\", run: cursorPageDown, shift: selectPageDown },\n    { key: \"PageUp\", run: cursorPageUp, shift: selectPageUp },\n    { key: \"PageDown\", run: cursorPageDown, shift: selectPageDown },\n    { key: \"Home\", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },\n    { key: \"Mod-Home\", run: cursorDocStart, shift: selectDocStart },\n    { key: \"End\", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },\n    { key: \"Mod-End\", run: cursorDocEnd, shift: selectDocEnd },\n    { key: \"Enter\", run: insertNewlineAndIndent },\n    { key: \"Mod-a\", run: selectAll },\n    { key: \"Backspace\", run: deleteCharBackward, shift: deleteCharBackward },\n    { key: \"Delete\", run: deleteCharForward },\n    { key: \"Mod-Backspace\", mac: \"Alt-Backspace\", run: deleteGroupBackward },\n    { key: \"Mod-Delete\", mac: \"Alt-Delete\", run: deleteGroupForward },\n    { mac: \"Mod-Backspace\", run: deleteToLineStart },\n    { mac: \"Mod-Delete\", run: deleteToLineEnd }\n].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));\n/**\nThe default keymap. Includes all bindings from\n[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:\n\n- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)\n- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)\n- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)\n- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)\n- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)\n- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)\n- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)\n- Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)\n- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)\n- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)\n- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)\n- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)\n- Ctrl-Alt-\\\\ (Cmd-Alt-\\\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)\n- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)\n- Shift-Ctrl-\\\\ (Shift-Cmd-\\\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)\n- Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).\n- Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).\n*/\nconst defaultKeymap = /*@__PURE__*/[\n    { key: \"Alt-ArrowLeft\", mac: \"Ctrl-ArrowLeft\", run: cursorSyntaxLeft, shift: selectSyntaxLeft },\n    { key: \"Alt-ArrowRight\", mac: \"Ctrl-ArrowRight\", run: cursorSyntaxRight, shift: selectSyntaxRight },\n    { key: \"Alt-ArrowUp\", run: moveLineUp },\n    { key: \"Shift-Alt-ArrowUp\", run: copyLineUp },\n    { key: \"Alt-ArrowDown\", run: moveLineDown },\n    { key: \"Shift-Alt-ArrowDown\", run: copyLineDown },\n    { key: \"Escape\", run: simplifySelection },\n    { key: \"Mod-Enter\", run: insertBlankLine },\n    { key: \"Alt-l\", mac: \"Ctrl-l\", run: selectLine },\n    { key: \"Mod-i\", run: selectParentSyntax, preventDefault: true },\n    { key: \"Mod-[\", run: indentLess },\n    { key: \"Mod-]\", run: indentMore },\n    { key: \"Mod-Alt-\\\\\", run: indentSelection },\n    { key: \"Shift-Mod-k\", run: deleteLine },\n    { key: \"Shift-Mod-\\\\\", run: cursorMatchingBracket },\n    { key: \"Mod-/\", run: toggleComment },\n    { key: \"Alt-A\", run: toggleBlockComment }\n].concat(standardKeymap);\n/**\nA binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and\nShift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).\nPlease see the [Tab example](../../examples/tab/) before using\nthis.\n*/\nconst indentWithTab = { key: \"Tab\", run: indentMore, shift: indentLess };\n\nexport { blockComment, blockUncomment, copyLineDown, copyLineUp, cursorCharBackward, cursorCharForward, cursorCharLeft, cursorCharRight, cursorDocEnd, cursorDocStart, cursorGroupBackward, cursorGroupForward, cursorGroupLeft, cursorGroupRight, cursorLineBoundaryBackward, cursorLineBoundaryForward, cursorLineBoundaryLeft, cursorLineBoundaryRight, cursorLineDown, cursorLineEnd, cursorLineStart, cursorLineUp, cursorMatchingBracket, cursorPageDown, cursorPageUp, cursorSubwordBackward, cursorSubwordForward, cursorSyntaxLeft, cursorSyntaxRight, defaultKeymap, deleteCharBackward, deleteCharForward, deleteGroupBackward, deleteGroupForward, deleteLine, deleteToLineEnd, deleteToLineStart, deleteTrailingWhitespace, emacsStyleKeymap, history, historyField, historyKeymap, indentLess, indentMore, indentSelection, indentWithTab, insertBlankLine, insertNewline, insertNewlineAndIndent, insertTab, invertedEffects, isolateHistory, lineComment, lineUncomment, moveLineDown, moveLineUp, redo, redoDepth, redoSelection, selectAll, selectCharBackward, selectCharForward, selectCharLeft, selectCharRight, selectDocEnd, selectDocStart, selectGroupBackward, selectGroupForward, selectGroupLeft, selectGroupRight, selectLine, selectLineBoundaryBackward, selectLineBoundaryForward, selectLineBoundaryLeft, selectLineBoundaryRight, selectLineDown, selectLineEnd, selectLineStart, selectLineUp, selectMatchingBracket, selectPageDown, selectPageUp, selectParentSyntax, selectSubwordBackward, selectSubwordForward, selectSyntaxLeft, selectSyntaxRight, simplifySelection, splitLine, standardKeymap, toggleBlockComment, toggleBlockCommentByLine, toggleComment, toggleLineComment, transposeChars, undo, undoDepth, undoSelection };\n","import { showPanel, EditorView, getPanel, Decoration, ViewPlugin, runScopeHandlers } from '@codemirror/view';\nimport { codePointAt, fromCodePoint, codePointSize, StateEffect, StateField, EditorSelection, Facet, combineConfig, CharCategory, RangeSetBuilder, Prec, EditorState, findClusterBreak } from '@codemirror/state';\nimport elt from 'crelt';\n\nconst basicNormalize = typeof String.prototype.normalize == \"function\"\n    ? x => x.normalize(\"NFKD\") : x => x;\n/**\nA search cursor provides an iterator over text matches in a\ndocument.\n*/\nclass SearchCursor {\n    /**\n    Create a text cursor. The query is the search string, `from` to\n    `to` provides the region to search.\n    \n    When `normalize` is given, it will be called, on both the query\n    string and the content it is matched against, before comparing.\n    You can, for example, create a case-insensitive search by\n    passing `s => s.toLowerCase()`.\n    \n    Text is always normalized with\n    [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n    (when supported).\n    */\n    constructor(text, query, from = 0, to = text.length, normalize, test) {\n        this.test = test;\n        /**\n        The current match (only holds a meaningful value after\n        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when\n        `done` is false).\n        */\n        this.value = { from: 0, to: 0 };\n        /**\n        Whether the end of the iterated region has been reached.\n        */\n        this.done = false;\n        this.matches = [];\n        this.buffer = \"\";\n        this.bufferPos = 0;\n        this.iter = text.iterRange(from, to);\n        this.bufferStart = from;\n        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;\n        this.query = this.normalize(query);\n    }\n    peek() {\n        if (this.bufferPos == this.buffer.length) {\n            this.bufferStart += this.buffer.length;\n            this.iter.next();\n            if (this.iter.done)\n                return -1;\n            this.bufferPos = 0;\n            this.buffer = this.iter.value;\n        }\n        return codePointAt(this.buffer, this.bufferPos);\n    }\n    /**\n    Look for the next match. Updates the iterator's\n    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and\n    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called\n    at least once before using the cursor.\n    */\n    next() {\n        while (this.matches.length)\n            this.matches.pop();\n        return this.nextOverlapping();\n    }\n    /**\n    The `next` method will ignore matches that partially overlap a\n    previous match. This method behaves like `next`, but includes\n    such matches.\n    */\n    nextOverlapping() {\n        for (;;) {\n            let next = this.peek();\n            if (next < 0) {\n                this.done = true;\n                return this;\n            }\n            let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;\n            this.bufferPos += codePointSize(next);\n            let norm = this.normalize(str);\n            for (let i = 0, pos = start;; i++) {\n                let code = norm.charCodeAt(i);\n                let match = this.match(code, pos);\n                if (match) {\n                    this.value = match;\n                    return this;\n                }\n                if (i == norm.length - 1)\n                    break;\n                if (pos == start && i < str.length && str.charCodeAt(i) == code)\n                    pos++;\n            }\n        }\n    }\n    match(code, pos) {\n        let match = null;\n        for (let i = 0; i < this.matches.length; i += 2) {\n            let index = this.matches[i], keep = false;\n            if (this.query.charCodeAt(index) == code) {\n                if (index == this.query.length - 1) {\n                    match = { from: this.matches[i + 1], to: pos + 1 };\n                }\n                else {\n                    this.matches[i]++;\n                    keep = true;\n                }\n            }\n            if (!keep) {\n                this.matches.splice(i, 2);\n                i -= 2;\n            }\n        }\n        if (this.query.charCodeAt(0) == code) {\n            if (this.query.length == 1)\n                match = { from: pos, to: pos + 1 };\n            else\n                this.matches.push(1, pos);\n        }\n        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferPos))\n            match = null;\n        return match;\n    }\n}\nif (typeof Symbol != \"undefined\")\n    SearchCursor.prototype[Symbol.iterator] = function () { return this; };\n\nconst empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec(\"\") };\nconst baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\n/**\nThis class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)\nbut searches for a regular expression pattern instead of a plain\nstring.\n*/\nclass RegExpCursor {\n    /**\n    Create a cursor that will search the given range in the given\n    document. `query` should be the raw pattern (as you'd pass it to\n    `new RegExp`).\n    */\n    constructor(text, query, options, from = 0, to = text.length) {\n        this.text = text;\n        this.to = to;\n        this.curLine = \"\";\n        /**\n        Set to `true` when the cursor has reached the end of the search\n        range.\n        */\n        this.done = false;\n        /**\n        Will contain an object with the extent of the match and the\n        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)\n        sucessfully finds a match.\n        */\n        this.value = empty;\n        if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query))\n            return new MultilineRegExpCursor(text, query, options, from, to);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.iter = text.iter();\n        let startLine = text.lineAt(from);\n        this.curLineStart = startLine.from;\n        this.matchPos = toCharEnd(text, from);\n        this.getLine(this.curLineStart);\n    }\n    getLine(skip) {\n        this.iter.next(skip);\n        if (this.iter.lineBreak) {\n            this.curLine = \"\";\n        }\n        else {\n            this.curLine = this.iter.value;\n            if (this.curLineStart + this.curLine.length > this.to)\n                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\n            this.iter.next();\n        }\n    }\n    nextLine() {\n        this.curLineStart = this.curLineStart + this.curLine.length + 1;\n        if (this.curLineStart > this.to)\n            this.curLine = \"\";\n        else\n            this.getLine(0);\n    }\n    /**\n    Move to the next match, if there is one.\n    */\n    next() {\n        for (let off = this.matchPos - this.curLineStart;;) {\n            this.re.lastIndex = off;\n            let match = this.matchPos <= this.to && this.re.exec(this.curLine);\n            if (match) {\n                let from = this.curLineStart + match.index, to = from + match[0].length;\n                this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                if (from == this.curLineStart + this.curLine.length)\n                    this.nextLine();\n                if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    return this;\n                }\n                off = this.matchPos - this.curLineStart;\n            }\n            else if (this.curLineStart + this.curLine.length < this.to) {\n                this.nextLine();\n                off = 0;\n            }\n            else {\n                this.done = true;\n                return this;\n            }\n        }\n    }\n}\nconst flattened = /*@__PURE__*/new WeakMap();\n// Reusable (partially) flattened document strings\nclass FlattenedDoc {\n    constructor(from, text) {\n        this.from = from;\n        this.text = text;\n    }\n    get to() { return this.from + this.text.length; }\n    static get(doc, from, to) {\n        let cached = flattened.get(doc);\n        if (!cached || cached.from >= to || cached.to <= from) {\n            let flat = new FlattenedDoc(from, doc.sliceString(from, to));\n            flattened.set(doc, flat);\n            return flat;\n        }\n        if (cached.from == from && cached.to == to)\n            return cached;\n        let { text, from: cachedFrom } = cached;\n        if (cachedFrom > from) {\n            text = doc.sliceString(from, cachedFrom) + text;\n            cachedFrom = from;\n        }\n        if (cached.to < to)\n            text += doc.sliceString(cached.to, to);\n        flattened.set(doc, new FlattenedDoc(cachedFrom, text));\n        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\n    }\n}\nclass MultilineRegExpCursor {\n    constructor(text, query, options, from, to) {\n        this.text = text;\n        this.to = to;\n        this.done = false;\n        this.value = empty;\n        this.matchPos = toCharEnd(text, from);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Base */));\n    }\n    chunkEnd(pos) {\n        return pos >= this.to ? this.to : this.text.lineAt(pos).to;\n    }\n    next() {\n        for (;;) {\n            let off = this.re.lastIndex = this.matchPos - this.flat.from;\n            let match = this.re.exec(this.flat.text);\n            // Skip empty matches directly after the last match\n            if (match && !match[0] && match.index == off) {\n                this.re.lastIndex = off + 1;\n                match = this.re.exec(this.flat.text);\n            }\n            if (match) {\n                let from = this.flat.from + match.index, to = from + match[0].length;\n                // If a match goes almost to the end of a noncomplete chunk, try\n                // again, since it'll likely be able to match more\n                if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&\n                    (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                    return this;\n                }\n            }\n            if (this.flat.to == this.to) {\n                this.done = true;\n                return this;\n            }\n            // Grow the flattened doc\n            this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\n        }\n    }\n}\nif (typeof Symbol != \"undefined\") {\n    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =\n        function () { return this; };\n}\nfunction validRegExp(source) {\n    try {\n        new RegExp(source, baseFlags);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction toCharEnd(text, pos) {\n    if (pos >= text.length)\n        return pos;\n    let line = text.lineAt(pos), next;\n    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)\n        pos++;\n    return pos;\n}\n\nfunction createLineDialog(view) {\n    let input = elt(\"input\", { class: \"cm-textfield\", name: \"line\" });\n    let dom = elt(\"form\", {\n        class: \"cm-gotoLine\",\n        onkeydown: (event) => {\n            if (event.keyCode == 27) { // Escape\n                event.preventDefault();\n                view.dispatch({ effects: dialogEffect.of(false) });\n                view.focus();\n            }\n            else if (event.keyCode == 13) { // Enter\n                event.preventDefault();\n                go();\n            }\n        },\n        onsubmit: (event) => {\n            event.preventDefault();\n            go();\n        }\n    }, elt(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", elt(\"button\", { class: \"cm-button\", type: \"submit\" }, view.state.phrase(\"go\")));\n    function go() {\n        let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\n        if (!match)\n            return;\n        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);\n        let [, sign, ln, cl, percent] = match;\n        let col = cl ? +cl.slice(1) : 0;\n        let line = ln ? +ln : startLine.number;\n        if (ln && percent) {\n            let pc = line / 100;\n            if (sign)\n                pc = pc * (sign == \"-\" ? -1 : 1) + (startLine.number / state.doc.lines);\n            line = Math.round(state.doc.lines * pc);\n        }\n        else if (ln && sign) {\n            line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\n        }\n        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\n        view.dispatch({\n            effects: dialogEffect.of(false),\n            selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),\n            scrollIntoView: true\n        });\n        view.focus();\n    }\n    return { dom };\n}\nconst dialogEffect = /*@__PURE__*/StateEffect.define();\nconst dialogField = /*@__PURE__*/StateField.define({\n    create() { return true; },\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(dialogEffect))\n                value = e.value;\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val ? createLineDialog : null)\n});\n/**\nCommand that shows a dialog asking the user for a line number, and\nwhen a valid position is provided, moves the cursor to that line.\n\nSupports line numbers, relative line offsets prefixed with `+` or\n`-`, document percentages suffixed with `%`, and an optional\ncolumn position by adding `:` and a second number after the line\nnumber.\n*/\nconst gotoLine = view => {\n    let panel = getPanel(view, createLineDialog);\n    if (!panel) {\n        let effects = [dialogEffect.of(true)];\n        if (view.state.field(dialogField, false) == null)\n            effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));\n        view.dispatch({ effects });\n        panel = getPanel(view, createLineDialog);\n    }\n    if (panel)\n        panel.dom.querySelector(\"input\").focus();\n    return true;\n};\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-gotoLine\": {\n        padding: \"2px 6px 4px\",\n        \"& label\": { fontSize: \"80%\" }\n    }\n});\n\nconst defaultHighlightOptions = {\n    highlightWordAroundCursor: false,\n    minSelectionLength: 1,\n    maxMatches: 100,\n    wholeWords: false\n};\nconst highlightConfig = /*@__PURE__*/Facet.define({\n    combine(options) {\n        return combineConfig(options, defaultHighlightOptions, {\n            highlightWordAroundCursor: (a, b) => a || b,\n            minSelectionLength: Math.min,\n            maxMatches: Math.min\n        });\n    }\n});\n/**\nThis extension highlights text that matches the selection. It uses\nthe `\"cm-selectionMatch\"` class for the highlighting. When\n`highlightWordAroundCursor` is enabled, the word at the cursor\nitself will be highlighted with `\"cm-selectionMatch-main\"`.\n*/\nfunction highlightSelectionMatches(options) {\n    let ext = [defaultTheme, matchHighlighter];\n    if (options)\n        ext.push(highlightConfig.of(options));\n    return ext;\n}\nconst matchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch\" });\nconst mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch cm-selectionMatch-main\" });\n// Whether the characters directly outside the given positions are non-word characters\nfunction insideWordBoundaries(check, state, from, to) {\n    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&\n        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);\n}\n// Whether the characters directly at the given positions are word characters\nfunction insideWord(check, state, from, to) {\n    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word\n        && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;\n}\nconst matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.selectionSet || update.docChanged || update.viewportChanged)\n            this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let conf = view.state.facet(highlightConfig);\n        let { state } = view, sel = state.selection;\n        if (sel.ranges.length > 1)\n            return Decoration.none;\n        let range = sel.main, query, check = null;\n        if (range.empty) {\n            if (!conf.highlightWordAroundCursor)\n                return Decoration.none;\n            let word = state.wordAt(range.head);\n            if (!word)\n                return Decoration.none;\n            check = state.charCategorizer(range.head);\n            query = state.sliceDoc(word.from, word.to);\n        }\n        else {\n            let len = range.to - range.from;\n            if (len < conf.minSelectionLength || len > 200)\n                return Decoration.none;\n            if (conf.wholeWords) {\n                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\n                check = state.charCategorizer(range.head);\n                if (!(insideWordBoundaries(check, state, range.from, range.to)\n                    && insideWord(check, state, range.from, range.to)))\n                    return Decoration.none;\n            }\n            else {\n                query = state.sliceDoc(range.from, range.to).trim();\n                if (!query)\n                    return Decoration.none;\n            }\n        }\n        let deco = [];\n        for (let part of view.visibleRanges) {\n            let cursor = new SearchCursor(state.doc, query, part.from, part.to);\n            while (!cursor.next().done) {\n                let { from, to } = cursor.value;\n                if (!check || insideWordBoundaries(check, state, from, to)) {\n                    if (range.empty && from <= range.from && to >= range.to)\n                        deco.push(mainMatchDeco.range(from, to));\n                    else if (from >= range.to || to <= range.from)\n                        deco.push(matchDeco.range(from, to));\n                    if (deco.length > conf.maxMatches)\n                        return Decoration.none;\n                }\n            }\n        }\n        return Decoration.set(deco);\n    }\n}, {\n    decorations: v => v.decorations\n});\nconst defaultTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-selectionMatch\": { backgroundColor: \"#99ff7780\" },\n    \".cm-searchMatch .cm-selectionMatch\": { backgroundColor: \"transparent\" }\n});\n// Select the words around the cursors.\nconst selectWord = ({ state, dispatch }) => {\n    let { selection } = state;\n    let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);\n    if (newSel.eq(selection))\n        return false;\n    dispatch(state.update({ selection: newSel }));\n    return true;\n};\n// Find next occurrence of query relative to last cursor. Wrap around\n// the document if there are no more matches.\nfunction findNextOccurrence(state, query) {\n    let { main, ranges } = state.selection;\n    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;\n    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {\n        cursor.next();\n        if (cursor.done) {\n            if (cycled)\n                return null;\n            cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\n            cycled = true;\n        }\n        else {\n            if (cycled && ranges.some(r => r.from == cursor.value.from))\n                continue;\n            if (fullWord) {\n                let word = state.wordAt(cursor.value.from);\n                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)\n                    continue;\n            }\n            return cursor.value;\n        }\n    }\n}\n/**\nSelect next occurrence of the current selection. Expand selection\nto the surrounding word when the selection is empty.\n*/\nconst selectNextOccurrence = ({ state, dispatch }) => {\n    let { ranges } = state.selection;\n    if (ranges.some(sel => sel.from === sel.to))\n        return selectWord({ state, dispatch });\n    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\n    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))\n        return false;\n    let range = findNextOccurrence(state, searchedText);\n    if (!range)\n        return false;\n    dispatch(state.update({\n        selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),\n        effects: EditorView.scrollIntoView(range.to)\n    }));\n    return true;\n};\n\nconst searchConfigFacet = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            top: false,\n            caseSensitive: false,\n            literal: false,\n            regexp: false,\n            wholeWord: false,\n            createPanel: view => new SearchPanel(view),\n            scrollToMatch: range => EditorView.scrollIntoView(range)\n        });\n    }\n});\n/**\nAdd search state to the editor configuration, and optionally\nconfigure the search extension.\n([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically\nenable this if it isn't already on).\n*/\nfunction search(config) {\n    return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;\n}\n/**\nA search query. Part of the editor's search state.\n*/\nclass SearchQuery {\n    /**\n    Create a query object.\n    */\n    constructor(config) {\n        this.search = config.search;\n        this.caseSensitive = !!config.caseSensitive;\n        this.literal = !!config.literal;\n        this.regexp = !!config.regexp;\n        this.replace = config.replace || \"\";\n        this.valid = !!this.search && (!this.regexp || validRegExp(this.search));\n        this.unquoted = this.unquote(this.search);\n        this.wholeWord = !!config.wholeWord;\n    }\n    /**\n    @internal\n    */\n    unquote(text) {\n        return this.literal ? text :\n            text.replace(/\\\\([nrt\\\\])/g, (_, ch) => ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\\t\" : \"\\\\\");\n    }\n    /**\n    Compare this query to another query.\n    */\n    eq(other) {\n        return this.search == other.search && this.replace == other.replace &&\n            this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&\n            this.wholeWord == other.wholeWord;\n    }\n    /**\n    @internal\n    */\n    create() {\n        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);\n    }\n    /**\n    Get a search cursor for this query, searching through the given\n    range in the given state.\n    */\n    getCursor(state, from = 0, to) {\n        let st = state.doc ? state : EditorState.create({ doc: state });\n        if (to == null)\n            to = st.doc.length;\n        return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);\n    }\n}\nclass QueryType {\n    constructor(spec) {\n        this.spec = spec;\n    }\n}\nfunction stringCursor(spec, state, from, to) {\n    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);\n}\nfunction stringWordTest(doc, categorizer) {\n    return (from, to, buf, bufPos) => {\n        if (bufPos > from || bufPos + buf.length < to) {\n            bufPos = Math.max(0, from - 2);\n            buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));\n        }\n        return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||\n            categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&\n            (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||\n                categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);\n    };\n}\nclass StringQuery extends QueryType {\n    constructor(spec) {\n        super(spec);\n    }\n    nextMatch(state, curFrom, curTo) {\n        let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();\n        if (cursor.done)\n            cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();\n        return cursor.done ? null : cursor.value;\n    }\n    // Searching in reverse is, rather than implementing an inverted search\n    // cursor, done by scanning chunk after chunk forward.\n    prevMatchInRange(state, from, to) {\n        for (let pos = to;;) {\n            let start = Math.max(from, pos - 10000 /* ChunkSize */ - this.spec.unquoted.length);\n            let cursor = stringCursor(this.spec, state, start, pos), range = null;\n            while (!cursor.nextOverlapping().done)\n                range = cursor.value;\n            if (range)\n                return range;\n            if (start == from)\n                return null;\n            pos -= 10000 /* ChunkSize */;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(_result) { return this.spec.unquote(this.spec.replace); }\n    matchAll(state, limit) {\n        let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\nfunction regexpCursor(spec, state, from, to) {\n    return new RegExpCursor(state.doc, spec.search, {\n        ignoreCase: !spec.caseSensitive,\n        test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined\n    }, from, to);\n}\nfunction charBefore(str, index) {\n    return str.slice(findClusterBreak(str, index, false), index);\n}\nfunction charAfter(str, index) {\n    return str.slice(index, findClusterBreak(str, index));\n}\nfunction regexpWordTest(categorizer) {\n    return (_from, _to, match) => !match[0].length ||\n        (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||\n            categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&\n            (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||\n                categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);\n}\nclass RegExpQuery extends QueryType {\n    nextMatch(state, curFrom, curTo) {\n        let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();\n        if (cursor.done)\n            cursor = regexpCursor(this.spec, state, 0, curFrom).next();\n        return cursor.done ? null : cursor.value;\n    }\n    prevMatchInRange(state, from, to) {\n        for (let size = 1;; size++) {\n            let start = Math.max(from, to - size * 10000 /* ChunkSize */);\n            let cursor = regexpCursor(this.spec, state, start, to), range = null;\n            while (!cursor.next().done)\n                range = cursor.value;\n            if (range && (start == from || range.from > start + 10))\n                return range;\n            if (start == from)\n                return null;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(result) {\n        return this.spec.unquote(this.spec.replace.replace(/\\$([$&\\d+])/g, (m, i) => i == \"$\" ? \"$\"\n            : i == \"&\" ? result.match[0]\n                : i != \"0\" && +i < result.match.length ? result.match[i]\n                    : m));\n    }\n    matchAll(state, limit) {\n        let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* HighlightMargin */), Math.min(to + 250 /* HighlightMargin */, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\n/**\nA state effect that updates the current search query. Note that\nthis only has an effect if the search state has been initialized\n(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or\nby running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least\nonce).\n*/\nconst setSearchQuery = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst searchState = /*@__PURE__*/StateField.define({\n    create(state) {\n        return new SearchState(defaultQuery(state).create(), null);\n    },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setSearchQuery))\n                value = new SearchState(effect.value.create(), value.panel);\n            else if (effect.is(togglePanel))\n                value = new SearchState(value.query, effect.value ? createSearchPanel : null);\n        }\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val.panel)\n});\n/**\nGet the current search query from an editor state.\n*/\nfunction getSearchQuery(state) {\n    let curState = state.field(searchState, false);\n    return curState ? curState.query.spec : defaultQuery(state);\n}\n/**\nQuery whether the search panel is open in the given editor state.\n*/\nfunction searchPanelOpen(state) {\n    var _a;\n    return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;\n}\nclass SearchState {\n    constructor(query, panel) {\n        this.query = query;\n        this.panel = panel;\n    }\n}\nconst matchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch\" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch cm-searchMatch-selected\" });\nconst searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.decorations = this.highlight(view.state.field(searchState));\n    }\n    update(update) {\n        let state = update.state.field(searchState);\n        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)\n            this.decorations = this.highlight(state);\n    }\n    highlight({ query, panel }) {\n        if (!panel || !query.spec.valid)\n            return Decoration.none;\n        let { view } = this;\n        let builder = new RangeSetBuilder();\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\n            let { from, to } = ranges[i];\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* HighlightMargin */)\n                to = ranges[++i].to;\n            query.highlight(view.state, from, to, (from, to) => {\n                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);\n                builder.add(from, to, selected ? selectedMatchMark : matchMark);\n            });\n        }\n        return builder.finish();\n    }\n}, {\n    decorations: v => v.decorations\n});\nfunction searchCommand(f) {\n    return view => {\n        let state = view.state.field(searchState, false);\n        return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);\n    };\n}\n/**\nOpen the search panel if it isn't already open, and move the\nselection to the first match after the current main selection.\nWill wrap around to the start of the document when it reaches the\nend.\n*/\nconst findNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { to } = view.state.selection.main;\n    let next = query.nextMatch(view.state, to, to);\n    if (!next)\n        return false;\n    let selection = EditorSelection.single(next.from, next.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nMove the selection to the previous instance of the search query,\nbefore the current main selection. Will wrap past the start\nof the document to start searching at the end again.\n*/\nconst findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from } = state.selection.main;\n    let prev = query.prevMatch(state, from, from);\n    if (!prev)\n        return false;\n    let selection = EditorSelection.single(prev.from, prev.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nSelect all instances of the search query.\n*/\nconst selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {\n    let ranges = query.matchAll(view.state, 1000);\n    if (!ranges || !ranges.length)\n        return false;\n    view.dispatch({\n        selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),\n        userEvent: \"select.search.matches\"\n    });\n    return true;\n});\n/**\nSelect all instances of the currently selected text.\n*/\nconst selectSelectionMatches = ({ state, dispatch }) => {\n    let sel = state.selection;\n    if (sel.ranges.length > 1 || sel.main.empty)\n        return false;\n    let { from, to } = sel.main;\n    let ranges = [], main = 0;\n    for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {\n        if (ranges.length > 1000)\n            return false;\n        if (cur.value.from == from)\n            main = ranges.length;\n        ranges.push(EditorSelection.range(cur.value.from, cur.value.to));\n    }\n    dispatch(state.update({\n        selection: EditorSelection.create(ranges, main),\n        userEvent: \"select.search.matches\"\n    }));\n    return true;\n};\n/**\nReplace the current match of the search query.\n*/\nconst replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from, to } = state.selection.main;\n    if (state.readOnly)\n        return false;\n    let next = query.nextMatch(state, from, from);\n    if (!next)\n        return false;\n    let changes = [], selection, replacement;\n    let effects = [];\n    if (next.from == from && next.to == to) {\n        replacement = state.toText(query.getReplacement(next));\n        changes.push({ from: next.from, to: next.to, insert: replacement });\n        next = query.nextMatch(state, next.from, next.to);\n        effects.push(EditorView.announce.of(state.phrase(\"replaced match on line $\", state.doc.lineAt(from).number) + \".\"));\n    }\n    if (next) {\n        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;\n        selection = EditorSelection.single(next.from - off, next.to - off);\n        effects.push(announceMatch(view, next));\n        effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));\n    }\n    view.dispatch({\n        changes, selection, effects,\n        userEvent: \"input.replace\"\n    });\n    return true;\n});\n/**\nReplace all instances of the search query with the given\nreplacement.\n*/\nconst replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {\n    if (view.state.readOnly)\n        return false;\n    let changes = query.matchAll(view.state, 1e9).map(match => {\n        let { from, to } = match;\n        return { from, to, insert: query.getReplacement(match) };\n    });\n    if (!changes.length)\n        return false;\n    let announceText = view.state.phrase(\"replaced $ matches\", changes.length) + \".\";\n    view.dispatch({\n        changes,\n        effects: EditorView.announce.of(announceText),\n        userEvent: \"input.replace.all\"\n    });\n    return true;\n});\nfunction createSearchPanel(view) {\n    return view.state.facet(searchConfigFacet).createPanel(view);\n}\nfunction defaultQuery(state, fallback) {\n    var _a, _b, _c, _d, _e;\n    let sel = state.selection.main;\n    let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\n    if (fallback && !selText)\n        return fallback;\n    let config = state.facet(searchConfigFacet);\n    return new SearchQuery({\n        search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\\n/g, \"\\\\n\"),\n        caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,\n        literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,\n        regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,\n        wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord\n    });\n}\nfunction getSearchInput(view) {\n    let panel = getPanel(view, createSearchPanel);\n    return panel && panel.dom.querySelector(\"[main-field]\");\n}\nfunction selectSearchInput(view) {\n    let input = getSearchInput(view);\n    if (input && input == view.root.activeElement)\n        input.select();\n}\n/**\nMake sure the search panel is open and focused.\n*/\nconst openSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (state && state.panel) {\n        let searchInput = getSearchInput(view);\n        if (searchInput && searchInput != view.root.activeElement) {\n            let query = defaultQuery(view.state, state.query.spec);\n            if (query.valid)\n                view.dispatch({ effects: setSearchQuery.of(query) });\n            searchInput.focus();\n            searchInput.select();\n        }\n    }\n    else {\n        view.dispatch({ effects: [\n                togglePanel.of(true),\n                state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)\n            ] });\n    }\n    return true;\n};\n/**\nClose the search panel.\n*/\nconst closeSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (!state || !state.panel)\n        return false;\n    let panel = getPanel(view, createSearchPanel);\n    if (panel && panel.dom.contains(view.root.activeElement))\n        view.focus();\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nDefault search-related key bindings.\n\n - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)\n - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)\n - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)\n - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)\n - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)\n*/\nconst searchKeymap = [\n    { key: \"Mod-f\", run: openSearchPanel, scope: \"editor search-panel\" },\n    { key: \"F3\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Mod-g\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Escape\", run: closeSearchPanel, scope: \"editor search-panel\" },\n    { key: \"Mod-Shift-l\", run: selectSelectionMatches },\n    { key: \"Alt-g\", run: gotoLine },\n    { key: \"Mod-d\", run: selectNextOccurrence, preventDefault: true },\n];\nclass SearchPanel {\n    constructor(view) {\n        this.view = view;\n        let query = this.query = view.state.field(searchState).query.spec;\n        this.commit = this.commit.bind(this);\n        this.searchField = elt(\"input\", {\n            value: query.search,\n            placeholder: phrase(view, \"Find\"),\n            \"aria-label\": phrase(view, \"Find\"),\n            class: \"cm-textfield\",\n            name: \"search\",\n            form: \"\",\n            \"main-field\": \"true\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.replaceField = elt(\"input\", {\n            value: query.replace,\n            placeholder: phrase(view, \"Replace\"),\n            \"aria-label\": phrase(view, \"Replace\"),\n            class: \"cm-textfield\",\n            name: \"replace\",\n            form: \"\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.caseField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"case\",\n            form: \"\",\n            checked: query.caseSensitive,\n            onchange: this.commit\n        });\n        this.reField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"re\",\n            form: \"\",\n            checked: query.regexp,\n            onchange: this.commit\n        });\n        this.wordField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"word\",\n            form: \"\",\n            checked: query.wholeWord,\n            onchange: this.commit\n        });\n        function button(name, onclick, content) {\n            return elt(\"button\", { class: \"cm-button\", name, onclick, type: \"button\" }, content);\n        }\n        this.dom = elt(\"div\", { onkeydown: (e) => this.keydown(e), class: \"cm-search\" }, [\n            this.searchField,\n            button(\"next\", () => findNext(view), [phrase(view, \"next\")]),\n            button(\"prev\", () => findPrevious(view), [phrase(view, \"previous\")]),\n            button(\"select\", () => selectMatches(view), [phrase(view, \"all\")]),\n            elt(\"label\", null, [this.caseField, phrase(view, \"match case\")]),\n            elt(\"label\", null, [this.reField, phrase(view, \"regexp\")]),\n            elt(\"label\", null, [this.wordField, phrase(view, \"by word\")]),\n            ...view.state.readOnly ? [] : [\n                elt(\"br\"),\n                this.replaceField,\n                button(\"replace\", () => replaceNext(view), [phrase(view, \"replace\")]),\n                button(\"replaceAll\", () => replaceAll(view), [phrase(view, \"replace all\")])\n            ],\n            elt(\"button\", {\n                name: \"close\",\n                onclick: () => closeSearchPanel(view),\n                \"aria-label\": phrase(view, \"close\"),\n                type: \"button\"\n            }, [\"×\"])\n        ]);\n    }\n    commit() {\n        let query = new SearchQuery({\n            search: this.searchField.value,\n            caseSensitive: this.caseField.checked,\n            regexp: this.reField.checked,\n            wholeWord: this.wordField.checked,\n            replace: this.replaceField.value,\n        });\n        if (!query.eq(this.query)) {\n            this.query = query;\n            this.view.dispatch({ effects: setSearchQuery.of(query) });\n        }\n    }\n    keydown(e) {\n        if (runScopeHandlers(this.view, e, \"search-panel\")) {\n            e.preventDefault();\n        }\n        else if (e.keyCode == 13 && e.target == this.searchField) {\n            e.preventDefault();\n            (e.shiftKey ? findPrevious : findNext)(this.view);\n        }\n        else if (e.keyCode == 13 && e.target == this.replaceField) {\n            e.preventDefault();\n            replaceNext(this.view);\n        }\n    }\n    update(update) {\n        for (let tr of update.transactions)\n            for (let effect of tr.effects) {\n                if (effect.is(setSearchQuery) && !effect.value.eq(this.query))\n                    this.setQuery(effect.value);\n            }\n    }\n    setQuery(query) {\n        this.query = query;\n        this.searchField.value = query.search;\n        this.replaceField.value = query.replace;\n        this.caseField.checked = query.caseSensitive;\n        this.reField.checked = query.regexp;\n        this.wordField.checked = query.wholeWord;\n    }\n    mount() {\n        this.searchField.select();\n    }\n    get pos() { return 80; }\n    get top() { return this.view.state.facet(searchConfigFacet).top; }\n}\nfunction phrase(view, phrase) { return view.state.phrase(phrase); }\nconst AnnounceMargin = 30;\nconst Break = /[\\s\\.,:;?!]/;\nfunction announceMatch(view, { from, to }) {\n    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;\n    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);\n    let text = view.state.sliceDoc(start, end);\n    if (start != line.from) {\n        for (let i = 0; i < AnnounceMargin; i++)\n            if (!Break.test(text[i + 1]) && Break.test(text[i])) {\n                text = text.slice(i);\n                break;\n            }\n    }\n    if (end != lineEnd) {\n        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)\n            if (!Break.test(text[i - 1]) && Break.test(text[i])) {\n                text = text.slice(0, i);\n                break;\n            }\n    }\n    return EditorView.announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${line.number}.`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-search\": {\n        padding: \"2px 6px 4px\",\n        position: \"relative\",\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"4px\",\n            backgroundColor: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        },\n        \"& input, & button, & label\": {\n            margin: \".2em .6em .2em 0\"\n        },\n        \"& input[type=checkbox]\": {\n            marginRight: \".2em\"\n        },\n        \"& label\": {\n            fontSize: \"80%\",\n            whiteSpace: \"pre\"\n        }\n    },\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\n    \"&light .cm-searchMatch-selected\": { backgroundColor: \"#ff6a0054\" },\n    \"&dark .cm-searchMatch-selected\": { backgroundColor: \"#ff00ff8a\" }\n});\nconst searchExtensions = [\n    searchState,\n    /*@__PURE__*/Prec.lowest(searchHighlighter),\n    baseTheme\n];\n\nexport { RegExpCursor, SearchCursor, SearchQuery, closeSearchPanel, findNext, findPrevious, getSearchQuery, gotoLine, highlightSelectionMatches, openSearchPanel, replaceAll, replaceNext, search, searchKeymap, searchPanelOpen, selectMatches, selectNextOccurrence, selectSelectionMatches, setSearchQuery };\n","export default function crelt() {\n  var elt = arguments[0]\n  if (typeof elt == \"string\") elt = document.createElement(elt)\n  var i = 1, next = arguments[1]\n  if (next && typeof next == \"object\" && next.nodeType == null && !Array.isArray(next)) {\n    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {\n      var value = next[name]\n      if (typeof value == \"string\") elt.setAttribute(name, value)\n      else if (value != null) elt[name] = value\n    }\n    i++\n  }\n  for (; i < arguments.length; i++) add(elt, arguments[i])\n  return elt\n}\n\nfunction add(elt, child) {\n  if (typeof child == \"string\") {\n    elt.appendChild(document.createTextNode(child))\n  } else if (child == null) {\n  } else if (child.nodeType != null) {\n    elt.appendChild(child)\n  } else if (Array.isArray(child)) {\n    for (var i = 0; i < child.length; i++) add(elt, child[i])\n  } else {\n    throw new RangeError(\"Unsupported child node: \" + child)\n  }\n}\n","import { Annotation, StateEffect, EditorSelection, codePointAt, codePointSize, fromCodePoint, Facet, combineConfig, StateField, Prec, Text, MapMode, RangeValue, RangeSet, CharCategory } from '@codemirror/state';\nimport { Direction, logException, showTooltip, EditorView, ViewPlugin, getTooltip, Decoration, WidgetType, keymap } from '@codemirror/view';\nimport { syntaxTree, indentUnit } from '@codemirror/language';\n\n/**\nAn instance of this is passed to completion source functions.\n*/\nclass CompletionContext {\n    /**\n    Create a new completion context. (Mostly useful for testing\n    completion sources—in the editor, the extension will create\n    these for you.)\n    */\n    constructor(\n    /**\n    The editor state that the completion happens in.\n    */\n    state, \n    /**\n    The position at which the completion is happening.\n    */\n    pos, \n    /**\n    Indicates whether completion was activated explicitly, or\n    implicitly by typing. The usual way to respond to this is to\n    only return completions when either there is part of a\n    completable entity before the cursor, or `explicit` is true.\n    */\n    explicit) {\n        this.state = state;\n        this.pos = pos;\n        this.explicit = explicit;\n        /**\n        @internal\n        */\n        this.abortListeners = [];\n    }\n    /**\n    Get the extent, content, and (if there is a token) type of the\n    token before `this.pos`.\n    */\n    tokenBefore(types) {\n        let token = syntaxTree(this.state).resolveInner(this.pos, -1);\n        while (token && types.indexOf(token.name) < 0)\n            token = token.parent;\n        return token ? { from: token.from, to: this.pos,\n            text: this.state.sliceDoc(token.from, this.pos),\n            type: token.type } : null;\n    }\n    /**\n    Get the match of the given expression directly before the\n    cursor.\n    */\n    matchBefore(expr) {\n        let line = this.state.doc.lineAt(this.pos);\n        let start = Math.max(line.from, this.pos - 250);\n        let str = line.text.slice(start - line.from, this.pos - line.from);\n        let found = str.search(ensureAnchor(expr, false));\n        return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };\n    }\n    /**\n    Yields true when the query has been aborted. Can be useful in\n    asynchronous queries to avoid doing work that will be ignored.\n    */\n    get aborted() { return this.abortListeners == null; }\n    /**\n    Allows you to register abort handlers, which will be called when\n    the query is\n    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).\n    */\n    addEventListener(type, listener) {\n        if (type == \"abort\" && this.abortListeners)\n            this.abortListeners.push(listener);\n    }\n}\nfunction toSet(chars) {\n    let flat = Object.keys(chars).join(\"\");\n    let words = /\\w/.test(flat);\n    if (words)\n        flat = flat.replace(/\\w/g, \"\");\n    return `[${words ? \"\\\\w\" : \"\"}${flat.replace(/[^\\w\\s]/g, \"\\\\$&\")}]`;\n}\nfunction prefixMatch(options) {\n    let first = Object.create(null), rest = Object.create(null);\n    for (let { label } of options) {\n        first[label[0]] = true;\n        for (let i = 1; i < label.length; i++)\n            rest[label[i]] = true;\n    }\n    let source = toSet(first) + toSet(rest) + \"*$\";\n    return [new RegExp(\"^\" + source), new RegExp(source)];\n}\n/**\nGiven a a fixed array of options, return an autocompleter that\ncompletes them.\n*/\nfunction completeFromList(list) {\n    let options = list.map(o => typeof o == \"string\" ? { label: o } : o);\n    let [validFor, match] = options.every(o => /^\\w+$/.test(o.label)) ? [/\\w*$/, /\\w+$/] : prefixMatch(options);\n    return (context) => {\n        let token = context.matchBefore(match);\n        return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;\n    };\n}\n/**\nWrap the given completion source so that it will only fire when the\ncursor is in a syntax node with one of the given names.\n*/\nfunction ifIn(nodes, source) {\n    return (context) => {\n        for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {\n            if (nodes.indexOf(pos.name) > -1)\n                return source(context);\n            if (pos.type.isTop)\n                break;\n        }\n        return null;\n    };\n}\n/**\nWrap the given completion source so that it will not fire when the\ncursor is in a syntax node with one of the given names.\n*/\nfunction ifNotIn(nodes, source) {\n    return (context) => {\n        for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {\n            if (nodes.indexOf(pos.name) > -1)\n                return null;\n            if (pos.type.isTop)\n                break;\n        }\n        return source(context);\n    };\n}\nclass Option {\n    constructor(completion, source, match, score) {\n        this.completion = completion;\n        this.source = source;\n        this.match = match;\n        this.score = score;\n    }\n}\nfunction cur(state) { return state.selection.main.from; }\n// Make sure the given regexp has a $ at its end and, if `start` is\n// true, a ^ at its start.\nfunction ensureAnchor(expr, start) {\n    var _a;\n    let { source } = expr;\n    let addStart = start && source[0] != \"^\", addEnd = source[source.length - 1] != \"$\";\n    if (!addStart && !addEnd)\n        return expr;\n    return new RegExp(`${addStart ? \"^\" : \"\"}(?:${source})${addEnd ? \"$\" : \"\"}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? \"i\" : \"\"));\n}\n/**\nThis annotation is added to transactions that are produced by\npicking a completion.\n*/\nconst pickedCompletion = /*@__PURE__*/Annotation.define();\n/**\nHelper function that returns a transaction spec which inserts a\ncompletion's text in the main selection range, and any other\nselection range that has the same text in front of it.\n*/\nfunction insertCompletionText(state, text, from, to) {\n    let { main } = state.selection, fromOff = from - main.from, toOff = to - main.from;\n    return Object.assign(Object.assign({}, state.changeByRange(range => {\n        if (range != main && from != to &&\n            state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to))\n            return { range };\n        return {\n            changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: text },\n            range: EditorSelection.cursor(range.from + fromOff + text.length)\n        };\n    })), { userEvent: \"input.complete\" });\n}\nconst SourceCache = /*@__PURE__*/new WeakMap();\nfunction asSource(source) {\n    if (!Array.isArray(source))\n        return source;\n    let known = SourceCache.get(source);\n    if (!known)\n        SourceCache.set(source, known = completeFromList(source));\n    return known;\n}\nconst startCompletionEffect = /*@__PURE__*/StateEffect.define();\nconst closeCompletionEffect = /*@__PURE__*/StateEffect.define();\n\n// A pattern matcher for fuzzy completion matching. Create an instance\n// once for a pattern, and then use that to match any number of\n// completions.\nclass FuzzyMatcher {\n    constructor(pattern) {\n        this.pattern = pattern;\n        this.chars = [];\n        this.folded = [];\n        // Buffers reused by calls to `match` to track matched character\n        // positions.\n        this.any = [];\n        this.precise = [];\n        this.byWord = [];\n        this.score = 0;\n        this.matched = [];\n        for (let p = 0; p < pattern.length;) {\n            let char = codePointAt(pattern, p), size = codePointSize(char);\n            this.chars.push(char);\n            let part = pattern.slice(p, p + size), upper = part.toUpperCase();\n            this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));\n            p += size;\n        }\n        this.astral = pattern.length != this.chars.length;\n    }\n    ret(score, matched) {\n        this.score = score;\n        this.matched = matched;\n        return true;\n    }\n    // Matches a given word (completion) against the pattern (input).\n    // Will return a boolean indicating whether there was a match and,\n    // on success, set `this.score` to the score, `this.matched` to an\n    // array of `from, to` pairs indicating the matched parts of `word`.\n    //\n    // The score is a number that is more negative the worse the match\n    // is. See `Penalty` above.\n    match(word) {\n        if (this.pattern.length == 0)\n            return this.ret(-100 /* NotFull */, []);\n        if (word.length < this.pattern.length)\n            return false;\n        let { chars, folded, any, precise, byWord } = this;\n        // For single-character queries, only match when they occur right\n        // at the start\n        if (chars.length == 1) {\n            let first = codePointAt(word, 0), firstSize = codePointSize(first);\n            let score = firstSize == word.length ? 0 : -100 /* NotFull */;\n            if (first == chars[0]) ;\n            else if (first == folded[0])\n                score += -200 /* CaseFold */;\n            else\n                return false;\n            return this.ret(score, [0, firstSize]);\n        }\n        let direct = word.indexOf(this.pattern);\n        if (direct == 0)\n            return this.ret(word.length == this.pattern.length ? 0 : -100 /* NotFull */, [0, this.pattern.length]);\n        let len = chars.length, anyTo = 0;\n        if (direct < 0) {\n            for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {\n                let next = codePointAt(word, i);\n                if (next == chars[anyTo] || next == folded[anyTo])\n                    any[anyTo++] = i;\n                i += codePointSize(next);\n            }\n            // No match, exit immediately\n            if (anyTo < len)\n                return false;\n        }\n        // This tracks the extent of the precise (non-folded, not\n        // necessarily adjacent) match\n        let preciseTo = 0;\n        // Tracks whether there is a match that hits only characters that\n        // appear to be starting words. `byWordFolded` is set to true when\n        // a case folded character is encountered in such a match\n        let byWordTo = 0, byWordFolded = false;\n        // If we've found a partial adjacent match, these track its state\n        let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;\n        let hasLower = /[a-z]/.test(word), wordAdjacent = true;\n        // Go over the option's text, scanning for the various kinds of matches\n        for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* NonWord */; i < e && byWordTo < len;) {\n            let next = codePointAt(word, i);\n            if (direct < 0) {\n                if (preciseTo < len && next == chars[preciseTo])\n                    precise[preciseTo++] = i;\n                if (adjacentTo < len) {\n                    if (next == chars[adjacentTo] || next == folded[adjacentTo]) {\n                        if (adjacentTo == 0)\n                            adjacentStart = i;\n                        adjacentEnd = i + 1;\n                        adjacentTo++;\n                    }\n                    else {\n                        adjacentTo = 0;\n                    }\n                }\n            }\n            let ch, type = next < 0xff\n                ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Lower */ : next >= 65 && next <= 90 ? 1 /* Upper */ : 0 /* NonWord */)\n                : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Upper */ : ch != ch.toUpperCase() ? 2 /* Lower */ : 0 /* NonWord */);\n            if (!i || type == 1 /* Upper */ && hasLower || prevType == 0 /* NonWord */ && type != 0 /* NonWord */) {\n                if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))\n                    byWord[byWordTo++] = i;\n                else if (byWord.length)\n                    wordAdjacent = false;\n            }\n            prevType = type;\n            i += codePointSize(next);\n        }\n        if (byWordTo == len && byWord[0] == 0 && wordAdjacent)\n            return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0), byWord, word);\n        if (adjacentTo == len && adjacentStart == 0)\n            return this.ret(-200 /* CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* NotFull */), [0, adjacentEnd]);\n        if (direct > -1)\n            return this.ret(-700 /* NotStart */ - word.length, [direct, direct + this.pattern.length]);\n        if (adjacentTo == len)\n            return this.ret(-200 /* CaseFold */ + -700 /* NotStart */ - word.length, [adjacentStart, adjacentEnd]);\n        if (byWordTo == len)\n            return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0) + -700 /* NotStart */ +\n                (wordAdjacent ? 0 : -1100 /* Gap */), byWord, word);\n        return chars.length == 2 ? false\n            : this.result((any[0] ? -700 /* NotStart */ : 0) + -200 /* CaseFold */ + -1100 /* Gap */, any, word);\n    }\n    result(score, positions, word) {\n        let result = [], i = 0;\n        for (let pos of positions) {\n            let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);\n            if (i && result[i - 1] == pos)\n                result[i - 1] = to;\n            else {\n                result[i++] = pos;\n                result[i++] = to;\n            }\n        }\n        return this.ret(score - word.length, result);\n    }\n}\n\nconst completionConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            activateOnTyping: true,\n            selectOnOpen: true,\n            override: null,\n            closeOnBlur: true,\n            maxRenderedOptions: 100,\n            defaultKeymap: true,\n            tooltipClass: () => \"\",\n            optionClass: () => \"\",\n            aboveCursor: false,\n            icons: true,\n            addToOptions: [],\n            positionInfo: defaultPositionInfo,\n            compareCompletions: (a, b) => a.label.localeCompare(b.label),\n            interactionDelay: 75\n        }, {\n            defaultKeymap: (a, b) => a && b,\n            closeOnBlur: (a, b) => a && b,\n            icons: (a, b) => a && b,\n            tooltipClass: (a, b) => c => joinClass(a(c), b(c)),\n            optionClass: (a, b) => c => joinClass(a(c), b(c)),\n            addToOptions: (a, b) => a.concat(b)\n        });\n    }\n});\nfunction joinClass(a, b) {\n    return a ? b ? a + \" \" + b : a : b;\n}\nfunction defaultPositionInfo(view, list, option, info, space) {\n    let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;\n    let side = \"top\", offset, maxWidth;\n    let spaceLeft = list.left - space.left, spaceRight = space.right - list.right;\n    let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;\n    if (left && spaceLeft < Math.min(infoWidth, spaceRight))\n        left = false;\n    else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))\n        left = true;\n    if (infoWidth <= (left ? spaceLeft : spaceRight)) {\n        offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;\n        maxWidth = Math.min(400 /* Width */, left ? spaceLeft : spaceRight);\n    }\n    else {\n        narrow = true;\n        maxWidth = Math.min(400 /* Width */, (rtl ? list.right : space.right - list.left) - 30 /* Margin */);\n        let spaceBelow = space.bottom - list.bottom;\n        if (spaceBelow >= infoHeight || spaceBelow > list.top) { // Below the completion\n            offset = option.bottom - list.top;\n        }\n        else { // Above it\n            side = \"bottom\";\n            offset = list.bottom - option.top;\n        }\n    }\n    return {\n        style: `${side}: ${offset}px; max-width: ${maxWidth}px`,\n        class: \"cm-completionInfo-\" + (narrow ? (rtl ? \"left-narrow\" : \"right-narrow\") : left ? \"left\" : \"right\")\n    };\n}\n\nfunction optionContent(config) {\n    let content = config.addToOptions.slice();\n    if (config.icons)\n        content.push({\n            render(completion) {\n                let icon = document.createElement(\"div\");\n                icon.classList.add(\"cm-completionIcon\");\n                if (completion.type)\n                    icon.classList.add(...completion.type.split(/\\s+/g).map(cls => \"cm-completionIcon-\" + cls));\n                icon.setAttribute(\"aria-hidden\", \"true\");\n                return icon;\n            },\n            position: 20\n        });\n    content.push({\n        render(completion, _s, match) {\n            let labelElt = document.createElement(\"span\");\n            labelElt.className = \"cm-completionLabel\";\n            let label = completion.displayLabel || completion.label, off = 0;\n            for (let j = 0; j < match.length;) {\n                let from = match[j++], to = match[j++];\n                if (from > off)\n                    labelElt.appendChild(document.createTextNode(label.slice(off, from)));\n                let span = labelElt.appendChild(document.createElement(\"span\"));\n                span.appendChild(document.createTextNode(label.slice(from, to)));\n                span.className = \"cm-completionMatchedText\";\n                off = to;\n            }\n            if (off < label.length)\n                labelElt.appendChild(document.createTextNode(label.slice(off)));\n            return labelElt;\n        },\n        position: 50\n    }, {\n        render(completion) {\n            if (!completion.detail)\n                return null;\n            let detailElt = document.createElement(\"span\");\n            detailElt.className = \"cm-completionDetail\";\n            detailElt.textContent = completion.detail;\n            return detailElt;\n        },\n        position: 80\n    });\n    return content.sort((a, b) => a.position - b.position).map(a => a.render);\n}\nfunction rangeAroundSelected(total, selected, max) {\n    if (total <= max)\n        return { from: 0, to: total };\n    if (selected < 0)\n        selected = 0;\n    if (selected <= (total >> 1)) {\n        let off = Math.floor(selected / max);\n        return { from: off * max, to: (off + 1) * max };\n    }\n    let off = Math.floor((total - selected) / max);\n    return { from: total - (off + 1) * max, to: total - off * max };\n}\nclass CompletionTooltip {\n    constructor(view, stateField, applyCompletion) {\n        this.view = view;\n        this.stateField = stateField;\n        this.applyCompletion = applyCompletion;\n        this.info = null;\n        this.infoDestroy = null;\n        this.placeInfoReq = {\n            read: () => this.measureInfo(),\n            write: (pos) => this.placeInfo(pos),\n            key: this\n        };\n        this.space = null;\n        this.currentClass = \"\";\n        let cState = view.state.field(stateField);\n        let { options, selected } = cState.open;\n        let config = view.state.facet(completionConfig);\n        this.optionContent = optionContent(config);\n        this.optionClass = config.optionClass;\n        this.tooltipClass = config.tooltipClass;\n        this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-tooltip-autocomplete\";\n        this.updateTooltipClass(view.state);\n        this.dom.addEventListener(\"mousedown\", (e) => {\n            for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {\n                if (dom.nodeName == \"LI\" && (match = /-(\\d+)$/.exec(dom.id)) && +match[1] < options.length) {\n                    this.applyCompletion(view, options[+match[1]]);\n                    e.preventDefault();\n                    return;\n                }\n            }\n        });\n        this.dom.addEventListener(\"focusout\", (e) => {\n            let state = view.state.field(this.stateField, false);\n            if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur &&\n                e.relatedTarget != view.contentDOM)\n                view.dispatch({ effects: closeCompletionEffect.of(null) });\n        });\n        this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));\n        this.list.addEventListener(\"scroll\", () => {\n            if (this.info)\n                this.view.requestMeasure(this.placeInfoReq);\n        });\n    }\n    mount() { this.updateSel(); }\n    update(update) {\n        var _a, _b, _c;\n        let cState = update.state.field(this.stateField);\n        let prevState = update.startState.field(this.stateField);\n        this.updateTooltipClass(update.state);\n        if (cState != prevState) {\n            this.updateSel();\n            if (((_a = cState.open) === null || _a === void 0 ? void 0 : _a.disabled) != ((_b = prevState.open) === null || _b === void 0 ? void 0 : _b.disabled))\n                this.dom.classList.toggle(\"cm-tooltip-autocomplete-disabled\", !!((_c = cState.open) === null || _c === void 0 ? void 0 : _c.disabled));\n        }\n    }\n    updateTooltipClass(state) {\n        let cls = this.tooltipClass(state);\n        if (cls != this.currentClass) {\n            for (let c of this.currentClass.split(\" \"))\n                if (c)\n                    this.dom.classList.remove(c);\n            for (let c of cls.split(\" \"))\n                if (c)\n                    this.dom.classList.add(c);\n            this.currentClass = cls;\n        }\n    }\n    positioned(space) {\n        this.space = space;\n        if (this.info)\n            this.view.requestMeasure(this.placeInfoReq);\n    }\n    updateSel() {\n        let cState = this.view.state.field(this.stateField), open = cState.open;\n        if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {\n            this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);\n            this.list.remove();\n            this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));\n            this.list.addEventListener(\"scroll\", () => {\n                if (this.info)\n                    this.view.requestMeasure(this.placeInfoReq);\n            });\n        }\n        if (this.updateSelectedOption(open.selected)) {\n            this.destroyInfo();\n            let { completion } = open.options[open.selected];\n            let { info } = completion;\n            if (!info)\n                return;\n            let infoResult = typeof info === \"string\" ? document.createTextNode(info) : info(completion);\n            if (!infoResult)\n                return;\n            if (\"then\" in infoResult) {\n                infoResult.then(obj => {\n                    if (obj && this.view.state.field(this.stateField, false) == cState)\n                        this.addInfoPane(obj, completion);\n                }).catch(e => logException(this.view.state, e, \"completion info\"));\n            }\n            else {\n                this.addInfoPane(infoResult, completion);\n            }\n        }\n    }\n    addInfoPane(content, completion) {\n        this.destroyInfo();\n        let wrap = this.info = document.createElement(\"div\");\n        wrap.className = \"cm-tooltip cm-completionInfo\";\n        if (content.nodeType != null) {\n            wrap.appendChild(content);\n            this.infoDestroy = null;\n        }\n        else {\n            let { dom, destroy } = content;\n            wrap.appendChild(dom);\n            this.infoDestroy = destroy || null;\n        }\n        this.dom.appendChild(wrap);\n        this.view.requestMeasure(this.placeInfoReq);\n    }\n    updateSelectedOption(selected) {\n        let set = null;\n        for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {\n            if (opt.nodeName != \"LI\" || !opt.id) {\n                i--; // A section header\n            }\n            else if (i == selected) {\n                if (!opt.hasAttribute(\"aria-selected\")) {\n                    opt.setAttribute(\"aria-selected\", \"true\");\n                    set = opt;\n                }\n            }\n            else {\n                if (opt.hasAttribute(\"aria-selected\"))\n                    opt.removeAttribute(\"aria-selected\");\n            }\n        }\n        if (set)\n            scrollIntoView(this.list, set);\n        return set;\n    }\n    measureInfo() {\n        let sel = this.dom.querySelector(\"[aria-selected]\");\n        if (!sel || !this.info)\n            return null;\n        let listRect = this.dom.getBoundingClientRect();\n        let infoRect = this.info.getBoundingClientRect();\n        let selRect = sel.getBoundingClientRect();\n        let space = this.space;\n        if (!space) {\n            let win = this.dom.ownerDocument.defaultView || window;\n            space = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };\n        }\n        if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 ||\n            selRect.bottom < Math.max(space.top, listRect.top) + 10)\n            return null;\n        return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space);\n    }\n    placeInfo(pos) {\n        if (this.info) {\n            if (pos) {\n                if (pos.style)\n                    this.info.style.cssText = pos.style;\n                this.info.className = \"cm-tooltip cm-completionInfo \" + (pos.class || \"\");\n            }\n            else {\n                this.info.style.cssText = \"top: -1e6px\";\n            }\n        }\n    }\n    createListBox(options, id, range) {\n        const ul = document.createElement(\"ul\");\n        ul.id = id;\n        ul.setAttribute(\"role\", \"listbox\");\n        ul.setAttribute(\"aria-expanded\", \"true\");\n        ul.setAttribute(\"aria-label\", this.view.state.phrase(\"Completions\"));\n        let curSection = null;\n        for (let i = range.from; i < range.to; i++) {\n            let { completion, match } = options[i], { section } = completion;\n            if (section) {\n                let name = typeof section == \"string\" ? section : section.name;\n                if (name != curSection && (i > range.from || range.from == 0)) {\n                    curSection = name;\n                    if (typeof section != \"string\" && section.header) {\n                        ul.appendChild(section.header(section));\n                    }\n                    else {\n                        let header = ul.appendChild(document.createElement(\"completion-section\"));\n                        header.textContent = name;\n                    }\n                }\n            }\n            const li = ul.appendChild(document.createElement(\"li\"));\n            li.id = id + \"-\" + i;\n            li.setAttribute(\"role\", \"option\");\n            let cls = this.optionClass(completion);\n            if (cls)\n                li.className = cls;\n            for (let source of this.optionContent) {\n                let node = source(completion, this.view.state, match);\n                if (node)\n                    li.appendChild(node);\n            }\n        }\n        if (range.from)\n            ul.classList.add(\"cm-completionListIncompleteTop\");\n        if (range.to < options.length)\n            ul.classList.add(\"cm-completionListIncompleteBottom\");\n        return ul;\n    }\n    destroyInfo() {\n        if (this.info) {\n            if (this.infoDestroy)\n                this.infoDestroy();\n            this.info.remove();\n            this.info = null;\n        }\n    }\n    destroy() {\n        this.destroyInfo();\n    }\n}\n// We allocate a new function instance every time the completion\n// changes to force redrawing/repositioning of the tooltip\nfunction completionTooltip(stateField, applyCompletion) {\n    return (view) => new CompletionTooltip(view, stateField, applyCompletion);\n}\nfunction scrollIntoView(container, element) {\n    let parent = container.getBoundingClientRect();\n    let self = element.getBoundingClientRect();\n    if (self.top < parent.top)\n        container.scrollTop -= parent.top - self.top;\n    else if (self.bottom > parent.bottom)\n        container.scrollTop += self.bottom - parent.bottom;\n}\n\n// Used to pick a preferred option when two options with the same\n// label occur in the result.\nfunction score(option) {\n    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +\n        (option.type ? 1 : 0);\n}\nfunction sortOptions(active, state) {\n    let options = [];\n    let sections = null;\n    let addOption = (option) => {\n        options.push(option);\n        let { section } = option.completion;\n        if (section) {\n            if (!sections)\n                sections = [];\n            let name = typeof section == \"string\" ? section : section.name;\n            if (!sections.some(s => s.name == name))\n                sections.push(typeof section == \"string\" ? { name } : section);\n        }\n    };\n    for (let a of active)\n        if (a.hasResult()) {\n            let getMatch = a.result.getMatch;\n            if (a.result.filter === false) {\n                for (let option of a.result.options) {\n                    addOption(new Option(option, a.source, getMatch ? getMatch(option) : [], 1e9 - options.length));\n                }\n            }\n            else {\n                let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to));\n                for (let option of a.result.options)\n                    if (matcher.match(option.label)) {\n                        let matched = !option.displayLabel ? matcher.matched : getMatch ? getMatch(option, matcher.matched) : [];\n                        addOption(new Option(option, a.source, matched, matcher.score + (option.boost || 0)));\n                    }\n            }\n        }\n    if (sections) {\n        let sectionOrder = Object.create(null), pos = 0;\n        let cmp = (a, b) => { var _a, _b; return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1); };\n        for (let s of sections.sort(cmp)) {\n            pos -= 1e5;\n            sectionOrder[s.name] = pos;\n        }\n        for (let option of options) {\n            let { section } = option.completion;\n            if (section)\n                option.score += sectionOrder[typeof section == \"string\" ? section : section.name];\n        }\n    }\n    let result = [], prev = null;\n    let compare = state.facet(completionConfig).compareCompletions;\n    for (let opt of options.sort((a, b) => (b.score - a.score) || compare(a.completion, b.completion))) {\n        let cur = opt.completion;\n        if (!prev || prev.label != cur.label || prev.detail != cur.detail ||\n            (prev.type != null && cur.type != null && prev.type != cur.type) ||\n            prev.apply != cur.apply || prev.boost != cur.boost)\n            result.push(opt);\n        else if (score(opt.completion) > score(prev))\n            result[result.length - 1] = opt;\n        prev = opt.completion;\n    }\n    return result;\n}\nclass CompletionDialog {\n    constructor(options, attrs, tooltip, timestamp, selected, disabled) {\n        this.options = options;\n        this.attrs = attrs;\n        this.tooltip = tooltip;\n        this.timestamp = timestamp;\n        this.selected = selected;\n        this.disabled = disabled;\n    }\n    setSelected(selected, id) {\n        return selected == this.selected || selected >= this.options.length ? this\n            : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);\n    }\n    static build(active, state, id, prev, conf) {\n        let options = sortOptions(active, state);\n        if (!options.length) {\n            return prev && active.some(a => a.state == 1 /* Pending */) ?\n                new CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;\n        }\n        let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;\n        if (prev && prev.selected != selected && prev.selected != -1) {\n            let selectedValue = prev.options[prev.selected].completion;\n            for (let i = 0; i < options.length; i++)\n                if (options[i].completion == selectedValue) {\n                    selected = i;\n                    break;\n                }\n        }\n        return new CompletionDialog(options, makeAttrs(id, selected), {\n            pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),\n            create: completionTooltip(completionState, applyCompletion),\n            above: conf.aboveCursor,\n        }, prev ? prev.timestamp : Date.now(), selected, false);\n    }\n    map(changes) {\n        return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);\n    }\n}\nclass CompletionState {\n    constructor(active, id, open) {\n        this.active = active;\n        this.id = id;\n        this.open = open;\n    }\n    static start() {\n        return new CompletionState(none, \"cm-ac-\" + Math.floor(Math.random() * 2e6).toString(36), null);\n    }\n    update(tr) {\n        let { state } = tr, conf = state.facet(completionConfig);\n        let sources = conf.override ||\n            state.languageDataAt(\"autocomplete\", cur(state)).map(asSource);\n        let active = sources.map(source => {\n            let value = this.active.find(s => s.source == source) ||\n                new ActiveSource(source, this.active.some(a => a.state != 0 /* Inactive */) ? 1 /* Pending */ : 0 /* Inactive */);\n            return value.update(tr, conf);\n        });\n        if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))\n            active = this.active;\n        let open = this.open;\n        if (open && tr.docChanged)\n            open = open.map(tr.changes);\n        if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||\n            !sameResults(active, this.active))\n            open = CompletionDialog.build(active, state, this.id, open, conf);\n        else if (open && open.disabled && !active.some(a => a.state == 1 /* Pending */))\n            open = null;\n        if (!open && active.every(a => a.state != 1 /* Pending */) && active.some(a => a.hasResult()))\n            active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* Inactive */) : a);\n        for (let effect of tr.effects)\n            if (effect.is(setSelectedEffect))\n                open = open && open.setSelected(effect.value, this.id);\n        return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);\n    }\n    get tooltip() { return this.open ? this.open.tooltip : null; }\n    get attrs() { return this.open ? this.open.attrs : baseAttrs; }\n}\nfunction sameResults(a, b) {\n    if (a == b)\n        return true;\n    for (let iA = 0, iB = 0;;) {\n        while (iA < a.length && !a[iA].hasResult)\n            iA++;\n        while (iB < b.length && !b[iB].hasResult)\n            iB++;\n        let endA = iA == a.length, endB = iB == b.length;\n        if (endA || endB)\n            return endA == endB;\n        if (a[iA++].result != b[iB++].result)\n            return false;\n    }\n}\nconst baseAttrs = {\n    \"aria-autocomplete\": \"list\"\n};\nfunction makeAttrs(id, selected) {\n    let result = {\n        \"aria-autocomplete\": \"list\",\n        \"aria-haspopup\": \"listbox\",\n        \"aria-controls\": id\n    };\n    if (selected > -1)\n        result[\"aria-activedescendant\"] = id + \"-\" + selected;\n    return result;\n}\nconst none = [];\nfunction getUserEvent(tr) {\n    return tr.isUserEvent(\"input.type\") ? \"input\" : tr.isUserEvent(\"delete.backward\") ? \"delete\" : null;\n}\nclass ActiveSource {\n    constructor(source, state, explicitPos = -1) {\n        this.source = source;\n        this.state = state;\n        this.explicitPos = explicitPos;\n    }\n    hasResult() { return false; }\n    update(tr, conf) {\n        let event = getUserEvent(tr), value = this;\n        if (event)\n            value = value.handleUserEvent(tr, event, conf);\n        else if (tr.docChanged)\n            value = value.handleChange(tr);\n        else if (tr.selection && value.state != 0 /* Inactive */)\n            value = new ActiveSource(value.source, 0 /* Inactive */);\n        for (let effect of tr.effects) {\n            if (effect.is(startCompletionEffect))\n                value = new ActiveSource(value.source, 1 /* Pending */, effect.value ? cur(tr.state) : -1);\n            else if (effect.is(closeCompletionEffect))\n                value = new ActiveSource(value.source, 0 /* Inactive */);\n            else if (effect.is(setActiveEffect))\n                for (let active of effect.value)\n                    if (active.source == value.source)\n                        value = active;\n        }\n        return value;\n    }\n    handleUserEvent(tr, type, conf) {\n        return type == \"delete\" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* Pending */);\n    }\n    handleChange(tr) {\n        return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);\n    }\n    map(changes) {\n        return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));\n    }\n}\nclass ActiveResult extends ActiveSource {\n    constructor(source, explicitPos, result, from, to) {\n        super(source, 2 /* Result */, explicitPos);\n        this.result = result;\n        this.from = from;\n        this.to = to;\n    }\n    hasResult() { return true; }\n    handleUserEvent(tr, type, conf) {\n        var _a;\n        let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);\n        let pos = cur(tr.state);\n        if ((this.explicitPos < 0 ? pos <= from : pos < this.from) ||\n            pos > to ||\n            type == \"delete\" && cur(tr.startState) == this.from)\n            return new ActiveSource(this.source, type == \"input\" && conf.activateOnTyping ? 1 /* Pending */ : 0 /* Inactive */);\n        let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos), updated;\n        if (checkValid(this.result.validFor, tr.state, from, to))\n            return new ActiveResult(this.source, explicitPos, this.result, from, to);\n        if (this.result.update &&\n            (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))\n            return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));\n        return new ActiveSource(this.source, 1 /* Pending */, explicitPos);\n    }\n    handleChange(tr) {\n        return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);\n    }\n    map(mapping) {\n        return mapping.empty ? this :\n            new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));\n    }\n}\nfunction checkValid(validFor, state, from, to) {\n    if (!validFor)\n        return false;\n    let text = state.sliceDoc(from, to);\n    return typeof validFor == \"function\" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);\n}\nconst setActiveEffect = /*@__PURE__*/StateEffect.define({\n    map(sources, mapping) { return sources.map(s => s.map(mapping)); }\n});\nconst setSelectedEffect = /*@__PURE__*/StateEffect.define();\nconst completionState = /*@__PURE__*/StateField.define({\n    create() { return CompletionState.start(); },\n    update(value, tr) { return value.update(tr); },\n    provide: f => [\n        showTooltip.from(f, val => val.tooltip),\n        EditorView.contentAttributes.from(f, state => state.attrs)\n    ]\n});\nfunction applyCompletion(view, option) {\n    const apply = option.completion.apply || option.completion.label;\n    let result = view.state.field(completionState).active.find(a => a.source == option.source);\n    if (!(result instanceof ActiveResult))\n        return false;\n    if (typeof apply == \"string\")\n        view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));\n    else\n        apply(view, option.completion, result.from, result.to);\n    return true;\n}\n\n/**\nReturns a command that moves the completion selection forward or\nbackward by the given amount.\n*/\nfunction moveCompletionSelection(forward, by = \"option\") {\n    return (view) => {\n        let cState = view.state.field(completionState, false);\n        if (!cState || !cState.open || cState.open.disabled ||\n            Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)\n            return false;\n        let step = 1, tooltip;\n        if (by == \"page\" && (tooltip = getTooltip(view, cState.open.tooltip)))\n            step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /\n                tooltip.dom.querySelector(\"li\").offsetHeight) - 1);\n        let { length } = cState.open.options;\n        let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;\n        if (selected < 0)\n            selected = by == \"page\" ? 0 : length - 1;\n        else if (selected >= length)\n            selected = by == \"page\" ? length - 1 : 0;\n        view.dispatch({ effects: setSelectedEffect.of(selected) });\n        return true;\n    };\n}\n/**\nAccept the current completion.\n*/\nconst acceptCompletion = (view) => {\n    let cState = view.state.field(completionState, false);\n    if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled ||\n        Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)\n        return false;\n    return applyCompletion(view, cState.open.options[cState.open.selected]);\n};\n/**\nExplicitly start autocompletion.\n*/\nconst startCompletion = (view) => {\n    let cState = view.state.field(completionState, false);\n    if (!cState)\n        return false;\n    view.dispatch({ effects: startCompletionEffect.of(true) });\n    return true;\n};\n/**\nClose the currently active completion.\n*/\nconst closeCompletion = (view) => {\n    let cState = view.state.field(completionState, false);\n    if (!cState || !cState.active.some(a => a.state != 0 /* Inactive */))\n        return false;\n    view.dispatch({ effects: closeCompletionEffect.of(null) });\n    return true;\n};\nclass RunningQuery {\n    constructor(active, context) {\n        this.active = active;\n        this.context = context;\n        this.time = Date.now();\n        this.updates = [];\n        // Note that 'undefined' means 'not done yet', whereas 'null' means\n        // 'query returned null'.\n        this.done = undefined;\n    }\n}\nconst DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;\nconst completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.debounceUpdate = -1;\n        this.running = [];\n        this.debounceAccept = -1;\n        this.composing = 0 /* None */;\n        for (let active of view.state.field(completionState).active)\n            if (active.state == 1 /* Pending */)\n                this.startQuery(active);\n    }\n    update(update) {\n        let cState = update.state.field(completionState);\n        if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)\n            return;\n        let doesReset = update.transactions.some(tr => {\n            return (tr.selection || tr.docChanged) && !getUserEvent(tr);\n        });\n        for (let i = 0; i < this.running.length; i++) {\n            let query = this.running[i];\n            if (doesReset ||\n                query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {\n                for (let handler of query.context.abortListeners) {\n                    try {\n                        handler();\n                    }\n                    catch (e) {\n                        logException(this.view.state, e);\n                    }\n                }\n                query.context.abortListeners = null;\n                this.running.splice(i--, 1);\n            }\n            else {\n                query.updates.push(...update.transactions);\n            }\n        }\n        if (this.debounceUpdate > -1)\n            clearTimeout(this.debounceUpdate);\n        this.debounceUpdate = cState.active.some(a => a.state == 1 /* Pending */ && !this.running.some(q => q.active.source == a.source))\n            ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;\n        if (this.composing != 0 /* None */)\n            for (let tr of update.transactions) {\n                if (getUserEvent(tr) == \"input\")\n                    this.composing = 2 /* Changed */;\n                else if (this.composing == 2 /* Changed */ && tr.selection)\n                    this.composing = 3 /* ChangedAndMoved */;\n            }\n    }\n    startUpdate() {\n        this.debounceUpdate = -1;\n        let { state } = this.view, cState = state.field(completionState);\n        for (let active of cState.active) {\n            if (active.state == 1 /* Pending */ && !this.running.some(r => r.active.source == active.source))\n                this.startQuery(active);\n        }\n    }\n    startQuery(active) {\n        let { state } = this.view, pos = cur(state);\n        let context = new CompletionContext(state, pos, active.explicitPos == pos);\n        let pending = new RunningQuery(active, context);\n        this.running.push(pending);\n        Promise.resolve(active.source(context)).then(result => {\n            if (!pending.context.aborted) {\n                pending.done = result || null;\n                this.scheduleAccept();\n            }\n        }, err => {\n            this.view.dispatch({ effects: closeCompletionEffect.of(null) });\n            logException(this.view.state, err);\n        });\n    }\n    scheduleAccept() {\n        if (this.running.every(q => q.done !== undefined))\n            this.accept();\n        else if (this.debounceAccept < 0)\n            this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);\n    }\n    // For each finished query in this.running, try to create a result\n    // or, if appropriate, restart the query.\n    accept() {\n        var _a;\n        if (this.debounceAccept > -1)\n            clearTimeout(this.debounceAccept);\n        this.debounceAccept = -1;\n        let updated = [];\n        let conf = this.view.state.facet(completionConfig);\n        for (let i = 0; i < this.running.length; i++) {\n            let query = this.running[i];\n            if (query.done === undefined)\n                continue;\n            this.running.splice(i--, 1);\n            if (query.done) {\n                let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));\n                // Replay the transactions that happened since the start of\n                // the request and see if that preserves the result\n                for (let tr of query.updates)\n                    active = active.update(tr, conf);\n                if (active.hasResult()) {\n                    updated.push(active);\n                    continue;\n                }\n            }\n            let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);\n            if (current && current.state == 1 /* Pending */) {\n                if (query.done == null) {\n                    // Explicitly failed. Should clear the pending status if it\n                    // hasn't been re-set in the meantime.\n                    let active = new ActiveSource(query.active.source, 0 /* Inactive */);\n                    for (let tr of query.updates)\n                        active = active.update(tr, conf);\n                    if (active.state != 1 /* Pending */)\n                        updated.push(active);\n                }\n                else {\n                    // Cleared by subsequent transactions. Restart.\n                    this.startQuery(current);\n                }\n            }\n        }\n        if (updated.length)\n            this.view.dispatch({ effects: setActiveEffect.of(updated) });\n    }\n}, {\n    eventHandlers: {\n        blur(event) {\n            let state = this.view.state.field(completionState, false);\n            if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {\n                let dialog = state.open && getTooltip(this.view, state.open.tooltip);\n                if (!dialog || !dialog.dom.contains(event.relatedTarget))\n                    this.view.dispatch({ effects: closeCompletionEffect.of(null) });\n            }\n        },\n        compositionstart() {\n            this.composing = 1 /* Started */;\n        },\n        compositionend() {\n            if (this.composing == 3 /* ChangedAndMoved */) {\n                // Safari fires compositionend events synchronously, possibly\n                // from inside an update, so dispatch asynchronously to avoid reentrancy\n                setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);\n            }\n            this.composing = 0 /* None */;\n        }\n    }\n});\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-tooltip.cm-tooltip-autocomplete\": {\n        \"& > ul\": {\n            fontFamily: \"monospace\",\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden auto\",\n            maxWidth_fallback: \"700px\",\n            maxWidth: \"min(700px, 95vw)\",\n            minWidth: \"250px\",\n            maxHeight: \"10em\",\n            height: \"100%\",\n            listStyle: \"none\",\n            margin: 0,\n            padding: 0,\n            \"& > li, & > completion-section\": {\n                padding: \"1px 3px\",\n                lineHeight: 1.2\n            },\n            \"& > li\": {\n                overflowX: \"hidden\",\n                textOverflow: \"ellipsis\",\n                cursor: \"pointer\"\n            },\n            \"& > completion-section\": {\n                display: \"list-item\",\n                borderBottom: \"1px solid silver\",\n                paddingLeft: \"0.5em\",\n                opacity: 0.7\n            }\n        }\n    },\n    \"&light .cm-tooltip-autocomplete ul li[aria-selected]\": {\n        background: \"#17c\",\n        color: \"white\",\n    },\n    \"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\n        background: \"#777\",\n    },\n    \"&dark .cm-tooltip-autocomplete ul li[aria-selected]\": {\n        background: \"#347\",\n        color: \"white\",\n    },\n    \"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\n        background: \"#444\",\n    },\n    \".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after\": {\n        content: '\"···\"',\n        opacity: 0.5,\n        display: \"block\",\n        textAlign: \"center\"\n    },\n    \".cm-tooltip.cm-completionInfo\": {\n        position: \"absolute\",\n        padding: \"3px 9px\",\n        width: \"max-content\",\n        maxWidth: `${400 /* Width */}px`,\n        boxSizing: \"border-box\"\n    },\n    \".cm-completionInfo.cm-completionInfo-left\": { right: \"100%\" },\n    \".cm-completionInfo.cm-completionInfo-right\": { left: \"100%\" },\n    \".cm-completionInfo.cm-completionInfo-left-narrow\": { right: `${30 /* Margin */}px` },\n    \".cm-completionInfo.cm-completionInfo-right-narrow\": { left: `${30 /* Margin */}px` },\n    \"&light .cm-snippetField\": { backgroundColor: \"#00000022\" },\n    \"&dark .cm-snippetField\": { backgroundColor: \"#ffffff22\" },\n    \".cm-snippetFieldPosition\": {\n        verticalAlign: \"text-top\",\n        width: 0,\n        height: \"1.15em\",\n        display: \"inline-block\",\n        margin: \"0 -0.7px -.7em\",\n        borderLeft: \"1.4px dotted #888\"\n    },\n    \".cm-completionMatchedText\": {\n        textDecoration: \"underline\"\n    },\n    \".cm-completionDetail\": {\n        marginLeft: \"0.5em\",\n        fontStyle: \"italic\"\n    },\n    \".cm-completionIcon\": {\n        fontSize: \"90%\",\n        width: \".8em\",\n        display: \"inline-block\",\n        textAlign: \"center\",\n        paddingRight: \".6em\",\n        opacity: \"0.6\",\n        boxSizing: \"content-box\"\n    },\n    \".cm-completionIcon-function, .cm-completionIcon-method\": {\n        \"&:after\": { content: \"'ƒ'\" }\n    },\n    \".cm-completionIcon-class\": {\n        \"&:after\": { content: \"'○'\" }\n    },\n    \".cm-completionIcon-interface\": {\n        \"&:after\": { content: \"'◌'\" }\n    },\n    \".cm-completionIcon-variable\": {\n        \"&:after\": { content: \"'𝑥'\" }\n    },\n    \".cm-completionIcon-constant\": {\n        \"&:after\": { content: \"'𝐶'\" }\n    },\n    \".cm-completionIcon-type\": {\n        \"&:after\": { content: \"'𝑡'\" }\n    },\n    \".cm-completionIcon-enum\": {\n        \"&:after\": { content: \"'∪'\" }\n    },\n    \".cm-completionIcon-property\": {\n        \"&:after\": { content: \"'□'\" }\n    },\n    \".cm-completionIcon-keyword\": {\n        \"&:after\": { content: \"'🔑\\uFE0E'\" } // Disable emoji rendering\n    },\n    \".cm-completionIcon-namespace\": {\n        \"&:after\": { content: \"'▢'\" }\n    },\n    \".cm-completionIcon-text\": {\n        \"&:after\": { content: \"'abc'\", fontSize: \"50%\", verticalAlign: \"middle\" }\n    }\n});\n\nclass FieldPos {\n    constructor(field, line, from, to) {\n        this.field = field;\n        this.line = line;\n        this.from = from;\n        this.to = to;\n    }\n}\nclass FieldRange {\n    constructor(field, from, to) {\n        this.field = field;\n        this.from = from;\n        this.to = to;\n    }\n    map(changes) {\n        let from = changes.mapPos(this.from, -1, MapMode.TrackDel);\n        let to = changes.mapPos(this.to, 1, MapMode.TrackDel);\n        return from == null || to == null ? null : new FieldRange(this.field, from, to);\n    }\n}\nclass Snippet {\n    constructor(lines, fieldPositions) {\n        this.lines = lines;\n        this.fieldPositions = fieldPositions;\n    }\n    instantiate(state, pos) {\n        let text = [], lineStart = [pos];\n        let lineObj = state.doc.lineAt(pos), baseIndent = /^\\s*/.exec(lineObj.text)[0];\n        for (let line of this.lines) {\n            if (text.length) {\n                let indent = baseIndent, tabs = /^\\t*/.exec(line)[0].length;\n                for (let i = 0; i < tabs; i++)\n                    indent += state.facet(indentUnit);\n                lineStart.push(pos + indent.length - tabs);\n                line = indent + line.slice(tabs);\n            }\n            text.push(line);\n            pos += line.length + 1;\n        }\n        let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));\n        return { text, ranges };\n    }\n    static parse(template) {\n        let fields = [];\n        let lines = [], positions = [], m;\n        for (let line of template.split(/\\r\\n?|\\n/)) {\n            while (m = /[#$]\\{(?:(\\d+)(?::([^}]*))?|([^}]*))\\}/.exec(line)) {\n                let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || \"\", found = -1;\n                for (let i = 0; i < fields.length; i++) {\n                    if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)\n                        found = i;\n                }\n                if (found < 0) {\n                    let i = 0;\n                    while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))\n                        i++;\n                    fields.splice(i, 0, { seq, name });\n                    found = i;\n                    for (let pos of positions)\n                        if (pos.field >= found)\n                            pos.field++;\n                }\n                positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));\n                line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);\n            }\n            for (let esc; esc = /\\\\([{}])/.exec(line);) {\n                line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);\n                for (let pos of positions)\n                    if (pos.line == lines.length && pos.from > esc.index) {\n                        pos.from--;\n                        pos.to--;\n                    }\n            }\n            lines.push(line);\n        }\n        return new Snippet(lines, positions);\n    }\n}\nlet fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {\n        toDOM() {\n            let span = document.createElement(\"span\");\n            span.className = \"cm-snippetFieldPosition\";\n            return span;\n        }\n        ignoreEvent() { return false; }\n    } });\nlet fieldRange = /*@__PURE__*/Decoration.mark({ class: \"cm-snippetField\" });\nclass ActiveSnippet {\n    constructor(ranges, active) {\n        this.ranges = ranges;\n        this.active = active;\n        this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));\n    }\n    map(changes) {\n        let ranges = [];\n        for (let r of this.ranges) {\n            let mapped = r.map(changes);\n            if (!mapped)\n                return null;\n            ranges.push(mapped);\n        }\n        return new ActiveSnippet(ranges, this.active);\n    }\n    selectionInsideField(sel) {\n        return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));\n    }\n}\nconst setActive = /*@__PURE__*/StateEffect.define({\n    map(value, changes) { return value && value.map(changes); }\n});\nconst moveToField = /*@__PURE__*/StateEffect.define();\nconst snippetState = /*@__PURE__*/StateField.define({\n    create() { return null; },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setActive))\n                return effect.value;\n            if (effect.is(moveToField) && value)\n                return new ActiveSnippet(value.ranges, effect.value);\n        }\n        if (value && tr.docChanged)\n            value = value.map(tr.changes);\n        if (value && tr.selection && !value.selectionInsideField(tr.selection))\n            value = null;\n        return value;\n    },\n    provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)\n});\nfunction fieldSelection(ranges, field) {\n    return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));\n}\n/**\nConvert a snippet template to a function that can\n[apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written\nusing syntax like this:\n\n    \"for (let ${index} = 0; ${index} < ${end}; ${index}++) {\\n\\t${}\\n}\"\n\nEach `${}` placeholder (you may also use `#{}`) indicates a field\nthat the user can fill in. Its name, if any, will be the default\ncontent for the field.\n\nWhen the snippet is activated by calling the returned function,\nthe code is inserted at the given position. Newlines in the\ntemplate are indented by the indentation of the start line, plus\none [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after\nthe newline.\n\nOn activation, (all instances of) the first field are selected.\nThe user can move between fields with Tab and Shift-Tab as long as\nthe fields are active. Moving to the last field or moving the\ncursor out of the current field deactivates the fields.\n\nThe order of fields defaults to textual order, but you can add\nnumbers to placeholders (`${1}` or `${1:defaultText}`) to provide\na custom order.\n\nTo include a literal `{` or `}` in your template, put a backslash\nin front of it. This will be removed and the brace will not be\ninterpreted as indicating a placeholder.\n*/\nfunction snippet(template) {\n    let snippet = Snippet.parse(template);\n    return (editor, completion, from, to) => {\n        let { text, ranges } = snippet.instantiate(editor.state, from);\n        let spec = {\n            changes: { from, to, insert: Text.of(text) },\n            scrollIntoView: true,\n            annotations: completion ? pickedCompletion.of(completion) : undefined\n        };\n        if (ranges.length)\n            spec.selection = fieldSelection(ranges, 0);\n        if (ranges.length > 1) {\n            let active = new ActiveSnippet(ranges, 0);\n            let effects = spec.effects = [setActive.of(active)];\n            if (editor.state.field(snippetState, false) === undefined)\n                effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));\n        }\n        editor.dispatch(editor.state.update(spec));\n    };\n}\nfunction moveField(dir) {\n    return ({ state, dispatch }) => {\n        let active = state.field(snippetState, false);\n        if (!active || dir < 0 && active.active == 0)\n            return false;\n        let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);\n        dispatch(state.update({\n            selection: fieldSelection(active.ranges, next),\n            effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))\n        }));\n        return true;\n    };\n}\n/**\nA command that clears the active snippet, if any.\n*/\nconst clearSnippet = ({ state, dispatch }) => {\n    let active = state.field(snippetState, false);\n    if (!active)\n        return false;\n    dispatch(state.update({ effects: setActive.of(null) }));\n    return true;\n};\n/**\nMove to the next snippet field, if available.\n*/\nconst nextSnippetField = /*@__PURE__*/moveField(1);\n/**\nMove to the previous snippet field, if available.\n*/\nconst prevSnippetField = /*@__PURE__*/moveField(-1);\n/**\nCheck if there is an active snippet with a next field for\n`nextSnippetField` to move to.\n*/\nfunction hasNextSnippetField(state) {\n    let active = state.field(snippetState, false);\n    return !!(active && active.ranges.some(r => r.field == active.active + 1));\n}\n/**\nReturns true if there is an active snippet and a previous field\nfor `prevSnippetField` to move to.\n*/\nfunction hasPrevSnippetField(state) {\n    let active = state.field(snippetState, false);\n    return !!(active && active.active > 0);\n}\nconst defaultSnippetKeymap = [\n    { key: \"Tab\", run: nextSnippetField, shift: prevSnippetField },\n    { key: \"Escape\", run: clearSnippet }\n];\n/**\nA facet that can be used to configure the key bindings used by\nsnippets. The default binds Tab to\n[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to\n[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape\nto [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).\n*/\nconst snippetKeymap = /*@__PURE__*/Facet.define({\n    combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }\n});\nconst addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));\n/**\nCreate a completion from a snippet. Returns an object with the\nproperties from `completion`, plus an `apply` function that\napplies the snippet.\n*/\nfunction snippetCompletion(template, completion) {\n    return Object.assign(Object.assign({}, completion), { apply: snippet(template) });\n}\nconst snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({\n    mousedown(event, view) {\n        let active = view.state.field(snippetState, false), pos;\n        if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)\n            return false;\n        let match = active.ranges.find(r => r.from <= pos && r.to >= pos);\n        if (!match || match.field == active.active)\n            return false;\n        view.dispatch({\n            selection: fieldSelection(active.ranges, match.field),\n            effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)\n        });\n        return true;\n    }\n});\n\nfunction wordRE(wordChars) {\n    let escaped = wordChars.replace(/[\\\\[.+*?(){|^$]/g, \"\\\\$&\");\n    try {\n        return new RegExp(`[\\\\p{Alphabetic}\\\\p{Number}_${escaped}]+`, \"ug\");\n    }\n    catch (_a) {\n        return new RegExp(`[\\w${escaped}]`, \"g\");\n    }\n}\nfunction mapRE(re, f) {\n    return new RegExp(f(re.source), re.unicode ? \"u\" : \"\");\n}\nconst wordCaches = /*@__PURE__*/Object.create(null);\nfunction wordCache(wordChars) {\n    return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap);\n}\nfunction storeWords(doc, wordRE, result, seen, ignoreAt) {\n    for (let lines = doc.iterLines(), pos = 0; !lines.next().done;) {\n        let { value } = lines, m;\n        wordRE.lastIndex = 0;\n        while (m = wordRE.exec(value)) {\n            if (!seen[m[0]] && pos + m.index != ignoreAt) {\n                result.push({ type: \"text\", label: m[0] });\n                seen[m[0]] = true;\n                if (result.length >= 2000 /* MaxList */)\n                    return;\n            }\n        }\n        pos += value.length + 1;\n    }\n}\nfunction collectWords(doc, cache, wordRE, to, ignoreAt) {\n    let big = doc.length >= 1000 /* MinCacheLen */;\n    let cached = big && cache.get(doc);\n    if (cached)\n        return cached;\n    let result = [], seen = Object.create(null);\n    if (doc.children) {\n        let pos = 0;\n        for (let ch of doc.children) {\n            if (ch.length >= 1000 /* MinCacheLen */) {\n                for (let c of collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos)) {\n                    if (!seen[c.label]) {\n                        seen[c.label] = true;\n                        result.push(c);\n                    }\n                }\n            }\n            else {\n                storeWords(ch, wordRE, result, seen, ignoreAt - pos);\n            }\n            pos += ch.length + 1;\n        }\n    }\n    else {\n        storeWords(doc, wordRE, result, seen, ignoreAt);\n    }\n    if (big && result.length < 2000 /* MaxList */)\n        cache.set(doc, result);\n    return result;\n}\n/**\nA completion source that will scan the document for words (using a\n[character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and\nreturn those as completions.\n*/\nconst completeAnyWord = context => {\n    let wordChars = context.state.languageDataAt(\"wordChars\", context.pos).join(\"\");\n    let re = wordRE(wordChars);\n    let token = context.matchBefore(mapRE(re, s => s + \"$\"));\n    if (!token && !context.explicit)\n        return null;\n    let from = token ? token.from : context.pos;\n    let options = collectWords(context.state.doc, wordCache(wordChars), re, 50000 /* Range */, from);\n    return { from, options, validFor: mapRE(re, s => \"^\" + s) };\n};\n\nconst defaults = {\n    brackets: [\"(\", \"[\", \"{\", \"'\", '\"'],\n    before: \")]}:;>\",\n    stringPrefixes: []\n};\nconst closeBracketEffect = /*@__PURE__*/StateEffect.define({\n    map(value, mapping) {\n        let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);\n        return mapped == null ? undefined : mapped;\n    }\n});\nconst closedBracket = /*@__PURE__*/new class extends RangeValue {\n};\nclosedBracket.startSide = 1;\nclosedBracket.endSide = -1;\nconst bracketState = /*@__PURE__*/StateField.define({\n    create() { return RangeSet.empty; },\n    update(value, tr) {\n        if (tr.selection) {\n            let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;\n            let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;\n            if (lineStart != tr.changes.mapPos(prevLineStart, -1))\n                value = RangeSet.empty;\n        }\n        value = value.map(tr.changes);\n        for (let effect of tr.effects)\n            if (effect.is(closeBracketEffect))\n                value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });\n        return value;\n    }\n});\n/**\nExtension to enable bracket-closing behavior. When a closeable\nbracket is typed, its closing bracket is immediately inserted\nafter the cursor. When closing a bracket directly in front of a\nclosing bracket inserted by the extension, the cursor moves over\nthat bracket.\n*/\nfunction closeBrackets() {\n    return [inputHandler, bracketState];\n}\nconst definedClosing = \"()[]{}<>\";\nfunction closing(ch) {\n    for (let i = 0; i < definedClosing.length; i += 2)\n        if (definedClosing.charCodeAt(i) == ch)\n            return definedClosing.charAt(i + 1);\n    return fromCodePoint(ch < 128 ? ch : ch + 1);\n}\nfunction config(state, pos) {\n    return state.languageDataAt(\"closeBrackets\", pos)[0] || defaults;\n}\nconst android = typeof navigator == \"object\" && /*@__PURE__*//Android\\b/.test(navigator.userAgent);\nconst inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {\n    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)\n        return false;\n    let sel = view.state.selection.main;\n    if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||\n        from != sel.from || to != sel.to)\n        return false;\n    let tr = insertBracket(view.state, insert);\n    if (!tr)\n        return false;\n    view.dispatch(tr);\n    return true;\n});\n/**\nCommand that implements deleting a pair of matching brackets when\nthe cursor is between them.\n*/\nconst deleteBracketPair = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let conf = config(state, state.selection.main.head);\n    let tokens = conf.brackets || defaults.brackets;\n    let dont = null, changes = state.changeByRange(range => {\n        if (range.empty) {\n            let before = prevChar(state.doc, range.head);\n            for (let token of tokens) {\n                if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))\n                    return { changes: { from: range.head - token.length, to: range.head + token.length },\n                        range: EditorSelection.cursor(range.head - token.length) };\n            }\n        }\n        return { range: dont = range };\n    });\n    if (!dont)\n        dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete.backward\" }));\n    return !dont;\n};\n/**\nClose-brackets related key bindings. Binds Backspace to\n[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).\n*/\nconst closeBracketsKeymap = [\n    { key: \"Backspace\", run: deleteBracketPair }\n];\n/**\nImplements the extension's behavior on text insertion. If the\ngiven string counts as a bracket in the language around the\nselection, and replacing the selection with it requires custom\nbehavior (inserting a closing version or skipping past a\npreviously-closed bracket), this function returns a transaction\nrepresenting that custom behavior. (You only need this if you want\nto programmatically insert brackets—the\n[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will\ntake care of running this for user input.)\n*/\nfunction insertBracket(state, bracket) {\n    let conf = config(state, state.selection.main.head);\n    let tokens = conf.brackets || defaults.brackets;\n    for (let tok of tokens) {\n        let closed = closing(codePointAt(tok, 0));\n        if (bracket == tok)\n            return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf)\n                : handleOpen(state, tok, closed, conf.before || defaults.before);\n        if (bracket == closed && closedBracketAt(state, state.selection.main.from))\n            return handleClose(state, tok, closed);\n    }\n    return null;\n}\nfunction closedBracketAt(state, pos) {\n    let found = false;\n    state.field(bracketState).between(0, state.doc.length, from => {\n        if (from == pos)\n            found = true;\n    });\n    return found;\n}\nfunction nextChar(doc, pos) {\n    let next = doc.sliceString(pos, pos + 2);\n    return next.slice(0, codePointSize(codePointAt(next, 0)));\n}\nfunction prevChar(doc, pos) {\n    let prev = doc.sliceString(pos - 2, pos);\n    return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);\n}\nfunction handleOpen(state, open, close, closeBefore) {\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty)\n            return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],\n                effects: closeBracketEffect.of(range.to + open.length),\n                range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };\n        let next = nextChar(state.doc, range.head);\n        if (!next || /\\s/.test(next) || closeBefore.indexOf(next) > -1)\n            return { changes: { insert: open + close, from: range.head },\n                effects: closeBracketEffect.of(range.head + open.length),\n                range: EditorSelection.cursor(range.head + open.length) };\n        return { range: dont = range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\nfunction handleClose(state, _open, close) {\n    let dont = null, changes = state.changeByRange(range => {\n        if (range.empty && nextChar(state.doc, range.head) == close)\n            return { changes: { from: range.head, to: range.head + close.length, insert: close },\n                range: EditorSelection.cursor(range.head + close.length) };\n        return dont = { range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\n// Handles cases where the open and close token are the same, and\n// possibly triple quotes (as in `\"\"\"abc\"\"\"`-style quoting).\nfunction handleSame(state, token, allowTriple, config) {\n    let stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty)\n            return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],\n                effects: closeBracketEffect.of(range.to + token.length),\n                range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };\n        let pos = range.head, next = nextChar(state.doc, pos), start;\n        if (next == token) {\n            if (nodeStart(state, pos)) {\n                return { changes: { insert: token + token, from: pos },\n                    effects: closeBracketEffect.of(pos + token.length),\n                    range: EditorSelection.cursor(pos + token.length) };\n            }\n            else if (closedBracketAt(state, pos)) {\n                let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;\n                let content = isTriple ? token + token + token : token;\n                return { changes: { from: pos, to: pos + content.length, insert: content },\n                    range: EditorSelection.cursor(pos + content.length) };\n            }\n        }\n        else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&\n            (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 &&\n            nodeStart(state, start)) {\n            return { changes: { insert: token + token + token + token, from: pos },\n                effects: closeBracketEffect.of(pos + token.length),\n                range: EditorSelection.cursor(pos + token.length) };\n        }\n        else if (state.charCategorizer(pos)(next) != CharCategory.Word) {\n            if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))\n                return { changes: { insert: token + token, from: pos },\n                    effects: closeBracketEffect.of(pos + token.length),\n                    range: EditorSelection.cursor(pos + token.length) };\n        }\n        return { range: dont = range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\nfunction nodeStart(state, pos) {\n    let tree = syntaxTree(state).resolveInner(pos + 1);\n    return tree.parent && tree.from == pos;\n}\nfunction probablyInString(state, pos, quoteToken, prefixes) {\n    let node = syntaxTree(state).resolveInner(pos, -1);\n    let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);\n    for (let i = 0; i < 5; i++) {\n        let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));\n        let quotePos = start.indexOf(quoteToken);\n        if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {\n            let first = node.firstChild;\n            while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {\n                if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)\n                    return false;\n                first = first.firstChild;\n            }\n            return true;\n        }\n        let parent = node.to == pos && node.parent;\n        if (!parent)\n            break;\n        node = parent;\n    }\n    return false;\n}\nfunction canStartStringAt(state, pos, prefixes) {\n    let charCat = state.charCategorizer(pos);\n    if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)\n        return pos;\n    for (let prefix of prefixes) {\n        let start = pos - prefix.length;\n        if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)\n            return start;\n    }\n    return -1;\n}\n\n/**\nReturns an extension that enables autocompletion.\n*/\nfunction autocompletion(config = {}) {\n    return [\n        completionState,\n        completionConfig.of(config),\n        completionPlugin,\n        completionKeymapExt,\n        baseTheme\n    ];\n}\n/**\nBasic keybindings for autocompletion.\n\n - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)\n - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)\n - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`\n - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)\n*/\nconst completionKeymap = [\n    { key: \"Ctrl-Space\", run: startCompletion },\n    { key: \"Escape\", run: closeCompletion },\n    { key: \"ArrowDown\", run: /*@__PURE__*/moveCompletionSelection(true) },\n    { key: \"ArrowUp\", run: /*@__PURE__*/moveCompletionSelection(false) },\n    { key: \"PageDown\", run: /*@__PURE__*/moveCompletionSelection(true, \"page\") },\n    { key: \"PageUp\", run: /*@__PURE__*/moveCompletionSelection(false, \"page\") },\n    { key: \"Enter\", run: acceptCompletion }\n];\nconst completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));\n/**\nGet the current completion status. When completions are available,\nthis will return `\"active\"`. When completions are pending (in the\nprocess of being queried), this returns `\"pending\"`. Otherwise, it\nreturns `null`.\n*/\nfunction completionStatus(state) {\n    let cState = state.field(completionState, false);\n    return cState && cState.active.some(a => a.state == 1 /* Pending */) ? \"pending\"\n        : cState && cState.active.some(a => a.state != 0 /* Inactive */) ? \"active\" : null;\n}\nconst completionArrayCache = /*@__PURE__*/new WeakMap;\n/**\nReturns the available completions as an array.\n*/\nfunction currentCompletions(state) {\n    var _a;\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    if (!open || open.disabled)\n        return [];\n    let completions = completionArrayCache.get(open.options);\n    if (!completions)\n        completionArrayCache.set(open.options, completions = open.options.map(o => o.completion));\n    return completions;\n}\n/**\nReturn the currently selected completion, if any.\n*/\nfunction selectedCompletion(state) {\n    var _a;\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    return open && !open.disabled && open.selected >= 0 ? open.options[open.selected].completion : null;\n}\n/**\nReturns the currently selected position in the active completion\nlist, or null if no completions are active.\n*/\nfunction selectedCompletionIndex(state) {\n    var _a;\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    return open && !open.disabled && open.selected >= 0 ? open.selected : null;\n}\n/**\nCreate an effect that can be attached to a transaction to change\nthe currently selected completion.\n*/\nfunction setSelectedCompletion(index) {\n    return setSelectedEffect.of(index);\n}\n\nexport { CompletionContext, acceptCompletion, autocompletion, clearSnippet, closeBrackets, closeBracketsKeymap, closeCompletion, completeAnyWord, completeFromList, completionKeymap, completionStatus, currentCompletions, deleteBracketPair, hasNextSnippetField, hasPrevSnippetField, ifIn, ifNotIn, insertBracket, insertCompletionText, moveCompletionSelection, nextSnippetField, pickedCompletion, prevSnippetField, selectedCompletion, selectedCompletionIndex, setSelectedCompletion, snippet, snippetCompletion, snippetKeymap, startCompletion };\n","import { Decoration, showPanel, EditorView, ViewPlugin, logException, gutter, showTooltip, hoverTooltip, getPanel, WidgetType, GutterMarker } from '@codemirror/view';\nimport { StateEffect, StateField, Facet, combineConfig, RangeSet } from '@codemirror/state';\nimport elt from 'crelt';\n\nclass SelectedDiagnostic {\n    constructor(from, to, diagnostic) {\n        this.from = from;\n        this.to = to;\n        this.diagnostic = diagnostic;\n    }\n}\nclass LintState {\n    constructor(diagnostics, panel, selected) {\n        this.diagnostics = diagnostics;\n        this.panel = panel;\n        this.selected = selected;\n    }\n    static init(diagnostics, panel, state) {\n        // Filter the list of diagnostics for which to create markers\n        let markedDiagnostics = diagnostics;\n        let diagnosticFilter = state.facet(lintConfig).markerFilter;\n        if (diagnosticFilter)\n            markedDiagnostics = diagnosticFilter(markedDiagnostics);\n        let ranges = Decoration.set(markedDiagnostics.map((d) => {\n            // For zero-length ranges or ranges covering only a line break, create a widget\n            return d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)\n                ? Decoration.widget({\n                    widget: new DiagnosticWidget(d),\n                    diagnostic: d\n                }).range(d.from)\n                : Decoration.mark({\n                    attributes: { class: \"cm-lintRange cm-lintRange-\" + d.severity + (d.markClass ? \" \" + d.markClass : \"\") },\n                    diagnostic: d\n                }).range(d.from, d.to);\n        }), true);\n        return new LintState(ranges, panel, findDiagnostic(ranges));\n    }\n}\nfunction findDiagnostic(diagnostics, diagnostic = null, after = 0) {\n    let found = null;\n    diagnostics.between(after, 1e9, (from, to, { spec }) => {\n        if (diagnostic && spec.diagnostic != diagnostic)\n            return;\n        found = new SelectedDiagnostic(from, to, spec.diagnostic);\n        return false;\n    });\n    return found;\n}\nfunction hideTooltip(tr, tooltip) {\n    let line = tr.startState.doc.lineAt(tooltip.pos);\n    return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, line.to));\n}\nfunction maybeEnableLint(state, effects) {\n    return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));\n}\n/**\nReturns a transaction spec which updates the current set of\ndiagnostics, and enables the lint extension if if wasn't already\nactive.\n*/\nfunction setDiagnostics(state, diagnostics) {\n    return {\n        effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])\n    };\n}\n/**\nThe state effect that updates the set of active diagnostics. Can\nbe useful when writing an extension that needs to track these.\n*/\nconst setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst movePanelSelection = /*@__PURE__*/StateEffect.define();\nconst lintState = /*@__PURE__*/StateField.define({\n    create() {\n        return new LintState(Decoration.none, null, null);\n    },\n    update(value, tr) {\n        if (tr.docChanged) {\n            let mapped = value.diagnostics.map(tr.changes), selected = null;\n            if (value.selected) {\n                let selPos = tr.changes.mapPos(value.selected.from, 1);\n                selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);\n            }\n            value = new LintState(mapped, value.panel, selected);\n        }\n        for (let effect of tr.effects) {\n            if (effect.is(setDiagnosticsEffect)) {\n                value = LintState.init(effect.value, value.panel, tr.state);\n            }\n            else if (effect.is(togglePanel)) {\n                value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);\n            }\n            else if (effect.is(movePanelSelection)) {\n                value = new LintState(value.diagnostics, value.panel, effect.value);\n            }\n        }\n        return value;\n    },\n    provide: f => [showPanel.from(f, val => val.panel),\n        EditorView.decorations.from(f, s => s.diagnostics)]\n});\n/**\nReturns the number of active lint diagnostics in the given state.\n*/\nfunction diagnosticCount(state) {\n    let lint = state.field(lintState, false);\n    return lint ? lint.diagnostics.size : 0;\n}\nconst activeMark = /*@__PURE__*/Decoration.mark({ class: \"cm-lintRange cm-lintRange-active\" });\nfunction lintTooltip(view, pos, side) {\n    let { diagnostics } = view.state.field(lintState);\n    let found = [], stackStart = 2e8, stackEnd = 0;\n    diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {\n        if (pos >= from && pos <= to &&\n            (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {\n            found.push(spec.diagnostic);\n            stackStart = Math.min(from, stackStart);\n            stackEnd = Math.max(to, stackEnd);\n        }\n    });\n    let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;\n    if (diagnosticFilter)\n        found = diagnosticFilter(found);\n    if (!found.length)\n        return null;\n    return {\n        pos: stackStart,\n        end: stackEnd,\n        above: view.state.doc.lineAt(stackStart).to < stackEnd,\n        create() {\n            return { dom: diagnosticsTooltip(view, found) };\n        }\n    };\n}\nfunction diagnosticsTooltip(view, diagnostics) {\n    return elt(\"ul\", { class: \"cm-tooltip-lint\" }, diagnostics.map(d => renderDiagnostic(view, d, false)));\n}\n/**\nCommand to open and focus the lint panel.\n*/\nconst openLintPanel = (view) => {\n    let field = view.state.field(lintState, false);\n    if (!field || !field.panel)\n        view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel.of(true)]) });\n    let panel = getPanel(view, LintPanel.open);\n    if (panel)\n        panel.dom.querySelector(\".cm-panel-lint ul\").focus();\n    return true;\n};\n/**\nCommand to close the lint panel, when open.\n*/\nconst closeLintPanel = (view) => {\n    let field = view.state.field(lintState, false);\n    if (!field || !field.panel)\n        return false;\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nMove the selection to the next diagnostic.\n*/\nconst nextDiagnostic = (view) => {\n    let field = view.state.field(lintState, false);\n    if (!field)\n        return false;\n    let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);\n    if (!next.value) {\n        next = field.diagnostics.iter(0);\n        if (!next.value || next.from == sel.from && next.to == sel.to)\n            return false;\n    }\n    view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });\n    return true;\n};\n/**\nMove the selection to the previous diagnostic.\n*/\nconst previousDiagnostic = (view) => {\n    let { state } = view, field = state.field(lintState, false);\n    if (!field)\n        return false;\n    let sel = state.selection.main;\n    let prevFrom, prevTo, lastFrom, lastTo;\n    field.diagnostics.between(0, state.doc.length, (from, to) => {\n        if (to < sel.to && (prevFrom == null || prevFrom < from)) {\n            prevFrom = from;\n            prevTo = to;\n        }\n        if (lastFrom == null || from > lastFrom) {\n            lastFrom = from;\n            lastTo = to;\n        }\n    });\n    if (lastFrom == null || prevFrom == null && lastFrom == sel.from)\n        return false;\n    view.dispatch({ selection: { anchor: prevFrom !== null && prevFrom !== void 0 ? prevFrom : lastFrom, head: prevTo !== null && prevTo !== void 0 ? prevTo : lastTo }, scrollIntoView: true });\n    return true;\n};\n/**\nA set of default key bindings for the lint functionality.\n\n- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)\n- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)\n*/\nconst lintKeymap = [\n    { key: \"Mod-Shift-m\", run: openLintPanel, preventDefault: true },\n    { key: \"F8\", run: nextDiagnostic }\n];\nconst lintPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.timeout = -1;\n        this.set = true;\n        let { delay } = view.state.facet(lintConfig);\n        this.lintTime = Date.now() + delay;\n        this.run = this.run.bind(this);\n        this.timeout = setTimeout(this.run, delay);\n    }\n    run() {\n        let now = Date.now();\n        if (now < this.lintTime - 10) {\n            setTimeout(this.run, this.lintTime - now);\n        }\n        else {\n            this.set = false;\n            let { state } = this.view, { sources } = state.facet(lintConfig);\n            Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {\n                let all = annotations.reduce((a, b) => a.concat(b));\n                if (this.view.state.doc == state.doc)\n                    this.view.dispatch(setDiagnostics(this.view.state, all));\n            }, error => { logException(this.view.state, error); });\n        }\n    }\n    update(update) {\n        let config = update.state.facet(lintConfig);\n        if (update.docChanged || config != update.startState.facet(lintConfig) ||\n            config.needsRefresh && config.needsRefresh(update)) {\n            this.lintTime = Date.now() + config.delay;\n            if (!this.set) {\n                this.set = true;\n                this.timeout = setTimeout(this.run, config.delay);\n            }\n        }\n    }\n    force() {\n        if (this.set) {\n            this.lintTime = Date.now();\n            this.run();\n        }\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n});\nconst lintConfig = /*@__PURE__*/Facet.define({\n    combine(input) {\n        return Object.assign({ sources: input.map(i => i.source) }, combineConfig(input.map(i => i.config), {\n            delay: 750,\n            markerFilter: null,\n            tooltipFilter: null,\n            needsRefresh: null\n        }, {\n            needsRefresh: (a, b) => !a ? b : !b ? a : u => a(u) || b(u)\n        }));\n    }\n});\n/**\nGiven a diagnostic source, this function returns an extension that\nenables linting with that source. It will be called whenever the\neditor is idle (after its content changed).\n*/\nfunction linter(source, config = {}) {\n    return [\n        lintConfig.of({ source, config }),\n        lintPlugin,\n        lintExtensions\n    ];\n}\n/**\nForces any linters [configured](https://codemirror.net/6/docs/ref/#lint.linter) to run when the\neditor is idle to run right away.\n*/\nfunction forceLinting(view) {\n    let plugin = view.plugin(lintPlugin);\n    if (plugin)\n        plugin.force();\n}\nfunction assignKeys(actions) {\n    let assigned = [];\n    if (actions)\n        actions: for (let { name } of actions) {\n            for (let i = 0; i < name.length; i++) {\n                let ch = name[i];\n                if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {\n                    assigned.push(ch);\n                    continue actions;\n                }\n            }\n            assigned.push(\"\");\n        }\n    return assigned;\n}\nfunction renderDiagnostic(view, diagnostic, inPanel) {\n    var _a;\n    let keys = inPanel ? assignKeys(diagnostic.actions) : [];\n    return elt(\"li\", { class: \"cm-diagnostic cm-diagnostic-\" + diagnostic.severity }, elt(\"span\", { class: \"cm-diagnosticText\" }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {\n        let fired = false, click = (e) => {\n            e.preventDefault();\n            if (fired)\n                return;\n            fired = true;\n            let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);\n            if (found)\n                action.apply(view, found.from, found.to);\n        };\n        let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;\n        let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),\n            elt(\"u\", name.slice(keyIndex, keyIndex + 1)),\n            name.slice(keyIndex + 1)];\n        return elt(\"button\", {\n            type: \"button\",\n            class: \"cm-diagnosticAction\",\n            onclick: click,\n            onmousedown: click,\n            \"aria-label\": ` Action: ${name}${keyIndex < 0 ? \"\" : ` (access key \"${keys[i]})\"`}.`\n        }, nameElt);\n    }), diagnostic.source && elt(\"div\", { class: \"cm-diagnosticSource\" }, diagnostic.source));\n}\nclass DiagnosticWidget extends WidgetType {\n    constructor(diagnostic) {\n        super();\n        this.diagnostic = diagnostic;\n    }\n    eq(other) { return other.diagnostic == this.diagnostic; }\n    toDOM() {\n        return elt(\"span\", { class: \"cm-lintPoint cm-lintPoint-\" + this.diagnostic.severity });\n    }\n}\nclass PanelItem {\n    constructor(view, diagnostic) {\n        this.diagnostic = diagnostic;\n        this.id = \"item_\" + Math.floor(Math.random() * 0xffffffff).toString(16);\n        this.dom = renderDiagnostic(view, diagnostic, true);\n        this.dom.id = this.id;\n        this.dom.setAttribute(\"role\", \"option\");\n    }\n}\nclass LintPanel {\n    constructor(view) {\n        this.view = view;\n        this.items = [];\n        let onkeydown = (event) => {\n            if (event.keyCode == 27) { // Escape\n                closeLintPanel(this.view);\n                this.view.focus();\n            }\n            else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp\n                this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);\n            }\n            else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown\n                this.moveSelection((this.selectedIndex + 1) % this.items.length);\n            }\n            else if (event.keyCode == 36) { // Home\n                this.moveSelection(0);\n            }\n            else if (event.keyCode == 35) { // End\n                this.moveSelection(this.items.length - 1);\n            }\n            else if (event.keyCode == 13) { // Enter\n                this.view.focus();\n            }\n            else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z\n                let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);\n                for (let i = 0; i < keys.length; i++)\n                    if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {\n                        let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);\n                        if (found)\n                            diagnostic.actions[i].apply(view, found.from, found.to);\n                    }\n            }\n            else {\n                return;\n            }\n            event.preventDefault();\n        };\n        let onclick = (event) => {\n            for (let i = 0; i < this.items.length; i++) {\n                if (this.items[i].dom.contains(event.target))\n                    this.moveSelection(i);\n            }\n        };\n        this.list = elt(\"ul\", {\n            tabIndex: 0,\n            role: \"listbox\",\n            \"aria-label\": this.view.state.phrase(\"Diagnostics\"),\n            onkeydown,\n            onclick\n        });\n        this.dom = elt(\"div\", { class: \"cm-panel-lint\" }, this.list, elt(\"button\", {\n            type: \"button\",\n            name: \"close\",\n            \"aria-label\": this.view.state.phrase(\"close\"),\n            onclick: () => closeLintPanel(this.view)\n        }, \"×\"));\n        this.update();\n    }\n    get selectedIndex() {\n        let selected = this.view.state.field(lintState).selected;\n        if (!selected)\n            return -1;\n        for (let i = 0; i < this.items.length; i++)\n            if (this.items[i].diagnostic == selected.diagnostic)\n                return i;\n        return -1;\n    }\n    update() {\n        let { diagnostics, selected } = this.view.state.field(lintState);\n        let i = 0, needsSync = false, newSelectedItem = null;\n        diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {\n            let found = -1, item;\n            for (let j = i; j < this.items.length; j++)\n                if (this.items[j].diagnostic == spec.diagnostic) {\n                    found = j;\n                    break;\n                }\n            if (found < 0) {\n                item = new PanelItem(this.view, spec.diagnostic);\n                this.items.splice(i, 0, item);\n                needsSync = true;\n            }\n            else {\n                item = this.items[found];\n                if (found > i) {\n                    this.items.splice(i, found - i);\n                    needsSync = true;\n                }\n            }\n            if (selected && item.diagnostic == selected.diagnostic) {\n                if (!item.dom.hasAttribute(\"aria-selected\")) {\n                    item.dom.setAttribute(\"aria-selected\", \"true\");\n                    newSelectedItem = item;\n                }\n            }\n            else if (item.dom.hasAttribute(\"aria-selected\")) {\n                item.dom.removeAttribute(\"aria-selected\");\n            }\n            i++;\n        });\n        while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {\n            needsSync = true;\n            this.items.pop();\n        }\n        if (this.items.length == 0) {\n            this.items.push(new PanelItem(this.view, {\n                from: -1, to: -1,\n                severity: \"info\",\n                message: this.view.state.phrase(\"No diagnostics\")\n            }));\n            needsSync = true;\n        }\n        if (newSelectedItem) {\n            this.list.setAttribute(\"aria-activedescendant\", newSelectedItem.id);\n            this.view.requestMeasure({\n                key: this,\n                read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),\n                write: ({ sel, panel }) => {\n                    if (sel.top < panel.top)\n                        this.list.scrollTop -= panel.top - sel.top;\n                    else if (sel.bottom > panel.bottom)\n                        this.list.scrollTop += sel.bottom - panel.bottom;\n                }\n            });\n        }\n        else if (this.selectedIndex < 0) {\n            this.list.removeAttribute(\"aria-activedescendant\");\n        }\n        if (needsSync)\n            this.sync();\n    }\n    sync() {\n        let domPos = this.list.firstChild;\n        function rm() {\n            let prev = domPos;\n            domPos = prev.nextSibling;\n            prev.remove();\n        }\n        for (let item of this.items) {\n            if (item.dom.parentNode == this.list) {\n                while (domPos != item.dom)\n                    rm();\n                domPos = item.dom.nextSibling;\n            }\n            else {\n                this.list.insertBefore(item.dom, domPos);\n            }\n        }\n        while (domPos)\n            rm();\n    }\n    moveSelection(selectedIndex) {\n        if (this.selectedIndex < 0)\n            return;\n        let field = this.view.state.field(lintState);\n        let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);\n        if (!selection)\n            return;\n        this.view.dispatch({\n            selection: { anchor: selection.from, head: selection.to },\n            scrollIntoView: true,\n            effects: movePanelSelection.of(selection)\n        });\n    }\n    static open(view) { return new LintPanel(view); }\n}\nfunction svg(content, attrs = `viewBox=\"0 0 40 40\"`) {\n    return `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ${attrs}>${encodeURIComponent(content)}</svg>')`;\n}\nfunction underline(color) {\n    return svg(`<path d=\"m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0\" stroke=\"${color}\" fill=\"none\" stroke-width=\".7\"/>`, `width=\"6\" height=\"3\"`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-diagnostic\": {\n        padding: \"3px 6px 3px 8px\",\n        marginLeft: \"-1px\",\n        display: \"block\",\n        whiteSpace: \"pre-wrap\"\n    },\n    \".cm-diagnostic-error\": { borderLeft: \"5px solid #d11\" },\n    \".cm-diagnostic-warning\": { borderLeft: \"5px solid orange\" },\n    \".cm-diagnostic-info\": { borderLeft: \"5px solid #999\" },\n    \".cm-diagnostic-hint\": { borderLeft: \"5px solid #66d\" },\n    \".cm-diagnosticAction\": {\n        font: \"inherit\",\n        border: \"none\",\n        padding: \"2px 4px\",\n        backgroundColor: \"#444\",\n        color: \"white\",\n        borderRadius: \"3px\",\n        marginLeft: \"8px\",\n        cursor: \"pointer\"\n    },\n    \".cm-diagnosticSource\": {\n        fontSize: \"70%\",\n        opacity: .7\n    },\n    \".cm-lintRange\": {\n        backgroundPosition: \"left bottom\",\n        backgroundRepeat: \"repeat-x\",\n        paddingBottom: \"0.7px\",\n    },\n    \".cm-lintRange-error\": { backgroundImage: /*@__PURE__*/underline(\"#d11\") },\n    \".cm-lintRange-warning\": { backgroundImage: /*@__PURE__*/underline(\"orange\") },\n    \".cm-lintRange-info\": { backgroundImage: /*@__PURE__*/underline(\"#999\") },\n    \".cm-lintRange-hint\": { backgroundImage: /*@__PURE__*/underline(\"#66d\") },\n    \".cm-lintRange-active\": { backgroundColor: \"#ffdd9980\" },\n    \".cm-tooltip-lint\": {\n        padding: 0,\n        margin: 0\n    },\n    \".cm-lintPoint\": {\n        position: \"relative\",\n        \"&:after\": {\n            content: '\"\"',\n            position: \"absolute\",\n            bottom: 0,\n            left: \"-2px\",\n            borderLeft: \"3px solid transparent\",\n            borderRight: \"3px solid transparent\",\n            borderBottom: \"4px solid #d11\"\n        }\n    },\n    \".cm-lintPoint-warning\": {\n        \"&:after\": { borderBottomColor: \"orange\" }\n    },\n    \".cm-lintPoint-info\": {\n        \"&:after\": { borderBottomColor: \"#999\" }\n    },\n    \".cm-lintPoint-hint\": {\n        \"&:after\": { borderBottomColor: \"#66d\" }\n    },\n    \".cm-panel.cm-panel-lint\": {\n        position: \"relative\",\n        \"& ul\": {\n            maxHeight: \"100px\",\n            overflowY: \"auto\",\n            \"& [aria-selected]\": {\n                backgroundColor: \"#ddd\",\n                \"& u\": { textDecoration: \"underline\" }\n            },\n            \"&:focus [aria-selected]\": {\n                background_fallback: \"#bdf\",\n                backgroundColor: \"Highlight\",\n                color_fallback: \"white\",\n                color: \"HighlightText\"\n            },\n            \"& u\": { textDecoration: \"none\" },\n            padding: 0,\n            margin: 0\n        },\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"2px\",\n            background: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        }\n    }\n});\nfunction severityWeight(sev) {\n    return sev == \"error\" ? 4 : sev == \"warning\" ? 3 : sev == \"info\" ? 2 : 1;\n}\nclass LintGutterMarker extends GutterMarker {\n    constructor(diagnostics) {\n        super();\n        this.diagnostics = diagnostics;\n        this.severity = diagnostics.reduce((max, d) => severityWeight(max) < severityWeight(d.severity) ? d.severity : max, \"hint\");\n    }\n    toDOM(view) {\n        let elt = document.createElement(\"div\");\n        elt.className = \"cm-lint-marker cm-lint-marker-\" + this.severity;\n        let diagnostics = this.diagnostics;\n        let diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;\n        if (diagnosticsFilter)\n            diagnostics = diagnosticsFilter(diagnostics);\n        if (diagnostics.length)\n            elt.onmouseover = () => gutterMarkerMouseOver(view, elt, diagnostics);\n        return elt;\n    }\n}\nfunction trackHoverOn(view, marker) {\n    let mousemove = (event) => {\n        let rect = marker.getBoundingClientRect();\n        if (event.clientX > rect.left - 10 /* Margin */ && event.clientX < rect.right + 10 /* Margin */ &&\n            event.clientY > rect.top - 10 /* Margin */ && event.clientY < rect.bottom + 10 /* Margin */)\n            return;\n        for (let target = event.target; target; target = target.parentNode) {\n            if (target.nodeType == 1 && target.classList.contains(\"cm-tooltip-lint\"))\n                return;\n        }\n        window.removeEventListener(\"mousemove\", mousemove);\n        if (view.state.field(lintGutterTooltip))\n            view.dispatch({ effects: setLintGutterTooltip.of(null) });\n    };\n    window.addEventListener(\"mousemove\", mousemove);\n}\nfunction gutterMarkerMouseOver(view, marker, diagnostics) {\n    function hovered() {\n        let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);\n        const linePos = view.coordsAtPos(line.from);\n        if (linePos) {\n            view.dispatch({ effects: setLintGutterTooltip.of({\n                    pos: line.from,\n                    above: false,\n                    create() {\n                        return {\n                            dom: diagnosticsTooltip(view, diagnostics),\n                            getCoords: () => marker.getBoundingClientRect()\n                        };\n                    }\n                }) });\n        }\n        marker.onmouseout = marker.onmousemove = null;\n        trackHoverOn(view, marker);\n    }\n    let { hoverTime } = view.state.facet(lintGutterConfig);\n    let hoverTimeout = setTimeout(hovered, hoverTime);\n    marker.onmouseout = () => {\n        clearTimeout(hoverTimeout);\n        marker.onmouseout = marker.onmousemove = null;\n    };\n    marker.onmousemove = () => {\n        clearTimeout(hoverTimeout);\n        hoverTimeout = setTimeout(hovered, hoverTime);\n    };\n}\nfunction markersForDiagnostics(doc, diagnostics) {\n    let byLine = Object.create(null);\n    for (let diagnostic of diagnostics) {\n        let line = doc.lineAt(diagnostic.from);\n        (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);\n    }\n    let markers = [];\n    for (let line in byLine) {\n        markers.push(new LintGutterMarker(byLine[line]).range(+line));\n    }\n    return RangeSet.of(markers, true);\n}\nconst lintGutterExtension = /*@__PURE__*/gutter({\n    class: \"cm-gutter-lint\",\n    markers: view => view.state.field(lintGutterMarkers),\n});\nconst lintGutterMarkers = /*@__PURE__*/StateField.define({\n    create() {\n        return RangeSet.empty;\n    },\n    update(markers, tr) {\n        markers = markers.map(tr.changes);\n        let diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;\n        for (let effect of tr.effects) {\n            if (effect.is(setDiagnosticsEffect)) {\n                let diagnostics = effect.value;\n                if (diagnosticFilter)\n                    diagnostics = diagnosticFilter(diagnostics || []);\n                markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));\n            }\n        }\n        return markers;\n    }\n});\nconst setLintGutterTooltip = /*@__PURE__*/StateEffect.define();\nconst lintGutterTooltip = /*@__PURE__*/StateField.define({\n    create() { return null; },\n    update(tooltip, tr) {\n        if (tooltip && tr.docChanged)\n            tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), { pos: tr.changes.mapPos(tooltip.pos) });\n        return tr.effects.reduce((t, e) => e.is(setLintGutterTooltip) ? e.value : t, tooltip);\n    },\n    provide: field => showTooltip.from(field)\n});\nconst lintGutterTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-gutter-lint\": {\n        width: \"1.4em\",\n        \"& .cm-gutterElement\": {\n            padding: \".2em\"\n        }\n    },\n    \".cm-lint-marker\": {\n        width: \"1em\",\n        height: \"1em\"\n    },\n    \".cm-lint-marker-info\": {\n        content: /*@__PURE__*/svg(`<path fill=\"#aaf\" stroke=\"#77e\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M5 5L35 5L35 35L5 35Z\"/>`)\n    },\n    \".cm-lint-marker-warning\": {\n        content: /*@__PURE__*/svg(`<path fill=\"#fe8\" stroke=\"#fd7\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M20 6L37 35L3 35Z\"/>`),\n    },\n    \".cm-lint-marker-error\": {\n        content: /*@__PURE__*/svg(`<circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"#f87\" stroke=\"#f43\" stroke-width=\"6\"/>`)\n    },\n});\nconst lintExtensions = [\n    lintState,\n    /*@__PURE__*/EditorView.decorations.compute([lintState], state => {\n        let { selected, panel } = state.field(lintState);\n        return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([\n            activeMark.range(selected.from, selected.to)\n        ]);\n    }),\n    /*@__PURE__*/hoverTooltip(lintTooltip, { hideOn: hideTooltip }),\n    baseTheme\n];\nconst lintGutterConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            hoverTime: 300 /* Time */,\n            markerFilter: null,\n            tooltipFilter: null\n        });\n    }\n});\n/**\nReturns an extension that installs a gutter showing markers for\neach line that has diagnostics, which can be hovered over to see\nthe diagnostics.\n*/\nfunction lintGutter(config = {}) {\n    return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];\n}\n/**\nIterate over the marked diagnostics for the given editor state,\ncalling `f` for each of them. Note that, if the document changed\nsince the diagnostics were created, the `Diagnostic` object will\nhold the original outdated position, whereas the `to` and `from`\narguments hold the diagnostic's current position.\n*/\nfunction forEachDiagnostic(state, f) {\n    let lState = state.field(lintState, false);\n    if (lState && lState.diagnostics.size)\n        for (let iter = RangeSet.iter([lState.diagnostics]); iter.value; iter.next())\n            f(iter.value.spec.diagnostic, iter.from, iter.to);\n}\n\nexport { closeLintPanel, diagnosticCount, forEachDiagnostic, forceLinting, lintGutter, lintKeymap, linter, nextDiagnostic, openLintPanel, previousDiagnostic, setDiagnostics, setDiagnosticsEffect };\n","import { createWindow } from \"../window/main\";\r\n\r\nexport function launchTwitch() {\r\n    let windowDiv = createWindow({\r\n        title: \"https://twitch.tv\",\r\n        body: /*html*/`\r\n            <div class=\"df fdc jcc aic g4\">\r\n                <label for=\"twitch-channel\">type a twitch username to watch:</label>\r\n                <div>\r\n                    <input type=\"text\" id=\"twitch-channel\">\r\n                    <button id=\"twitch-watch\">watch</button>\r\n                </div>\r\n            </div>\r\n        `,\r\n        flexCenter: true,\r\n        center: true,\r\n        height: 150\r\n    });\r\n\r\n    windowDiv.querySelector(\"#twitch-watch\").onclick = () => {\r\n        let channelName = windowDiv.querySelector(\"#twitch-channel\").value;\r\n        windowDiv.remove();\r\n        \r\n        createWindow({\r\n            title: `https://twitch.tv/${channelName}`,\r\n            body: /*html*/`\r\n                <iframe class=\"w100 h100\" src=\"https://player.twitch.tv/?channel=${channelName}&parent=lumixing.github.io\" frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\"></iframe>\r\n            `,\r\n            x: 127,\r\n            y: 39,\r\n            width: 984,\r\n            height: 569,\r\n            hideOverflow: true\r\n        });\r\n    \r\n        createWindow({\r\n            title: `https://twitch.tv/${channelName}/chat`,\r\n            body: /*html*/`\r\n                <iframe class=\"w100 h100\" src=\"https://www.twitch.tv/embed/${channelName}/chat?parent=lumixing.github.io\"></iframe>\r\n            `,\r\n            x: 1127,\r\n            y: 38,\r\n            width: 358,\r\n            height: 806,\r\n            hideOverflow: true\r\n        });\r\n    };\r\n\r\n}","import { createWindow } from \"../window/main\";\r\n\r\nexport function launchSpotify() {\r\n    createWindow({\r\n        title: \"A$AP Rocky - LVL\",\r\n        body: /*html*/`\r\n            <iframe class=\"w100 h100\" src=\"https://www.youtube.com/embed/lR5dwQNizVU?&autoplay=1\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\r\n        `,\r\n        width: 564,\r\n        height: 341,\r\n        hideOverflow: true\r\n    });\r\n}","import { createWindow } from \"../window/main\";\r\nimport image from \"../../static/nft.png\";\r\nimport { createToast } from \"../toast/main\";\r\n\r\nexport function launchWhatsNew() {\r\n    let windowDiv = createWindow({\r\n        title: \"what's new?!\",\r\n        icon: image,\r\n        body: /*html*/`\r\n            <div style=\"padding: 8px\">\r\n                <h1>WHAT'S NEW?!</h1>\r\n                <span>in version 0.2</span>\r\n\r\n                <h1 style=\"margin-top: 16px\">Added</h1>\r\n                \r\n                <div style=\"margin-bottom: 16px\">\r\n                    <p>Some cool new apps!</p>\r\n                    <ul>\r\n                        <li><b>About</b> See what's all about lumOS</li>\r\n                        <li><b>Editor</b> Edit away your thoughts</li>\r\n                        <li><b>Twitch</b> Watch a Twitch&trade; streamer</li>\r\n                        <li><b>Spotify</b> Not really Spotify.. (their embeds suck!)</li>\r\n                        <li><b>What's New</b> I don't remember adding this</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div style=\"margin-bottom: 16px\">\r\n                    <p>TOASTS! Try them out!</p>\r\n                    <button id=\"test-button-1\">toast1</button>\r\n                    <button id=\"test-button-2\">toast2</button>\r\n                    <button id=\"test-button-3\">toast3</button>\r\n                    <button id=\"test-button-4\">toast4</button>\r\n                </div>\r\n\r\n                <div style=\"margin-bottom: 16px\">\r\n                    <p><i>Keyboard shortcuts</i>!</p>\r\n                    <ul>\r\n                        <li><b>Alt+Q</b> Close an active window</li>\r\n                        <li><b>Alt+W</b> Toast an active window's rect info</li>\r\n                        <li><b>Alt+A</b> Open a blank window</li>\r\n                        <li><b>Alt+S</b> Toast the UNIX time</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div>\r\n                    <p>Desktop features!</p>\r\n                    <ul>\r\n                        <li>Desktop apps that launch their respective app! (revolutionary technological advancement)</li>\r\n                        <li>You can move the desktop apps</li>\r\n                        <li>Desktop apps locations are saved after refresh for your own customizable desktop experience!</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <h1 style=\"margin-top: 16px\">Fixed</h1>\r\n                <p>Fixed a few bugs :)</p>\r\n\r\n            </div>\r\n        `,\r\n        center: true,\r\n        width: 500\r\n    });\r\n\r\n    windowDiv.querySelector(\"#test-button-1\").onclick = () => createToast(\"this is toast NUMBER ONE!!!\");\r\n    windowDiv.querySelector(\"#test-button-2\").onclick = () => createToast(\"successful toast number too B)\", 2000, \"success\");\r\n    windowDiv.querySelector(\"#test-button-3\").onclick = () => createToast(\"umm this is toast 3\", 2000, \"warn\");\r\n    windowDiv.querySelector(\"#test-button-4\").onclick = () => createToast(\"THIS IS TOAST CODE FOUR RUN\", 2000, \"error\");\r\n}","import _ from \"underscore\";\r\n\r\nexport function createToast(text, time = 2000, type) {\r\n    let toastDiv = document.createElement(\"div\");\r\n    toastDiv.classList.add(\"toast\");\r\n    \r\n    if (type) {\r\n        toastDiv.classList.add(type);\r\n    }\r\n\r\n    toastDiv.innerHTML = /*html*/`\r\n        <span>${text}</span>  \r\n    `;\r\n\r\n    document.getElementById(\"toast-container\").append(toastDiv);\r\n\r\n    setTimeout(() => {\r\n        toastDiv.style.animation = \"none\";\r\n    }, 200);\r\n\r\n    if (time >= 0) {\r\n        setTimeout(() => {\r\n            toastDiv.style.animation = \"toastOpen .2s ease reverse forwards\";\r\n            \r\n            setTimeout(() => {\r\n                toastDiv.remove();\r\n            }, 200);\r\n        }, time);\r\n    }\r\n}","import { createToast } from \"./toast/main\";\r\nimport { createWindow } from \"./window/main\";\r\nimport { stringify } from \"./util\";\r\n\r\nexport function shortcutHandler() {\r\n    document.onkeydown = ((e) => {\r\n        if (e.key == \"a\" && e.altKey) {\r\n            createWindow();\r\n        }\r\n    \r\n        if (e.key == \"q\" && e.altKey) {\r\n            if (window.activeWindow == null) return;\r\n            window.activeWindow.remove();\r\n            window.activeWindow = null;\r\n        }\r\n    \r\n        if (e.key == \"s\" && e.altKey) {\r\n            createToast(Date.now());\r\n        }\r\n    \r\n        if (e.key == \"w\" && e.altKey) {\r\n            if (window.activeWindow == null) {\r\n                createToast(\"No any active window!\", 1000, \"error\");\r\n                return;\r\n            }\r\n    \r\n            createToast(stringify(window.activeWindow.getBoundingClientRect()), 3000);\r\n        }\r\n    });\r\n}","export function stringify(obj) {\r\n    return JSON.stringify(obj).slice(1, -1).replaceAll(\"\\\"\", \"\").replaceAll(\",\", \"<br>\").replaceAll(\":\", \": \");\r\n}"],"names":["$ccfb9497d8ef598f$var$wordChar","$071334078f8d3f8a$var$scratchRange","filter","ext","loadedApps","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","MapMode","CharCategory","BlockType","Direction","QueryType","IterMode","options","$4d476c57e17b24ca$export$b0e28367f55837aa","$14831f1c512a5db9$var$_a","$parcel$global","globalThis","self","window","global","$parcel$interopDefault","a","__esModule","default","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$1e7e3d3a578a13ba$exports","value","$05d7c2cba8bc6781$export$a4ad2735b021c132","$fc1fd36bde4114f9$export$2e2bcd8739ae039","$7455759b7c96d90b$export$2e2bcd8739ae039","$ae51d237bc32c11d$export$2e2bcd8739ae039","$817cb6c7fa9b206b$export$2e2bcd8739ae039","$66a39a9dcb84bae8$export$2e2bcd8739ae039","$b5a8aea2509f94d5$export$2e2bcd8739ae039","$5e7ffcd018d5a045$export$2e2bcd8739ae039","$8d64187e1f5bcb51$export$2e2bcd8739ae039","$b091ae5bae608f07$export$2e2bcd8739ae039","$60ced9ead555d880$export$2e2bcd8739ae039","$ae03ca5635944d30$export$2e2bcd8739ae039","$aa30b18d945659f9$export$2e2bcd8739ae039","$c638010ce75b468c$export$2e2bcd8739ae039","$6c3f7150b2a727d5$export$2e2bcd8739ae039","$8d2cabfa0672ccfd$export$2e2bcd8739ae039","$eebfce9fce6919bf$export$2e2bcd8739ae039","$1a47e7a4d17a4e15$export$2e2bcd8739ae039","$f90732ef9f3c1387$export$2e2bcd8739ae039","$70e931fec09cede3$export$2e2bcd8739ae039","$48ad6cb314046db0$export$2e2bcd8739ae039","$ac06533566af2678$export$2e2bcd8739ae039","$22b92356fc17ef5d$export$2e2bcd8739ae039","$a19c9bc34e067027$export$2e2bcd8739ae039","$2edf16cd20c34baf$export$2e2bcd8739ae039","$ffac34704793bc6b$export$2e2bcd8739ae039","$df783970e2063b3d$export$2e2bcd8739ae039","$bab269fbfbecf7fa$export$2e2bcd8739ae039","$393c4048a48382d0$export$2e2bcd8739ae039","$5de0de2b18b9ad30$export$2e2bcd8739ae039","$99599505685447d9$export$2e2bcd8739ae039","$a967293e5b840068$export$2e2bcd8739ae039","$08c60a2e0034368d$export$2e2bcd8739ae039","$0f196b5807c1f31f$export$2e2bcd8739ae039","$c7fed440620dd794$export$2e2bcd8739ae039","$77f400422659e206$export$2e2bcd8739ae039","$c9bd555669bcdc82$export$2e2bcd8739ae039","$a5a35d14eaefec84$export$2e2bcd8739ae039","$dbff805e5a1c9fa5$export$2e2bcd8739ae039","$832f7aa560aae756$export$2e2bcd8739ae039","$35b906998fb25b49$export$2e2bcd8739ae039","$1d682c540dd867f0$export$2e2bcd8739ae039","$24889f8235604410$export$2e2bcd8739ae039","$5153dcf3ca5fcb44$export$2e2bcd8739ae039","$fa29f092909a7073$export$2e2bcd8739ae039","$6298ea013f2a6548$export$2e2bcd8739ae039","$5930e11f6a3e31f9$export$2e2bcd8739ae039","$e1c10a0c7ed7aee8$export$2e2bcd8739ae039","$4d54adfad87340d7$export$2e2bcd8739ae039","$4aa1d46d5f0feb03$export$2e2bcd8739ae039","$6d5652f4017904cb$export$2e2bcd8739ae039","$52180227c308dc3a$export$2e2bcd8739ae039","$514f12979ade38e2$export$2e2bcd8739ae039","$e1fecafa4702f5c9$export$2e2bcd8739ae039","$6990c4f008b54c69$export$2e2bcd8739ae039","$f04faa0d52429a87$export$2e2bcd8739ae039","$25a5937b4f261340$export$2e2bcd8739ae039","$4b977a61e7f77743$export$2e2bcd8739ae039","$c5e0ec1dad369d84$export$2e2bcd8739ae039","$75db5d04108636db$export$2e2bcd8739ae039","$2b991c32a65324be$export$2e2bcd8739ae039","$c065e766094e50a6$export$2e2bcd8739ae039","$5cb6e6a08089b86e$export$2e2bcd8739ae039","$70d424dbf8841be5$export$2e2bcd8739ae039","$d928e5e0a79cae34$export$2e2bcd8739ae039","$c9bc583a8b562914$export$2e2bcd8739ae039","$a7402757b4638aeb$export$2e2bcd8739ae039","$c7185e650a7e10b2$export$2e2bcd8739ae039","$4c54d472742b7ac1$export$2e2bcd8739ae039","$207269d620e1a8c3$export$2e2bcd8739ae039","$bbb73bfa41e59211$export$2e2bcd8739ae039","$1973ebafc5dad97b$export$2e2bcd8739ae039","$d7147efecbf07fcf$export$2e2bcd8739ae039","$1eaafab21993b862$export$2e2bcd8739ae039","$03a6e7765eaccbd3$export$2e2bcd8739ae039","$df8a1c5d5d219215$export$2e2bcd8739ae039","$69938fd0307412e5$export$2e2bcd8739ae039","$faa6db362c31848b$export$2e2bcd8739ae039","$4d53740a32253d87$export$2e2bcd8739ae039","$aac4ec8062964015$export$2e2bcd8739ae039","$d5e8ed62ed31a7e1$export$2e2bcd8739ae039","$b7145ac83befc757$export$2e2bcd8739ae039","$319371ffc5ef1edc$export$2e2bcd8739ae039","$20d45cff29fa3729$export$2e2bcd8739ae039","$3dd5ec26060f1fde$export$2e2bcd8739ae039","$45cfb3c69625f3cd$export$2e2bcd8739ae039","$23a10db6f4c742ff$export$2e2bcd8739ae039","$9d6db8d7982fa7eb$export$2e2bcd8739ae039","$8586e6509f228fe9$export$2e2bcd8739ae039","$277debd07a5ce1de$export$2e2bcd8739ae039","$df2a06eace2e3f42$export$2e2bcd8739ae039","$c77e4c660447e150$export$2e2bcd8739ae039","$3a188d4ecce54238$export$2e2bcd8739ae039","$456be431d728cc75$export$2e2bcd8739ae039","$977d2dbf5fdf01d2$export$2e2bcd8739ae039","$be7e492c47cb54c5$export$2e2bcd8739ae039","$43edba651a322868$export$2e2bcd8739ae039","$df695bddcd73d70c$export$2e2bcd8739ae039","$6022571411429450$export$2e2bcd8739ae039","$91d03f0e74bb36d3$export$2e2bcd8739ae039","$87e5756d46fce283$export$2e2bcd8739ae039","$864205024f807f86$export$2e2bcd8739ae039","$fb2c5d9a91985e58$export$2e2bcd8739ae039","$cc7b953126689faf$export$2e2bcd8739ae039","$201d9b466f2498c1$export$2e2bcd8739ae039","$b3d63bc1721d3160$export$2e2bcd8739ae039","$237ea5a47c6bb364$export$2e2bcd8739ae039","$01d9c165c680005e$export$2e2bcd8739ae039","$e21c2132f572d7c5$export$2e2bcd8739ae039","$eae4e320f004c3ab$export$2e2bcd8739ae039","$0d83d7e9bedb334c$export$2e2bcd8739ae039","$3b9f4bd329c25176$export$2e2bcd8739ae039","$04518f4576db782f$export$2e2bcd8739ae039","$6570ec059bd85af0$export$2e2bcd8739ae039","$aeb4f858c3a25379$export$2e2bcd8739ae039","$6aabf5f8e75d3766$export$2e2bcd8739ae039","$e0c98ccec3b6432a$export$2e2bcd8739ae039","$936b3793e16cdbf4$export$2e2bcd8739ae039","$a5a1d2b728d9aa28$export$2e2bcd8739ae039","$f1b2e6c56c644522$export$2e2bcd8739ae039","$14b989efb43f80df$export$2e2bcd8739ae039","$2c985141e4622117$export$2e2bcd8739ae039","$cdd7231087a20698$export$2e2bcd8739ae039","$a76f1cdbc561b6ca$export$2e2bcd8739ae039","$47f18316120b371a$export$2e2bcd8739ae039","$fdc534663a23b27c$export$2e2bcd8739ae039","$05d7c2cba8bc6781$export$e8e78c978b129247","Function","$05d7c2cba8bc6781$export$aabeece9448a227a","Array","prototype","$05d7c2cba8bc6781$export$e77bb59b5e655b3d","$05d7c2cba8bc6781$export$e229dcb397ceea81","Symbol","$05d7c2cba8bc6781$export$4cbf152802aa238","push","$05d7c2cba8bc6781$export$58adb3bec8346d0f","slice","$05d7c2cba8bc6781$export$f84e8e69fd4488a5","toString","$05d7c2cba8bc6781$export$5a15a386532a5ea4","hasOwnProperty","$05d7c2cba8bc6781$export$20eaf89d899ede58","ArrayBuffer","$05d7c2cba8bc6781$export$a2e478ad34dac33e","DataView","$05d7c2cba8bc6781$export$552cf9b635cef256","isArray","$05d7c2cba8bc6781$export$e676cf06d7fd2114","keys","$05d7c2cba8bc6781$export$5b53dc95b548c58c","create","$05d7c2cba8bc6781$export$35fc70fc5e80d5a7","isView","$05d7c2cba8bc6781$export$a739ba33a90be0a1","isNaN","$05d7c2cba8bc6781$export$8b48b92f6c9d5ad","isFinite","$05d7c2cba8bc6781$export$7dcea4d27900b116","propertyIsEnumerable","$05d7c2cba8bc6781$export$f8fa596d5e31cb19","func","startIndex","length","Math","max","arguments","rest","index","args","apply","obj","type","nodeType","$bff6309a5604c359$export$2e2bcd8739ae039","name","tag","$eebfce9fce6919bf$var$isFunction","$eebfce9fce6919bf$var$nodelist","document","childNodes","Int8Array","$20b3e5c52c4e9f8a$export$2e2bcd8739ae039","$e3e167c4390596e6$export$834f1807c25991c1","$e3e167c4390596e6$export$f7bad96d83325a34","Map","$6c3f7150b2a727d5$var$isDataView","getInt8","buffer","$c5c89c4e60c806a4$export$2e2bcd8739ae039","key","$1a47e7a4d17a4e15$var$isArguments","parseFloat","$0728a9c2eef2ff28$export$2e2bcd8739ae039","getSizeProperty","collection","sizeProperty","$4142f563b2724035$export$2e2bcd8739ae039","$d62afa6977584885$export$2e2bcd8739ae039","$c7fff9638b97c76a$export$2e2bcd8739ae039","$48ad6cb314046db0$var$typedArrayPattern","test","$69a46ada1dc9e118$export$2e2bcd8739ae039","$544f8da2e9ffcd99$export$2e2bcd8739ae039","$544f8da2e9ffcd99$var$emulatedSet","hash","l","i","contains","nonEnumIdx","constructor","proto","prop","object","attrs","_keys","$ca35147c638b60d3$export$2e2bcd8739ae039","_wrapped","$ad4f8b3ee07c9de3$export$2e2bcd8739ae039","bufferSource","Uint8Array","byteOffset","VERSION","valueOf","toJSON","String","$a19c9bc34e067027$var$tagDataView","b","$a19c9bc34e067027$var$eq","aStack","bStack","$a19c9bc34e067027$var$deepEq","className","areArrays","byteLength","aCtor","bCtor","pop","$6fe8606c08285828$export$15230eca1f400e40","methods","$6fe8606c08285828$export$2f74b890a72cf48","$6fe8606c08285828$var$forEachName","$6fe8606c08285828$var$commonInit","$6fe8606c08285828$var$mapTail","$6fe8606c08285828$export$de9acb94190bb764","concat","$6fe8606c08285828$export$60e14a5e2a057f78","values","pairs","result","names","sort","$a890057be0293e9e$export$2e2bcd8739ae039","keysFunc","defaults","source","$a5436f5acc9af5e1$export$2e2bcd8739ae039","Ctor","props","interceptor","path","$8cb949c6979e4725$export$2e2bcd8739ae039","toPath","$be1eab882e127005$export$2e2bcd8739ae039","defaultValue","$5e93597635dad7e9$export$2e2bcd8739ae039","context","argCount","accumulator","$0ee251c0ba28a263$export$2e2bcd8739ae039","Infinity","$1782c4b2e4601278$export$2e2bcd8739ae039","iteratee","results","currentKey","accum","min","floor","random","Date","now","getTime","$d536bcee474c3efd$export$2e2bcd8739ae039","map","escaper","match","join","testRegexp","RegExp","replaceRegexp","string","replace","$46775c17862ed5bf$export$2e2bcd8739ae039","templateSettings","evaluate","interpolate","escape","$25a5937b4f261340$var$noMatch","$25a5937b4f261340$var$escapes","$25a5937b4f261340$var$escapeRegExp","$25a5937b4f261340$var$escapeChar","$25a5937b4f261340$var$bareIdentifier","text","settings","oldSettings","render","matcher","offset","argument","variable","template","data","fallback","$c5e0ec1dad369d84$var$idCounter","prefix","instance","_chain","$a9123220e97b4e51$export$2e2bcd8739ae039","sourceFunc","boundFunc","callingContext","$c065e766094e50a6$var$partial","boundArgs","placeholder","bound","position","TypeError","callArgs","$1948354935d18a42$export$2e2bcd8739ae039","$5b57026276184be5$export$2e2bcd8739ae039","input","depth","strict","output","idx","j","len","hasher","memoize","cache","address","wait","setTimeout","timeout","previous","later","leading","throttled","_now","remaining","clearTimeout","trailing","cancel","immediate","passed","debounced","_args","wrapper","predicate","start","times","memo","$5f541b1530382cad$export$2e2bcd8739ae039","dir","array","low","high","mid","$bd359d1f70bf0a9c$export$2e2bcd8739ae039","predicateFind","sortedIndex","item","keyFinder","$f05b1c341bd5ef7d$export$2e2bcd8739ae039","reducer","initial","list","fromIndex","guard","contextPath","method","computed","lastComputed","$201d9b466f2498c1$var$reStrSymbol","sample","last","rand","temp","criteria","left","right","$e1e3c531676dfb56$export$2e2bcd8739ae039","behavior","partition","pass","$d3cc3207fc44117a$export$2e2bcd8739ae039","Boolean","otherArrays","isSorted","seen","arrays","argsLength","stop","step","ceil","range","count","$e3a6df194c8b9f81$export$2e2bcd8739ae039","chain","$22b2cacfb0e08dbc$var$_","_","$589e12536ead20e8$exports","URL","resolve","url","$0054a5a76f313ec0$var$x","$0054a5a76f313ec0$var$y","$0054a5a76f313ec0$export$3a4caaf77291f077","activeApp","target","closest","clientX","clientY","addEventListener","$0054a5a76f313ec0$var$appMoveHandler2","$0054a5a76f313ec0$var$appUpHandler","dx","dy","style","top","offsetTop","innerHeight","offsetHeight","offsetLeft","innerWidth","offsetWidth","querySelector","innerText","JSON","parse","localStorage","getItem","setItem","stringify","removeEventListener","$555d7ff54d54d493$export$4e373c34abfa8c68","launcher","x","y","icon","appDiv","createElement","classList","add","onmousedown","ondblclick","innerHTML","getElementById","append","$0ca891b54ee0c012$var$x","$0ca891b54ee0c012$var$y","$0ca891b54ee0c012$export$651d802023326a2e","activeWindow","zIndex","$0ca891b54ee0c012$var$mouseMoveHandler","$0ca891b54ee0c012$var$mouseUpHandler","$74205ff061d3d471$var$selectedWindowResize","$74205ff061d3d471$var$x","$74205ff061d3d471$var$y","$74205ff061d3d471$export$5ce1f518aad8a1ad","parentElement","$74205ff061d3d471$var$windowResizeMouseMoveHandler","$74205ff061d3d471$var$windowResizeMouseUpHandler","height","width","$278360e0666719fc$var$createWindowDefaultOptions","title","body","resize","move","close","minimize","center","hideOverflow","flexCenter","$278360e0666719fc$export$ba255020126e276e","clone","windowDiv","onclick","querySelectorAll","forEach","r","$278360e0666719fc$var$closeWindow","overflow","windows","remove","$ccfb9497d8ef598f$export$5f1af8db9871e1d6","lineAt","pos","RangeError","lineInner","line","lines","from","to","parts","decompose","$ccfb9497d8ef598f$var$TextNode","other","eq","scanIdentical","end","$ccfb9497d8ef598f$var$RawTextCursor","skip","next","lineBreak","done","iter","iterRange","$ccfb9497d8ef598f$var$PartialTextCursor","iterLines","inner","$ccfb9497d8ef598f$var$LineCursor","sliceString","flatten","of","$ccfb9497d8ef598f$var$TextLeaf","split","empty","$ccfb9497d8ef598f$var$textLength","children","isLine","$ccfb9497d8ef598f$export$17d680238e50603e","open","$ccfb9497d8ef598f$var$appendText","prev","joined","newLen","lineSep","part","child","endLine","childOpen","updated","totalLines","copy","iA","iB","eA","eB","chA","chB","reduce","ch","flat","chunk","maxChunk","minChunk","chunked","currentLines","currentLen","currentChunk","flush","node","first","nodes","offsets","nextInner","offsetValue","size","cursor","limit","afterBreak","iterator","number","$ccfb9497d8ef598f$var$extend","parseInt","$ccfb9497d8ef598f$var$isRegionalIndicator","$ccfb9497d8ef598f$export$a0fa439fd515e1ed","str","forward","includeExtending","$ccfb9497d8ef598f$var$nextClusterBreak","found","$ccfb9497d8ef598f$var$surrogateLow","charCodeAt","$ccfb9497d8ef598f$var$surrogateHigh","$ccfb9497d8ef598f$export$42977f40461e1360","$ccfb9497d8ef598f$export$a870abf234f6353c","$ccfb9497d8ef598f$var$isExtendingChar","countBefore","code0","code1","$ccfb9497d8ef598f$export$73bfc63873071f74","fromCharCode","$ccfb9497d8ef598f$var$DefaultSplit","$ccfb9497d8ef598f$export$39cf3280165f92aa","$ccfb9497d8ef598f$export$34b6a936f2bb06a2","sections","newLength","ins","iterGaps","f","posA","posB","iterChangedRanges","individual","$ccfb9497d8ef598f$var$iterChanges","invertedDesc","composeDesc","$ccfb9497d8ef598f$var$composeSets","mapDesc","before","$ccfb9497d8ef598f$var$mapSet","mapPos","assoc","mode","Simple","endA","TrackDel","TrackBefore","TrackAfter","touchesRange","fromJSON","json","some","$ccfb9497d8ef598f$export$29d7fbdcb1f8b71c","inserted","doc","fromA","toA","fromB","_toB","invert","compose","iterChanges","desc","ranges","resultSections","resultInserted","filteredSections","$ccfb9497d8ef598f$var$SectionIter","$ccfb9497d8ef598f$var$addSection","off","$ccfb9497d8ef598f$var$addInsert","changes","filtered","total","force","process","spec","sub","insert","insText","insLen","createSet","forceJoin","endB","setA","setB","mkSet","piece","len2","sectionLen","insB","textBit","forward2","undefined","$ccfb9497d8ef598f$export$7bd1839c3c5d5bd4","flags","anchor","head","bidiLevel","level","goalColumn","change","extend","$ccfb9497d8ef598f$export$3bb1bd44aee62999","abs","mainIndex","main","asSingle","addRange","replaceRange","which","single","normalized","indexOf","splice","$ccfb9497d8ef598f$var$checkSelection","selection","docLength","$ccfb9497d8ef598f$var$nextID","$ccfb9497d8ef598f$export$ef7d5e9b79fa1504","combine","compareInput","compare","isStatic","enables","extensions","define","config","$ccfb9497d8ef598f$var$sameArray","static","$ccfb9497d8ef598f$var$FacetProvider","compute","deps","computeN","field","state","every","dependencies","facet","dynamicSlot","addresses","_a","getter","multi","depDoc","depSel","depAddrs","dep","update","tr","docChanged","$ccfb9497d8ef598f$var$ensureAll","newVal","$ccfb9497d8ef598f$var$compareArray","reconfigure","oldState","oldAddr","oldVal","$ccfb9497d8ef598f$var$getAddr","$ccfb9497d8ef598f$export$34381b1ce2130245","addrs","changed","addr","$ccfb9497d8ef598f$var$ensureAddr","$ccfb9497d8ef598f$var$initField","createF","updateF","compareF","provides","provide","find","slot","extension","$ccfb9497d8ef598f$var$Prec_","lowest","highest","$ccfb9497d8ef598f$var$prec","$ccfb9497d8ef598f$var$PrecExtension","$ccfb9497d8ef598f$export$b92464a736444411","prec","$ccfb9497d8ef598f$export$d51c0172eb2c2431","$ccfb9497d8ef598f$var$CompartmentInstance","content","compartment","compartments","$ccfb9497d8ef598f$var$Configuration","base","dynamicSlots","staticValues","facets","statusTemplate","staticFacet","fields","newCompartments","known","delete","has","oldFacets","providers","oldProviders","p","$ccfb9497d8ef598f$var$dynamicFacetSlot","providerAddrs","providerTypes","dynamic","val","depChanged","oldValue","status","computeSlot","$ccfb9497d8ef598f$var$languageData","$ccfb9497d8ef598f$var$allowMultipleSelections","$ccfb9497d8ef598f$var$lineSeparator","$ccfb9497d8ef598f$var$changeFilter","$ccfb9497d8ef598f$var$transactionFilter","$ccfb9497d8ef598f$var$transactionExtender","$ccfb9497d8ef598f$var$readOnly","$ccfb9497d8ef598f$export$9279461326b8700a","$ccfb9497d8ef598f$export$f50c3066a53a6f2c","$ccfb9497d8ef598f$export$e41ff6bd17cc4417","$ccfb9497d8ef598f$export$95000d4efaa4321f","mapping","mapped","is","mapEffects","effects","effect","appendConfig","$ccfb9497d8ef598f$export$febc5573c75cefb0","startState","annotations","scrollIntoView","_doc","_state","time","newDoc","newSelection","applyTransaction","annotation","ann","reconfigured","isUserEvent","event","userEvent","$ccfb9497d8ef598f$var$mergeTransaction","sequential","mapForA","mapForB","$ccfb9497d8ef598f$var$resolveTransactionInner","docSize","sel","$ccfb9497d8ef598f$var$asArray","addToHistory","remote","$ccfb9497d8ef598f$var$none","$ccfb9497d8ef598f$export$239a3d59567c1401","$ccfb9497d8ef598f$var$nonASCIISingleCaseWordChar","$ccfb9497d8ef598f$export$afa855cbfaff27f2","require","specs","$ccfb9497d8ef598f$var$resolveTransaction","seq","$ccfb9497d8ef598f$var$extendTransaction","extenders","$ccfb9497d8ef598f$var$filterTransaction","$ccfb9497d8ef598f$var$joinRanges","back","filters","startValues","conf","intermediateState","replaceSelection","toText","changeByRange","result1","newChanges","newMapped","mapBy","lineSeparator","sliceDoc","fieldInit","configuration","tabSize","readOnly","phrase","phrases","m","languageDataAt","side","provider","charCategorizer","at","wordChars","char","Space","$ccfb9497d8ef598f$var$hasWordChar","toUpperCase","toLowerCase","Word","Other","wordAt","cat","$ccfb9497d8ef598f$export$4e19c0b693794a7e","configs","current","allowMultipleSelections","kA","kB","k","languageData","changeFilter","transactionFilter","transactionExtender","$ccfb9497d8ef598f$export$d60f08ed93a48611","$ccfb9497d8ef598f$export$9a58ef0d7ad3278c","startSide","endSide","point","mapMode","$ccfb9497d8ef598f$var$cmpRange","$ccfb9497d8ef598f$var$Chunk","maxPoint","findIndex","startAt","arr","lo","hi","diff","between","newPos","curFrom","curTo","newFrom","newTo","$ccfb9497d8ef598f$export$34cb5241245008dd","chunkPos","nextLayer","chunkEnd","isEmpty","updateSpec","filterFrom","filterTo","cur","$ccfb9497d8ef598f$var$LayerCursor","goto","spill","builder","$ccfb9497d8ef598f$export$89e09ce03c7e8594","addInner","rangeIndex","chunkIndex","addChunk","nextChunk","finishInner","chunks","touch","$ccfb9497d8ef598f$var$HeapCursor","sets","oldSets","newSets","textDiff","comparator","minPointSize","sharedChunks","$ccfb9497d8ef598f$var$findSharedChunks","sideA","$ccfb9497d8ef598f$var$SpanCursor","sideB","$ccfb9497d8ef598f$var$compare","$ccfb9497d8ef598f$var$sameValues","active","spans","openRanges","openStart","activeForPoint","openCount","pointFrom","pointRank","openEnd","span","build","$ccfb9497d8ef598f$var$lazySort","finish","finishChunk","newArrays","chunkStart","setMaxPoint","lastFrom","lastTo","inA","shared","Set","layer","minPoint","rank","gotoInner","setRangeIndex","heap","$ccfb9497d8ef598f$var$heapBubble","childIndex","activeTo","activeRank","minActive","removeActive","$ccfb9497d8ef598f$var$remove","$ccfb9497d8ef598f$var$findMinIndex","addActive","trackOpen","$ccfb9497d8ef598f$var$insert","wasPoint","nextVal","reverse","startA","startB","dPos","clipEnd","comparePoint","compareRange","foundPos","$ccfb9497d8ef598f$export$20b4ab289374d0ac","$ccfb9497d8ef598f$export$718b3d71c384ca05","col","$fa62f485c41d169a$var$COUNT","for","$fa62f485c41d169a$var$SET","$fa62f485c41d169a$var$top","$fa62f485c41d169a$export$b920c662d2efee20","rules","splitSelector","selector","selectors","isKeyframes","local","isAt","exec","keyframes","getRules","newName","$fa62f485c41d169a$var$C","mount","root","modules","$fa62f485c41d169a$var$StyleSet","$fa62f485c41d169a$var$adoptedSet","ownerDocument","win","defaultView","adoptedStyleSheets","CSSStyleSheet","adopted","sheet","styleTag","insertBefore","firstChild","mod","insertRule","textContent","$fdefb3038aa23227$export$e2253033e6e1df16","$fdefb3038aa23227$export$fba63a578e423eb","$fdefb3038aa23227$var$mac","navigator","platform","$fdefb3038aa23227$var$ie","userAgent","$fdefb3038aa23227$var$i","$fdefb3038aa23227$var$code","$071334078f8d3f8a$var$getSelection","getSelection","$071334078f8d3f8a$var$contains","dom","parentNode","$071334078f8d3f8a$var$hasSelection","anchorNode","$071334078f8d3f8a$var$clientRectsFor","$071334078f8d3f8a$var$textRange","nodeValue","getClientRects","$071334078f8d3f8a$var$isEquivalentPosition","targetNode","targetOff","$071334078f8d3f8a$var$scanFor","$071334078f8d3f8a$var$domIndex","previousSibling","$071334078f8d3f8a$var$maxOffset","nodeName","parent","contentEditable","$071334078f8d3f8a$var$flattenRect","rect","bottom","$071334078f8d3f8a$var$DOMSelectionState","anchorOffset","focusNode","focusOffset","domSel","setRange","$071334078f8d3f8a$var$preventScrollSupported","$071334078f8d3f8a$var$focusPreventScroll","setActive","focus","stack","scrollTop","scrollLeft","preventScroll","elt","createRange","setEnd","setStart","$071334078f8d3f8a$var$dispatchKey","keyCode","cancelable","down","KeyboardEvent","synthetic","dispatchEvent","up","defaultPrevented","$071334078f8d3f8a$var$clearAttributes","attributes","removeAttributeNode","$071334078f8d3f8a$var$isScrolledToBottom","scrollHeight","clientHeight","$071334078f8d3f8a$var$DOMPos","precise","after","$071334078f8d3f8a$var$noChildren","$071334078f8d3f8a$var$ContentView","overrideDOMText","posAtStart","posBefore","posAtEnd","view","breakAfter","posAfter","sync","track","nextSibling","contentView","canReuseDOM","reuseDOM","written","$071334078f8d3f8a$var$rm$1","_dom","localPosFromDOM","bias","lastChild","domBoundsAround","fromI","fromStart","toI","toEnd","prevEnd","startDOM","endDOM","markDirty","andParent","markParentsDirty","childList","setParent","setDOM","cmView","rootView","replaceChildren","destroy","ignoreMutation","_rec","ignoreEvent","_event","childCursor","$071334078f8d3f8a$var$ChildCursor","childPos","findPos","isEditable","isWidget","isHidden","merge","hasStart","become","getSide","removeChild","$071334078f8d3f8a$var$replaceRange","fromOff","toOff","breakAtStart","breakAtEnd","shift","$071334078f8d3f8a$var$mergeChildrenInto","dLen","$071334078f8d3f8a$var$DOMReader","points","readRange","findPointBefore","oldLen","readNode","nextView","$071334078f8d3f8a$var$isBlockElement","cmIgnore","readTextNode","re","nextBreak","breakSize","fromView","findPointInside","maxLen","$071334078f8d3f8a$var$DOMPoint","$071334078f8d3f8a$var$nav","vendor","$071334078f8d3f8a$var$doc","documentElement","$071334078f8d3f8a$var$ie_edge","$071334078f8d3f8a$var$ie_upto10","$071334078f8d3f8a$var$ie_11up","$071334078f8d3f8a$var$ie","$071334078f8d3f8a$var$gecko","$071334078f8d3f8a$var$chrome","$071334078f8d3f8a$var$webkit","$071334078f8d3f8a$var$safari","$071334078f8d3f8a$var$ios","maxTouchPoints","$071334078f8d3f8a$var$browser","mac","linux","ie","ie_version","documentMode","gecko","gecko_version","chrome","chrome_version","ios","android","webkit","safari","webkit_version","$071334078f8d3f8a$var$TextView","createDOM","textDOM","createTextNode","domAtPos","_from","_to","coordsAt","$071334078f8d3f8a$var$textCoords","rects","$071334078f8d3f8a$var$MarkView","mark","setAttrs","class","setAttribute","tagName","_hasStart","detachFrom","$071334078f8d3f8a$var$inlineDOMAtPos","$071334078f8d3f8a$var$coordsInChildren","$071334078f8d3f8a$var$WidgetView","widget","prevWidget","updateDOM","toDOM","custom","fromBack","$071334078f8d3f8a$var$WidgetBufferView","getBoundingClientRect","beforePos","afterPos","scan","$071334078f8d3f8a$var$fallbackRect","$071334078f8d3f8a$var$combineAttrs","$071334078f8d3f8a$var$noAttrs","$071334078f8d3f8a$var$attrsEq","ignore","keysA","keysB","$071334078f8d3f8a$var$updateAttrs","removeAttribute","$071334078f8d3f8a$export$95cdd842edb044c5","estimatedHeight","lineBreaks","$071334078f8d3f8a$export$48808c686fe495c4","$071334078f8d3f8a$export$10e30b733df217ea","heightRelevant","$071334078f8d3f8a$var$MarkDecoration","block","inlineOrder","$071334078f8d3f8a$var$PointDecoration","isBlockGap","$071334078f8d3f8a$var$getInclusive","$071334078f8d3f8a$var$LineDecoration","hasHeight","none","_b","isReplace","WidgetRange","WidgetBefore","WidgetAfter","inclusiveStart","inclusiveEnd","inclusive","$071334078f8d3f8a$var$addRange","margin","$071334078f8d3f8a$var$LineView","prevAttrs","transferDOM","setDeco","$071334078f8d3f8a$var$joinInlineInto","addLineDeco","deco","cls","hack","appendChild","measureTextSize","totalWidth","textHeight","lineHeight","charWidth","heightOracle","viewState","dist","_other","Text","docView","$071334078f8d3f8a$var$BlockWidgetView","_takeDeco","$071334078f8d3f8a$var$ContentBuilder","disallowBlockEffectsFor","curLine","pendingBuffer","bufferMarks","atCursorPos","textOff","posCovered","getLine","flushBuffer","$071334078f8d3f8a$var$wrapMarks","addBlockWidget","buildText","take","$071334078f8d3f8a$var$NullWidget","cursorBefore","cursorAfter","decorations","dynamicDecorationMap","$071334078f8d3f8a$var$clickAddsSelectionRange","$071334078f8d3f8a$var$dragMovesSelection$1","$071334078f8d3f8a$var$mouseSelectionStyle","$071334078f8d3f8a$var$exceptionSink","$071334078f8d3f8a$var$updateListener","$071334078f8d3f8a$var$inputHandler","$071334078f8d3f8a$var$focusChangeEffect","$071334078f8d3f8a$var$perLineTextDirection","$071334078f8d3f8a$var$nativeSelectionHidden","$071334078f8d3f8a$var$ScrollTarget","yMargin","xMargin","$071334078f8d3f8a$var$scrollIntoView","t","$071334078f8d3f8a$export$f86b2a1a2ce291b3","exception","handler","onerror","console","error","$071334078f8d3f8a$var$editable","$071334078f8d3f8a$var$nextPluginID","$071334078f8d3f8a$var$viewPlugin","$071334078f8d3f8a$export$44d5eccfd62adda7","domEventHandlers","buildExtensions","eventHandlers","plugin","$071334078f8d3f8a$var$decorations","pluginInst","fromClass","$071334078f8d3f8a$var$PluginInstance","mustUpdate","deactivate","$071334078f8d3f8a$var$editorAttributes","$071334078f8d3f8a$var$contentAttributes","$071334078f8d3f8a$var$atomicRanges","$071334078f8d3f8a$var$scrollMargins","$071334078f8d3f8a$var$getScrollMargins","$071334078f8d3f8a$var$styleModule","$071334078f8d3f8a$var$ChangedRange","toB","addToSet","me","extendWithRanges","dI","rI","$071334078f8d3f8a$export$b5b084f95c87edf7","transactions","changedRanges","viewportChanged","heightChanged","geometryChanged","focusChanged","selectionSet","$071334078f8d3f8a$export$cacd6541cfeeb6c1","$071334078f8d3f8a$var$LTR","LTR","$071334078f8d3f8a$var$RTL","RTL","$071334078f8d3f8a$var$dec","$071334078f8d3f8a$var$LowTypes","$071334078f8d3f8a$var$ArabicTypes","$071334078f8d3f8a$var$Brackets","$071334078f8d3f8a$var$BracketStack","$071334078f8d3f8a$var$BidiRE","$071334078f8d3f8a$export$e1ed96b746bb516a","order","maybe","$071334078f8d3f8a$var$types","$071334078f8d3f8a$var$trivialOrder","$071334078f8d3f8a$var$movedOver","$071334078f8d3f8a$var$DocView","hasComposition","markedForComposition","minWidth","minWidthFrom","minWidthTo","impreciseAnchor","impreciseHead","forceSelection","lastUpdate","contentDOM","updateDeco","updateInner","comp","composition","inputState","composing","$071334078f8d3f8a$var$findCompositionRange","$071334078f8d3f8a$var$findCompositionNode","textNode","fromB2","toB2","marks","parentView","$071334078f8d3f8a$var$getAttrs","attr","clear","decoDiff","$071334078f8d3f8a$var$DecorationComparator$1","oldLength","mustMeasureContent","updateChildren","observer","contentHeight","flexBasis","selectionRange","cView","gaps","viewport","$071334078f8d3f8a$var$BlockGapWidget","updateGaps","compLine","compositionView","fixCompositionDOM","fix","updateSelection","mustRead","fromPointer","readSelectionRange","activeElt","activeElement","focused","selectionNotFocus","dummy","$071334078f8d3f8a$var$inUneditable","inside","assignedSlot","blur","rawSel","nextTo","$071334078f8d3f8a$var$nearbyTextNode","collapse","cursorBidiLevel","removeAllRanges","setSelectionRange","enforceCursorAssoc","modify","lineStart","newRange","posFromDOM","nearest","domView","coordsForChar","childOff","measureVisibleLineHeights","contentWidth","clientWidth","isWider","scrollDOM","widest","ltr","textDirection","childRect","textDirectionAt","getComputedStyle","direction","measure","computeBlockGapDeco","vs","viewports","lineBlockAt","allDeco","d","lineGapDeco","margins","targetRect","$071334078f8d3f8a$var$scrollRectIntoView","bounding","scrollWidth","moveX","moveY","rectHeight","boundingHeight","targetTop","targetLeft","scrollBy","movedX","movedY","host","sibling","reader","startNode","startOffset","$071334078f8d3f8a$var$yOverlap","$071334078f8d3f8a$var$upTop","$071334078f8d3f8a$var$upBot","$071334078f8d3f8a$var$domPosInText","closestOffset","closestDY","generalSide","rectBefore","$071334078f8d3f8a$var$posAtCoords","coords","docTop","paddingTop","docHeight","yOffset","halfLine","bounced","elementAtHeight","$071334078f8d3f8a$var$posAtCoordsImprecise","elementFromPoint","element","caretPositionFromPoint","offsetNode","caretRangeFromPoint","startContainer","$071334078f8d3f8a$var$isSuspiciousSafariCaretResult","$071334078f8d3f8a$var$isSuspiciousChromeCaretResult","$071334078f8d3f8a$var$domPosAtCoords","above","below","aboveRect","belowRect","closestRect","closestX","closestY","closestOverlap","clipX","contentRect","into","round","defaultCharacterWidth","lineWrapping","defaultLineHeight","lineLength","$071334078f8d3f8a$var$blockAt","$071334078f8d3f8a$var$moveByChar","by","bidiSpans","check","$071334078f8d3f8a$var$moveVisually","spanI","indexForward","nextIndex","nextSpan","$071334078f8d3f8a$var$skipAtomicRanges","atoms","moved","$071334078f8d3f8a$var$skipAtoms","oldPos","$071334078f8d3f8a$var$InputState","lastKeyCode","lastKeyTime","lastTouchTime","lastFocusTime","lastScrollTop","lastScrollLeft","chromeScrollHack","pendingIOSKey","lastSelectionOrigin","lastSelectionTime","lastEscPress","lastContextMenu","scrollHandlers","registeredEvents","customHandlers","compositionFirstChange","compositionEndedAt","compositionPendingKey","compositionPendingChange","mouseSelection","handleEvent","ignoreDuringComposition","keydown","mustFlushObserver","forceFlush","runCustomHandlers","preventDefault","$071334078f8d3f8a$var$handlers","$071334078f8d3f8a$var$eventBelongsToEditor","$071334078f8d3f8a$var$handlerOptions","mousedown","button","minHeight","drop","pointerEvents","passive","notifiedFocused","hasFocus","setSelectionOrigin","origin","ensureHandlers","plugins","handlers","runScrollHandlers","scroll","pending","$071334078f8d3f8a$var$modifierCodes","delayAndroidKey","altKey","metaKey","$071334078f8d3f8a$var$PendingKeys","ctrlKey","$071334078f8d3f8a$var$EmacsyPendingKeys","shiftKey","flushIOSKey","startMouseSelection","inputType","$071334078f8d3f8a$var$dragScrollSpeed","$071334078f8d3f8a$var$MouseSelection","startEvent","mustSelect","scrollSpeed","scrolling","lastEvent","scrollParent","$071334078f8d3f8a$var$scrollableParent","bind","multiple","dragging","$071334078f8d3f8a$var$isInPrimarySelection","rangeCount","getRangeAt","$071334078f8d3f8a$var$getClickType","select","buttons","$071334078f8d3f8a$var$dist","sx","sy","setScrollSpeed","setInterval","clearInterval","skipAtoms","dispatch","bubbles","$071334078f8d3f8a$var$brokenClipboardAPI","$071334078f8d3f8a$var$doPaste","byLine","$071334078f8d3f8a$var$lastLinewiseCopy","lastLine","$071334078f8d3f8a$var$rangeForClick","$071334078f8d3f8a$var$groupAt","categorize","linePos","visual","touchstart","touchmove","startSel","makeStyle","$071334078f8d3f8a$var$queryPos","removed","startRange","$071334078f8d3f8a$var$removeRangeAround","mustFocus","$071334078f8d3f8a$var$insideY","$071334078f8d3f8a$var$inside","posAtCoords","$071334078f8d3f8a$var$findPositionSide","$071334078f8d3f8a$var$BadMouseDetail","$071334078f8d3f8a$var$lastMouseDown","$071334078f8d3f8a$var$lastMouseDownCount","$071334078f8d3f8a$var$lastMouseDownTime","detail","lastTime","$071334078f8d3f8a$var$dropText","direct","dropPos","del","dragstart","dataTransfer","setData","effectAllowed","files","read","finishFile","FileReader","onload","readAsText","getData","paste","clipboardData","$071334078f8d3f8a$var$capturePaste","cssText","cut","linewise","$071334078f8d3f8a$var$copiedRange","upto","clearData","$071334078f8d3f8a$var$captureCopy","selectionEnd","selectionStart","$071334078f8d3f8a$var$isFocusChange","$071334078f8d3f8a$var$focusChangeTransaction","getEffect","$071334078f8d3f8a$var$updateForFocusChange","clearSelectionRange","compositionstart","compositionupdate","compositionend","pendingRecords","flushSoon","Promise","then","contextmenu","beforeinput","startViewHeight","visualViewport","$071334078f8d3f8a$var$wrappingWhiteSpace","$071334078f8d3f8a$var$HeightOracle","heightSamples","heightForGap","heightForLine","setDoc","mustRefreshForWrapping","whiteSpace","mustRefreshForHeights","lineHeights","newHeight","h","refresh","knownHeights","$071334078f8d3f8a$var$MeasuredHeights","heights","more","$071334078f8d3f8a$export$ddfdc4ccfe9512bd","_content","widgetLineBreaks","$071334078f8d3f8a$var$QueryType","$071334078f8d3f8a$var$HeightMap","outdated","setHeight","oracle","decomposeLeft","decomposeRight","applyChanges","oldDoc","ByPosNoHeight","$071334078f8d3f8a$var$NodeBuilder","updateHeight","$071334078f8d3f8a$var$HeightMapText","break","brk","$071334078f8d3f8a$var$HeightMapBranch","$071334078f8d3f8a$var$HeightMapBlock","blockAt","_height","_oracle","_value","_type","forEachLine","_force","measured","collapsed","widgetHeight","breaks","$071334078f8d3f8a$var$HeightMapGap","heightMetrics","firstLine","perLine","perChar","totalPerLine","guess","lineTop","ByHeight","linesAbove","unshift","singleHeight","rightTop","rightOffset","subQuery","ByPos","rightStart","balanced","$071334078f8d3f8a$var$mergeGaps","rebalance","around","lineEnd","covering","writtenTo","isCovered","addBlock","enterLine","blankContent","gap","ensureLine","$071334078f8d3f8a$var$DecorationComparator","$071334078f8d3f8a$var$LineGap","same","gA","gB","draw","wrapping","$071334078f8d3f8a$var$LineGapWidget","vertical","display","$071334078f8d3f8a$var$ViewState","pixelViewport","inView","paddingBottom","contentDOMWidth","contentDOMHeight","editorHeight","editorWidth","scrolledToBottom","scrollAnchorPos","scrollAnchorHeight","scaler","$071334078f8d3f8a$var$IdScaler","scrollTarget","printing","defaultTextDirection","visibleRanges","mustEnforceCursorAssoc","guessWrapping","stateDeco","heightMap","getViewport","updateViewportLines","updateForViewport","lineGaps","ensureLineGaps","computeVisibleRanges","$071334078f8d3f8a$var$Viewport","$071334078f8d3f8a$var$BigScaler","viewportLines","scale","$071334078f8d3f8a$var$scaleBlock","prevDeco","contentChanges","heightChanges","prevHeight","scrollAnchor","scrollAnchorAt","mapViewport","viewportIsAppropriate","updateLines","updateLineGaps","mapLineGaps","domRect","measureContent","parentRect","offsetParent","dTop","dBottom","vp","viewportChange","visibleTop","fromDOM","visibleBottom","marginTop","viewHeight","topPos","mayMeasure","halfMargin","doubleMargin","addGap","structure","avoid","$071334078f8d3f8a$var$find","moveToLineBoundary","gapSize","viewFrom","viewTo","$071334078f8d3f8a$var$lineStructure","bot","marginHeight","targetFrac","$071334078f8d3f8a$var$findFraction","spaceFrac","$071334078f8d3f8a$var$findPosition","marginWidth","fraction","lineBlockAtHeight","ratio","counted","vpHeight","domBase","domTop","domBottom","bTop","bBottom","$071334078f8d3f8a$var$theme","strs","$071334078f8d3f8a$var$darkTheme","$071334078f8d3f8a$var$baseThemeID","$071334078f8d3f8a$var$baseLightID","$071334078f8d3f8a$var$baseDarkID","$071334078f8d3f8a$var$lightDarkIDs","$071334078f8d3f8a$var$buildTheme","scopes","$071334078f8d3f8a$var$baseTheme$1","boxSizing","outline","flexDirection","alignItems","fontFamily","overflowX","flexGrow","flexShrink","wordWrap","padding","WebkitUserModify","whiteSpace_fallback","wordBreak","overflowWrap","caretColor","contain","background","animation","opacity","borderLeft","marginLeft","borderLeftColor","backgroundColor","color","insetInlineStart","borderRight","textAlign","borderBottom","borderTop","verticalAlign","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","fontSize","borderRadius","border","$071334078f8d3f8a$var$DOMChange","typeOver","bounds","iHead","iAnchor","newSel","selPoints","$071334078f8d3f8a$var$selectionPoints","$071334078f8d3f8a$var$selectionFromPoints","$071334078f8d3f8a$var$applyDOMChange","domChange","lastKey","preferredPos","preferredSide","$071334078f8d3f8a$var$findDiff","minLen","adjust","$071334078f8d3f8a$var$LineBreakPlaceholder","getAttribute","mainSel","replaced","rangeChanges","selOff","$071334078f8d3f8a$var$observeOptions","characterData","subtree","characterDataOldValue","$071334078f8d3f8a$var$useCharData","$071334078f8d3f8a$var$DOMObserver","selectionChanged","delayedFlush","resizeTimeout","queue","delayedAndroidKey","flushingAndroidKey","lastChange","scrollTargets","intersection","resizeScroll","resizeContent","intersecting","gapIntersection","parentCheck","MutationObserver","mutations","mut","removedNodes","onCharData","prevValue","onSelectionChange","onResize","onPrint","onScroll","ResizeObserver","observe","requestMeasure","addWindowListeners","IntersectionObserver","entries","listenForScroll","intersectionRatio","onScrollChanged","createEvent","threshold","g","disconnect","wasChanged","$071334078f8d3f8a$var$deepActiveElement","shadowRoot","$071334078f8d3f8a$var$safariSelectionRangeHack","stopImmediatePropagation","getTargetRanges","execCommand","endContainer","endOffset","curAnchor","$071334078f8d3f8a$var$atElementStart","processRecords","requestAnimationFrame","clearDelayedAndroidKey","cancelAnimationFrame","takeRecords","records","record","readMutation","readChange","readSelection","handled","rec","childBefore","$071334078f8d3f8a$var$findChild","childAfter","setWindow","removeWindowListeners","_c","_d","curView","$071334078f8d3f8a$export$eece2fccabbb77c5","pluginMap","editorAttrs","contentAttrs","bidiCache","destroyed","updateState","measureScheduled","measureRequests","tabIndex","announceDOM","_dispatch","_root","$071334078f8d3f8a$var$getRoot","mountStyles","updateAttrs","compositionStarted","redrawn","attrsChanged","focusFlag","dispatchFocus","pendingKey","setState","$071334078f8d3f8a$var$CachedOrder","updatePlugins","styleModules","showAnnouncements","listener","newState","hadFocus","prevSpecs","newPlugins","sDOM","warn","measuring","$071334078f8d3f8a$var$BadMeasure","write","newAnchorHeight","themeClasses","$071334078f8d3f8a$var$attrsFromFacet","spellcheck","autocorrect","autocapitalize","translate","contenteditable","role","changedContent","changedEditor","trs","announce","div","readMeasured","request","documentTop","documentPadding","viewportLineBlocks","moveByChar","moveByGroup","nextCat","includeWrap","$071334078f8d3f8a$var$moveToLineBoundary","coordsAtPos","editorRect","moveVertically","distance","$071334078f8d3f8a$var$moveVertically","startPos","goal","startY","startCoords","resolvedGoal","extra","curY","posAtDOM","$071334078f8d3f8a$var$MaxBidiLine","entry","$071334078f8d3f8a$var$computeOrder","outerType","oppositeType","prevStrong","sI","br","sJ","embed","beforeL","rtl","setRoot","theme","dark","baseTheme","findFromDOM","styleModule","inputHandler","focusChangeEffect","perLineTextDirection","exceptionSink","updateListener","editable","mouseSelectionStyle","dragMovesSelection","clickAddsSelectionRange","atomicRanges","scrollMargins","darkTheme","contentAttributes","editorAttributes","lastDir","sources","$071334078f8d3f8a$var$currentPlatform","$071334078f8d3f8a$var$modifiers","$071334078f8d3f8a$var$handleKeyEvents","$071334078f8d3f8a$var$runHandlers","$071334078f8d3f8a$var$getKeymap","$071334078f8d3f8a$export$5043418e2ef368d5","$071334078f8d3f8a$var$Keymaps","WeakMap","bindings","$071334078f8d3f8a$var$buildKeymap","isPrefix","checkPrefix","scope","command","stopPropagation","scopeObj","$071334078f8d3f8a$var$normalizeKeyName","alt","ctrl","meta","run","ourObj","$071334078f8d3f8a$var$storedPrefix","full","binding","_any","any","isChar","prevented","ran","runFor","cmd","baseName","shiftName","$071334078f8d3f8a$export$9ddce7bd14f42a78","forRange","$071334078f8d3f8a$var$rectanglesForRange","$071334078f8d3f8a$var$getBase","lineElt","lineStyle","leftSide","paddingLeft","textIndent","rightSide","paddingRight","startBlock","endBlock","visualStart","visualEnd","$071334078f8d3f8a$var$wrappedLine","pieces","drawForLine","drawForWidget","horizontal","addSpan","fromOpen","toOpen","fromCoords","toCoords","endPos","docLine","spanFrom","spanTo","$071334078f8d3f8a$var$LayerView","drawn","measureReq","setOrder","$071334078f8d3f8a$var$layerOrder","markers","old","oldI","marker","$071334078f8d3f8a$export$50a222d9023da98b","$071334078f8d3f8a$var$CanHidePrimary","$071334078f8d3f8a$var$selectionConfig","cursorBlinkRate","drawRangeCursor","$071334078f8d3f8a$export$17a3d0ab3687347d","$071334078f8d3f8a$var$cursorLayer","$071334078f8d3f8a$var$selectionLayer","$071334078f8d3f8a$var$hideNativeSelection","$071334078f8d3f8a$var$configChanged","cursors","prim","animationName","confChange","$071334078f8d3f8a$var$setBlinkRate","animationDuration","$071334078f8d3f8a$var$themeSpec","$071334078f8d3f8a$var$setDropCursorPos","$071334078f8d3f8a$var$dropCursorPos","$071334078f8d3f8a$var$drawDropCursor","readPos","drawCursor","cursorPos","outer","setDropPos","dragover","dragleave","relatedTarget","dragend","$071334078f8d3f8a$var$iterMatches","lastIndex","$071334078f8d3f8a$export$9b928b0ca20b25cb","regexp","decoration","decorate","boundary","maxLength","addMatch","_view","createDeco","$071334078f8d3f8a$var$matchRanges","visible","changeFrom","changeTo","_f","_t","updateRange","updateFrom","updateTo","fromLine","toLine","$071334078f8d3f8a$var$UnicodeRegexpSupport","unicode","$071334078f8d3f8a$var$Specials","$071334078f8d3f8a$var$Names","$071334078f8d3f8a$var$_supportsTabSize","$071334078f8d3f8a$var$specialCharConfig","specialChars","addSpecialChars","replaceTabs","$071334078f8d3f8a$var$supportsTabSize","styles","MozTabSize","$071334078f8d3f8a$export$76dc0899547f659c","$071334078f8d3f8a$var$_plugin","decorationCache","decorator","makeDecorator","$071334078f8d3f8a$var$TabWidget","$071334078f8d3f8a$var$SpecialCharWidget","ph","$071334078f8d3f8a$var$lineDeco","$071334078f8d3f8a$var$activeLineHighlighter","getDeco","lastLineStart","$071334078f8d3f8a$var$getPos","ref","$071334078f8d3f8a$var$keys","Alt","Control","Shift","Meta","$071334078f8d3f8a$var$showCrosshair","$071334078f8d3f8a$var$Outside","$071334078f8d3f8a$var$TooltipViewManager","createTooltipView","tooltips","tooltipViews","tip","tooltipView","$071334078f8d3f8a$var$windowSpace","$071334078f8d3f8a$var$tooltipConfig","tooltipSpace","$071334078f8d3f8a$var$knownHeight","$071334078f8d3f8a$var$tooltipPlugin","lastTransaction","measureTimeout","classes","createContainer","readMeasure","writeMeasure","manager","$071334078f8d3f8a$export$dba11b50e1aa3c12","createTooltip","intersectionObserver","measureSoon","observeIntersection","maybeMeasure","container","tooltip","shouldMeasure","newConfig","arrow","editor","tv","getCoords","space","others","tView","arrowHeight","$071334078f8d3f8a$var$noOffset","strictSide","spaceVert","overlap","toggle","positioned","$071334078f8d3f8a$var$baseTheme","borderTopColor","borderBottomColor","$071334078f8d3f8a$var$showHoverTooltip","$071334078f8d3f8a$var$HoverTooltipHost","mounted","createHostedView","hostedView","$071334078f8d3f8a$var$showHoverTooltipHost","$071334078f8d3f8a$var$HoverPlugin","setHover","hoverTime","hoverTimeout","restartTimeout","lastMove","checkHover","mouseleave","mousemove","startHover","hovered","posCoords","bidi","$071334078f8d3f8a$var$isInTooltip","$071334078f8d3f8a$var$isOverRange","detach","$071334078f8d3f8a$export$46455b4476d4b8e1","$071334078f8d3f8a$var$closeHoverTooltipEffect","$071334078f8d3f8a$var$panelConfig","topContainer","bottomContainer","c","$071334078f8d3f8a$export$7361ed18ff57179e","panel","$071334078f8d3f8a$var$panelPlugin","panels","$071334078f8d3f8a$export$e89c3c9af31c1e3b","$071334078f8d3f8a$var$PanelGroup","syncClasses","scrollMargin","syncDOM","curDOM","$071334078f8d3f8a$var$rm","$071334078f8d3f8a$export$591ab4c909549043","elementClass","$071334078f8d3f8a$export$113bd64f27ac1172","$071334078f8d3f8a$var$defaults","renderEmptyElements","elementStyle","lineMarker","widgetMarker","lineMarkerChange","initialSpacer","updateSpacer","$071334078f8d3f8a$var$activeGutters","$071334078f8d3f8a$var$unfixGutters","$071334078f8d3f8a$export$ec15ef01b8fbae61","$071334078f8d3f8a$var$gutterView","fixed","gutter","prevViewport","gutters","$071334078f8d3f8a$var$SingleGutterView","syncGutters","updateGutters","vpA","vpB","vpOverlap","lineClasses","classSet","contexts","$071334078f8d3f8a$var$UpdateContext","cx","$071334078f8d3f8a$var$advanceCursor","$071334078f8d3f8a$var$asArray","collect","addElement","elements","newElt","$071334078f8d3f8a$var$GutterElement","extraMarkers","localMarkers","forLine","spacer","prevMarkers","$071334078f8d3f8a$var$sameMarkers","setMarkers","domPos","iNew","iOld","skipTo","matched","$071334078f8d3f8a$export$dd0c91e0a7121f5f","$071334078f8d3f8a$var$lineNumberConfig","formatNumber","assign","exists","$071334078f8d3f8a$var$NumberMarker","$071334078f8d3f8a$var$formatNumber","$071334078f8d3f8a$var$lineNumberGutter","$071334078f8d3f8a$var$maxLineNumber","$071334078f8d3f8a$var$activeLineGutterMarker","$071334078f8d3f8a$var$activeLineGutterHighlighter","$4d476c57e17b24ca$var$nextPropID","$4d476c57e17b24ca$var$Range","$4d476c57e17b24ca$export$b8034b9bc18acd90","perNode","deserialize","$4d476c57e17b24ca$export$f06e977173f1857c","closedBy","openedBy","group","contextHash","lookAhead","$4d476c57e17b24ca$var$noProps","skipped","src","isTop","isSkipped","isError","isAnonymous","groups","$4d476c57e17b24ca$export$7fad5fb00d8de02c","types","newTypes","newProps","$4d476c57e17b24ca$var$CachedNode","$4d476c57e17b24ca$var$CachedInnerNode","$4d476c57e17b24ca$export$7fbedc92909ed28e","positions","overlay","tree","$4d476c57e17b24ca$export$3ae4554f36e54a34","topNode","cursorAt","moveTo","_tree","$4d476c57e17b24ca$var$TreeNode","$4d476c57e17b24ca$var$resolveNode","resolveInner","iterate","enter","leave","anon","IncludeAnonymous","entered","propValues","balance","$4d476c57e17b24ca$var$balanceRange","makeTree","$4d476c57e17b24ca$var$buildTree","nodeSet","maxBufferLength","reused","minRepeatType","$4d476c57e17b24ca$var$FlatBufferCursor","makeRepeatLeaf","localChildren","localPositions","pair","takeNode","parentStart","minPos","inRepeat","lookAheadAtStart","findBufferSize","maxSize","fork","minStart","nodeSize","localSkipped","nodeStart","Uint16Array","copyToBuffer","bufferStart","$4d476c57e17b24ca$export$33300581b70be371","localInRepeat","lastGroup","lastEnd","make","makeBalanced","lastI","lookAheadProp","topID","childString","endIndex","findChild","pick","$4d476c57e17b24ca$var$checkSide","startI","endI","$4d476c57e17b24ca$var$enterUnfinishedNodesBefore","prevSibling","overlays","IgnoreOverlays","_parent","nextChild","ExcludeBuffers","$4d476c57e17b24ca$var$BufferNode","$4d476c57e17b24ca$var$BufferContext","$4d476c57e17b24ca$var$hasChild","IgnoreMounts","rPos","nextSignificantParent","toTree","enterUnfinishedNodesBefore","getChild","$4d476c57e17b24ca$var$getChildren","getChildren","matchContext","$4d476c57e17b24ca$var$matchNodeContext","externalSibling","bufferNode","yieldNode","yieldBuf","yield","enterChild","atLastNode","mustLeave","$4d476c57e17b24ca$var$nodeSizeCache","$4d476c57e17b24ca$var$nodeSize","balanceType","mkTop","mkTree","maxChild","divide","groupFrom","groupStart","groupSize","nextSize","only","$4d476c57e17b24ca$export$3ae2ede6dca97077","addTree","fragments","partial","minGap","fI","nextF","cI","nextC","nextPos","fFrom","fTo","$4d476c57e17b24ca$export$7acfa6ed01010e37","startParse","$4d476c57e17b24ca$var$StringInput","createParse","advance","lineChunks","$4c72ff8c9e8a407a$var$nextTagID","$4c72ff8c9e8a407a$export$3288d34c523a1192","modified","defineModifier","$4c72ff8c9e8a407a$var$Modifier","$4c72ff8c9e8a407a$var$nextModifierID","instances","mods","$4c72ff8c9e8a407a$var$powerSet","$4c72ff8c9e8a407a$var$ruleNodeProp","$4c72ff8c9e8a407a$var$Rule","tags","opaque","inherit","$4c72ff8c9e8a407a$export$b7f6332ce20f80fb","all","tagClass","$4c72ff8c9e8a407a$var$HighlightBuilder","highlighters","startSpan","highlightRange","inheritedClass","rule","$4c72ff8c9e8a407a$export$1519d79cc79711ec","tagCls","$4c72ff8c9e8a407a$var$highlightTags","highlighter","innerHighlighters","hasChild","rangeFrom","rangeTo","$4c72ff8c9e8a407a$var$t","$4c72ff8c9e8a407a$var$comment","$4c72ff8c9e8a407a$var$name","$4c72ff8c9e8a407a$var$typeName","$4c72ff8c9e8a407a$var$propertyName","$4c72ff8c9e8a407a$var$literal","$4c72ff8c9e8a407a$var$string","$4c72ff8c9e8a407a$var$number","$4c72ff8c9e8a407a$var$content","$4c72ff8c9e8a407a$var$heading","$4c72ff8c9e8a407a$var$keyword","$4c72ff8c9e8a407a$var$operator","$4c72ff8c9e8a407a$var$punctuation","$4c72ff8c9e8a407a$var$bracket","$4c72ff8c9e8a407a$var$meta","$4c72ff8c9e8a407a$export$8b7a896ae75accbf","comment","lineComment","blockComment","docComment","variableName","typeName","propertyName","attributeName","labelName","namespace","macroName","literal","docString","character","attributeValue","integer","float","bool","keyword","null","atom","unit","modifier","operatorKeyword","controlKeyword","definitionKeyword","moduleKeyword","operator","derefOperator","arithmeticOperator","logicOperator","bitwiseOperator","compareOperator","updateOperator","definitionOperator","typeOperator","controlOperator","punctuation","separator","bracket","angleBracket","squareBracket","paren","brace","heading","heading1","heading2","heading3","heading4","heading5","heading6","contentSeparator","quote","emphasis","strong","link","monospace","strikethrough","deleted","invalid","documentMeta","processingInstruction","definition","constant","function","standard","special","$14831f1c512a5db9$export$27a2e78097f753f7","$14831f1c512a5db9$export$4afc6f37514bbb67","$14831f1c512a5db9$export$ce4fe1c9e6520c1a","parser","extraExtensions","$14831f1c512a5db9$export$7fc98e56a4ca6be1","$14831f1c512a5db9$export$789c912f57fe164c","$14831f1c512a5db9$var$topNodeAt","innerNode","sublang","isActiveAt","findRegions","lang","allowsNesting","explore","topLang","$14831f1c512a5db9$export$78c262ab5af874ad","syncTo","stringStart","$14831f1c512a5db9$var$currentContext","$14831f1c512a5db9$export$3fcb7c01ff2a41fa","treeLen","scheduleOn","tempSkipped","work","until","isDone","takeTree","withContext","endTime","stoppedAt","stopAt","withoutTempSkipped","parsedPos","$14831f1c512a5db9$var$cutFragments","updateViewport","startLen","reset","skipUntilInView","getSkippingParser","frags","$14831f1c512a5db9$var$LanguageState","newCx","vpTo","parseState","$14831f1c512a5db9$var$requestIdle","callback","requestIdleCallback","idle","cancelIdleCallback","$14831f1c512a5db9$var$isInputPending","scheduling","isInputPending","$14831f1c512a5db9$var$parseWorker","working","workScheduled","chunkBudget","scheduleWork","checkAsyncSchedule","deadline","timeRemaining","viewportFirst","catch","isWorking","languages","language","$14831f1c512a5db9$export$5952625dce50d1f3","$14831f1c512a5db9$export$9e0d0c2ce4d3ceb5","$14831f1c512a5db9$export$ad3205d09311a797","$14831f1c512a5db9$export$db5a40e207b40576","cols","ts","$14831f1c512a5db9$export$a2d3c9dbce6d2211","service","$14831f1c512a5db9$export$eeab79349cc2f7c8","$14831f1c512a5db9$var$indentFrom","ast","simulateBreak","simulateDoubleBreak","textAfterPos","column","countColumn","override","overrideIndentation","search","lineIndent","overriden","simulatedBreak","$14831f1c512a5db9$export$72c7d4c52b3c6460","strategy","$14831f1c512a5db9$var$indentStrategy","closed","$14831f1c512a5db9$var$delimitedStrategy","align","units","closing","closedAt","textAfter","aligned","$14831f1c512a5db9$var$bracketedAligned","openToken","sim","openLine","baseIndent","$14831f1c512a5db9$var$topIndent","$14831f1c512a5db9$export$8aaeb0848a33f7c3","baseIndentFor","atBreak","$14831f1c512a5db9$var$isParent","continue","$14831f1c512a5db9$export$40014037e3ef64a","$14831f1c512a5db9$export$9b075a85eb4377d8","$14831f1c512a5db9$export$cbe8a3d55245b07d","$14831f1c512a5db9$var$syntaxFolding","$14831f1c512a5db9$var$isUnfinished","$14831f1c512a5db9$var$mapRange","$14831f1c512a5db9$export$a123efe007ad265","$14831f1c512a5db9$export$bf2507dc398fc1ab","$14831f1c512a5db9$var$selectedLines","$14831f1c512a5db9$export$6955fe1f7c578abb","folded","$14831f1c512a5db9$var$foldExists","$14831f1c512a5db9$var$foldWidget","onSelection","$14831f1c512a5db9$var$findFold","$14831f1c512a5db9$var$maybeEnable","$14831f1c512a5db9$export$2c875b83a85d0f31","$14831f1c512a5db9$var$announceFold","fold","lineFrom","lineTo","$14831f1c512a5db9$export$39c52376a8936d67","$14831f1c512a5db9$var$defaultConfig","placeholderDOM","placeholderText","$14831f1c512a5db9$var$foldConfig","$14831f1c512a5db9$var$baseTheme$1","$14831f1c512a5db9$var$foldGutterDefaults","openText","closedText","markerDOM","foldingChanged","$14831f1c512a5db9$var$FoldMarker","$14831f1c512a5db9$export$4819f093bdd5b4a","modSpec","def","scopeOpt","themeType","$14831f1c512a5db9$var$highlighterFacet","$14831f1c512a5db9$var$fallbackHighlighter","$14831f1c512a5db9$var$getHighlighters","$14831f1c512a5db9$export$ec1b956ff3a16361","$14831f1c512a5db9$var$treeHighlighter","markCache","buildDeco","styleChange","putStyle","$14831f1c512a5db9$export$bb02a6818dd48320","textDecoration","fontWeight","fontStyle","$14831f1c512a5db9$var$baseTheme","$14831f1c512a5db9$var$DefaultBrackets","$14831f1c512a5db9$var$bracketMatchingConfig","afterCursor","brackets","maxScanDistance","renderMatch","$14831f1c512a5db9$var$defaultRenderMatch","$14831f1c512a5db9$var$matchingMark","$14831f1c512a5db9$var$nonmatchingMark","$14831f1c512a5db9$var$bracketMatchingState","$14831f1c512a5db9$export$3391942603e90cda","$14831f1c512a5db9$var$bracketMatchingUnique","$14831f1c512a5db9$export$ca7d74cd5b9f1011","$14831f1c512a5db9$var$matchingNodes","byProp","$14831f1c512a5db9$var$findHandle","hasHandle","matches","handle","$14831f1c512a5db9$var$matchMarkedBrackets","_pos","token","matching","firstToken","endHandle","$14831f1c512a5db9$var$matchPlainBrackets","tokenType","startCh","startToken","basePos","$14831f1c512a5db9$var$noTokens","$14831f1c512a5db9$var$typeArray","$14831f1c512a5db9$var$warned","$14831f1c512a5db9$var$defaultTable","legacyName","$14831f1c512a5db9$var$createTokenType","tagStr","$14831f1c512a5db9$var$warnForPart","byName","msg","$d04c89efcb565ec8$var$command","option","$d04c89efcb565ec8$export$63a9abf96aaa3c5d","prevLine","minIndent","$d04c89efcb565ec8$var$getConfig","indent","changeSet","$d04c89efcb565ec8$export$19d6fa84ce3a55ab","$d04c89efcb565ec8$var$changeBlockComment","$d04c89efcb565ec8$export$e88d9eff7cafcc34","o","$d04c89efcb565ec8$var$selectedLineRanges","tokens","comments","$d04c89efcb565ec8$var$findBlockComment","startText","endText","textBefore","spaceBefore","spaceAfter","beforeOff","startSpace","endSpace","endOff","charAt","$d04c89efcb565ec8$var$fromHistory","$d04c89efcb565ec8$export$33e0bb25992f9954","$d04c89efcb565ec8$export$edb12867fb9b2023","$d04c89efcb565ec8$var$historyConfig","minDepth","newGroupDelay","joinToEvent","isAdjacent","adj","$d04c89efcb565ec8$var$historyField_","$d04c89efcb565ec8$var$HistoryState","fromHist","$d04c89efcb565ec8$var$HistEvent","fromTransaction","undone","$d04c89efcb565ec8$var$updateBranch","$d04c89efcb565ec8$var$addSelection","isolate","addMapping","addChanges","addSelection","$d04c89efcb565ec8$export$55abd4691b317664","$d04c89efcb565ec8$export$21f930c44940fd98","$d04c89efcb565ec8$export$1688e416fee0a49e","$d04c89efcb565ec8$var$cmd","historyState","$d04c89efcb565ec8$export$43103d47530fe49f","$d04c89efcb565ec8$export$2d87af80f1777f20","startSelection","selectionsAfter","setSelAfter","$d04c89efcb565ec8$var$none","selections","branch","newEvent","newBranch","$d04c89efcb565ec8$var$conc","sels","$d04c89efcb565ec8$var$addMappingToBranch","$d04c89efcb565ec8$var$mapEvent","extraSelections","mappedChanges","fullMapping","$d04c89efcb565ec8$var$joinableUserEvent","prevTime","prevUserEvent","$d04c89efcb565ec8$export$ab4a28cb63e8a670","$d04c89efcb565ec8$var$updateSel","$d04c89efcb565ec8$var$setSel","$d04c89efcb565ec8$var$moveSel","how","$d04c89efcb565ec8$var$rangeEnd","$d04c89efcb565ec8$var$cursorByChar","$d04c89efcb565ec8$var$ltrAtCursor","$d04c89efcb565ec8$export$3447f2b737925430","$d04c89efcb565ec8$export$e45941411d098b","$d04c89efcb565ec8$var$cursorByGroup","$d04c89efcb565ec8$var$moveBySyntax","bracketProp","$d04c89efcb565ec8$var$interestingNode","$d04c89efcb565ec8$var$cursorByLine","$d04c89efcb565ec8$export$fe179dad0485d99d","$d04c89efcb565ec8$export$75f9b75ffb1a9dc5","$d04c89efcb565ec8$var$pageInfo","selfScroll","marginBottom","$d04c89efcb565ec8$var$cursorByPage","page","scrollRect","scrollBottom","$d04c89efcb565ec8$export$546ec71a9f854193","$d04c89efcb565ec8$export$6e407c2072d437f4","$d04c89efcb565ec8$var$moveByLineBoundary","$d04c89efcb565ec8$var$extendSel","$d04c89efcb565ec8$var$selectByChar","$d04c89efcb565ec8$export$639be832433387f","$d04c89efcb565ec8$export$49e3d65796d89132","$d04c89efcb565ec8$var$selectByGroup","$d04c89efcb565ec8$var$selectByLine","$d04c89efcb565ec8$export$92aa693a1ecd7061","$d04c89efcb565ec8$export$bf847527697a3040","$d04c89efcb565ec8$var$selectByPage","$d04c89efcb565ec8$export$61eab34d4ff5cbaf","$d04c89efcb565ec8$export$a4c186a0dadaf91c","$d04c89efcb565ec8$export$ff7ed6e6e1cb317f","$d04c89efcb565ec8$export$b12ef1671b2836da","$d04c89efcb565ec8$export$aa525ee829cc26b","$d04c89efcb565ec8$export$fff0131cdd9694fe","$d04c89efcb565ec8$var$deleteBy","towards","$d04c89efcb565ec8$var$skipAtomic","$d04c89efcb565ec8$var$deleteByChar","targetPos","$d04c89efcb565ec8$export$1e8a14efe7ca9a33","$d04c89efcb565ec8$export$d41683a0f042cb80","$d04c89efcb565ec8$var$deleteByGroup","nextChar","$d04c89efcb565ec8$export$3072f591ab219e94","$d04c89efcb565ec8$export$ae3820c4ce0e9c92","$d04c89efcb565ec8$var$selectedLineBlocks","blocks","startLine","$d04c89efcb565ec8$var$moveLine","nextLine","$d04c89efcb565ec8$var$copyLine","$d04c89efcb565ec8$export$668310d2b1aa07d5","$d04c89efcb565ec8$var$newlineAndIndent","$d04c89efcb565ec8$export$2ff1ccbcf65d0770","atEof","explode","$d04c89efcb565ec8$var$isBetweenBrackets","$d04c89efcb565ec8$var$changeBySelectedLine","atLine","$d04c89efcb565ec8$export$ef7c3246c722c48f","$d04c89efcb565ec8$export$ae5dfd95be821a1c","$d04c89efcb565ec8$export$ab2e8d0ac5d2b69e","keep","norm","$60bdbe617b6ae52f$export$2e2bcd8739ae039","$60bdbe617b6ae52f$var$add","$f7ab002c71421b53$var$basicNormalize","normalize","$f7ab002c71421b53$export$4989b254f32490be","query","bufferPos","peek","nextOverlapping","$f7ab002c71421b53$var$empty","$f7ab002c71421b53$var$baseFlags","$f7ab002c71421b53$export$234e2283eb9dcd35","$f7ab002c71421b53$var$MultilineRegExpCursor","ignoreCase","curLineStart","matchPos","$f7ab002c71421b53$var$toCharEnd","$f7ab002c71421b53$var$flattened","$f7ab002c71421b53$var$FlattenedDoc","cached","cachedFrom","$f7ab002c71421b53$var$createLineDialog","go","sign","ln","cl","percent","pc","$f7ab002c71421b53$var$dialogEffect","onkeydown","onsubmit","$f7ab002c71421b53$var$dialogField","$f7ab002c71421b53$var$baseTheme$1","$f7ab002c71421b53$var$defaultHighlightOptions","highlightWordAroundCursor","minSelectionLength","maxMatches","wholeWords","$f7ab002c71421b53$var$highlightConfig","$f7ab002c71421b53$var$matchDeco","$f7ab002c71421b53$var$mainMatchDeco","$f7ab002c71421b53$var$insideWordBoundaries","$f7ab002c71421b53$var$matchHighlighter","word","trim","$f7ab002c71421b53$var$defaultTheme","$f7ab002c71421b53$var$selectWord","$f7ab002c71421b53$var$searchConfigFacet","caseSensitive","wholeWord","createPanel","$f7ab002c71421b53$var$SearchPanel","scrollToMatch","$f7ab002c71421b53$export$4bc63ef50ec3954e","valid","$f7ab002c71421b53$var$validRegExp","unquoted","unquote","$f7ab002c71421b53$var$RegExpQuery","$f7ab002c71421b53$var$StringQuery","getCursor","st","$f7ab002c71421b53$var$regexpCursor","$f7ab002c71421b53$var$stringCursor","$f7ab002c71421b53$var$QueryType","categorizer","buf","bufPos","$f7ab002c71421b53$var$charBefore","$f7ab002c71421b53$var$charAfter","nextMatch","prevMatchInRange","prevMatch","getReplacement","_result","matchAll","highlight","$f7ab002c71421b53$export$2cd1e14773f5e71b","$f7ab002c71421b53$var$togglePanel","$f7ab002c71421b53$var$searchState","$f7ab002c71421b53$var$SearchState","$f7ab002c71421b53$var$defaultQuery","$f7ab002c71421b53$var$createSearchPanel","$f7ab002c71421b53$var$matchMark","$f7ab002c71421b53$var$selectedMatchMark","$f7ab002c71421b53$var$searchHighlighter","selected","$f7ab002c71421b53$var$searchCommand","$f7ab002c71421b53$export$8894af164d40b422","$f7ab002c71421b53$export$ebdf538520f8717","$f7ab002c71421b53$var$announceMatch","$f7ab002c71421b53$var$selectSearchInput","$f7ab002c71421b53$export$eef4841c27f82c55","$f7ab002c71421b53$export$5d21cfc86ff1ce1d","$f7ab002c71421b53$export$f9afe47535eaf3d2","replacement","$f7ab002c71421b53$export$b8b3234b4edfc4c2","announceText","_e","selText","$f7ab002c71421b53$var$getSearchInput","searchInput","$f7ab002c71421b53$var$searchExtensions","$f7ab002c71421b53$export$4c389f3929badbb8","$f7ab002c71421b53$export$2dba96787cbe0a4a","searchedText","$f7ab002c71421b53$var$findNextOccurrence","fullWord","cycled","commit","searchField","$f7ab002c71421b53$var$phrase","form","onchange","onkeyup","replaceField","caseField","checked","reField","wordField","setQuery","$f7ab002c71421b53$var$Break","$f7ab002c71421b53$var$baseTheme","font","marginRight","$9e3d41a34fba402a$export$7b73e80391102dce","explicit","abortListeners","tokenBefore","matchBefore","expr","$9e3d41a34fba402a$var$ensureAnchor","aborted","$9e3d41a34fba402a$var$toSet","chars","words","$9e3d41a34fba402a$var$Option","completion","score","$9e3d41a34fba402a$var$cur","addStart","addEnd","$9e3d41a34fba402a$export$6c84d44c1ceeb831","$9e3d41a34fba402a$var$SourceCache","$9e3d41a34fba402a$var$asSource","$9e3d41a34fba402a$export$db0ee7d2648a0c4b","label","validFor","$9e3d41a34fba402a$var$prefixMatch","$9e3d41a34fba402a$var$startCompletionEffect","$9e3d41a34fba402a$var$closeCompletionEffect","$9e3d41a34fba402a$var$FuzzyMatcher","pattern","byWord","upper","astral","ret","firstSize","anyTo","preciseTo","byWordTo","byWordFolded","adjacentTo","adjacentStart","adjacentEnd","hasLower","wordAdjacent","prevType","$9e3d41a34fba402a$var$completionConfig","activateOnTyping","selectOnOpen","closeOnBlur","maxRenderedOptions","defaultKeymap","tooltipClass","optionClass","aboveCursor","icons","addToOptions","positionInfo","$9e3d41a34fba402a$var$defaultPositionInfo","compareCompletions","localeCompare","interactionDelay","$9e3d41a34fba402a$var$joinClass","info","narrow","maxWidth","spaceLeft","spaceRight","infoWidth","infoHeight","spaceBelow","$9e3d41a34fba402a$var$rangeAroundSelected","$9e3d41a34fba402a$var$CompletionTooltip","stateField","applyCompletion","infoDestroy","placeInfoReq","measureInfo","placeInfo","currentClass","cState","optionContent","_s","labelElt","displayLabel","detailElt","updateTooltipClass","createListBox","updateSel","prevState","disabled","updateSelectedOption","destroyInfo","infoResult","addInfoPane","wrap","opt","hasAttribute","listRect","infoRect","selRect","ul","curSection","section","header","li","$9e3d41a34fba402a$var$score","boost","$9e3d41a34fba402a$var$CompletionDialog","timestamp","setSelected","$9e3d41a34fba402a$var$makeAttrs","$9e3d41a34fba402a$var$sortOptions","addOption","hasResult","getMatch","sectionOrder","selectedValue","$9e3d41a34fba402a$var$completionState","$9e3d41a34fba402a$var$applyCompletion","$9e3d41a34fba402a$var$CompletionState","$9e3d41a34fba402a$var$none","$9e3d41a34fba402a$var$ActiveSource","$9e3d41a34fba402a$var$sameResults","$9e3d41a34fba402a$var$setSelectedEffect","$9e3d41a34fba402a$var$baseAttrs","$9e3d41a34fba402a$var$getUserEvent","explicitPos","handleUserEvent","handleChange","$9e3d41a34fba402a$var$setActiveEffect","$9e3d41a34fba402a$var$ActiveResult","$9e3d41a34fba402a$var$checkValid","$9e3d41a34fba402a$export$496ff43229d73eba","$9e3d41a34fba402a$export$26f3a479ac65d653","$9e3d41a34fba402a$var$RunningQuery","updates","$9e3d41a34fba402a$var$completionPlugin","debounceUpdate","running","debounceAccept","startQuery","doesReset","q","startUpdate","scheduleAccept","accept","dialog","$9e3d41a34fba402a$var$baseTheme","maxWidth_fallback","maxHeight","listStyle","textOverflow","$9e3d41a34fba402a$var$fieldMarker","$9e3d41a34fba402a$var$fieldRange","$9e3d41a34fba402a$var$ActiveSnippet","selectionInsideField","$9e3d41a34fba402a$var$setActive","$9e3d41a34fba402a$var$moveToField","$9e3d41a34fba402a$var$snippetState","$9e3d41a34fba402a$var$fieldSelection","$9e3d41a34fba402a$var$moveField","$9e3d41a34fba402a$export$d8da8fdad886df2f","$9e3d41a34fba402a$export$8d02b23b64ec425c","$9e3d41a34fba402a$var$defaultSnippetKeymap","$9e3d41a34fba402a$export$1808c2f24fc99b36","maps","$9e3d41a34fba402a$var$defaults","stringPrefixes","$9e3d41a34fba402a$var$closeBracketEffect","$9e3d41a34fba402a$var$closedBracket","$9e3d41a34fba402a$var$bracketState","prevLineStart","$9e3d41a34fba402a$var$definedClosing","$9e3d41a34fba402a$var$closing","$9e3d41a34fba402a$var$config","$9e3d41a34fba402a$var$android","$9e3d41a34fba402a$var$inputHandler","$9e3d41a34fba402a$export$7ce1ae5219095222","tok","$9e3d41a34fba402a$var$handleSame","allowTriple","dont","$9e3d41a34fba402a$var$nextChar","$9e3d41a34fba402a$var$nodeStart","$9e3d41a34fba402a$var$closedBracketAt","isTriple","$9e3d41a34fba402a$var$canStartStringAt","$9e3d41a34fba402a$var$probablyInString","quoteToken","prefixes","maxPrefix","quotePos","$9e3d41a34fba402a$var$handleOpen","closeBefore","$9e3d41a34fba402a$var$handleClose","_open","$9e3d41a34fba402a$export$9477e95792b48f4a","charCat","$9e3d41a34fba402a$export$2a3d759d156afab4","$9e3d41a34fba402a$var$completionKeymapExt","$84fbedc1f5497f08$var$SelectedDiagnostic","diagnostic","$84fbedc1f5497f08$var$LintState","diagnostics","markedDiagnostics","diagnosticFilter","$84fbedc1f5497f08$var$lintConfig","markerFilter","$84fbedc1f5497f08$var$DiagnosticWidget","severity","markClass","$84fbedc1f5497f08$var$findDiagnostic","$84fbedc1f5497f08$var$hideTooltip","$84fbedc1f5497f08$export$9c7976977981c7bf","$84fbedc1f5497f08$var$maybeEnableLint","$84fbedc1f5497f08$var$lintState","$84fbedc1f5497f08$var$lintExtensions","$84fbedc1f5497f08$var$togglePanel","$84fbedc1f5497f08$var$movePanelSelection","selPos","$84fbedc1f5497f08$var$LintPanel","$84fbedc1f5497f08$var$activeMark","$84fbedc1f5497f08$var$diagnosticsTooltip","$84fbedc1f5497f08$var$renderDiagnostic","$84fbedc1f5497f08$export$2ee372c3e690e3c3","$84fbedc1f5497f08$export$a21d7a0cde3cbb60","delay","lintTime","needsRefresh","tooltipFilter","u","$84fbedc1f5497f08$var$assignKeys","actions","assigned","inPanel","renderMessage","message","action","fired","click","keyIndex","nameElt","$84fbedc1f5497f08$var$PanelItem","items","moveSelection","selectedIndex","needsSync","newSelectedItem","_start","_end","rm","$84fbedc1f5497f08$var$svg","encodeURIComponent","$84fbedc1f5497f08$var$underline","$84fbedc1f5497f08$var$baseTheme","overflowY","background_fallback","color_fallback","$84fbedc1f5497f08$var$severityWeight","sev","$84fbedc1f5497f08$var$LintGutterMarker","diagnosticsFilter","$84fbedc1f5497f08$var$lintGutterConfig","onmouseover","$84fbedc1f5497f08$var$gutterMarkerMouseOver","$84fbedc1f5497f08$var$setLintGutterTooltip","onmouseout","onmousemove","$84fbedc1f5497f08$var$lintGutterTooltip","$84fbedc1f5497f08$var$markersForDiagnostics","hoverState","hideOnChange","hideOn","stackStart","stackEnd","$3fa179aa810adb75$export$f4f2465c1e83499c","fullConfig","canFold","canUnfold","buildMarkers","eventFilter","newStart","newLine","_extend","$071334078f8d3f8a$var$rectangleFor","startOff","startCol","endCol","isDown","keyup","$c44c686fb5be00f3$export$1290c4a291d31c79","toastDiv","log","replaceAll","channelName"],"version":3,"file":"index.b5a8b255.js.map"}